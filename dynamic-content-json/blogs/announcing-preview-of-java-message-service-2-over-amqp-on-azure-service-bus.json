{
    "Slug": "announcing-preview-of-java-message-service-2-over-amqp-on-azure-service-bus",
    "Title": "Azure Service Bus での AMQP 経由での Java Message Service 2.0 のプレビューの発表",
    "Summary": "Azure Service Bus simplifies enterprise messaging scenarios by leveraging familiar queue and topic subscription semantics over the industry driven AMQP protocol.",
    "Content": "<div style=\"background:#eeeeee;border:1px solid #cccccc;padding:5px 10px;\">\n<p itemprop=\"name\"><strong>2021 年 2 月 22 日に更新</strong>: Azure Service Bus プレミアムの Java Message Service (JMS) 2.0 API が一般公開されました。 詳細については、ブログ記事「<a href=\"https://techcommunity.microsoft.com/t5/messaging-on-azure/announcing-general-availability-for-java-message-service-jms-2-0/ba-p/2073151\" target=\"_blank\">Java Message Service (JMS) 2.0 API for Java Message Service (JMS) 2.0 API on Azure Service Bus プレミアムの一般提供の発表</a>」&nbsp;を参照してください。&nbsp;</p>\n</div>\n\n<p><a href=\"https://azure.microsoft.com/en-us/services/service-bus/\" target=\"_blank\">Azure Service Bus</a>は、業界主導&nbsp;の使い慣れたキューとトピックサブスクリプションのセマンティクスを活用することで、エンタープライズメッセージングシナリオを簡素化しますAdvanced Message Queuing Protocol&nbsp;(AMQP)。 Azure サービスとの緊密な統合を備えたフル マネージドのサービスとしてのプラットフォーム (PaaS) を提供し、高スループット、信頼性の高い待機時間を備えたメッセージング ブローカーを提供し、一流のエクスペリエンスとして高可用性、セキュリティで保護された設計、スケーラビリティを確保します。 ほとんどのアプリケーション スタックとエコシステムで、お客様のワークロードにAzure Service Busを提供することを目指しています。</p>\n\n<p>そのビジョンに合わせて、&rsquo;<strong>Premium レベルで AMQP 経由の Java Message Service (JMS) 2.0</strong> のプレビュー サポートAzure Service Bus発表することに興奮しています。 これにより、お客様は Java ワークロードと Spring ワークロードを Azure にシームレスにリフトアンドシフトしながら、クラウドで最高のクラスのエンタープライズ メッセージングを使用してアプリケーション スタックを最新化することができます。</p>\n\n<p>企業のお客様は、ワークロードをリフト アンド シフトして Azure に移行する場合、クラウドネイティブの Azure オファリングを活用してアプリケーション スタックを最新化する機会を得ることができます。 これは、データ プレーン上のコンポーネント、データの格納または移動に適しています。これは、サービスとしてのインフラストラクチャ (IaaS) でホストされるセットアップから、よりクラウドネイティブの PaaS セットアップに移行する利点があります。</p>\n\n<p>データベースとデータ ストアでは、標準化された API とプロトコルの確立がシームレスな移行の道を開きました。このアプリケーションは、この標準化された API の実際のプロバイダーや実装に依存せず、コードの変更はごくわずかまたは構成のみで、アプリケーションは現在のオンプレミス プロバイダーから Azures&rsquo; のフル マネージド PaaS オファリングに移行できます。</p>\n\n<p>エンタープライズ メッセージング エコシステムは、 <strong>2011 年の AMQP 1.0 プロトコル</strong> 標準化がプロトコル実装によって保証されるすべてのエンタープライズ メッセージ ブローカーで一貫した動作を推進するまで、データ エコシステムと比較して大幅に断片化されています。 ただし、これはまだ標準化された API コントラクトを引き起こせず、エンタープライズ メッセージング空間の断片化を永続させます。</p>\n\n<p><strong>Java </strong>Enterprise コミュニティ (および拡張では <strong>Spring</strong>) は、エンタープライズ メッセージング ブローカーと対話するときにプロデューサーアプリケーションとコンシューマー アプリケーションが使用する API を標準化するために、<strong>Java Message Service (JMS 1.1 および 2.0) 仕様</strong>を使用していくつかの前進を行いました。 <strong>Apache QPID</strong> コミュニティは、AMQP に対する JMS API 仕様の実装によってこれをさらに進めています。 QPID-JMS は、スタンドアロンであるか Spring JMS パッケージの一部であるかに関係なく、さまざまなメッセージ ブローカーを使用するほとんどの企業のお客様に対する事実上の JMS 実装です。</p>\n\n<h2>AMQP 経由でAzure Service Busを使用して既存のアプリケーションをConnectする</h2>\n\n<p>このプレビューでサポートされている機能の一覧 (一般提供によって完全なパリティが計画されています) では、Azure Service Busはすべての Java Message Service API コントラクトをサポートしているため、お客様はアプリケーションを書き換えずに既存のアプリケーションを Azure に持ち込めます。 現在サポートされている JMS 機能の一覧を次に示します。</p>\n\n<ul>\n    <li>キュー</li>\n    <li>トピック。</li>\n    <li>一時キュー。</li>\n    <li>一時的なトピック。</li>\n    <li>サブスクリプション。\n    <ul>\n        <li>共有永続サブスクリプション。</li>\n        <li>非永続的な共有サブスクリプション。</li>\n        <li>非共有の永続的なサブスクリプション。</li>\n        <li>非永続的なサブスクリプションの共有を解除します。</li>\n    </ul>\n    </li>\n    <li>QueueBrowser。</li>\n    <li>TopicBrowser。</li>\n    <li>上記のすべてのエンティティの自動作成 (まだ存在しない&rsquo;場合)。</li>\n    <li>メッセージ セレクター。</li>\n    <li>配信遅延を伴うメッセージの送信 (スケジュールされたメッセージ)。</li>\n</ul>\n\n<h2>オンプレミスまたは IaaS ホスト型 JMS プロバイダーから Azure Service Bus へのシームレスな移行</h2>\n\n<p>既存の JMS ベースのアプリケーションをAzure Service Busに接続するには、Azure Service Bus JMS <a href=\"https://search.maven.org/artifact/com.microsoft.azure/azure-servicebus-jms\" target=\"_blank\">Maven パッケージ</a>または <a href=\"https://docs.microsoft.com/azure/developer/java/spring-framework/configure-spring-boot-starter-java-app-with-azure-service-bus\" target=\"_blank\">Spring boot 用のAzure Service Bus スターター</a>をアプリケーション&rsquo; pom.xmlに追加し、Azure Service Bus接続文字列を  に追加します。構成パラメーター。</p>\n\n<p>上記のように、構成のみのコード変更により、お客様はメッセージ ブローカーに依存しないビジネス ロジックを維持し、ベンダーのロックインを回避できます。<br>\n&nbsp;&nbsp; <a href=\"https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/694d3869-01c4-4b64-bf74-46d43ba9fc12.png\"><img alt=\"migration from on-premises or IaaS hosted JMS provider to Azure Service Bus\" border=\"0\" height=\"319\" src=\"https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/31cf3408-2abd-4fba-809d-3b58016ba46d.png\" style=\"border: 0px currentcolor; margin-right: auto; margin-left: auto; display: block; background-image: none;\" title=\"\" width=\"1024\"></a></p>\n\n<h2>シンプルな価格、簡単なデプロイ、スケーラブルなリソース</h2>\n\n<p>Azure Service Bus JMS サポートを活用することで、お客様はライセンスの調達、独自の IaaS コンピューティングでのエンタープライズ メッセージング ブローカーの管理、メッセージング ユニットごとの固定価格によるコスト管理の簡素化、ワークロードの変動に対処するための自動スケールアップとダウンプロビジョニングの活用によるオーバーヘッドを回避できるようになりました。</p>\n\n<h2>他の Azure オファリングと統合して、アプリケーション スタックをさらに最新化する</h2>\n\n<p>また、他の Azure オファリングとのAzure Service Bus統合を活用して、アプリケーション スタックを最新化および簡素化することもできます。 これを行う方法を次に示します。</p>\n\n<ol>\n    <li><strong>Azure Logic Apps</strong>: Azure Service BusにAzure Logic Apps コネクタを利用して、さまざまな重要なビジネス ワークフローをシンプルな低コード従量課金制サーバーレス オファリングに置き換えます。</li>\n    <li><strong>Azure Functions</strong>: Azure Service BusのAzure Functions トリガーを利用して、カスタム アプリケーションを簡単な従量課金制のサーバーレス PaaS オファリングに置き換えます。</li>\n    <li><strong>Azure Monitor とアラート</strong>: Azure モニターとアラートを利用して、Azure Service Bus名前空間、キュー、トピック、サブスクリプション レベルのメトリックを監視します。</li>\n    <li><strong>Azure KeyVault</strong>: Azure KeyVault との統合を利用して、カスタマー マネージド キーを使用して名前空間上のデータを暗号化します。</li>\n    <li><strong>仮想ネットワークとプライベート エンドポイント</strong>: 仮想ネットワーク サービス エンドポイントを使用してAzure Service Busへのアクセスをセキュリティで保護します。 プライベート エンドポイントを使用してプライベート ネットワークでホストされているアドレスを介して、クラウドでホストされたサービスを使用してConnectします。</li>\n</ol>\n\n<h2>今日概要</h2>\n\n<p>JMS 機能を使用して<a href=\"https://aka.ms/jmsGettingStarted\" target=\"_blank\">Service Bus名前空間をプロビジョニング</a>し、<a href=\"https://aka.ms/jmsActiveMQToServiceBus\" target=\"_blank\">既存の Java アプリケーションと Spring アプリケーションを Apache ActiveMQ からService Busに移行</a>することで、今日概要します。</p>\n"
}