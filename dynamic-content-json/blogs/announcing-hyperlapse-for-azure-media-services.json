{
    "Slug": "announcing-hyperlapse-for-azure-media-services",
    "Title": "Azure Media Servicesの Hyperlapse の発表",
    "Summary": "Today marks the beginning of our free public preview of Hyperlapse for Azure Media Services!  ",
    "Content": "<div style=\"background:#eee;border:1px solid #ccc;padding:5px 10px;\">2019 年 3 月 28 日の時点で、hyperlapse Preview for Azure Media Servicesは使用できなくなります。 最新の<a href=\"https://azure.microsoft.com/en-us/services/media-services/\">Azure Media Services更新プログラム</a>の詳細を確認します。</div>\n\n<p>Azure Media Services の Media Hyperlapse プレビュー機能は間もなく廃止されます。 2018 年 12 月 19 日以降、Media Hyperlapse の変更や改善は行われなくなり、2019 年 3 月 29 日に廃止され、利用できなくなります。 &rsquo;この機能は廃止されますが、<a href=\"https://docs.microsoft.com/en-us/azure/media-services/\" target=\"_blank\">Media Services</a>はクラウドベースのビデオ エンコード、ストリーミング、インデックス作成サービスで引き続き使用できます。</p>\n\n<p>Media Hyperlapse を使用して既に処理済みのコンテンツ&rsquo;については、結果の出力ビデオは引き続き Azure Media Services アカウントで使用できます。 この変更によりご不便をおかけして申し訳ございません。</p>\n\n<p>ご不明な点がござ <a href=\"mailto:amshelp@microsoft.com\">いましたら、お問い合わせください</a>。</p>\n\n<p>&nbsp; 過去5年間、ドローンカメラとアクションカメラの導入は、ビデオキャプチャデバイスの風景を大幅に混乱させました。&nbsp; ますます小さいレンズとカメラハードウェアは、ソーシャルメディアやマルチメディア共有の台頭と共に、どこでもアマチュアビデオグラファーのための扉を開きました。&nbsp; 今では、彼らのアクションスポーツの高フレームレートと視野映像を手頃な価格で撮影するだけでなく、カメラを空に持って行き、以前は不可能だったショットをキャプチャして世界とすぐに共有することができます。 しかし、このテクノロジでは、新しい課題が発生しました。&nbsp; たとえば、大規模なイベントをカバーするドローンの艦隊を持つニュース組織として、ゆっくりと動くビデオの長くて退屈なカタログを、使用可能でエキサイティングなものに適切に凝縮するにはどうすればよいでしょうか。&nbsp; 15分間のダウンヒルマウンテンバイクの乗車を記録する場合、消耗品で共有可能なバージョンの映像はどのように作成されますか? この数か月間、Microsoft Research の同僚と密接に協力して、Microsoft Hyperlapse を Azure Media Services 上のクラウドに導入することで、この問題に対処しています。&nbsp;本日は、<strong>Hyperlapse for Azure Media Servicesの無料パブリック プレビューの</strong>始まりです。このリリースは <a href=\"https://news.microsoft.com/?p=188061\">Hyperlapse Mobile および Hyperlapse Pro</a>と連携&nbsp;しており、開発者やメディア企業へのサービスとしての Microsoft Hyperlapse の提供に焦点を当てています。&nbsp;Microsoft Hyperlapse が allpublic&nbsp; Azure Datacenters で利用できるようになりました。 &nbsp;</p>\n\n<h2>Microsoft Hyperlapse とは</h2>\n\n<p>Microsoft Hyperlapse は、MSR での 20 年以上にわたるコンピューター ビジョン研究の結果であり、ビデオの手ブレ補正と時間のラップを組み合わせて、長い形式のコンテンツから迅速で消耗品で美しいビデオを作成します。 スノーボードランのヘルメットカム映像を共有したいですか?&nbsp; Microsoft Hyperlapse を使用して、ビデオの手ブレ補正でバンプを滑らかにし、アクションを失うことなく、コンテンツを消耗品クリップに高速化します。&nbsp; Microsoft Hyperlapse は、特殊な手ブレ補正ハードウェア/カメラを使用して、専門的に記録された実行の洗練された操作性をコンテンツに提供します。 Microsoft Hyperlapse で期待できるスムーズなエクスペリエンスを示す次のビデオ (<a href=\"https://aka.ms/ampblog\">Azure メディア プレーヤー</a>) をご覧ください。 &nbsp;</p>\n\n<p>Microsoft Hyperlapse はスムーズなタイムラプスを生成します。 特にハイパーラプスビデオのものと比較して、通常の時間経過の木に注意を払います。&nbsp; 従来のタイムラプス技術はアマチュアビデオグラフのジャークとバンプを強調しますが、Hyperlapseを使用すると、ここで見る滑らかな最終結果にモーションを処理することができます。 hyperlapse for Azure Media Servicesは、Microsoft Hyperlapse テクノロジをAzure Media Services上の<a href=\"https://azure.microsoft.com/en-us/documentation/articles/media-services-get-media-processor/\">メディア プロセッサ</a>に統合することです。&nbsp;Hyperlapse を今すぐ試すことで、この素晴らしいテクノロジと Azure クラウドの超スケールとグローバルなプレゼンスの間の相乗効果を活用することをお勧めします。 Azure Media Servicesを使用すると、Hyperlapse タスクのスケーラブルなバッチ処理をスケジュールし、ハードウェアを実質的にスケールアップすることで、必要な数のジョブを並列化できます。 &nbsp;</p>\n\n<h2>無料パブリック プレビュー</h2>\n\n<p>このパブリック プレビュー オファリングの目的上、Microsoft Hyperlapse を<strong>すべてのAzure Media Servicesアカウントに無料で提供しています</strong>。</p>\n\n<blockquote>注: プレビュー期間中は、ハイパーラプス ジョブを 10,000 フレームのビデオに制限します。</blockquote>\n\n<h2>作業の開始</h2>\n\n<p><a href=\"https://azure.microsoft.com/en-us/develop/media-services/\">REST API/SDK</a> を使用するか、Azure Media Services Explorer を使用して、Web またはアプリオファリングに Hyperlapse テクノロジを簡単<a href=\"https://aka.ms/amse\">に</a>統合できます。 最初の Hyperlapse ジョブを開始する C# プログラムと構成 XML のサンプルを次に示します。&nbsp;このコードには、<a href=\"https://github.com/Azure/azure-sdk-for-media-services\">Azure Media Services C# SDK</a> パッケージと <a href=\"https://github.com/Azure/azure-sdk-for-media-services-extensions\">SDK 拡張機能</a>パッケージ (NuGet で利用可能) の両方が必要です。 &nbsp;</p>\n\n<h3>サンプル プログラム</h3>\n\n<pre class=\"prettyprint\">\nusing System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Threading.Tasks;\n\nusing Microsoft.WindowsAzure.MediaServices.Client;\nusing System.Configuration;\nusing System.IO;\nusing System.Threading;\n\n\nnamespace MyFirstHyperlapseJob\n{\n    class Program\n    {\n        \n        // declare constants and globals\n        private static CloudMediaContext _context = null;\n        private static readonly string _accountName = {ACCOUNT_NAME};\n        private static readonly string _accountKey = {ACCOUNT_KEY};\n\n        private const string _mpName = &quot;Azure Media Hyperlapse&quot;;\n        private static readonly string _inputFile = {INPUT_FILE_PATH};  \n    private static readonly string _outputFolder = {OUTPUT_FOLDER_PATH};\n        private const string _hyperlapseConfiguration = {PATH_TO_CONFIG};\n\n        static void Main(string[] args)\n        {\n            _context = new CloudMediaContext(_accountName, _accountKey);\n            RunHyperlapseJob(_inputFile, _outputFolder, _hyperlapseConfiguration);\n        }\n\n        static void RunHyperlapseJob(string input, string output, string hyperConfig)\n        {\n            // create asset with input file\n            IAsset asset = _context\n                           .Assets\n                           .CreateFromFile(input, AssetCreationOptions.None);\n\n            // grab instance of Azure Media Hyperlapse MP\n            IMediaProcessor mp = _context\n                                 .MediaProcessors\n                                 .GetLatestMediaProcessorByName(_mpName);\n\n            // create Job with hyperlapse task\n            IJob job = _context\n                       .Jobs\n                       .Create(String.Format(&quot;Hyperlapse {0}&quot;, input));\n\n            if (!String.IsNullOrEmpty(hyperConfig))\n            {\n                hyperConfig = File.ReadAllText(hyperConfig);\n            }\n            ITask hyperlapseTask = job.Tasks.AddNew(&quot;Hyperlapse task&quot;, \n                                                    mp,\n                                                    hyperConfig, \n                                                    TaskOptions.None);\n            hyperlapseTask.InputAssets.Add(asset);\n            hyperlapseTask.OutputAssets.AddNew(&quot;Hyperlapse output&quot;, \n                                                AssetCreationOptions.None);\n\n\n            job.Submit();\n\n            // Create progress printing and querying tasks\n                Task progressPrintTask = new Task(() =&gt;\n                {\n\n                    IJob jobQuery = null;\n                    do\n                    {\n                        var progressContext = _context;\n                        jobQuery = progressContext.Jobs\n                                                  .Where(j =&gt; j.Id == job.Id)\n                                                  .First();\n                        Console.WriteLine(string.Format(&quot;{0}\\t{1}\\t{2}&quot;, \n                                          DateTime.Now, \n                                          jobQuery.State, \n                                          jobQuery.Tasks[0].Progress));\n                        Thread.Sleep(10000);\n                    }\n                    while (jobQuery.State != JobState.Finished &amp;&amp;\n                           jobQuery.State != JobState.Error &amp;&amp;\n                           jobQuery.State != JobState.Canceled);\n                });\n                progressPrintTask.Start();\n\n                Task progressJobTask = job.GetExecutionProgressTask(\n                                                     CancellationToken.None);\n                progressJobTask.Wait();\n\n                // If job state is Error, the event handling \n                // method for job progress should log errors.  Here we check \n                // for error state and exit if needed.\n                if (job.State == JobState.Error)\n                {\n                    ErrorDetail error = job.Tasks.First().ErrorDetails.First();\n                    Console.WriteLine(string.Format(&quot;Error: {0}. {1}&quot;, \n                                                    error.Code, \n                                                    error.Message));                    \n                }\n\n            DownloadAsset(job.OutputMediaAssets.First(), output);\n        }\n\n        static void DownloadAsset(IAsset asset, string outputDirectory)\n        {\n            foreach (IAssetFile file in asset.AssetFiles)\n            {\n                file.Download(Path.Combine(outputDirectory, file.Name));\n            }\n        }\n\n        // event handler for Job State\n        static void StateChanged(object sender, JobStateChangedEventArgs e)\n        {\n            Console.WriteLine(&quot;Job state changed event:&quot;);\n            Console.WriteLine(&quot;  Previous state: &quot; + e.PreviousState);\n            Console.WriteLine(&quot;  Current state: &quot; + e.CurrentState);\n            switch (e.CurrentState)\n            {\n                case JobState.Finished:\n                    Console.WriteLine();\n                    Console.WriteLine(&quot;Job finished.&quot;);\n                    break;\n                case JobState.Canceling:\n                case JobState.Queued:\n                case JobState.Scheduled:\n                case JobState.Processing:\n                    Console.WriteLine(&quot;Please wait...\\n&quot;);\n                    break;\n                case JobState.Canceled:\n                    Console.WriteLine(&quot;Job is canceled.\\n&quot;);\n                    break;\n                case JobState.Error:\n                    Console.WriteLine(&quot;Job failed.\\n&quot;);\n                    break;\n                default:\n                    break;\n            }\n        }\n    }\n}\n</pre>\n\n<p>&nbsp;</p>\n\n<h3>構成 XML</h3>\n\n<pre class=\"prettyprint\">\n&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-16&quot;?&gt;\n&lt;Preset xmlns:xsi=&quot;<a href=\"https://www.w3.org/2001/XMLSchema-instance\">https://www.w3.org/2001/XMLSchema-instance</a>&quot; xmlns:xsd=&quot;<a href=\"https://www.w3.org/2001/XMLSchema\">https://www.w3.org/2001/XMLSchema</a>&quot; Version=&quot;1.0&quot; xmlns=&quot;<a href=\"https://www.windowsazure.com/media/encoding/Preset/2014/03\" title=\"https://www.windowsazure.com/media/encoding/Preset/2014/03&#10;Ctrl+Click or tap to follow the link\">https://www.windowsazure.com/media/encoding/Preset/2014/03</a>&quot;&gt;\n&nbsp; &lt;Sources&gt;\n&nbsp;&nbsp;&nbsp; &lt;Source StartFrame=&quot;0&quot; NumFrames=&quot;10000&quot;&gt;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;InputFiles /&gt;\n&nbsp;&nbsp;&nbsp; &lt;/Source&gt;\n&nbsp; &lt;/Sources&gt;\n&nbsp; &lt;Options&gt;\n&nbsp;&nbsp;&nbsp; &lt;Speed&gt;8&lt;/Speed&gt;\n&nbsp; &lt;/Options&gt;\n&lt;/Preset&gt;</pre>\n\n<p>&nbsp;</p>\n"
}