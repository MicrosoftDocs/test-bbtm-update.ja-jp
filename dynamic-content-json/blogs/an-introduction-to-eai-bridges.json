{
    "Slug": "an-introduction-to-eai-bridges",
    "Title": "EAIブリッジの概要",
    "Summary": "As part of the December 2011 Labs of Service Bus we are adding a brand-new set of EAI (Enterprise Application Integration) capabilities which includes bridges (commonly referred to as pipelines),…",
    "Content": "<p><a href=\"https://azure.microsoft.com/en-us/home/tour/service-bus/?WT.mc_id=cmp_pst001_blg_post0024\" target=\"_blank\">Service Bus</a>の 2011 年 12 月のラボの一環として、ブリッジ (一般にパイプラインと呼ばれます)、変換、ハイブリッド接続を含む EAI (Enterprise アプリケーション統合) 機能の新しいセットを追加します。 一連のブログ記事で機能の完全なセットを確認しますが、まず EAI ブリッジとその背後にある基本的な概念について説明します。 この記事では、ブリッジの必要性について説明し、単純な XML ブリッジのデプロイを構成 &amp; し、それを介してメッセージを送信する方法について説明します。</p>  <p>ブリッジ&rsquo;という用語&lsquo;は、2 つのエンドポイントを結ぶ何かをすぐに思い出させます。 ここでは、情報システムのコンテキストでは、2 つ以上の異なるシステムを接続するブリッジについて説明します。 サンプル シナリオを使用して、これをよりよく理解しましょう。 新しい従業員が誘導されたり、銀行口座などの従業員の詳細が変更されたりするたびに、従業員管理システムと人事システムが給与システムとやり取りする組織内のシナリオを考えてみましょう。 従業員の mgmt と人事システムは、SQL、Oracle、SAP など、さまざまなシステムにすることができます。</p>  <p>これらのシステムは、(メッセージを交換することによって) 給与システムと理解できる形式で対話します。 給与システムは、3 つ目のインフラストラクチャを使用して個別の単位として実装できます。 これらのシステムは、それぞれのメッセージ形式を引き続き使用できるが、相互に通信できる方法で接続する必要があります。 給与システムは、他の 2 つのシステムからメッセージを受信するたびに、一般的な一連の操作を実行します。 これらの一連の操作は、ブリッジと呼ばれる共通のユニットに統合できます。</p>  <p><img src=\"https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/6036.EAIBridges1.png\" alt=\"\" border=\"0\"></p>  <h1>ブリッジの理由</h1>  <h2>プロトコル ブリッジ</h2>  <p>アプリケーション 1 がアプリケーション 2 と通信することを望むシナリオを考えてみましょう。 ただし、アプリケーション 1 は REST/POX プロトコルのみを使用してメッセージを送信しますが、アプリケーション 2 は SOAP プロトコル経由でのみメッセージを受信できます。 これを実現するには、アプリケーションの 1 つを、他のアプリケーションが理解している形式で話すように変更する必要があります。これは、コストのかかる演習であり、ほとんどの場合、許容できない解決策です。 このシナリオは、ブリッジをメディエーターとして使用することで簡単に解決できます。 ブリッジは REST/POX 経由でメッセージを受け入れますが、SOAP 経由で送信します。 ブリッジは、異なるプロトコルを使用する 2 つのアプリケーションを適切に接続するのに役立ちます。&nbsp;</p>  <p><img src=\"https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/3716.EAIBridges2.png\" alt=\"\" border=\"0\"></p>  <h2>構造正規化またはデータ コントラクト変換</h2>  <p>次の図では、左側のアプリケーションが特定の構造でメッセージを送信しています。 受信側アプリケーションには、別の構造の同じデータが必要です。 相互に通信できるように、2 つの間で構造変換を行う必要があります。 ブリッジは、この構造正規化/変換の実現に役立ちます。</p>  <p><img src=\"https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/3704.EAIBridges3.png\" alt=\"\" border=\"0\"></p>  <p>この状況は、複数の異なるアプリケーションが特定のアプリケーションにメッセージを送信するシナリオにさらに拡張できます。 受信側のアプリケーション/プロセスは、すべての受信メッセージを共通の形式に正規化するブリッジの前に追加できます。この形式は、応答メッセージを認識し、その逆を行います。 このプロセスは、一般的に正規化と呼ばれます。</p>  <h2>メッセージ/コントラクトの検証</h2>  <p>プロセス/アプリケーションが、1 つ以上の形式に準拠したメッセージのみを受信し、他のすべてを拒否することを望む単純な状況を考えてみましょう。 これを実現するには、複雑でコストのかかる検証ロジックを記述する必要がある場合があります。 EAI ブリッジを使用すると、非常に基本的な構成手順でこれを実現できます。 ブリッジは、1 つ以上のスキーマに対してすべての受信メッセージを検証できます。 メッセージが指定されたスキーマのいずれかに準拠している場合にのみ、メッセージがアプリケーションに送信されます。 それ以外の場合は拒否され、アプリケーション/クライアントを送信するメッセージに適切な応答が送信されます。</p>  <h2>コンテンツ ベースのルーティング</h2>  <p>多くの場合、アプリケーションはメッセージメタデータ/コンテキストに基づいて別のアプリケーションにメッセージをルーティングする必要があります。 たとえば、ローン処理シナリオで金額 &gt; が $10,000 の場合は、メッセージを application1 に送信し、それ以外の場合は application2 に送信します。 このコンテンツ ベースのルーティングは、ブリッジを使用して行うことができます。 ブリッジは、送信メッセージ メタデータに対して単純なルーティング規則を使用することで、これを実現するのに役立ちます。 メッセージは、クラウドまたはオンプレミスの任意のエンドポイント/アプリケーションに送信できます。</p>  <p><img src=\"https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/3683.EAIBridges4.png\" alt=\"\" border=\"0\"></p>  <p>上記の各機能について個別に説明しましたが、単独で発生することはめったにありません。 1 つは、上記の 1 つ以上を組み合わせて、1 つ以上の EAI ブリッジを使用してそれらを解決できます。 ブリッジは、要件に従ってチェーンまたは並列で使用することも、モジュール性と保守容易性を実現することもできます。</p>  <h1>構成、デプロイ、およびコード</h1>  <h3>Service Bus アカウントとサブスクリプションにサインアップする</h3>  <p>EAI ブリッジの使用を開始するには、まず、&rsquo;Service Bus ポータル内でService Bus アカウントにサインアップする必要があります。&nbsp;Service Bus アカウントに関連付けられる Windows Live ID (WLID) でサインインする必要があります。 &rsquo;完了したら、新しいService Busサブスクリプションを作成できます。 今後、WLID でログインするたびに、アカウントに関連付けられているすべてのService Bus サブスクリプションにアクセスできるようになります。</p>  <h3>名前空間の作成</h3>  <p>サブスクリプションを設定したら、新しいサービス名前空間を作成できます。 &rsquo;すべてのService Bus アカウントに新しい一意のサービス名前空間を提供する必要があります。 各サービス名前空間は、一連のService Bus エンティティのコンテナーとして機能します。 次のスクリーンショットは、Harish-Blog&rdquo; サービス名前空間を作成するときのインターフェイスの外観を&ldquo;示しています。</p>  <p><img src=\"https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/1614.EAIBridges5.png\" alt=\"\" border=\"0\"></p>  <p>アカウントのセットアップと名前空間の作成に関する詳細については、12 月 CTP リリースに付属するユーザー ガイドを参照してください。</p>  <h3>ブリッジの構成とデプロイ</h3>  <p>1 つは、Microsoft Visual Studioの一部として提供された単純な UI デザイナー 画面を使用してブリッジを構成できます。 このエクスペリエンスを有効にするには、ここから SDK をダウンロードします。 SDK をインストールした後、Visual Studioに移動し、Visual C# -&gt; ServiceBus で見つけることができる新しい EAI プロジェクトを作成します。 この後、ブリッジを構成してデプロイするには、 <a href=\"https://msdn.microsoft.com/en-us/library/windowsazure/hh689797.aspx\" target=\"_blank\">ここに</a>&nbsp;記載されている手順 (XML One-Way Bridge の場合) またはこちら&nbsp; (XML Request-Reply Bridge の場合) の手順に従います。&nbsp;</p>  <p>次のスナップショットは、Service Bus キュー (Queue1) に接続された一方向ブリッジ (bridge1)、Service Bus リレー (OneWayRelay1)、およびクラウドでホストされる一方向サービス (OneWayExternalService1) を示しています。 ブリッジに送信されるメッセージは処理され、これらの 3 つのエンドポイントのいずれかにルーティングされます。</p>  <p><img src=\"https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/3240.EAIBridges6.png\" alt=\"\" style=\"border-style: initial; border-color: initial;\" border=\"0\"></p>  <p>次のスナップショットは、要求/応答ブリッジに関連するさまざまなステージを示し、ブリッジを構成できる場所からサーフェスを形成します。</p>  <p><img src=\"https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/2251.EAIBridges-7.png\" alt=\"\" border=\"0\"></p>  <h3>ブリッジへのメッセージの送信</h3>  <p>ブリッジを構成してデプロイしたら、次にメッセージを送信します。 単純な Web クライアントまたは WCF クライアントを使用して、ブリッジにメッセージを送信できます。 また、REST/POX または SOAP 経由で送信することもできます。 サンプルのダウンロードの一環として、メッセージの送信に使用できるサンプル クライアントが用意されています。 これらのメッセージ送信クライアントを使用するには、ここからサンプルをダウンロードします。</p>  <h1>まとめとフィードバックの要求</h1>  <p>うまくいけば、この記事では、Service Busの新しい12月CTPで導入されているEAIブリッジ機能を開始する方法を示しています。 ここで&rsquo;しか氷山の先端を見たことが分からなかったです。 今後&rsquo;の投稿では、より詳細な情報と機能に取り組む予定です。</p>  <p>最後に、CTP リリースの主な目標の 1 つは、サービスとその機能に関するフィードバックを得ることです。 これらの&rsquo;統合機能についてご意見をお寄せください。 特に、ブリッジの構成とデプロイのエクスペリエンス、およびその一部としてこれまで公開してきたその他のさまざまな機能について、ご意見をお待ちしています。</p>  <p>他の提案、批判、賞賛、または質問については、ラボ <a href=\"https://social.msdn.microsoft.com/forums/en-US/servicebuslabs\" target=\"_blank\">フォーラム</a>でお知らせください。 お客様からのフィードバックは、お客様やお客様のような他のユーザー向けのサービスの向上に役立ちます。&nbsp;</p>"
}