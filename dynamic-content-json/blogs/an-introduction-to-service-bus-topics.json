{
    "Slug": "an-introduction-to-service-bus-topics",
    "Title": "Service Busトピックの概要",
    "Summary": "[This article was contributed by the AppFabric team.]In the May CTP of Service Bus, we&rsquo;ve added a brand-new set of cloud-based, message-oriented-middleware technologies including reliable…",
    "Content": "<p>[この記事は AppFabric チームによって投稿されました。]</p><p class=\"Publishwithline\">Service Busの 5 月の CTP では、<span style=\"color: black;\">&rsquo;信頼性の高いメッセージ キューや永続的な発行/サブスクライブ メッセージングなど、クラウドベースのメッセージ指向ミドルウェア テクノロジのまったく新しいセットが追加されました。先週、<a href=\"https://blogs.msdn.com/b/appfabric/archive/2011/05/17/an-introduction-to-service-bus-queues.aspx\">Service Bus キューの概要に関する</a>ブログ エントリを投稿しました。この投稿はそこから続き、Service Busトピックによって提供される発行/サブスクライブ機能の概要を提供します。繰り返しますが、この&rsquo;記事のすべての機能を取り上げるつもりはありません。新機能を始めるのに十分な情報を提供したいと思います。Well&rsquo; には、詳細の一部を掘り下げるフォローアップ投稿があります。</span></p>  <p class=\"MsoNormal\"><span style=\"color: black;\"><br>私は&rsquo;<a href=\"https://blogs.msdn.com/b/appfabric/archive/2011/05/17/an-introduction-to-service-bus-queues.aspx\">キューのブログの投稿</a>で始めた小売りのシナリオを続けるつもりです。 </span>個々の販売時点管理 (POS) ターミナルの売上データは、そのデータを使用して在庫を補充する必要があるタイミングを決定する在庫管理システムにルーティングする必要があることを思い出してください。 各 POS ターミナルは、DataCollectionQueue にメッセージを送信して販売データを報告します。ここで、次に示すように、在庫管理システムによって受信されるまでメッセージが送信されます。</p>  <p class=\"MsoNormal\"><a href=\"\"><img src=\"https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/7853.t1.GIF\" border=\"0\"></a></p>  <p class=\"MsoNormal\">次に、このシナリオを進化させます&rsquo;。 システムに新しい要件が追加されました。ストア所有者は、ストアのパフォーマンスをリアルタイムで監視できるようにしたいと考えています。 </p>  <p class=\"MsoNormal\"><br>この要件に対処するには、売上データ ストリームを &ldquo;タップ&rdquo; する必要があります。 POS ターミナルから送信された各メッセージは、以前と同様に在庫管理システムに送信する必要がありますが、各メッセージの別のコピーを使用して、ダッシュボード ビューをストア所有者に表示する必要があります。</p>  <p class=\"MsoNormal\"><br>このような状況では、各メッセージを複数の関係者が使用する必要がある場合は、Service Bus トピック機能が必要です。 トピックは、発行/サブスクライブ パターンを提供します。このパターンでは、発行された各メッセージが、トピックに登録されている各サブスクリプションで使用できるようになります。 これは、各メッセージが 1 つのコンシューマーによって使用されるキューと対照的です。 これは&rsquo;、2 つのモデルの主な違いです。 </p>  <p class=\"MsoNormal\"><br>メッセージは、キューに送信されるのとまったく同じ方法でトピックに送信されますが、メッセージは&rsquo;トピックから直接受信されず、サブスクリプションから受信されます。 トピックに送信されるメッセージのコピーを取得する仮想キューのようなトピック サブスクリプションを考えることができます。 メッセージは、キューから受信するのとまったく同じ方法でサブスクリプションから受信されます。</p>  <p class=\"MsoNormal\"><br>したがって、シナリオに戻って、最初に行うことは、トピックのキューを切り替えて、在庫管理システムで使用されるサブスクリプションを追加することです。 そのため、システムは次のようになります。</p>  <p class=\"MsoNormal\"><a href=\"\"><img src=\"https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/8546.t2.GIF\" border=\"0\"></a></p>  <p class=\"MsoNormal\">上記の構成は、前のキュー ベースの設計と同じように実行されます。 つまり、トピックに送信されたメッセージは、インベントリ 管理システムによって使用されるインベントリ サブスクリプションにルーティングされます。</p>  <p class=\"MsoNormal\"><br>次に、管理ダッシュボードをサポートするには、次に示すように、トピックで 2 つ目のサブスクリプションを作成する必要があります。</p>  <p class=\"MsoNormal\"><a href=\"\"><img src=\"https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/6758.t3.GIF\" border=\"0\"></a></p>  <p class=\"MsoNormal\"><br>これで、上記の構成により、POS ターミナルからの各メッセージがダッシュボードサブスクリプションとインベントリ サブスクリプションの両方で使用できるようになります。</p>  <h2 class=\"WordSection1\"><br>コードについて</h2>  <p class=\"MsoNormal\">ここでは、Service Bus アカウントにサインアップし、<a href=\"https://blogs.msdn.com/b/appfabric/archive/2011/05/17/an-introduction-to-service-bus-queues.aspx\">キューのブログ投稿</a>&rsquo;に名前空間を作成する方法について説明しました。 Service Bus名前空間を使用するには、アプリケーションが AppFabric Service Bus DLL (つまり、Microsoft.ServiceBus.dllとMicrosoft.ServiceBus.Messaging.dll) を参照する必要があることを思い出してください。 これらは、SDK のダウンロードの一部として見つけることができます。</p>  <h3 class=\"WordSection1\"><br>トピックとサブスクリプションの作成</h3>  <p class=\"WordSection1\" style=\"margin: 2.15pt 0in 0pt;\">Service Bus メッセージング エンティティ (キューとトピック) の管理操作は、Service Bus名前空間のベース アドレスとユーザー資格情報を使用して構築された ServiceBusNamespaceClient を使用して実行されます。 ServiceBusNamespaceClient には、メッセージング エンティティを作成、列挙、削除するためのメソッドが用意されています。 次のスニペットは、ServiceBusNamespaceClient を使用して DataCollectionTopic を作成する方法を示しています。</p>  <p class=\"WordSection1\" style=\"margin: 2.15pt 0in 0pt;\">&nbsp;</p>  <p class=\"MsoNormal\" style=\"margin-bottom: 0pt;\"><span style=\"font-family: consolas; color: black; font-size: 8pt;\">&nbsp;&nbsp;&nbsp; </span><span style=\"font-family: consolas; color: blue; font-size: 8pt;\">Uri</span><span style=\"font-family: consolas; color: black; font-size: 8pt;\"> </span><span style=\"font-family: consolas; color: #2b91af; font-size: 8pt;\">ServiceBusEnvironment</span><span style=\"font-family: consolas; font-size: 8pt;\">。CreateServiceUri(<span style=\"color: #a31515;\">\"sb\"</span>, <span style=\"color: #a31515;\">\"ingham-blog\"</span>, <span style=\"color: blue;\">string</span>.空);</span></p>  <p class=\"WordSection1\" style=\"margin: 2.15pt 0in 0pt;\"><span style=\"font-family: consolas; color: black; font-size: 8pt;\">&nbsp;&nbsp;&nbsp; </span><span style=\"font-family: consolas; color: blue; font-size: 8pt;\">文字列</span><span style=\"font-family: consolas; color: black; font-size: 8pt;\"> 名 = </span><span style=\"font-family: consolas; color: #a31515; font-size: 8pt;\">\"owner\"</span><span style=\"font-family: consolas; color: black; font-size: 8pt;\">;</span></p>  <p class=\"WordSection1\" style=\"margin: 2.15pt 0in 0pt;\"><span style=\"font-family: consolas; color: black; font-size: 8pt;\">&nbsp;&nbsp;&nbsp; </span><span style=\"font-family: consolas; color: blue; font-size: 8pt;\">string</span><span style=\"font-family: consolas; color: black; font-size: 8pt;\"> key = </span><span style=\"font-family: consolas; color: #a31515; font-size: 8pt;\">\"abcdefghijklmopqrstuvwxyz\"</span><span style=\"font-family: consolas; color: black; font-size: 8pt;\">;</span></p>  <p class=\"WordSection1\" style=\"margin: 2.15pt 0in 0pt;\"><span style=\"font-family: consolas; color: black; font-size: 8pt;\">&nbsp;&nbsp; </span></p>  <p class=\"WordSection1\" style=\"margin: 2.15pt 0in 0pt;\"><span style=\"font-family: consolas; color: black; font-size: 8pt;\">&nbsp;&nbsp;&nbsp; </span><span style=\"font-family: consolas; color: #2b91af; font-size: 8pt;\">ServiceBusNamespaceClient</span><span style=\"font-family: consolas; color: black; font-size: 8pt;\"> namespaceClient = </span><span style=\"font-family: consolas; color: blue; font-size: 8pt;\">新しい</span><span style=\"font-family: consolas; color: black; font-size: 8pt;\"> </span><span style=\"font-family: consolas; color: #2b91af; font-size: 8pt;\">ServiceBusNamespaceClient</span><span style=\"font-family: consolas; color: black; font-size: 8pt;\">(</span></p>  <p class=\"WordSection1\" style=\"margin: 2.15pt 0in 0pt;\"><span style=\"font-family: consolas; color: black; font-size: 8pt;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;baseAddress、</span><span style=\"font-family: consolas; color: #2b91af; font-size: 8pt;\">TransportClientCredentialBase</span><span style=\"font-family: consolas; color: black; font-size: 8pt;\">。CreateSharedSecretCredential(name, key) );</span></p>  <p class=\"WordSection1\" style=\"margin: 2.15pt 0in 0pt;\"><span style=\"font-family: consolas; color: black; font-size: 8pt;\">&nbsp;</span></p>  <div class=\"WordSection1\">  <pre style=\"background: white;\"><span style=\"font-family: consolas; color: black; font-size: 8pt;\">&nbsp;&nbsp;&nbsp; </span><span style=\"font-family: consolas; color: #2b91af; font-size: 8pt;\">Topic</span><span style=\"font-family: consolas; color: black; font-size: 8pt;\"> dataCollectionTopic = </span><span style=\"font-family: consolas; color: black; font-size: 8pt;\">namespaceClient.CreateTopic(</span><span style=\"font-family: consolas; color: #a31515; font-size: 8pt;\">\"DataCollectionTopic\"</span><span style=\"font-family: consolas; color: black; font-size: 8pt;\">);</span></pre>  </div>  <div class=\"WordSection1\">  <pre style=\"background: white;\"><span style=\"font-family: consolas; color: black; font-size: 8pt;\">&nbsp;</span></pre>  </div>  <p class=\"MsoNormal\">たとえば、トピックに送信されるメッセージに適用される既定の有効期間を設定するために、トピックのプロパティをチューニングできるようにする CreateTopic メソッドのオーバーロードがあることに注意してください。 次に、インベントリとダッシュボードのサブスクリプションを追加します&rsquo;。</p>  <div class=\"WordSection1\">  <pre style=\"background: white;\"><span style=\"font-family: consolas; color: black; font-size: 8pt;\">&nbsp;&nbsp;&nbsp; dataCollectionTopic.AddSubscription(</span><span style=\"font-family: consolas; color: #a31515; font-size: 8pt;\">\"Inventory\"</span><span style=\"font-family: consolas; color: black; font-size: 8pt;\">);</span></pre>  </div>  <div class=\"WordSection1\">  <pre style=\"background: white;\"><span style=\"font-family: consolas; color: black; font-size: 8pt;\">&nbsp;&nbsp;&nbsp; dataCollectionTopic.AddSubscription(</span><span style=\"font-family: consolas; color: #a31515; font-size: 8pt;\">\"Dashboard\"</span><span style=\"font-family: consolas; color: black; font-size: 8pt;\">);</span></pre>  </div>  <div class=\"WordSection1\">  <pre style=\"background: white;\"><span style=\"font-family: consolas; color: black; font-size: 8pt;\">&nbsp;</span></pre>  </div>  <h3 class=\"WordSection1\">トピックへのメッセージの送信</h3>  <p class=\"MsoNormal\">前述したように、アプリケーションはキューに送信するのと同じ方法でトピックにメッセージを送信するため、キューの <a href=\"https://blogs.msdn.com/b/appfabric/archive/2011/05/17/an-introduction-to-service-bus-queues.aspx\">ブログ投稿</a>を読んだ場合、以下のコードは非常によく知られています。 違いは、アプリケーションが QueueClient の代わりに TopicClient を作成することです。</p>  <p class=\"MsoNormal\"><br>Service Bus エンティティに対するランタイム操作 (つまり、メッセージの送受信) では、アプリケーションで最初に MessagingFactory を作成する必要があります。 ServiceBus 名前空間のベース アドレスとユーザー資格情報が必要です。 </p>  <p class=\"MsoNormal\" style=\"margin-bottom: 0pt;\"><span style=\"font-family: consolas; color: black; font-size: 8pt;\">&nbsp;&nbsp;&nbsp; </span><span style=\"font-family: consolas; color: blue; font-size: 8pt;\">Uri</span><span style=\"font-family: consolas; color: black; font-size: 8pt;\"> </span><span style=\"font-family: consolas; color: #2b91af; font-size: 8pt;\">ServiceBusEnvironment</span><span style=\"font-family: consolas; font-size: 8pt;\">。CreateServiceUri(<span style=\"color: #a31515;\">\"sb\"</span>, <span style=\"color: #a31515;\">\"ingham-blog\"</span>, <span style=\"color: blue;\">string</span>.空);</span></p>  <p class=\"WordSection1\" style=\"margin: 2.15pt 0in 0pt;\"><span style=\"font-family: consolas; color: black; font-size: 8pt;\">&nbsp;&nbsp;&nbsp; </span><span style=\"font-family: consolas; color: blue; font-size: 8pt;\">文字列</span><span style=\"font-family: consolas; color: black; font-size: 8pt;\"> 名 = </span><span style=\"font-family: consolas; color: #a31515; font-size: 8pt;\">\"owner\"</span><span style=\"font-family: consolas; color: black; font-size: 8pt;\">;</span></p>  <p class=\"WordSection1\" style=\"margin: 2.15pt 0in 0pt;\"><span style=\"font-family: consolas; color: black; font-size: 8pt;\">&nbsp;&nbsp;&nbsp; </span><span style=\"font-family: consolas; color: blue; font-size: 8pt;\">string</span><span style=\"font-family: consolas; color: black; font-size: 8pt;\"> key = </span><span style=\"font-family: consolas; color: #a31515; font-size: 8pt;\">\"abcdefghijklmopqrstuvwxyz\"</span><span style=\"font-family: consolas; color: black; font-size: 8pt;\">;</span></p>  <p class=\"WordSection1\" style=\"margin: 2.15pt 0in 0pt;\"><span style=\"font-family: consolas; color: #2b91af; font-size: 8pt;\">&nbsp;</span></p>  <p class=\"WordSection1\" style=\"margin: 2.15pt 0in 0pt;\"><span style=\"font-family: consolas; color: #2b91af; font-size: 8pt;\">&nbsp;&nbsp;&nbsp; MessagingFactory</span><span style=\"font-family: consolas; color: black; font-size: 8pt;\"> ファクトリ = </span><span style=\"font-family: consolas; color: #2b91af; font-size: 8pt;\">MessagingFactory</span><span style=\"font-family: consolas; color: black; font-size: 8pt;\">。Create(</span></p>  <p class=\"WordSection1\" style=\"margin: 2.15pt 0in 0pt;\"><span style=\"font-family: consolas; color: black; font-size: 8pt;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;baseAddress、</span><span style=\"font-family: consolas; color: #2b91af; font-size: 8pt;\">TransportClientCredentialBase</span><span style=\"font-family: consolas; color: black; font-size: 8pt;\">。CreateSharedSecretCredential(name, key) );</span></p>  <p class=\"WordSection1\" style=\"margin: 2.15pt 0in 0pt;\"><span style=\"font-size: 8pt;\">&nbsp;</span></p>  <p class=\"WordSection1\" style=\"margin: 2.15pt 0in 0pt;\">ファクトリから、関心のある特定のトピック (ここでは DataCollectionTopic) に対して TopicClient が作成されます。</p>  <p class=\"WordSection1\" style=\"margin: 2.15pt 0in 0pt;\"><span style=\"font-family: consolas; color: #2b91af; font-size: 8pt;\">&nbsp;</span></p>  <p class=\"WordSection1\" style=\"margin: 2.15pt 0in 0pt;\"><span style=\"font-family: consolas; color: #2b91af; font-size: 8pt;\">&nbsp;&nbsp;&nbsp; TopicClient</span><span style=\"font-family: consolas; color: black; font-size: 8pt;\"> topicClient = factory。CreateTopicClient(</span><span style=\"font-family: consolas; color: #a31515; font-size: 8pt;\">\"DataCollectionTopic\"</span><span style=\"font-family: consolas; color: black; font-size: 8pt;\">);</span></p>  <p class=\"WordSection1\" style=\"margin: 2.15pt 0in 0pt;\"><span style=\"font-size: 8pt;\">&nbsp;</span></p>  <p class=\"WordSection1\" style=\"margin: 2.15pt 0in 0pt;\">MessageSender は、送信操作を実行するために TopicClient から作成されます。</p>  <p class=\"WordSection1\" style=\"margin: 2.15pt 0in 0pt;\"><span style=\"font-family: consolas; color: #2b91af; font-size: 8pt;\">&nbsp;</span></p>  <p class=\"WordSection1\" style=\"margin: 2.15pt 0in 0pt;\"><span style=\"font-family: consolas; color: #2b91af; font-size: 8pt;\">&nbsp;&nbsp;&nbsp; MessageSender</span><span style=\"font-family: consolas; color: black; font-size: 8pt;\"> ms = topicClient.CreateSender();</span></p>  <p class=\"WordSection1\" style=\"margin: 2.15pt 0in 0pt;\"><span style=\"font-family: consolas; color: black; font-size: 8pt;\">&nbsp;</span></p>  <p class=\"WordSection1\" style=\"margin: 2.15pt 0in 0pt;\">Service Bus トピック (およびキュー) との間で送受信されるメッセージは、標準プロパティ (Label や TimeToLive など) のセット、アプリケーション プロパティを保持するために使用されるディクショナリ、および任意のアプリケーション データの本文で構成される BrokeredMessage クラスのインスタンスです。 アプリケーションは、任意のシリアル化可能なオブジェクトを CreateMessage に渡すことによって本体を設定できます (次の例では、POS ターミナルから販売データを表す SalesData オブジェクトを渡します)。このオブジェクトは、DataContractSerializer を使用してオブジェクトをシリアル化します。 この方法に代わって、System.IO.Stream を使用できます。</p>  <p class=\"WordSection1\" style=\"margin: 2.15pt 0in 0pt;\"><span style=\"font-family: consolas; color: green; font-size: 8pt;\">&nbsp;</span></p>  <p class=\"WordSection1\" style=\"margin: 2.15pt 0in 0pt;\"><span style=\"font-family: consolas; color: #2b91af; font-size: 8pt;\">&nbsp;&nbsp;&nbsp; BrokeredMessage</span><span style=\"font-family: consolas; color: black; font-size: 8pt;\"> bm = </span><span style=\"font-family: consolas; color: #2b91af; font-size: 8pt;\">BrokeredMessage</span><span style=\"font-family: consolas; color: black; font-size: 8pt;\">。CreateMessage(salesData);</span></p>  <p class=\"WordSection1\" style=\"margin: 2.15pt 0in 0pt;\"><span style=\"font-family: consolas; color: black; font-size: 8pt;\">&nbsp;&nbsp;&nbsp; Bm。Label = </span><span style=\"font-family: consolas; color: #a31515; font-size: 8pt;\">\"SalesReport\"</span><span style=\"font-family: consolas; color: black; font-size: 8pt;\">;</span></p>  <p class=\"WordSection1\" style=\"margin: 2.15pt 0in 0pt;\"><span style=\"font-family: consolas; color: black; font-size: 8pt;\">&nbsp;&nbsp;&nbsp; Bm。Properties[</span><span style=\"font-family: consolas; color: #a31515; font-size: 8pt;\">\"StoreName\"</span><span style=\"font-family: consolas; color: black; font-size: 8pt;\">] = </span><span style=\"font-family: consolas; color: #a31515; font-size: 8pt;\">\"Redmond\"</span><span style=\"font-family: consolas; color: black; font-size: 8pt;\">;</span></p>  <p class=\"WordSection1\" style=\"margin: 2.15pt 0in 0pt;\"><span style=\"font-family: consolas; color: black; font-size: 8pt;\">&nbsp;&nbsp;&nbsp; Bm。Properties[</span><span style=\"font-family: consolas; color: #a31515; font-size: 8pt;\">\"MachineID\"</span><span style=\"font-family: consolas; color: black; font-size: 8pt;\">] = </span><span style=\"font-family: consolas; color: #a31515; font-size: 8pt;\">\"POS_1\"</span><span style=\"font-family: consolas; color: black; font-size: 8pt;\">;</span></p>  <p class=\"WordSection1\" style=\"margin: 2.15pt 0in 0pt;\"><span style=\"font-family: consolas; color: black; font-size: 8pt;\">&nbsp;</span></p>  <p class=\"WordSection1\" style=\"margin: 2.15pt 0in 0pt;\"><span style=\"font-family: consolas; color: black; font-size: 8pt;\">&nbsp;&nbsp;&nbsp; さん。Send(bm);</span></p>  <h3 class=\"WordSection1\"><br>サブスクリプションからのメッセージの受信</h3>  <p class=\"MsoNormal\">キューを使用する場合と同様に、メッセージは MessageReceiver を使用してサブスクリプションから受信されます。 違いは、MessageReceiver が QueueClient ではなく SubscriptionClient から作成される点です。 他のすべては、 <a href=\"https://blogs.msdn.com/b/appfabric/archive/2011/05/17/an-introduction-to-service-bus-queues.aspx\">キューのブログ投稿</a>で説明した 2 つの異なる受信モード (ReceiveAndDelete と PeekLock) のサポートを含め、変わりません。</p>  <p class=\"MsoNormal\"><br>そのため、まず SubscriptionClient を作成し、トピックの名前とサブスクリプションの名前をパラメーターとして渡します。 ここでは、&rsquo;インベントリ サブスクリプションを使用しています。</p>  <div class=\"WordSection1\">  <pre style=\"background: white;\"><span style=\"font-family: consolas; color: #2b91af; font-size: 8pt;\">&nbsp;&nbsp;&nbsp; SubscriptionClient</span><span style=\"font-family: consolas; color: black; font-size: 8pt;\"> subClient = factory.CreateSubscriptionClient(</span><span style=\"font-family: consolas; color: #a31515; font-size: 8pt;\">\"DataCollectionTopic\"</span><span style=\"font-family: consolas; color: black; font-size: 8pt;\">, </span><span style=\"font-family: consolas; color: #a31515; font-size: 8pt;\">\"Inventory\"</span><span style=\"font-family: consolas; color: black; font-size: 8pt;\">);</span></pre>  </div>  <div class=\"WordSection1\">  <pre style=\"background: white;\"><span style=\"font-family: consolas; color: black; font-size: 8pt;\">&nbsp;</span></pre>  </div>  <p class=\"MsoNormal\">次に、MessageReceiver を作成し、メッセージを受信します。</p>  <p class=\"WordSection1\" style=\"margin: 2.15pt 0in 0pt;\"><span style=\"font-family: consolas; color: black; font-size: 8pt;\">&nbsp;&nbsp;&nbsp; </span><span style=\"font-family: consolas; color: #2b91af; font-size: 8pt;\">MessageReceiver</span><span style=\"font-family: consolas; color: black; font-size: 8pt;\"> mr = subClient.CreateReceiver();</span></p>  <p class=\"WordSection1\" style=\"margin: 2.15pt 0in 0pt;\"><span style=\"font-family: consolas; color: black; font-size: 8pt;\">&nbsp;&nbsp;&nbsp; </span><span style=\"font-family: consolas; color: #2b91af; font-size: 8pt;\">BrokeredMessage</span><span style=\"font-family: consolas; color: black; font-size: 8pt;\"> receivedMessage = mr.Receive();</span></p>  <p class=\"WordSection1\" style=\"margin: 2.15pt 0in 0pt;\"><span style=\"font-family: consolas; color: black; font-size: 8pt;\">&nbsp;&nbsp;&nbsp; </span><span style=\"font-family: consolas; color: blue; font-size: 8pt;\">try</span></p>  <p class=\"WordSection1\" style=\"margin: 2.15pt 0in 0pt;\"><span style=\"font-family: consolas; color: black; font-size: 8pt;\">&nbsp;&nbsp;&nbsp; {</span></p>  <p class=\"WordSection1\" style=\"margin: 2.15pt 0in 0pt;\"><span style=\"font-family: consolas; color: black; font-size: 8pt;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ProcessMessage(receivedMessage);</span></p>  <p class=\"WordSection1\" style=\"margin: 2.15pt 0in 0pt;\"><span style=\"font-family: consolas; color: black; font-size: 8pt;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; receivedMessage.Complete();</span></p>  <p class=\"WordSection1\" style=\"margin: 2.15pt 0in 0pt;\"><span style=\"font-family: consolas; color: black; font-size: 8pt;\">&nbsp;&nbsp;&nbsp; }</span></p>  <p class=\"WordSection1\" style=\"margin: 2.15pt 0in 0pt;\"><span style=\"font-family: consolas; color: black; font-size: 8pt;\">&nbsp;&nbsp;&nbsp; </span><span style=\"font-family: consolas; color: blue; font-size: 8pt;\">catch</span><span style=\"font-family: consolas; color: black; font-size: 8pt;\"> (</span><span style=\"font-family: consolas; color: #2b91af; font-size: 8pt;\">例外</span><span style=\"font-family: consolas; color: black; font-size: 8pt;\"> e)</span></p>  <p class=\"WordSection1\" style=\"margin: 2.15pt 0in 0pt;\"><span style=\"font-family: consolas; color: black; font-size: 8pt;\">&nbsp;&nbsp;&nbsp; {</span></p>  <p class=\"WordSection1\" style=\"margin: 2.15pt 0in 0pt;\"><span style=\"font-family: consolas; color: black; font-size: 8pt;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; receivedMessage.Abandon();</span></p>  <p class=\"WordSection1\" style=\"margin: 2.15pt 0in 0pt;\"><span style=\"font-family: consolas; color: black; font-size: 8pt;\">&nbsp;&nbsp;&nbsp; }</span></p>  <h2 class=\"WordSection1\"><br>サブスクリプション フィルター</h2>  <p class=\"MsoNormal\">これまでに、Ive&rsquo; は、トピックに送信されたすべてのメッセージが、登録されているすべてのサブスクリプションで使用できるようになると述べています。 そこに存在するキー フレーズが &ldquo;使用可能になります&rdquo;。 Service Bus のサブスクリプションには、トピックに送信されたすべてのメッセージが表示されますが、仮想サブスクリプション キューにコピーできるのは、これらのメッセージの一部のみです。 これは、サブスクリプション フィルターを使用して行われます。 サブスクリプションが作成されると、&rsquo;メッセージのプロパティ (例: Label) とアプリケーション プロパティ (上記の例では StoreName など) の両方を操作できる SQL92 スタイルの述語の形式でフィルター式を指定できます。</p>  <p class=\"MsoNormal\"><br>これを説明するためにシナリオを少し進化させましょう&rsquo;。 2 つ目のストアは、小売シナリオに追加される予定です。 両方の店舗のすべての POS ターミナルからの売上データは、引き続き一元化された在庫管理システムにルーティングする必要がありますが、ダッシュボード ツールを使用するストア マネージャーは、店舗のパフォーマンスにのみ関心があります。 これを実現するには、サブスクリプションのフィルター処理を使用できます。 POS ターミナルがメッセージをパブリッシュするときは、メッセージで StoreName アプリケーション プロパティを設定します。 現在、Redmond と Seattle という 2 つのストアがあります。たとえば、Redmond ストアの POS ターミナルは、シアトルの StoreName を使用している間、Redmond の StoreName で販売データ メッセージにスタンプを付けます&rsquo;。 Redmond ストアのストア マネージャーは、POS ターミナルからのデータのみを表示することを望みます。 システムの外観を次&rsquo;に示します。</p>  <p class=\"MsoNormal\"><a href=\"\"><img src=\"https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/4628.t4.GIF\" border=\"0\"></a></p>  <p class=\"MsoNormal\">このルーティングを設定するには、次のようにダッシュボード サブスクリプションの作成方法を&rsquo;簡単に変更する必要があります。</p>  <div class=\"WordSection1\">  <pre style=\"background: white;\"><span style=\"font-family: consolas; color: #2b91af;\">&nbsp;&nbsp;&nbsp; </span><span style=\"font-family: consolas; color: black; font-size: 8pt;\">dataCollectionTopic.AddSubscription(</span><span style=\"font-family: consolas; color: #a31515; font-size: 8pt;\">\"Dashboard\"</span><span style=\"font-family: consolas; color: black; font-size: 8pt;\">, </span><span style=\"font-family: consolas; color: blue; font-size: 8pt;\">new</span><span style=\"font-family: consolas; color: black; font-size: 8pt;\">&nbsp;</span><span style=\"font-family: consolas; color: #2b91af; font-size: 8pt;\">SqlFilterExpression</span><span style=\"font-family: consolas; color: black; font-size: 8pt;\">(</span><span style=\"font-family: consolas; color: #a31515; font-size: 8pt;\">\"StoreName = 'Redmond'\"</span><span style=\"font-family: consolas; color: black; font-size: 8pt;\">);</span></pre>  </div>  <div class=\"WordSection1\">  <pre style=\"background: white;\"><span style=\"font-family: consolas; color: black; font-size: 8pt;\">&nbsp;</span></pre>  </div>  <p class=\"MsoNormal\">このサブスクリプション フィルターを設定すると、StoreName プロパティが Redmond に設定されたメッセージのみが、ダッシュボード サブスクリプションの仮想キューにコピーされます。</p>  <p class=\"MsoNormal\"><br>サブスクリプションのフィルター処理に関して、より重要な説明があります。 アプリケーションには、サブスクリプションごとに複数のフィルター 規則を持つオプションがあり&rsquo;、サブスクリプション仮想キューに渡す際にメッセージのプロパティを&rsquo;変更することもできます。 これらの&rsquo;高度なトピックについては、別のブログ投稿で取り上げます。</p>  <h2 class=\"WordSection1\"><br>まとめ</h2>  <p class=\"MsoNormal\">この投稿では、Service Busの新しい 5 月 CTP で導入されているトピックベースの発行/サブスクライブ機能を開始する方法が示されていることを願っています。</p>  <p class=\"MsoNormal\"><br>&rsquo;ブログ<a href=\"https://blogs.msdn.com/b/appfabric/archive/2011/05/17/an-introduction-to-service-bus-queues.aspx\">投稿</a>のキューの概要で説明したキューを使用する理由はすべて、トピックにも当てはまります。</p>  <ul>  <li>  <div class=\"MsoNormal\">一時的な &ndash; 分離メッセージ プロデューサーとコンシューマーは、同時にオンラインである必要はありません。</div>  </li>  <li>  <div class=\"MsoNormal\">負荷の負荷平準化 &ndash; ピークはトピックによって平滑化され、ピーク負荷ではなく平均負荷に対してアプリケーションをプロビジョニングできます。</div>  </li>  <li>  <div class=\"MsoNormal\">キューと同様に &ndash; 負荷分散を行うと&rsquo;、複数の競合コンシューマーが 1 つのサブスクリプションでリッスンし、各メッセージがコンシューマーの 1 つだけに渡され、それによって負荷が分散される可能性があります。</div>  </li>  <li>  <div class=\"MsoNormal\">疎結合 &ndash; により&rsquo;、既存のエンドポイントに影響を与えずにメッセージング ネットワークを進化させることができます。たとえば、サブスクリプションを追加したり、トピックにフィルターを変更して新しいコンシューマーに対応したりできます。</div>  </li>  </ul>  <p class=\"MsoNormal\">Weve&rsquo;は本当にここで&rsquo;表面を傷つけただけです。今後の投稿でさらに深く掘り下げます。</p>  <p class=\"MsoNormal\"><br>最後に、CTP リリースの主な目標の 1 つは、サービスに関するフィードバックを受け取ることです。 Service Bus&rsquo;メッセージング機能についてご意見をお寄せください。 特&rsquo;に、API に関するご意見を得たいと思っています。 だから、あなたが提案、批判、賞賛、または質問がある場合は、私たちに知 <a href=\"https://social.msdn.microsoft.com/Forums/en-US/appfabricctp/\">https://social.msdn.microsoft.com/Forums/en-US/appfabricctp/</a>らせてください. お客様からのフィードバックは、お客様やお客様のような他のユーザー向けのサービスの向上に役立ちます。 </p>"
}