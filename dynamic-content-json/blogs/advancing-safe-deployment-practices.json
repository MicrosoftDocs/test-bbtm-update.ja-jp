{
    "Slug": "advancing-safe-deployment-practices",
    "Title": "安全なデプロイプラクティスの推進",
    "Summary": "When running IT systems on-premises, you might try to ensure perfect availability by having gold-plated hardware, locking up the server room and throwing away the key. Software wise, IT would traditionally prevent as much change as possible – avoiding applying updates to the OS and/or applications because they’re too critical, and pushing back on change requests from users.",
    "Content": "<p>&quot;Azure で発生するサービスの信頼性に関する問題の主な原因は、小さいが一般的なハードウェア障害以外に何ですか? [変更] を選択します。 クラウド&rsquo;の価値提案の 1 つは、継続的に改善し、新しい機能と機能を提供し、セキュリティと信頼性の強化を実現することです。 しかし、プラットフォームは継続的に進化しているため、変更は避けられません。 これには、ボックス製品や従来の IT アプローチ &mdash; とは非常に異なる方法で品質と安定性を確保する必要があります。これは、長期間にわたってテストし、何かをデプロイした後、変更を回避することです。 この投稿は、Azure&#39;の信頼性が最もミッション クリティカルなワークロードを確実にサポートするために行っていること&#39;洞察を共有する、<a href=\"https://azure.microsoft.com/en-us/blog/advancing-microsoft-azure-reliability/\" target=\"_blank\">7 月のブログ投稿</a>で開始した<a href=\"https://azure.microsoft.com/en-us/blog/tag/advancing-reliability/\" target=\"_blank\">シリーズ</a>の 5 番目です。 今日&#39;では、安全 <strong>なデプロイプラクティス</strong>について説明します。これは、すべてのコードと構成の更新が適切に定義された段階を経て、顧客に到達する前に回帰とバグをキャッチするように、または初期段階を過ぎた場合に、可能な限り最小の数に影響を与えるように変更の自動化を管理する方法です。 コンピューティングエンジニアリングチームの<strong>クリスティナ・デル・アモ・カサド</strong>は、安全なデプロイイニシアチブを推進してきたので、この投稿を作成しました。&rdquo;- Mark Russinovich、CTO、Azure</p>\n\n<hr>\n<p>&nbsp;</p>\n\n<p>オンプレミスで IT システムを実行する場合は、金メッキハードウェアを用意し、サーバールームをロックしてキーを捨てることで、完璧な可用性を確保しようとする場合があります。 ソフトウェアの観点から見ると、IT は従来、オペレーティング システムまたはアプリケーションに更新プログラムを適用することが非常に重要で&rsquo;、ユーザーからの変更要求にプッシュバックすることを避けるために、可能&mdash;な限り多くの変更を防ぎます。 誰もがシステムの周りを慎重に踏み込むので、この &lsquo;誰も呼吸しません!&rsquo; アプローチは、システムの継続的な改善を妨げ、時には定期的にパッチを適用するには非常に重要であると見なされるシステムのセキュリティを損なうことさえあります。 前述のように、このアプローチ&#39;Azure などのハイパースケール パブリック クラウドでの変更およびリリース管理には機能しません。 サービスの更新と改善を展開する必要があり、セキュリティの脆弱性に直面して迅速に対処するという当社のコミットメントを受け、変更は避けられず、有益です。 変更を&rsquo;避けるだけではできないため、Microsoft、お客様、パートナーは、変更が期待されることを認識する必要があり、その計画を立てる必要があります。 Microsoft は、可能な限り透過的な更新プログラムの作成に取り組み続け、以下で説明するように変更を安全に展開します。 そうは言っても、お客様とパートナーは高可用性を設計し、必要に応じてプラットフォームから送信されたメンテナンス イベントを使用して適応させる必要があります。 最後に、場合によっては、お客様は <a href=\"https://www.aka.ms/advancingreliability/4\" target=\"_blank\">、組織に適したタイミング</a>でプラットフォームの更新を開始する制御を取ることができます。</p>\n\n<h2>安全に変更する</h2>\n\n<p>Azure データセンター全体にリリースをデプロイする方法を検討する場合、プロセスを構成する重要な前提の 1 つは、デプロイされている変更によって発生する不明な問題が発生する可能性があることを想定し、最小限の影響で上記の問題を検出できるように計画し、問題が発生した場合の軽減アクションを自動化することです。 開発者はそれを完全に無害であると判断し、サービスに影響&#39;ないことを保証する可能性があります。システムの最小の変更であっても、システムの安定性にリスクが生じます。そのため &lsquo;、ここでの変更&rsquo; は、すべての種類の新しいリリースを指し、コードの変更と構成の変更の両方をカバーします。 ほとんどの場合、構成の変更はシステムの動作に大きな影響を与えますが、コードの変更と同様に、潜在的なコードの欠陥や新しいコード パスをアクティブ化するリスクはありません。</p>\n\n<p>Azure 全体のTeamsは、同様のプロセスに従って、変更に関連する影響を防止または最小限に抑えます。 まず、テストと統合の検証を通じて、デプロイの開始前に変更が品質バーを満たしていることを確認します。 その後、サインオフ後、段階的に変更をロールアウトし、正常性シグナルを継続的に測定し、テスト中に発生しなかった変更に関連する予期しない影響があるかどうかを相対的な分離で検出できるようにします。 問題を引き起こす変更が広範な運用環境に移行されることを望まないので、可能な限りそれを回避するための手順が講じられます。 段階的なデプロイにより、広範な影響を引き起こす前に、より小さな規模 (またはより小さい &lsquo;ブラスト半径&rsquo;) で問題を検出する良い機会が得られます。</p>\n\n<p>Azure アプローチでは、上記の高レベルのプロセスに合わせて、 <strong>安全なデプロイプラクティス (SDP) フレームワーク</strong>を使用して自動化を変更します。これは、すべてのコードと構成の変更が特定のステージのライフサイクルを通り抜け、正常性メトリックを監視して、劣化が検出された場合に自動アクションとアラートをトリガーすることを目的としています。 これらのステージ (次の図に示す) は、ソフトウェアの変更が既存の Azure ワークロードに悪影響を及ぼすリスクを軽減します。</p>\n\n<p><a href=\"https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/dfe1ed0f-f1f3-45c7-bd0d-9cb934b15eed.png\"><img alt=\"A diagram showing how the cost and impact of failures increases throughout the production rollout pipeline, and is minimized by going through rounds of development and testing, quality gates, and integration.\" border=\"0\" height=\"463\" src=\"https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/bf679ad2-9c14-484f-a30c-6ac44391150e.png\" style=\"border: 0px currentcolor; border-image: none; margin-right: auto; margin-left: auto; float: none; display: block; background-image: none;\" title=\"運用ロールアウト パイプライン全体で障害のコストと影響がどのように増加し、開発とテスト、品質ゲート、統合のラウンドを通じて最小化されるかを示す図。\" width=\"1024\"></a></p>\n\n<p>これは、左側の開発者がコードを変更し、独自のシステムでテストし、ステージング環境にプッシュすることで、デプロイ パイプラインの簡略化を示しています。 通常、この <strong>統合環境</strong> は、特定のコンポーネントの相互作用を一緒にテストする必要がある Azure サービスのサブセットのチーム専用です。 たとえば、コンピューティング、ネットワーク、ストレージなどのコア インフラストラクチャ チームは、統合環境を共有します。 各チームは、その環境内のソフトウェアに対して合成テストとストレス テストを実行し、安定するまで繰り返し実行し、品質結果が特定のリリース、機能、または変更が運用環境の準備ができていることを示したら、カナリアリージョンに変更をデプロイします。</p>\n\n<h2>カナリアリージョン</h2>\n\n<p><strong>カナリア リージョン</strong>は早期更新プログラム アクセス プログラム&rdquo;リージョン&ldquo;と一般に参照されており&rsquo;、Azure サービスの大部分で実質的に本格的な Azure リージョンを提供しています。 カナリアリージョンの 1 つは<a href=\"https://docs.microsoft.com/en-us/azure/availability-zones/az-overview\" target=\"_blank\">Availability Zones</a>で構築され、もう 1 つはAvailability Zonesなしで構築され、両方のリージョンが<a href=\"https://docs.microsoft.com/en-us/azure/best-practices-availability-paired-regions\" target=\"_blank\">リージョン ペア</a>を形成し、データ geo レプリケーション機能を検証できるようにします。 これらのカナリア リージョンは、完全な運用レベル、エンド ツー エンドの検証、大規模なシナリオ カバレッジに使用されます。 一部のファースト パーティ サービス (内部顧客向け)、複数のサード パーティ サービス、およびプログラムに招待する少数の外部顧客のセットをホストして、対象となるシナリオの豊かさと複雑さを高め、カナリア リージョンがパブリック Azure リージョンの使用パターンを確実に表すようにします。 また、Azure チームはこれらの環境でストレステストと合成テストを実行し、障害の挿入またはディザスター リカバリー訓練をリージョンまたは可用性ゾーン レベルで定期的に実行し、実際に発生した場合に実行される検出と回復のワークフローを実践します。 これらの演習では、個別に一緒に、変更が Azure の広範な顧客ワークロードに触れる前に、ソフトウェアが最高品質であることを確認しようとします。</p>\n\n<h2>パイロット フェーズ</h2>\n\n<p>カナリアからの結果から既知の問題が検出されていないことが示されたら、 <strong>パイロット フェーズ</strong>と呼ばれるものから始めて、運用環境への段階的なデプロイを開始できます。 このフェーズでは、比較的小規模ですが、ハードウェアと構成の多様性が高い変更を試すことができます。 このフェーズは、ハードウェアの依存関係を持つコア ストレージ サービスやコア コンピューティング インフラストラクチャ サービスなどのソフトウェアにとって特に重要です。 たとえば、Azure では、GPU&#39;、大きなメモリ サーバー、コモディティ サーバー、複数の世代と種類のプロセッサ、Infiniband などのサーバーが用意されているため、変更のフライティングが可能になり、小規模なテスト中に発生しない問題の検出が可能になる場合があります。 各ステップでは、徹底的な正常性監視とベイク時間の延長&#39;&#39;潜在的な障害パターンを表面化させ、変化に対する信頼を高め、お客様への全体的なリスクを大幅に軽減します。</p>\n\n<p>パイロット フェーズの結果が適切であると判断したら、デプロイ システムは、変更を段階的に進めることで進<strong>みます。</strong> より広範な Azure リージョンへのデプロイを通じて、デプロイ システムは、Availability Zones (変更はリージョン内の 1 つの可用性ゾーンにのみ行われます) とリージョンのペアリング (すべてのリージョンが georedundant ストレージ用の 2 番目のリージョンとペア&rsquo;になっている) を尊重するように努めています。そのため、変更は&lsquo;最初にリージョンにデプロイされ、そのペアにデプロイされます。 一般に、負のシグナルが発生しない限り、変更はデプロイされます。</p>\n\n<h2>セーフデプロイプラクティス</h2>\n\n<p>グローバルに Azure の規模を考えると、ロールアウト プロセス全体が完全に自動化され、ポリシーによって推進されます。 これらの宣言型のポリシーとプロセス (開発者ではなく) は、ソフトウェアをロールアウトする速度を決定します。ポリシーは一元的に定義され、ソフトウェアの品質を監視するための必須の正常性シグナルと、上記のさまざまなステージ間の必須 &lsquo;ベイク時間&rsquo; が含まれます。 各フェーズで異なる期間にわたってソフトウェアを座ってベイクする理由は、変更をそのサービスの負荷の全範囲に公開するためです。 たとえば、多様な組織ユーザーが午前中にオンラインになり、ゲームの顧客が夕方にオンラインになり、顧客からの新しい仮想マシン (VM) やリソースの作成が長期間にわたって発生する可能性があります。</p>\n\n<p>異なるクラスター、リージョン、またはサービス リングに段階的にデプロイするアプローチを採用できないグローバル サービスも、SDP に合わせて段階的なロールアウトのバージョンを実践します。 これらのサービスは、サービス インスタンスを複数のフェーズで更新するモデルに従い、Azure Traffic Managerを介して更新されたインスタンスへのトラフィックを段階的に逸脱します。 シグナルが正の場合、更新されたインスタンスに対して時間の経過と同時により多くのトラフィックが逸脱し、信頼度が高まり、デプロイが時間の経過と同時により多くのサービス インスタンスに適用されないようにブロック解除されます。</p>\n\n<p>もちろん、Azure プラットフォームには、非常に重大な脆弱性を軽減するためにこれが必要な場合に備えて、すべての Azure に変更を同時にデプロイする機能もあります。 安全な展開ポリシーは必須ですが、特定の緊急時の条件が満たされたときに迅速化することを選択できます。 たとえば、通常よりもはるかに迅速に移行する必要があるセキュリティ更新プログラムをリリースする場合や、回帰のリスクが解決される修正のために、既にお客様に非常に影響を与える&rsquo;問題を軽減します。 これらの例外は非常にまれであり、一般に、デプロイ ツールとプロセスは意図的に速度を犠牲にして、シグナルが構築される可能性とシナリオとワークフローを大規模に実行する可能性を最大限に高め、可能な限り小さな規模の影響で問題を発見する機会を生み出します。</p>\n\n<h2>継続的な改善</h2>\n\n<p>Microsoft の安全なデプロイプラクティスとデプロイ ツールは、以前の停止やメンテナンス イベントからの学習と共に進化し続けており、問題を非常に小さい規模で検出するという目標に沿って進んでいます。 たとえば、正常性シグナルを強化し続けることの重要性と、機械学習を使用して障害をより適切に関連付け、異常を検出することの重要性について学習しました。 また、よりリスクの少ないハードウェアの多様性をカバーできるように、パイロットとフライティングの方法を引き続き改善しています。 問題の潜在的な兆候が見える場合は、変更を自動的にロールバックする機能を引き続き向上させます。 また、一般的な変更の影響を軽減または排除するプラットフォーム機能にも投資し続けます。</p>\n\n<p>昨年リリースされた 1,000 を超える新機能により、Azure の変化のペースが圧倒的に感じることがわかっています。 マークが述べたように、クラウド サービスの俊敏性と継続的な改善は、クラウド &ndash; 変更の重要な価値提案の 1 つであり、バグではありません。 最新のリリースについては、お客様とパートナーに <a href=\"https://www.Azure.com/Updates\" target=\"_blank\">Azure.com/Updates で</a>把握することをお勧めします。 開発におけるイノベーションのロードマップを含め、最近および今後の Azure 製品の更新プログラムについて学習するための単一の場所としてこれを維持するよう努めています。 これらの異なるサービスが利用可能なリージョン、またはいつ利用可能になるのかを理解するには、 <a href=\"https://www.Azure.com/ProductsbyRegion\" target=\"_blank\">Azure.com/ProductsbyRegion でツールを使用</a>することもできます。</p>\n"
}