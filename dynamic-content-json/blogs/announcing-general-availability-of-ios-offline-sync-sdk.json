{
    "Slug": "announcing-general-availability-of-ios-offline-sync-sdk",
    "Title": "iOS オフライン同期 SDK の一般提供のお知らせ",
    "Summary": "Most mobile apps don't work without a network connection. Learn how to use Mobile Services offline sync on iOS, and create responsive and robust apps that work, even when your network doesn't.",
    "Content": "エレベーターに乗ったからといって、モバイル アプリが突然機能しなくなったときに嫌いになりませんか?または、ユーザーが配信不能ゾーンにいても、顧客データにすばやくアクセスする必要がある旅行営業担当者かもしれません。 エンド ユーザーは、ネットワークが機能しない場合でも、動作するアプリが必要です。 残念ながら、多くのアプリは、デバイスがオフラインの場合は機能が制限されているか、機能がありません。主に、同期動作を正しく実装するのは非常に困難であるためです。 デバイスにキャッシュする必要がある内容アプリは、新しいデータをフェッチする必要があることをどのように認識しますか?ユーザーがオフラインで、既にローカル編集を行っている間にデータが変更された場合はどうなりますか?\n\nMobile Servicesオフライン同期は、これらの問題をすべて処理するクロスプラットフォーム クライアント SDK を使用して、これらの問題を解決するように設計されています。 Mobile Servicesを使用すると、開発者は <a href=\"https://azure.microsoft.com/en-us/documentation/articles/mobile-services-ios-get-started-offline-data/\" target=\"_blank\">iOS</a>、<a href=\"https://azure.microsoft.com/blog/2014/08/07/offline-support-in-azure-mobile-services-android-sdk/\" target=\"_blank\">Android</a>、<a href=\"https://azure.microsoft.com/en-us/documentation/articles/mobile-services-xamarin-ios-get-started-offline-data\" target=\"_blank\">Xamarin</a>、Windows アプリ間でネイティブ同期エクスペリエンスを簡単<a href=\"https://azure.microsoft.com/en-us/documentation/articles/mobile-services-windows-store-dotnet-get-started-offline-data\" target=\"_blank\">に</a>提供できます。\n\nMobile Services <a href=\"https://go.microsoft.com/fwLink/p/?LinkID=266533\" target=\"_blank\">iOS 2.0 SDK</a> の一般提供についてお知らせします。これにより、ネイティブ iOS 用のこれらの新しい同期機能が追加されます。 オフライン同期は、Windows、Xamarin iOS、Xamarin Android 用のマネージド クライアント SDK と、プレビュー版の Android SDK で既に使用できます。 この機能をさらに使いやすくするために、Azure portalのクイック スタートを更新しました。 Objective-C iOS クイックスタートは、Windows、Xamarin iOS、Xamarin Android 用と共にオフラインで有効になりました。\n\nオフライン同期には、次のような多くの利点があります。\n<ul>\n    <li>サーバー データをデバイスにローカルでキャッシュすることにより、アプリケーションの応答性を向上させる。</li>\n    <li>一時的なネットワークの問題に対処できる堅牢なアプリを作成する</li>\n    <li>複数のデバイス間でデータを同期させ、同じレコードが 2 つのデバイスによって変更されたときに競合を検出する。</li>\n    <li>特に従量制課金接続のデータ使用量を削減する</li>\n</ul>\nアプリがオフライン モードの場合でもユーザーはデータを作成および変更できますが、それらのデータはローカル ストアに保存されます。 アプリがオンラインに戻ると、ローカルの変更を Mobile Services バックエンドと同期できます。 この機能には、クライアントとバックエンドの両方で同じレコードが変更された場合の競合検出のサポートも含まれています。 検出された競合は、サーバーまたはクライアントのどちらでも処理することができます。 オフライン同期は非常に軽量です。たとえば、すべてのモバイル クライアントの同期状態をバックエンド データベースに格納する必要 <em>はありません</em> 。 Azure Mobile Servicesを既に使用している場合は、次のチュートリアルに従ってアプリをオフラインで有効にすることができます。\n<ul>\n    <li><a href=\"https://azure.microsoft.com/en-us/documentation/articles/mobile-services-ios-get-started-offline-data\">Mobile Servicesでのオフライン データ同期を使用した概要</a></li>\n    <li><a href=\"https://azure.microsoft.com/en-us/documentation/articles/mobile-services-ios-handling-conflicts-offline-data/\">オフライン データ同期との競合を処理する</a></li>\n</ul>\nアプリで Core Data を有効にし、アプリ データ オブジェクトと <a href=\"https://azure.microsoft.com/en-us/documentation/articles/mobile-services-ios-get-started-offline-data/#review-core-data\">SDK で必要なシステム テーブル</a>の両方のモデルを定義する必要があります。 アプリの初期化ロジック (iOS クイックスタート <strong>の QSTodoService.init</strong> など) では、モバイル サービスのローカル ストアを作成し、同期コンテキストに関連付けます。\n<pre class=\"prettyprint\">// create a Mobile Services local store based on the app's Core Data model\nMSCoreDataStore *store = [[MSCoreDataStore alloc] initWithManagedObjectContext:context]; \n\n// associate store with sync context \nself.client.syncContext = \n    [[MSSyncContext alloc] initWithDelegate:nil\n                                 dataSource:store \n                                   callback:nil]; \n        \n// Create an MSSyncTable instance to allow us to work with the TodoItem table\nself.syncTable = [_client syncTableWithName:@\"TodoItem\"];</pre>\nアプリでは、すべての CRUD 操作に対して (MSTable ではなく) この <strong>MSSyncTable</strong> インスタンスを使用する必要があります。<strong></strong> 読み取りはローカル ストレージからフェッチされ、すべての作成、更新、および削除操作がキューに入れられ、サーバーに送信されます。 これらのキューに入った変更を送信するには、 <strong>pushWithCompletion メソッドを</strong> 使用します。 これは同期コンテキストのメソッドであり、すべての変更を順番に再生します。\n<pre class=\"prettyprint\">[self.client.syncContext pushWithCompletion:^(NSError *error) { ... } ]</pre>\nサーバーから新しい変更を取得するには、 <strong>pullWithQuery</strong> メソッドを使用します。\n<pre class=\"prettyprint\">[self.syncTable pullWithQuery:query \n                      queryId:@\"allTodoItems\" \n                   completion:^(NSError *error) { ... } ]\n</pre>\nプル操作の実行時に同期テーブルに保留中の変更がある場合、SDK は最初にすべての変更をプッシュします。 増分同期を有効にするには、 <strong>queryID</strong> パラメーターを使用します。 クエリ ID は、プログラム内の各クエリに対して一意である必要がある説明的な文字列です。これは、最後のプル操作から最後に変更されたタイムスタンプを格納するために、SDK によって内部的に使用されます。 後続のプル操作では、このタイムスタンプより新しいレコードのみが取得されます。\n\n<strong>pullWithQuery </strong>メソッドでは、デバイスに保存する必要があるデータの特定のサブセットを指定することもできます。 クイック スタートの例では、単純なデータ モデルであるため、すべての todo 項目が取得されます。 ただし、todo 項目の重要性を示すフィールドを追加したとします。 その後、アプリは適切なクエリを使用して、重要度の高いアイテムと通常の重要度の項目のみをプルできます。 ローカル ストアは Core Data を使用しているため、 <strong>NSFetchedResultsController</strong> を使用して、キー値監視を使用してビュー コントローラーと統合できます。 iOS のクイック スタートでは、テーブル ビューを Core Data マネージド オブジェクト コンテキストに接続して、この例を示します。 iOS やその他のプラットフォームでのオフライン同期の詳細については、次のリソースを参照してください。\n<ul>\n    <li>チュートリアル: <a href=\"https://azure.microsoft.com/en-us/documentation/articles/mobile-services-ios-get-started-offline-data\">Mobile Servicesでオフライン データ同期を使用して概要</a>し、<a href=\"https://azure.microsoft.com/en-us/documentation/articles/mobile-services-ios-handling-conflicts-offline-data/\">オフライン データ同期との競合を処理する</a></li>\n    <li><a href=\"https://channel9.msdn.com/Shows/Cloud+Cover/Episode-155-Offline-Storage-with-Donna-Malayeri\">オフライン同期時の Cloud Cover エピソード</a> (Windows、Xamarin、iOS を表示)</li>\n    <li><a href=\"https://chrisrisner.com/LensRocket-for-iOS-Source-Code-Released\">iOS サンプル アプリ – LensRocket</a></li>\n    <li><a href=\"https://azure.microsoft.com/en-us/documentation/videos/azure-mobile-services-offline-enabled-apps-with-donna-malayeri/\">オフライン同期時の Azure Friday の短いビデオ</a> (Windows)</li>\n</ul>"
}