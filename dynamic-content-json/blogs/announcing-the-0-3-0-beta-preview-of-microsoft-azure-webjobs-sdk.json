{
    "Slug": "announcing-the-0-3-0-beta-preview-of-microsoft-azure-webjobs-sdk",
    "Title": "Microsoft Azure WebJobs SDK の 0.3.0 ベータ 版プレビューの発表",
    "Summary": "This preview of WebJobs SDK adds support for Service Bus and many more new features.",
    "Content": "ここでは Scott Hanselman によって導入された Microsoft Azure WebJobs SDK の別のプレビューをリリース<a href=\"https://www.hanselman.com/blog/IntroducingWindowsAzureWebJobs.aspx\">します</a>。 前のプレビューの詳細については、この記事をお読 <a href=\"https://blogs.msdn.com/b/webdev/archive/2014/03/27/announcing-0-2-0-alpha2-preview-of-windows-azure-webjobs-sdk.aspx\">みください</a>。\n\nこのリリースには、alpha2 と同じ一般的な機能セットと新機能があります。\n<h3>このリリースをダウンロードする</h3>\nWebJobs SDK は、NuGet ギャラリーからダウンロードできます。 次のように、NuGet パッケージ マネージャー コンソールを使用して、NuGet ギャラリーからこれらのパッケージをインストールまたは更新できます。\n<pre class=\"prettyprint\">Install-Package Microsoft.Azure.Jobs –Pre</pre>\nMicrosoft Azure Service Bus トリガーを使用する場合は、次のパッケージをインストールします。\n<pre class=\"prettyprint\">Install-Package Microsoft.Azure.Jobs.ServiceBus -Pre</pre>\nパッケージ名が alpha2 から変更されたので、アルファ 2 - ベータ版からの更新に役立つリダイレクト パッケージをアップロードしました。\n<pre class=\"prettyprint\">Update-Package Microsoft.WindowsAzure.Jobs –Pre\nUpdate-Package Microsoft.WindowsAzure.Jobs.Host –Pre</pre>\n&nbsp;\n<h3>WebJobs SDK とは</h3>\nMicrosoft Azure Web サイトの <a href=\"https://azure.microsoft.com/en-us/documentation/articles/web-sites-create-web-jobs/\">Web ジョブ</a>機能を使用すると、Web サイトでサービスやバックグラウンド タスクなどのプログラムを簡単に実行できます。 <i>.exe</i>、<i>.cmd</i>、.batファイルなどの<i>実行可能ファイルを </i> Web サイトにアップロードして実行できます。 これらは、トリガーされた Web ジョブまたは継続的な Web ジョブとして実行できます。 WebJobs SDK を使用しない場合、バックグラウンド タスクを接続して実行するには、多くの複雑なプログラミングが必要です。 SDK には、一般的なタスクを実行するための最小限のコードを記述できるフレームワークが用意されています。\n\nWebJobs SDK には、BLOB、キュー、テーブル、Service Bus Microsoft Azure Storageで動作するバインディングとトリガー システムがあります。 バインディング システムを使用すると、オブジェクトの読み取りまたは書き込みを行うコードMicrosoft Azure Storage簡単に記述できます。 トリガー システムは、キューまたは BLOB で新しいデータが受信されるたびに、コード内の関数を呼び出します。\n<h4>WebJobs SDK のシナリオ</h4>\nここでは、Azure Web ジョブ SDK を使用してより簡単に処理できる標準的なシナリオをいくつか取り上げます。\n<ul>\n<ul>\n <li>\n<div><b>画像処理</b> またはその他の CPU 負荷の高い作業。</div></li>\n <li>\n<div>メールの送信など、バックグラウンド スレッドで実行するその他の <b>実行時間の長いタスク</b> 。 これまでは、アプリがしばらくアイドル状態であった場合に IIS によってアプリがリサイクルされるため、ASP.NET でこれを行うことができませんでした。 Azure Web サイトの <a href=\"https://weblogs.asp.net/scottgu/archive/2014/01/16/windows-azure-staging-publishing-support-for-web-sites-monitoring-improvements-hyper-v-recovery-manager-ga-and-pci-compliance.aspx\">AlwaysOn</a> を使用すると、アプリがアイドル状態のときに Web サイトがリサイクルされないようにすることができます。 <a href=\"https://weblogs.asp.net/scottgu/archive/2014/01/16/windows-azure-staging-publishing-support-for-web-sites-monitoring-improvements-hyper-v-recovery-manager-ga-and-pci-compliance.aspx\">AlwaysOn</a> は、サイトがスリープ状態にならないことを保証します。つまり、WebJobs と WebJobs SDK を使用して実行時間の長いタスクまたはサービスを実行できます。</div></li>\n <li>\n<div><b>キューの処理</b>。 Web フロントエンドがバックエンド サービスと通信する一般的な方法は、キューを使用することです。 これは、一般的なプロデューサーであるコンシューマー パターンです。</div></li>\n <li>\n<div><b>RSS 集計</b>。 RSS フィードのリストを維持するサイトがある場合は、フィードからのすべての記事をバックグラウンド プロセスにプルすることができます。</div></li>\n <li>\n<div><b>ログ ファイル</b>の集計やクリーンアップなど、ファイルのメンテナンス。</div></li>\n</ul>\n</ul>\n<h4>SDK の目標</h4>\n<ul>\n <li>バックグラウンド処理作業を行うときにAzure Storageを使いやすくする方法を提供します。</li>\n <li>SDK を使用すると、アプリケーション内でのAzure Storageの使用が容易になります。 ストレージから読み取り/書き込みを行うコードの記述に対処する必要はありません。</li>\n <li>開発者が診断とログ 記録コードを記述することなく、豊富な診断と監視エクスペリエンスを提供します。</li>\n</ul>\n<h3>このプレビューの更新プログラム</h3>\n<h4>Microsoft Azure Service Busのサポートを追加する</h4>\nWebJobs SDK でMicrosoft Azure Service Busがサポートされるようになりました。 以前のプレビューでは、Azure キューで関数をトリガーできました。 これで、キューとトピックAzure Service Bus使用できるようになりました。\n\nたとえば、次のコードは、WebJobs SDK を使用して、Service Bus キュー上の新しいメッセージに対して関数をトリガーし、別のService Bus Queue にメッセージを書き込む方法を示しています。これらの関数をダッシュボードで監視し、それらを実行し、それらを中止して、Azure Queues の場合と同様に、Service Busのすべてのダッシュボード機能を取得できます。\n\nServiceBus 接続を指す \"AzureJobsServiceBus\" という connectionString を指定できます。 Service Bus キューとトピックの使用に関するその他のサンプルについては、<a href=\"https://aspnet.codeplex.com/SourceControl/latest#Samples/AzureWebJobs/ReadMe.txt\">サンプル</a> サイトをご覧ください\n<pre class=\"prettyprint\">class Program\n{\n    static void Main(string[] args)\n    {\n        JobHost host = new JobHost();\n        host.RunAndBlock();\n    }\n\n    public static void TriggerOnSBQueue(\n        [ServiceBusTrigger(\"inputqueue\")] string inputText,\n        [ServiceBus(\"outputqueue\")] out string outputText)\n    {\n        outputText = inputText;\n    }\n}</pre>\n&nbsp;\n<h4>トリガーとバインドの使用をより明示的にしました</h4>\nSDK を使用すると、関数をトリガーし、指定した型または文字列、TextReader、TextWriter などの CLR 型にメッセージをバインドできます。 前のプレビューでは、関数パラメーターで使用されている属性でトリガーとバインドの使用が指定されていました。 属性の使用に関する規則はあまり明確ではなく、混乱を避けるために、トリガーとバインドをより明示的にするために属性の名前と使用法を変更しました。\n\n大まかな変更点を次に示します。\n<ul>\n <li>\n<div>トリガーされた QueueInput が QueueTrigger になり、QueueOutput が Queue になりました</div></li>\n</ul>\n<strong>以前は</strong>\n<pre class=\"prettyprint\">public static void OnQueue(\n    [QueueInput(\"input\")] string message, \n    [QueueOutput(\"output\")] out string newMessage)\n{     \n    newMessage = message;\n}</pre>\n<strong>後</strong>\n<pre class=\"prettyprint\">public static void OnQueue(\n    [QueueTrigger(\"input\")] string message, \n    [Queue(\"output\")] out string newMessage)\n{     \n    newMessage = message;\n}</pre>\n<ul>\n <li>\n<div>トリガーされた BlobInput は BlobTrigger になりましたが、BlobInput または BlobOutput は BLOB です</div></li>\n</ul>\n<strong>以前は</strong>\n<pre class=\"prettyprint\">public static void BlobToBlob(\n    [BlobInput(\"input/{name}\")] TextReader input, \n    [BlobOutput(\"output/{name}\")] out string output)\n{\n    output = input.ReadToEnd();\n}</pre>\n<strong>後</strong>\n<pre class=\"prettyprint\">public static void BlobToBlob(\n    [BlobTrigger(\"input/{name}\")] TextReader input, \n    [Blob(\"output/{name}\")] out string output)\n{\n    output = input.ReadToEnd();\n}</pre>\n<h4>ブランドの変更</h4>\nMicrosoft Azureの<a href=\"https://azure.microsoft.com/blog/2014/03/25/upcoming-name-change-for-windows-azure/\">ブランド化の変更</a>に合わせて、このブランドに合わせてパッケージ名、アセンブリ名、名前空間を変更します。 アプリで必要な変更を次に示します。\n<table width=\"413\" border=\"1\" cellspacing=\"0\" cellpadding=\"2\">\n<tbody>\n<tr>\n<td valign=\"top\" width=\"234\"><b>変更前</b></td>\n<td valign=\"top\" width=\"177\"><b>変更後</b></td>\n</tr>\n<tr>\n<td valign=\"top\" width=\"234\">Microsoft.WindowsAzure.Jobs.Host</td>\n<td valign=\"top\" width=\"177\">Microsoft.Azure.Jobs</td>\n</tr>\n<tr>\n<td valign=\"top\" width=\"234\">Microsoft.WindowsAzure.Jobs</td>\n<td valign=\"top\" width=\"177\">Microsoft.Azure.Jobs.Core</td>\n</tr>\n</tbody>\n</table>\n<h4>関数検出の強化</h4>\nWebJobs SDK が関数を検索する方法をカスタマイズできるように、ITypeLocator と INameResolver を追加しました。 これにより、次のようなシナリオが可能になります。\n<ul>\n <li>\n<div>QueueName が明示的でない関数を定義できます。 構成ソースからキュー名を読み取り、実行時にこの値を指定できます。</div></li>\n <li>\n<div>関数の検出を特定のクラスまたはアセンブリに制限します。</div></li>\n <li>\n<div>インデックス作成時の動的関数: 実行時に関数シグネチャを定義できます。</div></li>\n</ul>\n<h4>キュー メッセージのデキュー 数へのアクセス</h4>\nSDK を使用すると、Azure キューの使用が容易になり、一般的な使用パターンの大部分がカバーされますが、低レベルのキューにアクセスする必要がある場合があります。 SDK では、高度なシナリオで必要になる可能性があるメッセージの一般的に使用されるプロパティの一部にアクセスできるようになりました。 たとえば、このサンプルでは、キュー メッセージの dequeueCount にアクセスできます。 このサポートを超えて SDK を使用すると、AZURE STORAGE SDK キューの種類にバインドできます。\n<pre class=\"prettyprint\">public static void PropertyBinding(\n    [QueueTrigger(\"inputqueue\")] string inputText,\n    int dequeueCount)\n{\n   // Do something with the dequeueCount            \n}</pre>\n<h4>キャンセル トークンのサポートを追加しました</h4>\n関数は関数内で CancellationToken パラメーターを受け取ることができ、関数はホストからキャンセル要求を受け取ることができます。\n<h4>Web ジョブのシャットダウン通知のサポートを追加しました</h4>\nWebJobs では、グレースフル シャットダウンのサポートが追加されました。 これにより、Web ジョブが停止する前に、Web ジョブで関数の実行を完了できます。 SDK では、Web ジョブのシャットダウン時に通知することで、WebJobs でこのグレースフル シャットダウンがサポートされます。 この情報は、CancellationToken を使用して関数にフローされます。 次の関数は CancellationToken を受け取ります。これは、WebJob が停止しているときにキャンセル要求を受け取ります。\n<pre class=\"prettyprint\">public static void UseCancellationToken(\n    [QueueTrigger(\"inputqueue\")] string inputText,\n    TextWriter log,\n    CancellationToken token)\n{\n      // This is a long running function which can be cancelled  \n      while (!token.IsCancellationRequested)\n      {\n          Thread.Sleep(2000);\n          log.WriteLine(\"Not cancelled\");\n      }\n      log.WriteLine(\"cancelled\");\n}</pre>\n&nbsp;\n<h4>トリガーがホストでサポートされるようになりました。Call()</h4>\nホストを介して呼び出される関数に対してトリガーを作成できるようになりました。Call()\n<pre class=\"prettyprint\">class Program\n{\n    static void Main(string[] args)\n    {\n        JobHost host = new JobHost();\n        host.Call(typeof(Program).GetMethod(\"TriggerOnQueue\"),\n            new { inputText=\"input\" });\n    }\n\n    public static void TriggerOnQueue(\n    [QueueTrigger(\"inputqueue\")] string inputText)\n    {\n        //Process Queue message\n    }\n}</pre>\n&nbsp;\n<h4>JobHost の構成</h4>\nAzure StorageおよびService Bus アカウントの既定の connectionString 名をオーバーライドする場合は、JobHostConfiguration を使用して行うことができます。\n<pre class=\"prettyprint\">static void Main(string[] args)\n{\n    var _storageConn = ConfigurationManager\n        .ConnectionStrings[\"MyStorageConnection\"].ConnectionString;\n\n    var _servicesBusConn = ConfigurationManager\n        .ConnectionStrings[\"MyServiceBusConnection\"].ConnectionString;\n\n    JobHostConfiguration config = new JobHostConfiguration(_storageConn)\n        {\n            ServiceBusConnectionString = _servicesBusConn\n        };\n\n    JobHost host = new JobHost(config);\n    host.RunAndBlock();\n}</pre>\n&nbsp;\n<h4>依存関係Azure Storage更新</h4>\nWebJobs SDK は<a href=\"https://www.nuget.org/packages/WindowsAzure.Storage\">、Azure Storage 4.0.1 パッケージ</a>によって異なります。\n<h3>SDK の既存の機能</h3>\nalpha2 でサポートされ、このリリースで引き続きサポートされている機能セットを次に示します。\n<h4>Azure Storage</h4>\nSDK は、Azure BLOB、キュー、テーブルで動作します。\n<h4>トリガー</h4>\nキューまたは BLOB で新しい入力が検出されると、関数が実行されます。 次に例を示します。 次のコードでは、\"inputqueue\" というキューに新しいメッセージが送信されると、ProcessQueue 関数がトリガーされます。 トリガーの詳細については、この <a href=\"https://blogs.msdn.com/b/jmstall/archive/2014/01/28/trigger-bindings-and-route-parameters-in-azurejobs.aspx\">記事</a>を参照してください。\n<pre class=\"prettyprint\">public static void ProcessQueue(\n    [QueueTrigger(\"inputqueue\")] string input)\n{\n    // Process the Queue message \n}</pre>\n&nbsp;\n<h3>バインド</h3>\nSDK では、C# プリミティブ型と Azure ストレージ (BLOB、テーブル、キューなど) 間のモデル バインドを提供するためのバインドがサポートされています。 これにより、開発者は BLOB、テーブル、キューから読み取り/書き込みを簡単に行うことができます。これは、Azure Storageからの読み取り/書き込みに関するコードについて学習する必要がないためです。\n\n現在サポートされているバインディングは<b>、Stream、TextReader/Writer、String です。 </b>Storage SDK からカスタム型やその他の型へのバインドのサポートを追加することもできます。\n\nAzure Storageに対するバインドのしくみの詳細については、<a href=\"https://blogs.msdn.com/b/jmstall/archive/2014/02/18/azure-storage-bindings-part-1-blobs.aspx\">BLOB</a><b>、</b><a href=\"https://blogs.msdn.com/b/jmstall/archive/2014/02/18/azure-storage-bindings-part-2-queues.aspx\">キュー</a>、<b></b><a href=\"https://blogs.msdn.com/b/jmstall/archive/2014/03/06/azure-storage-bindings-part-3-tables.aspx\">およびテーブル</a>に関する記事を参照してください\n<h4>Hosting</h4>\nJobHost は、プログラムに含まれる関数を認識する実行コンテナーです。 JobHost オブジェクト ( <a href=\"https://www.nuget.org/packages/Microsoft.Azure.Jobs\">Microsoft.Azure.Jobs</a> に存在) は、バインドを読み取り、トリガーをリッスンし、関数を呼び出します。 次の例では、JobHost のインスタンスを作成し、RunAndBlock() を呼び出します。これにより、JobHost は、このホストで定義した関数のすべてのトリガーをリッスンします。\n<pre class=\"prettyprint\">static void Main(string[] args)\n{\n    JobHost host = new JobHost();\n    host.RunAndBlock();\n}</pre>\n&nbsp;\n<h4>Web ジョブを監視するためのダッシュボード。</h4>\nWeb ジョブ (<b><i>任意の言語と任意の型で記述</i></b>) が実行されると、リアルタイムで監視できます。 それらの状態 (実行中、停止、正常に完了)、最終実行時刻、および特定の実行のログを確認できます。 次のスクリーンショットは、Web サイトで実行されているすべての Web ジョブのビューを示しています。\n\n<img style=\"border: 0px;\" title=\"Azure WebJobs ベータ版\" alt=\"Azure WebJobs Beta\" src=\"https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/AllTypesOfWebJobs.png\" width=\"610\" height=\"308\" border=\"0\" />\n<h4>関数の実行の詳細</h4>\nこの \"ImageProcessing\" WebJob の特定の実行を監視する場合は、次のようなプログラム内の関数に関する呼び出しの詳細を表示できます。\n<ul>\n<ul>\n <li>\n<div>この関数のパラメーター。</div></li>\n <li>\n<div>関数の実行にかかった時間。</div></li>\n <li>\n<div>BLOB からの読み取りにかかった時間と、読み取り/書き込まれたバイト数。</div></li>\n</ul>\n</ul>\n<img style=\"border: 0px;\" title=\"Azure WebJobs ベータ版\" alt=\"Azure WebJobs Beta\" src=\"https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/new_details.png\" width=\"610\" height=\"478\" border=\"0\" />\n\nこの ImageProcessing WebJob のコードを次に示します。\n<pre class=\"prettyprint\">public class ImageProcessing\n{\n    static void Main(string[] args)\n    {\n        JobHost host = new JobHost();\n        host.RunAndBlock();\n    }\n\n    public static void Resize(\n        [BlobTrigger(@\"images-input/{name}\")] WebImage input,\n        [Blob(@\"images2-output/{name}\")] out WebImage output)\n    {\n        var width = 80;\n        var height = 80;\n        output = input.Resize(width, height);\n    }\n\n    public static void WaterMark(\n        [BlobTrigger(@\"images2-output/{name}\")] WebImage input,\n        [Blob(@\"image2-output/{name}\")] out WebImage output)\n    {\n        output = input.AddTextWatermark(\"WebJobs\", fontSize: 6);\n    }\n}\n\npublic class WebImageBinder : ICloudBlobStreamBinder&lt;WebImage&gt;\n{\n    public WebImage ReadFromStream(System.IO.Stream input)\n    {\n        return new WebImage(input);\n    }\n\n    public void WriteToStream(WebImage result, System.IO.Stream output)\n    {\n        var bytes = result.GetBytes();\n        output.Write(bytes, 0, bytes.Length);\n    }\n}</pre>\n&nbsp;\n<h4>再生の呼び出し&amp;</h4>\n上記の例では、何らかの理由で Resize 関数が失敗した場合は、新しいイメージと Replay Resize 関数をアップロードできます。この関数によって実行チェーンがトリガーされ、Watermark 関数も呼び出されます。 これは、関数を連結するための複雑なグラフがある場合に、問題を診断してデバッグするのに役立ちます。 ダッシュボードから関数を実行することもできます。\n<h4>関数の因果関係</h4>\n上の例では、Resize 関数が BLOB に書き込むと、WaterMark 関数がトリガーされます。 ダッシュボードには、関数間のこの因果関係が表示されます。 新しい入力が検出されるとトリガーされる多数の関数をチェーンしている場合は、この因果関係グラフを確認すると便利です。\n<h4>BLOB の検索</h4>\n[BLOB の検索] をクリックすると、その BLOB に何が起こったかについての情報を取得できます。 たとえば、ImageProcessing の場合、Resize 関数が実行されたために BLOB が書き込まれたとします。 検索 BLOB の詳細については、この <a href=\"https://blogs.msdn.com/b/jmstall/archive/2014/02/19/who-wrote-that-blob.aspx\">投稿</a>を参照してください。\n<h3>サンプル</h3>\nWebJobs SDK のサンプルは、〘 <a href=\"https://aspnet.codeplex.com/SourceControl/latest#Samples/AzureWebJobs/ReadMe.txt\">https://aspnet.codeplex.com/SourceControl/latest#Samples/AzureWebJobs/ReadMe.txt</a>\n<ul>\n<ul>\n <li>\n<div>BLOB、テーブル、キュー、およびService Busに対してトリガーとバインドを使用する方法のサンプルを見つけることができます。</div></li>\n <li>\n<div>PhluffyShuffy というサンプルがあります。これは、顧客が画像をアップロードできる画像処理 Web サイトであり、Blob Storage からそれらの画像を処理する関数をトリガーします。</div></li>\n</ul>\n</ul>\n<h3>ドキュメント</h3>\n<ul>\n<ul>\n <li><a href=\"https://www.asp.net/aspnet/overview/developing-apps-with-windows-azure/getting-started-with-windows-azure-webjobs\">チュートリアル: Windows Azure WebJobs SDK を使用してはじめにする</a></li>\n <li><a href=\"https://channel9.msdn.com/Shows/Web+Camps+TV/Making-Your-Jobs-Easier-With-Windows-Azure-WebJobs-SDK\">Windows Azure WebJobs SDK を使用してジョブを簡単にする方法に関する Channel 9 ビデオ</a></li>\n <li><a href=\"https://www.hanselman.com/blog/IntroducingWindowsAzureWebJobs.aspx\">Scott Hanselman による WebJobs と SDK の概要</a></li>\n <li><a href=\"https://twitter.com/bradygaster\">Brady Gaster</a> によって Web ジョブと ASP.NET を使用して構築された Web サイト モニター</li>\n <li><a href=\"https://www.asp.net/aspnet/overview/developing-apps-with-windows-azure/azure-webjobs-recommended-resources\">Azure WebJobs - 推奨されるリソース </a></li>\n</ul>\n</ul>\n<h3>SDK を使用した WebJobs のデプロイ</h3>\nWebJobs ポータル ページを使用してプログラムをアップロードしない場合は、FTP、Git、または Web Deploy を使用できます。 詳細については、「WebJobs を使用して .NET コンソール アプリを Azure にデプロイする Azure WebJobs と Git をデプロイする方法」を参照してください。\n\nWeb ジョブを Web サイトと共にデプロイする場合は、次のVisual Studio<a href=\"https://visualstudiogallery.msdn.microsoft.com/f4824551-2660-4afa-aba1-1fcc1673c3d0\">拡張機能</a>を確認してください。\n<h3>0.2.0-alpha2 から 0.3.0-beta に移行するときの既知の問題</h3>\n<h4>新しい API に一致するように名前空間を更新する</h4>\n&nbsp;\n<table width=\"413\" border=\"1\" cellspacing=\"0\" cellpadding=\"2\">\n<tbody>\n<tr>\n<td valign=\"top\" width=\"234\"><b>変更前</b></td>\n<td valign=\"top\" width=\"177\"><b>変更後</b></td>\n</tr>\n<tr>\n<td valign=\"top\" width=\"234\">Microsoft.WindowsAzure.Jobs.Host</td>\n<td valign=\"top\" width=\"177\">Microsoft.Azure.Jobs</td>\n</tr>\n<tr>\n<td valign=\"top\" width=\"234\">Microsoft.WindowsAzure.Jobs</td>\n<td valign=\"top\" width=\"177\">Microsoft.Azure.Jobs.Core</td>\n</tr>\n</tbody>\n</table>\n<h4>connectionString の名前を更新する</h4>\nconnectionStrings を設定する場合は、Web ジョブのapp.configまたは Microsoft Azure Web サイトの [タブの構成] で、0.3.0 ベータ版の名前と一致するように connectionString の名前を変更する必要があります\n<table width=\"401\" border=\"1\" cellspacing=\"0\" cellpadding=\"2\">\n<tbody>\n<tr>\n<td valign=\"top\" width=\"200\"><b>変更前</b></td>\n<td valign=\"top\" width=\"199\"><b>変更後</b></td>\n</tr>\n<tr>\n<td valign=\"top\" width=\"200\">AzureJobsData</td>\n<td valign=\"top\" width=\"199\">AzureJobsStorage</td>\n</tr>\n<tr>\n<td valign=\"top\" width=\"200\">AzureJobsRuntime</td>\n<td valign=\"top\" width=\"200\">AzureJobsDashboard</td>\n</tr>\n</tbody>\n</table>\n<h4>テーブルのバインド</h4>\nこのリリースでは、Azure Table Storageの IDictionaryTuple&lt;、Tuple&gt; バインドのサポートが廃止されました。 CloudTableEntity を使用してテーブルにバインドできます。 次の例は、Azure Tables へのバインドの違いと方法を示しています。 より完全な例については、 <a href=\"https://aspnet.codeplex.com/SourceControl/latest#Samples/AzureWebJobs/BasicSamples/TableOperations/Program.cs\">サンプル サイトの表の使用方法を</a>参照してください。\n\n<strong>以前は</strong>\n<pre class=\"prettyprint\">public static void CountAndSplitInWords(\n    [QueueInput] string textInput, \n    [Table] IDictionary&lt;Tuple&lt;string, string&gt;, WordCount&gt; words) \n{ \n}</pre>\n<strong>後</strong>\n<pre class=\"prettyprint\">public static void CountAndSplitInWords(\n    [QueueTrigger(\"textInput\")] string textInput, \n    [Table(\"words\")] CloudTable wordsTable) \n{ \n}</pre>\n&nbsp;\n<h4>ログ記録</h4>\nログ情報を書き込む場合は、Console.Write() を使用できます。 これらのログは、Web ジョブの詳細を表示しているときにダッシュボードに表示されます\n\n関数レベルのログ記録を実行する場合は、TextWriter を使用して情報を Blob Storage に記録する必要があります。 関数の実行の詳細が表示されると、これらのログがダッシュボードに表示されます。\n<pre class=\"prettyprint\">public static void Logging(\n    [QueueTrigger(\"inputqueue\")] string inputText,\n    TextWriter log)\n{\n   log.WriteLine(inputText);\n}</pre>\n&nbsp;\n<h4>ダッシュボードは、0.3.0 ベータ版でデプロイされた WebJobs でのみ機能します</h4>\n0.2.0-alpha2 の SDK を使用して WebJob をデプロイしていて、ダッシュボードにアクセスして WebJob のログを表示すると、\"Host not running\" に関する警告が表示されます。 これは、このリリースの一環として、ダッシュボードの新しいバージョンがすべての Azure Websites にデプロイされるために発生します。 新しいダッシュボードには、0.2.0-alpha2 と互換性のないプロトコルの変更がいくつかあります。 このエラーを回避するには、0.3.0-beta NuGet パッケージを使用するように WebJob を更新し、WebJob を再デプロイしてください。\n<h3>フィードバックを送信し、ヘルプを表示する</h3>\nMicrosoft Azure <a href=\"https://azure.microsoft.com/en-us/documentation/articles/web-sites-create-web-jobs/\">Web</a> サイトと Microsoft Azure WebJobs SDK の Web ジョブ機能はプレビュー段階です。 フィードバックは、今後のバージョンに加えた変更で考慮されます。\n\nチュートリアルに直接関連しない質問がある場合は、<a href=\"https://azure.microsoft.com/en-us/support/forums/\">Azure フォーラム</a>、<a href=\"https://forums.asp.net/1247.aspx\">ASP.NET フォーラム</a>、または <a href=\"https://stackoverflow.com/\">StackOverflow.com</a> に投稿できます。 Twitter <a href=\"https://twitter.com/search?q=AzureWebJobs\">には#AzureWebJobs</a> を使用し、StackOverflow にはタグ Azure-WebJobsSDKを使用します。"
}