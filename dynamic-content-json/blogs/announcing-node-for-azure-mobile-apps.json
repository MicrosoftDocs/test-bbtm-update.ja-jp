{
    "Slug": "announcing-node-for-azure-mobile-apps",
    "Title": "Azure Mobile Apps Node.jsサポートのお知らせ",
    "Summary": "Announcing the release of a Node SDK for Azure Mobile Apps which will enable you to build and run mobile backends using Node.js on App Service, as well as add push notifications, mobile auth, offline sync and other mobile features and backend APIs to any Node.js app running on App Service.",
    "Content": "<p>先月、開発者が .NET でモバイル バックエンド API をすばやく構築し、既存の ASP.NET Web アプリにモバイル機能を追加し、Web ページを .NET モバイル バックエンドに追加できるようにする、Azure App Service の Mobile Apps 機能の大幅な更新を<a href=\"https://azure.microsoft.com/en-us/blog/azure-mobile-apps-august-2015-update/\">発表</a>しました。</p>\n\n<p>現在、Azure Mobile Apps 用の Node SDK をリリースし、Node.js アプリと同様のエクスペリエンスを拡張しています。 これにより、App ServiceでNode.jsを使用してモバイル バックエンドを構築して実行できるほか、App Serviceで実行されている任意のNode.js アプリにプッシュ通知、モバイル認証、オフライン同期、その他のモバイル機能とバックエンド API を追加できます。</p>\n\n<p>この SDK は MIT ライセンスの下でオープン ソースとしてリリースされており、 <a href=\"https://github.com/Azure/azure-mobile-apps-node/blob/master/contributor.md\">コミュニティからの投稿を</a>歓迎します。</p>\n\n<h1 id=\"getting-started-with-node-and-azure-mobile-apps\">ノードと Azure Mobile Apps の概要</h1>\n\n<p>作業を進めるには、readme に含まれている簡単で簡単な <a href=\"https://github.com/Azure/azure-mobile-apps-node#quickstart\">クイック スタート</a> の手順に従います。</p>\n\n<ol>\n <li>\n <p>ここで説明する手順を使用して、Azure モバイル アプリを&nbsp;作成 <a href=\"https://azure.microsoft.com/en-us/documentation/articles/app-service-mobile-dotnet-backend-ios-get-started-preview/#create-a-new-azure-mobile-app-backend\">します</a>。 モバイル アプリエクスペリエンスは API、モバイル、Web Appsで利用できるため、Web アプリまたは API アプリを使用することもできます。</p>\n </li>\n <li>\n <p>新しいディレクトリを作成し、git を初期化し、npm を初期化します。</p>\n\n <pre class=\"prettyprint\">\n<code>mkdir quickstart\ngit init\nnpm init\n</code></pre>\n </li>\n <li>\n <p>(npm を使用して) azure-mobile-apps と express パッケージをインストールします。</p>\n\n <pre class=\"prettyprint\">\n<code>npm install express azure/azure-mobile-apps-node --save\n</code></pre>\n </li>\n <li>\n <p>server.js ファイルを作成し、次のコードをファイルに追加します。</p>\n\n <pre class=\"prettyprint\">\n<code>var app = require(&#39;express&#39;)(); // Create an instance of an Express app\nvar mobileApp = require(&#39;azure-mobile-apps&#39;)(); // Create an instance of a Mobile App with default settings\n\nmobileApp.tables.add(&#39;TodoItem&#39;); // Create a Table for &#39;TodoItem&#39; with default settings\n\nmobileApp.attach(app); // Attach the mobileApp to express\napp.listen(process.env.PORT || 3000);\n</code></pre>\n </li>\n <li>\n <p>を実行してプロジェクトをローカルで実行する <code>node server.js.</code></p>\n </li>\n <li>\n <p>プロジェクトをリモートとして追加し、変更をプッシュして、既存の Azure Mobile App に発行します。</p>\n\n <pre class=\"prettyprint\">\n<code>git remote add azure https://{user}@{sitename}.scm.azurewebsites.net:443/{sitename}.git\n\ngit add package.json server.js\n\ngit commit -m &#39;Quickstart created&#39;\n\ngit push azure master\n</code></pre>\n </li>\n</ol>\n\n<p>手順 4 から 5 では、 <a href=\"https://github.com/Azure/azure-mobile-services-quickstarts\">クライアント &amp; サーバーのクイック スタート</a> にあるクライアントのいずれかを使用してテストできます。 ローカルでテストするには、クライアントをポイントするように設定します <code>https://localhost:3000</code>。</p>\n\n<p><a href=\"https://expressjs.com/\">express</a> を使用してサイトを実行&#39;気づきましたか? これは、&nbsp;Web アプリと Mobile Apps の 1 つのまとまりのあるエクスペリエンスの利点の 1 つの例です。 つまり、 <a href=\"https://azure.microsoft.com/en-us/documentation/articles/web-sites-nodejs-develop-deploy-mac/\">Web アプリのようにデプロイ</a> され、 <a href=\"https://azure.microsoft.com/en-us/documentation/articles/web-sites-staged-publishing/\">デプロイ スロット</a> や <a href=\"https://azure.microsoft.com/en-us/documentation/articles/web-sites-create-web-jobs/\">WebJobs</a> などの機能を使用できます。</p>\n\n<h2 id=\"using-mobile-apps-tables\">Azure Mobile Apps テーブルの使用</h2>\n\n<p>モバイル アプリ テーブルは、Azure Mobile Apps クライアントがデータ&#39;アプリケーションにアクセスできるようにする、データ ストアの上のレイヤーです。 現在、運用アプリケーションのAzure SQL DB とSQL Serverをサポートしています。 &#39;には、運用環境では使用&#39;必要のないメモリ内ストアも含まれていますが、デモや開発の目的には便利です。 最初の要求でモバイル アプリにテーブルを追加すると、SDK によってテーブルが作成されます (SQL Serverの場合)。 テーブルには、ID やタイムスタンプなど、SDK の重要な列がいくつか含まれます。 また、テーブル定義で指定された列も含まれます。動的スキーマを有効にしている場合は、本文に含まれる列も追加されますが、テーブルには既に追加されません。</p>\n\n<p>1 行のコードでテーブルを追加できるのはかなりクールですが、CRUD 操作をカスタマイズする場合はどうなりますか? 簡単にするための便利なテーブル構成オブジェクトがあります。 これをディレクトリ内の別のファイルに <code>./tables</code> 定義することをお勧めします。そのため、TodoItem.js ファイルを作成&#39;。</p>\n\n<pre class=\"prettyprint\">\n<code>// TodoItem.js\nvar todoTable = require(&#39;azure-mobile-apps&#39;).table(&#39;TodoItem&#39;);\n// Export our table\nmodule.exports = todoTable;\n//todoTable.columns = {&quot;text&quot;:&quot;string&quot;, &quot;complete&quot;:&quot;boolean&quot;} //Dynamic schema will create these for us. It&#39;s on by default.\ntodoTable.dynamicSchema = true; // this is the default setting\n\ntodoTable.read(function(context){\n  return context.execute();\n});\n</code></pre>\n\n<p>insert、read、update、delete という名前の&nbsp;対応するメソッドを使用したクラシック CRUD 操作のサポートがあります。 テーブル操作の詳細については、API ドキュメントを参照してください。</p>\n\n<p>コンテキスト オブジェクトは、操作に応じて異なるプロパティを公開します。読み取りでは、クエリ オブジェクトを公開し、項目オブジェクトを挿入および更新して公開します。 これにより、CRUD 操作の動作を既定から変更できます。</p>\n\n<pre class=\"prettyprint\">\n<code>// TodoItem.js continued\n// Attach a user id to the item that was inserted\ntable.insert(function (context) {\n  context.item.user = context.user.id;\n  return context.execute();\n});\n\n// Only return items where the user id matches the current user\ntable.read(function (context) {\n  context.query.where({\n    user: context.user.id\n  });\n  return context.execute();\n});\n</code></pre>\n\n<p>テーブル (およびディレクトリ内の他のテーブル) を<code>./tables</code>含めるには<code>TodoItem</code>、server.js ファイルにインポート行を追加するだけです。</p>\n\n<pre class=\"prettyprint\">\n<code>// server.js\nvar app = require(&#39;express&#39;)(); // Create an instance of an Express app\nvar mobileApp = require(&#39;azure-mobile-apps&#39;)(); // Create an instance of a Mobile App with default settings\n\nmobileApp.tables.import(&#39;./tables&#39;); // Import tables from &#39;./tables&#39;\n\nmobileApp.attach(app); // Attach the mobileApp to express\napp.listen(process.env.PORT || 3000);\n</code></pre>\n\n<p>アプリの設定でデータベースを指定&#39;場合 (ポータルで役立ちます)、運用環境では使用しないメモリ内ストアが使用されます。 現時点では、SDK はSQL Serverのみをサポートしていますが、他のオプションを調査&#39;し、この分野の投稿に対するオープン&#39;。 ローカルでSQLを有効にするために<a href=\"https://github.com/Azure/azure-mobile-apps-node\">ローカル環境変数を設定する方法については</a>、GitHub ページを参照してください。</p>\n\n<h2 id=\"using-auth-with-mobile-apps-node\">Azure Mobile Appsand&nbsp; ノードでの認証の使用</h2>\n\n<p>次の質問は、おそらくそのオブジェクトに関連しています <code>context.user</code> 。 それはどのようにそこに着くのですか? Azure Mobile Apps 統合認証機能の一部&#39;。 認証を設定する方法の詳細については、認証に関する<a href=\"https://azure.microsoft.com/en-us/documentation/articles/app-service-mobile-dotnet-backend-ios-get-started-users-preview/\">チュートリアルではじめに</a>に従ってください。 &#39;したら、次のコードを使用して、特定のテーブル アクションの認証を要求できます。</p>\n\n<pre class=\"prettyprint\">\n<code>table.insert.authorise = true;\n</code></pre>\n\n<p>テーブル全体をセキュリティで保護する場合は、次を使用します。</p>\n\n<pre class=\"prettyprint\">\n<code>table.authorise = true;\n</code></pre>\n\n<p>ローカルで動作するように認証を設定するには、後で説明&#39;いくつかの追加の手順が必要です。</p>\n\n<h1 id=\"feedback-and-thanks\">フィードバックと感謝</h1>\n\n<p>特別な感謝は、このリリースの前に早期のフィードバックで私たちを助けたすべてのコミュニティメンバー&nbsp;に出て行きます。 microsoft&#39;、製品または製品の使用経験に関するフィードバックをすべての&nbsp;ユーザーに提供するようお勧めします。 バグや新機能<a href=\"https://github.com/Azure/azure-mobile-apps-node/blob/master/contributor.md#submitting-an-issue\">については、</a>GitHubに問題を残してお気軽にお問い合わせください。</p>\n\n<p>プッシュは近日公開予定で、リリース前に SDK を具体化し続けているため、ブログやドキュメントも追加される予定&#39;。 だから目を離して、いくつかのアプリの構築を開始してください!</p>\n\n<p>その他のニュースと情報:</p>\n\n<ul>\n <li><a href=\"https://twitter.com/azuremobile\">フォロー @AzureMobile</a></li>\n <li>StackOverflow に関する質問</li>\n</ul>\n"
}