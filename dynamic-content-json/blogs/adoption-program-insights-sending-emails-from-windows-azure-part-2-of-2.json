{
    "Slug": "adoption-program-insights-sending-emails-from-windows-azure-part-2-of-2",
    "Title": "導入プログラムのインサイト: Windows Azure からの電子メールの送信 (パート 2/2)",
    "Summary": "The  Adoption Program Insights series describes experiences of Microsoft Services  consultants involved in the Windows Azure Technical Adoption Program assisting customers deploy solutions on the…",
    "Content": "<p><i>導入プログラム インサイト シリーズでは、Windows Azure 技術導入プログラムに関与する Microsoft Services コンサルタント</i><i></i>が、<i>Windows Azure プラットフォームにソリューションをデプロイするためのエクスペリエンスについて説明します。この投稿はノーマン・セケイラ、パトリック・バトラー・モンテルデ、トム・ホランダーです。</i></p>  <p>これは、Azure アプリケーションから電子メールを送信するためのオプションを説明する 2 部<a target=\"_blank\" href=\"https://azure.microsoft.com/\">構成のシリーズWindows</a>第 2 部です。 パート 1 では、カスタムオンプレミス電子メール フォワーダー サービスを使用して、Windows Azure アプリケーションに代わってメールを送信するパターンについて説明しました。 この記事では、電子メール サーバーの Web サービス API を使用して、Windows Azure アプリケーションから直接メッセージを受け入れる方法について説明します。</p>  <h2>パターン 2: 電子メール サーバーの Web サービス API の使用</h2>  <p>このパターンでは、Exchange Server 2007 または Exchange Server 2010 の Web サービス機能を利用して、Windows Azure プラットフォームから直接電子メールを送信します。 この方法は、Web サービス インターフェイスを提供する他の電子メール サーバーでも使用できますが、この投稿では、Microsoft Exchange Serverの実装についてのみ説明します。</p>  <p>Web ロールと worker ロールの両方が HTTP または HTTPS 経由でインターネット リソースへの送信接続を行うことができるため、Web/worker ロールは、Exchange Serverでホストされている Web サービスと通信できます。 Exchange Server 2007 と Exchange Server 2010 の両方で、オートメーションのインターフェイスとして EWS (Exchange Web サービス) がサポートされます。 Exchange Web サービスには、電子メールの送信、添付ファイルの追加、ユーザーのメールボックスの確認、代理人アクセスの構成など、最も一般的なメールオートメーション関連のシナリオをサポートする豊富な機能セットが用意されています。EWS でサポートされている機能の完全な一覧については、<a target=\"_blank\" href=\"https://msdn.microsoft.com/en-us/library/dd877045.aspx\">この MSDN の記事</a>を参照してください。</p>  <p>組織がオンプレミスの電子メール サーバーではなくExchange Onlineを使用することを選択した場合、Standard と専用Exchange Onlineの Exchange Online両方が EWS サポートを提供するため、コードを変更することなく、Windows Azure から同じ EWS ベースのアプローチを使用できます。 Exchange Onlineは、Microsoft が提供するメッセージングおよびコラボレーション ソリューションのセットである Microsoft Business Productivity Online Suite (BPOS) の一部です。</p>  <p>次の図は、azure アプリケーションWindowsが EWS を利用して、その代わりに電子メールを送信する方法を示しています。</p>  <p><a target=\"_blank\" href=\"https://msdn.microsoft.com/en-us/library/dd877045.aspx\"><img src=\"https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/7802.EmailPt2Graphic1.png\" border=\"0\"></a></p>  <h3>サンプル コード</h3>  <p><a target=\"_blank\" href=\"https://www.microsoft.com/downloads/details.aspx?displaylang=en&amp;FamilyID=c3342fb3-fbcc-4127-becf-872c746840e1\">EWS マネージ API</a> には、Exchange Web サービスと対話するための厳密に型指定された .NET インターフェイスが用意されています。 Exchange Web Services Managed API がインストールされたら、最初に、Visual Studioの既存の Windows Azure プロジェクトのMicrosoft.Exchange.WebServices.dllへの参照を追加します。</p>  <p><a target=\"_blank\" href=\"https://www.microsoft.com/downloads/en/details.aspx?displaylang=en&amp;FamilyID=c3342fb3-fbcc-4127-becf-872c746840e1\"><img src=\"https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/4152.EmailPt2Graphic2.png\" border=\"0\"></a></p>  <h3>テスト サーバーに対する EWS マネージ API の使用</h3>  <p>テスト サーバーは自己署名証明書と共に展開され、Microsoft .NET Frameworkによって信頼されません。 テスト サーバーに対して EWS マネージ API を使用すると、次のエラーが発生する可能性があります。</p>  <p><a target=\"_blank\" href=\"https://www.microsoft.com/downloads/en/details.aspx?displaylang=en&amp;FamilyID=c3342fb3-fbcc-4127-becf-872c746840e1\"><img src=\"https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/0361.EmailPt2Graphic3.png\" border=\"0\"></a></p>  <p>この問題を解決するには、テスト シナリオで証明書の検証を無効にするコードを記述します。 このコードが運用環境のシナリオで使用されないようにするには、#if DEBUG または同様の手法を使用する必要があります。  </p>  <p>System.Net.Security を使用する。<br>  System.Security.Cryptography.X509Certificates を使用する。</p>  <p>証明書コールバックをフックします。<br>  System.Net.ServicePointManager.ServerCertificateValidationCallback =<br>  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; delegate(<br>  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;オブジェクト obj、<br>  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;X509Certificate 証明書、<br>  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;X509Chain チェーン,<br>  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;SslPolicyErrors エラー)<br>  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {<br>  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;証明書を検証し、必要に応じて true または false を返します。<br>  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;常に true を返すことは良い方法ではないことに注意してください。<br>  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;すべての証明書は信頼されている必要があります。<br>  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; };</p>  <h3>ExchangeService オブジェクトのインスタンスの作成</h3>  <p>次に、 <b>ExchangeService</b><b> </b>インスタンスを作成して構成して、サーバーに接続します。 <b>自動検出</b>を使用して、電子メール アドレスに基づいてサービスの URL を決定します。</p>  <p>ExchangeService サービス = 新しい ExchangeService(ExchangeVersion.Exchange2007_SP1);</p>  <p>Azure 構成から資格情報の設定を取得する</p>  <p>string userName = RoleEnvironment.GetConfigurationSettingValue(\"EWSUserName\");</p>  <p>string password = RoleEnvironment.GetConfigurationSettingValue(\"EWSPassword\");</p>  <p>string domain = RoleEnvironment.GetConfigurationSettingValue(\"EWSDomain\");</p>  <p>サービス。Credentials = new WebCredentials(userName, password, domain);<b></b></p>  <p>EWS URL が不明な場合は、EWS マネージ API によって EWS URL を自動的に派生することもできます </p>  <p>Exchange サーバーでホストされているメールボックスの電子メール アドレスを使用する</p>  <p>string emailAddress = RoleEnvironment.GetConfigurationSettingValue(\"emailAddress\");</p>  <p>サービス。AutodiscoverUrl(emailAddress); </p>  <h3>電子メールの送信</h3>  <p><b>ExchangeService</b> オブジェクトのインスタンスを作成して初期化すると、メールの送受信に使用できます。</p>  <p>EmailMessage メッセージ = 新しい EmailMessage(service);</p>  <p>メッセージ。ToRecipients.Add(\"someone@server.com\");</p>  <p>メッセージ。From = new EmailAddress(\"someone@azureapp.com\");</p>  <p>メッセージ。件名 = \"Windows Azure からのメールの送信\";</p>  <p>メッセージ。Body = new MessageBody(BodyType.HTML, \"This is the body of the mail sent out from Windows Azure environment\");</p>  <p>添付ファイルを送信するためのコード。</p>  <p>AddFileAttachment メソッドは、パラメーターとして 'display name' と 'byte array' を受け取ります。</p>  <p>メッセージ。Attachments.AddFileAttachment(\"Attachment1\", attachment1);</p>  <p>添付ファイルをメールの本文から参照する必要がある場合は、次のプロパティ 'ContentId' が使用されます</p>  <p>メッセージ。Attachments[0]。ContentId = \"Attachment1\";</p>  <p>次のメソッドは、メールを送信し、[送信済みアイテム] フォルダーにコピーを保存します。</p>  <p>メッセージ。SendAndSaveCopy();</p>  <h3>アーキテクチャに関する考慮事項<br></h3>  <p>ソリューションのアーキテクチャへの影響を理解することが重要です。 電子メール サーバー Web サービス API のアプローチに関する考慮事項の一部を次に示します。</p>  <ul class=\"unIndentedList\">  <li>  <b>コスト：</b>Windows Azure から EWS への送信データ フローでは、ソリューション全体に追加コストが発生します。 全体的なコストへの影響は、個々のソリューションでの電子メールの量と帯域幅の使用量によって異なります。このパターンを実装する前に慎重に検討する必要があります。</li>  <li>  <b>パフォーマンス： </b>大きな電子メールの添付ファイルは、EWS (オンプレミスまたはオンライン) を使用してExchange サーバーにシリアル化してダウンロードする必要があるため、パフォーマンスに影響を与える可能性があります。 これも慎重に検討する必要があります。</li>  </ul>  <h3>まとめ</h3>  <p>Windows Azure には独自のネイティブ SMTP サーバーは含まれていませんが、電子メールを送信するアプリケーションを構築するためのオプションがいくつかあります。 オンプレミスの電子メール サーバーがある場合は、Windows Azure Storage を使用してカスタム電子メール フォワーダー サービスにメッセージを送信し、それを電子メール サーバーに転送できます。 電子メール サーバーが Web サービス API を公開している場合は、これを使用して、カスタム サービスを使用する代わりに直接通信できます。 また、SMTP サーバー (商用サービスを含む) に直接アクセスできる場合は、そのサーバーを使用するように Windows Azure アプリを構成できます。</p>  <p>最後のコメントの 1 つ - これらの方法のどれを使用する場合でも、アプリケーションで非常に多くの電子メール (ユーザー登録など) を送信する必要がある場合、電子メール サーバーが電子メールの量を制限するように構成されている場合や、受信者のサーバーがスパムとしてメッセージを拒否する可能性がある場合に問題が発生する可能性があることに注意してください。 この場合、メッセージが最終的な宛先になるように、電子メール サーバーを慎重に選択または構成する必要があります。 </p>  <p><iframe src=\"https://www.facebook.com/plugins/like.php?href=;layout=box_count&amp;show_faces=false&amp;width=300&amp;action=like&amp;font=segoe+ui&amp;colorscheme=light&amp;height=50\" style=\"overflow: hidden; width: 300px; height: 50px;\" frameborder=\"0\" scrolling=\"no\"></iframe><br><a data-url=\"\" data-count=\"horizontal\" data-via=\"Windowsazure\" href=\"https://twitter.com/share\" class=\"twitter-share-button\">つぶやき</a>  <script src=\"https://platform.twitter.com/widgets.js\" type=\"text/javascript\"></script>  </p>"
}