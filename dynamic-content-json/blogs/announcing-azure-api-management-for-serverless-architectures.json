{
    "Slug": "announcing-azure-api-management-for-serverless-architectures",
    "Title": "サーバーレス アーキテクチャの Azure API Managementの発表",
    "Summary": "Azure API Management is a fully managed service that enables customers to publish, secure, transform, maintain, and monitor APIs. ",
    "Content": "<p><a href=\"https://azure.microsoft.com/en-us/services/api-management/\" target=\"_blank\">Azure API Management</a> は、お客様が API の発行、セキュリティ保護、変換、保守、監視を行えるフル マネージド サービスです。 Azure portalを数回クリックするだけで、外部アプリケーションと内部アプリケーションが Azure 上で実行されているカスタムビルドバックエンドサービスによって実装されたデータまたはビジネス ロジックにアクセスできるフロント ドア&rdquo;として&ldquo;機能する API faade&ccedil; を作成App ServiceやAzure Kubernetes Service、または Azure の外部、プライベート データセンターまたはオンプレミスでホストされます。 API Management では、要求の認証と承認、レート制限とクォータの適用、要求と応答の変換、ログとトレース、API バージョン管理など、API 呼び出しの仲介に関連するすべてのタスクを処理します。</p>\n\n<p>今日から、Azure のお客様は、新しい API Management インスタンスを作成するときに、新しい従量課金レベルを選択できます。 この従量課金レベルは、基本的にサーバーレスの原則に基づいて設計および実装されたAPI Managementの一種であり、より多くのお客様が API 管理の利点を享受でき、<a href=\"https://azure.microsoft.com/en-us/solutions/serverless/\" target=\"_blank\">サーバーレス</a> テクノロジを使用して構築された新しい種類のアプリケーションに適しています。</p>\n\n<p>APIM 従量課金レベルでは、お客様から聞いてきた次の主要なユース ケースが有効になります。</p>\n\n<ul>\n <li>Functions や Logic Apps などのサーバーレス テクノロジを使用して実装されるマイクロサービス用の API ゲートウェイ。</li>\n <li>API ゲートウェイは、Service Bus キューやトピック、Azure Storage などのサーバーレス Azure リソースに対して簡素化され、セキュリティで保護された faade&ccedil; を提供します。</li>\n <li>API トラフィックの急増は大きいが、ほとんどの場合は低いままである従来のバックエンド用の API ゲートウェイ。</li>\n</ul>\n\n<p>上記のいずれかのユース ケースが関連していると思われる場合は、新しいレベルを試してみて、ご自分の考えをお知らせください。</p>\n\n<h2>階層の比較</h2>\n\n<p>新しいレベルの本質を理解するために、既存のレベルと比較してみましょう&rsquo;。</p>\n\n<p>API Management 2 つのレベル&ndash;だけで起動開発者と標準。 時間の経過と共に、エンタープライズのお客様向けのハイエンド機能を備えた プレミアム レベルと、エントリ レベルの運用レベルとして Basic レベルを追加しました。 これらすべてのレベルには共通のアーキテクチャがあり、各API Managementサービス インスタンスには、排他的に使用するために予約されたリソースのセットが割り当てられます。 セキュリティの分離、すぐに使用可能な容量、ノイズの多い近隣からの保護は、このアプローチの最大の利点の 1 つです。 ただし、比較的高いプロビジョニングとスケーリングの待機時間と非消費ベースの価格など、いくつかの副作用が発生しました。これは、サーバーレス アプリケーション モデルに基づく新しい種類のソリューションには適していません&rsquo;。</p>\n\n<p>従量課金レベルでは、前のレベルと同じ基になるサービス コンポーネントが使用されますが、動的に割り当てられた共有リソースに基づいてまったく異なるアーキテクチャが採用されています。 そのため、サーバーレス コンピューティング モデル (管理するインフラストラクチャなし、アイドル容量なし、高可用性、自動スケーリング、使用量ベースの価格) と完全に整合しているため、サーバーレス リソースを API として公開するソリューションに特に適しています。 従量課金レベルを選択する際には、いくつかのトレードオフが関係します。 最も重要なのは、 <a href=\"https://aka.ms/apimfeatures\">キュレーションされた機能セット </a>と適用される使用制限です。 次の表は、階層間の比較の重要なポイントをまとめたものです。</p>\n\n<table border=\"1\" cellpadding=\"2\">\n <tbody>\n  <tr>\n   <td valign=\"top\"><strong>従量課金</strong><sup> NEW</sup></td>\n   <td valign=\"top\"><strong>開発者 </strong>|<strong> 基本的な</strong> |<strong> 標準 </strong>|<strong> プレミアム</strong></td>\n  </tr>\n  <tr>\n   <td valign=\"top\">プロビジョニングまたは管理するインフラストラクチャがない</td>\n   <td valign=\"top\">プロビジョニングまたは管理するインフラストラクチャがない</td>\n  </tr>\n  <tr>\n   <td valign=\"top\">組み込みの高可用性</td>\n   <td valign=\"top\">組み込みの高可用性 <sup>1</sup></td>\n  </tr>\n  <tr>\n   <td valign=\"top\">組み込みの自動スケーリング (0 まで)</td>\n   <td valign=\"top\">手動または外部の自動スケーリング <sup>2</sup></td>\n  </tr>\n  <tr>\n   <td valign=\"top\">従量課金ベースのマイクロ課金</td>\n   <td valign=\"top\">予約容量に基づく課金</td>\n  </tr>\n  <tr>\n   <td valign=\"top\">予約容量なし</td>\n   <td valign=\"top\">予約容量</td>\n  </tr>\n  <tr>\n   <td valign=\"top\">共有リソース</td>\n   <td valign=\"top\">専用リソース</td>\n  </tr>\n  <tr>\n   <td valign=\"top\">オンデマンド アクティブ化</td>\n   <td valign=\"top\">Always On</td>\n  </tr>\n  <tr>\n   <td valign=\"top\">キュレーションされた一連の機能</td>\n   <td valign=\"top\">機能の完全なセット <sup>3</sup></td>\n  </tr>\n  <tr>\n   <td valign=\"top\"><a href=\"https://aka.ms/apimlimits\" target=\"_blank\">Usage limits (使用状況の制限)</a></td>\n   <td valign=\"top\">管理されていない</td>\n  </tr>\n </tbody>\n</table>\n\n<p><sup>1</sup>Developer レベルを除く</p>\n\n<p><sup>2</sup>Standard レベルと プレミアム レベルで使用できる Azure Monitor 自動スケール</p>\n\n<p><sup>3</sup>いくつかの機能の可用性は、レベルによって異なります</p>\n\n<h2>新機能</h2>\n\n<p>従量課金レベルでのみ利用可能になった次の 2 つの新機能は、API Managementレベルの残りの部分で間もなく利用できるようになります。</p>\n\n<p><strong>Bring Your Own Cache (BYOC): </strong>応答キャッシュは、API の待機時間を改善し、API バックエンドの負荷を軽減するための効果的で広く使用されている手法です。 この機能を使用すると、<a href=\"https://aka.ms/apimbyoc\">外部にプロビジョニングされた Redis 互換のキャッシュを使用するように、</a>API Management サービスを構成できます。 キャッシュ構成の完全な制御、キャッシュ コンテンツを事前に読み込んで消去する機能、キャッシュ を使用する API Management サービス インスタンスとは別にキャッシュ サイズをスケーリングする機能が BYOC の主な利点です。 また、従量課金レベルで応答キャッシュを有効にする唯一のオプションでもあります。これは、他の層とは異なり、組み込みのキャッシュが付属していないため&rsquo;です。 統合キャッシュ構成と外部 <a href=\"https://docs.microsoft.com/en-us/azure/api-management/api-management-caching-policies#CachingPolicies\" target=\"_blank\">キャッシュ構成の</a> 両方でシームレスに動作するように、既存のキャッシュ ポリシーを変更しました。</p>\n\n<p><a href=\"https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/4359badb-d747-4ef9-aea3-05b57c7e9af1.png\"><img alt=\"Bring your own cache in the Consumption tier\" border=\"0\" height=\"568\" src=\"https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/76610001-5efe-4896-9caf-d1d91672af53.png\" style=\"border: 0px currentcolor; border-image: none; margin-right: auto; margin-left: auto; float: none; display: block; background-image: none;\" title=\"従量課金レベルで独自のキャッシュを使用する\" width=\"1233\"></a></p>\n\n<p><strong>より柔軟なサブスクリプション:</strong> <a href=\"https://aka.ms/apimsubscriptions\">サブスクリプション </a>は、基本的に API キーのセットの名前付きコンテナーです (厳密にはプライマリとセカンダリの 2 つ)。 以前は、サブスクリプションはユーザーが所有し、単一の API 製品スコープをサポートする必要がありました。 キー管理を効率化するために、いくつかの変更を行った&#39;。 これで、ユーザーに関連付けられていないスタンドアロン&quot; サブスクリプションが許可&quot;されるようになりました。 また、すべての API と 1 つの API という 2 つのサブスクリプション スコープも追加しました。 そのため、製品を作成して API (またはすべての API) を最初に追加しなくても、API (または API Management インスタンス内のすべての API) へのアクセスを許可するキーを作成するなど、&#39;できるようになりました。 さらに、各API Management インスタンスには不変のすべての API サブスクリプションが付属しています。これにより、テスト コンソール内で API のテストとデバッグがさらに簡単になります。</p>\n\n<p><a href=\"https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/a4e7db6f-410f-441b-bad3-ed9d4702937a.png\"><img alt=\"Subscription options\" border=\"0\" height=\"601\" src=\"https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/c5ca1752-3d5b-44f0-a369-167045cf1ef2.png\" style=\"border: 0px currentcolor; border-image: none; margin-right: auto; margin-left: auto; float: none; display: block; background-image: none;\" title=\"サブスクリプション オプション\" width=\"1430\"></a></p>\n\n<h2>残存作業時間</h2>\n\n<p>私たちは昨年の春から従量課金レベルに取り組んでおり、最終的にあなたとそれを共有することに非常に興奮しています。 ただし、実行を呼び出す前に、まだ残っている作業があります。 今後数か月間に確認する必要がある重要な機能と改善点を次に示します。</p>\n\n<ul>\n <li>カスタム ホスト名と証明書</li>\n <li>&quot;ワンクリックで&quot;上位のAPI Managementレベルにアップグレードする</li>\n <li>プロビジョニング時間の短縮 (&rsquo;以前のレベルと比較して既に超高速ですが、さらに改善したいと考えています)</li>\n <li>コールド スタート&rdquo;の待機時間が短縮されました &ldquo;(この領域ではまだ多くのことを行っていない&rsquo;ため、待機時間は必要な場所から遠く離れています)</li>\n <li>パブリック Azure リージョンでの広範な可用性 (API Managementが利用可能なすべてのリージョンで利用可能な従量課金レベルを完全に用意する予定です)</li>\n <li>&ldquo;サーバーレスリソースと PaaS リソースを追加するための API&rdquo; エクスペリエンスを追加する ([API の追加] ページに新しいタイルが表示される予定)</li>\n</ul>\n\n<h2>可用性</h2>\n\n<p>米国中北部、米国西部、西ヨーロッパ、北ヨーロッパ、東南アジア、オーストラリア東部リージョンで、 <a href=\"https://aka.ms/apimpricing\" target=\"_blank\">従量課金レベル</a> がプレビュー段階ですぐに利用可能になりました。</p>\n\n<p>新しいサービスを<a href=\"https://docs.microsoft.com/en-us/azure/api-management/get-started-create-service-instance\" target=\"_blank\">作成</a><a href=\"https://portal.azure.com/#create/Microsoft.ApiManagement\" target=\"_blank\">して</a>&ndash;、<a href=\"https://docs.microsoft.com/en-us/azure/api-management/import-function-app-as-api\" target=\"_blank\">関数</a>または<a href=\"https://docs.microsoft.com/en-us/azure/api-management/import-logic-app-as-api\" target=\"_blank\">ロジック アプリ</a>をインポートして API を発行する方法を確認してください。</p>\n\n<p>サーバーレス API を構築する方法の詳細については、こちらをご覧ください。 Azure Functionsの<a href=\"https://info.microsoft.com/ww-ondemand-build-serverless-api-with-nodejs.html\" target=\"_blank\">Node.jsを使用したサーバーレス API の構築に関する</a>ウェビナー&ldquo;をご覧ください。&rdquo;</p>\n\n<p><a href=\"https://aka.ms/apimso\" target=\"_blank\">ご感想をお聞かせください</a>。</p>\n\n<p style=\"text-align: center;\"><iframe allowfullscreen=\"\" frameborder=\"0\" height=\"270\" scrolling=\"no\" src=\"https://channel9.msdn.com/Shows/Azure-Friday/Azure-API-Management-for-serverless-applications/player?format=ny\" width=\"480\"></iframe></p>\n"
}