{
    "Slug": "announcing-powershell-v5-support-azure-automation",
    "Title": "Azure Automationでの PowerShell v5 サポートの発表",
    "Summary": "As you know, PowerShell version 5 has been released, and with it, a number of new PowerShell features. And now, you can take advantage of these great new PowerShell v5 features in your runbooks and DSC configurations in Azure Automation!",
    "Content": "<p>ご存じのように、PowerShell バージョン 5 がリリースされ、それに伴って <a href=\"https://technet.microsoft.com/en-us/library/hh857339.aspx?f=255&amp;MSPPError=-2147217396#BKMK_new50\">多くの新しい PowerShell 機能</a>がリリースされています。 最もエキサイティングな機能の一部は次のとおりです。</p>\n\n<ul>\n <li>PowerShell クラス</li>\n <li>PowerShell ワークフローのパフォーマンスの向上</li>\n <li>PowerShell モジュールのサイド バイ サイド バージョン管理</li>\n <li>新しいコマンドレット (例: Convert-String)</li>\n <li>PowerShell DSC の全体的な機能強化 (例: PSRunAsCredential)</li>\n</ul>\n\n<p>これで、Runbook と DSC 構成と同じ優れた PowerShell v5 機能を利用Azure Automation。</p>\n\n<p>&rsquo;Azure Automation&ndash;で PowerShell v5 機能を使用する作業はありませんが、ハイブリッド Runbook worker を使用し、Runbook で実行する Runbook で PowerShell v5 機能を利用する場合は、それらのハイブリッド worker マシンに WMF5 をインストールしてください。</p>\n\n<p>&rsquo;Azure Automationの新しい PowerShell v5 機能の一部を使用する方法について説明&rsquo;します。</p>\n\n<h2>PowerShell クラス</h2>\n\n<p><a href=\"https://blogs.technet.com/b/heyscriptingguy/archive/2015/08/31/introduction-to-powershell-5-classes.aspx\">PowerShell クラス</a> では、PowerShell にオブジェクト指向プログラミングが導入されるため、新しい種類のオブジェクトの定義、インスタンス化、メソッドの呼び出しを簡単に行うことができます。</p>\n\n<p>Azure Automationでの PowerShell クラスの使用は、PowerShell v5 とまったく同じように実行できるようになりました。 次に例を示します。</p>\n\n<pre class=\"prettyprint\">\nclass Coffee {\n    # Property: Holds the current size of the coffee.\n    [Uint32] $Size;\n    \n    # Property: Holds the name of the coffee&#39;s owner.\n    [String] $Owner;\n\n    # Constructor: Creates a new Coffee object, with the specified size and owner.\n    Coffee([UInt32] $NewSize, [String] $NewOwner) {\n        # Set the Coffee size\n        $this.Size = $NewSize;\n        \n        # Set the Coffee name\n        $this.Owner = $NewOwner;\n    }\n\n    # Method: Drink the specified amount of coffee.\n    # Parameter: $Amount = The amount of coffee to drink.\n    [void] Drink([UInt32] $Amount) {\n        $this.Size = $this.Size - $Amount;\n    }\n}\n\n# Create a new coffee object, with a size of 16 ounces, and &#39;Joe&#39; as its owner\n$MyCoffee = New-Object Coffee -ArgumentList 16, &quot;Joe&quot;\n\n# Drink 10 ounces\n$MyCoffee.Drink(10)\n\n# Output the object\n$MyCoffee \n</pre>\n\n<p>Azure Automationでこれをテストすると、次の結果が返されます。</p>\n\n<p><img alt=\"Announcing PowerShell v5 support in Azure Automation\" border=\"0\" height=\"244\" src=\"https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/bc0caa87-0ef5-4ca6-b7ba-5ad17704e947.png\" style=\"border-left-width: 0px; border-right-width: 0px; border-bottom-width: 0px; float: none; margin-left: auto; display: block; border-top-width: 0px; margin-right: auto\" title=\"Azure Automationでの PowerShell v5 サポートの発表\" width=\"360\"></p>\n\n<p>PowerShell クラスは、PowerShell ワークフロー ベースの Runbook でも使用できますが、InlineScript ブロック内でのみ使用できます。</p>\n\n<h2>PowerShell モジュールのサイド バイ サイド バージョン管理</h2>\n\n<p>PowerShell のサイド バイ サイドのモジュール バージョン管理では、PowerShell 内で複数のバージョンのモジュールを使用できます。 これは、PowerShell モジュールの特定のバージョンに対して動作するようにテストされた古いスクリプトと、同じ PowerShell モジュールの新しいバージョンを必要とする他のスクリプトがある場合に役立ちます。</p>\n\n<p>複数のバージョンを含む PowerShell モジュールの構築は簡単です。 通常どおりモジュール フォルダーを作成し、使用するモジュールのバージョンごとにこのモジュール フォルダー内にフォルダーを作成するだけです。 先ほど作成した TestModule モジュールの例を次&rsquo;に示します。 ご覧のとおり、1.0.0 と 2.0.0 の 2 つのバージョンが提供されています。</p>\n\n<p><img alt=\"Announcing PowerShell v5 support in Azure Automation\" border=\"0\" height=\"246\" src=\"https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/2c3ef265-a708-46a7-bfa3-c6cd8e471ed8.png\" style=\"border-left-width: 0px; border-right-width: 0px; border-bottom-width: 0px; float: none; margin-left: auto; display: block; border-top-width: 0px; margin-right: auto\" title=\"Azure Automationでの PowerShell v5 サポートの発表\" width=\"360\">&nbsp;</p>\n\n<p>これらの &ldquo;各バージョン フォルダー内に、&rdquo; モジュールを構成する通常の PowerShell PSM1、PSD1、DLL ファイルを配置するだけです。 ここでは&rsquo;、作成したモジュールのバージョン 1.0.0 について説明します。</p>\n\n<p><img alt=\"Announcing PowerShell v5 support in Azure Automation\" border=\"0\" height=\"254\" src=\"https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/2dbd3ed1-8be3-40dc-b35e-3ba57369c8c3.png\" style=\"border-left-width: 0px; border-right-width: 0px; border-bottom-width: 0px; float: none; margin-left: auto; display: block; border-top-width: 0px; margin-right: auto\" title=\"Azure Automationでの PowerShell v5 サポートの発表\" width=\"360\"></p>\n\n<p>もちろん、Azure Automation内でこのモジュールを使用する場合&rsquo;は、インポートするために圧縮する必要があります。 Azure Automationでの PowerShell モジュールの使用の詳細については、<a href=\"https://azure.microsoft.com/en-us/blog/authoring-integration-modules-for-azure-automation/\">こちらを参照してください</a>。</p>\n\n<p>&rsquo;zip 圧縮してモジュールをインポートすると、Azure Automation内の他のモジュールと同様に表示されます。</p>\n\n<p><img alt=\"Announcing PowerShell v5 support in Azure Automation\" border=\"0\" height=\"480\" src=\"https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/4831cc96-2dbc-42b2-852b-17a9fbf1d826.png\" style=\"border-left-width: 0px; border-right-width: 0px; border-bottom-width: 0px; float: none; margin-left: auto; display: block; border-top-width: 0px; margin-right: auto\" title=\"Azure Automationでの PowerShell v5 サポートの発表\" width=\"352\"></p>\n\n<p><b>メモ： </b>Azure Automationでは、モジュールの最新バージョン (最高バージョン番号) がインポートされている場合にのみ表示されますが、モジュール パッケージがモジュールのサイド バージョンに含まれている場合は、実際には Runbook 内ですべて使用できます。 ただし、UI には、同じパッケージ内の以前のバージョンのモジュールは現在表示されません。</p>\n\n<p><img alt=\"Announcing PowerShell v5 support in Azure Automation\" border=\"0\" height=\"360\" src=\"https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/f8efbf70-7acd-4780-bb1c-0e272dc8c691.png\" style=\"border-left-width: 0px; border-right-width: 0px; border-bottom-width: 0px; float: none; margin-left: auto; display: block; border-top-width: 0px; margin-right: auto\" title=\"Azure Automationでの PowerShell v5 サポートの発表\" width=\"313\"></p>\n\n<p><b>注 #2: </b>同じパッケージ内のサイド バイ サイド バージョンを含むモジュールはサポートされていますが、モジュール パッケージのインポート間でのモジュールの複数のバージョンの使用はサポートされていません。</p>\n\n<p>たとえば、バージョン 1 と 2 を含むモジュール A をAzure Automationにインポートし、バージョン 3 と 4 を含むモジュール A を Azure Automationにインポートした場合、DSC 構成のすべての Runbook 内で使用できるのはバージョン 3 と 4 のみです。 バージョン 1、2、3、および 4 を使用できるようにする場合は、インポートするパッケージにバージョン 1、2、3、および 4 が含まれている必要があります。</p>\n\n<p>サイド バイ サイド バージョンを含むモジュールをインポートしたら、次のように特定のバージョンを読み込むことができます。</p>\n\n<p>PowerShell スクリプト Runbook:</p>\n\n<blockquote>\n<p><i>Import-Module &ndash;Name &lt;ModuleName&gt; -RequiredVersion &lt;バージョン&gt;</i></p>\n</blockquote>\n\n<p>PowerShell ワークフロー Runbook (InlineScript ブロック内):</p>\n\n<blockquote>\n<p><i>Import-Module &ndash;Name &lt;ModuleName&gt; -RequiredVersion &lt;バージョン&gt;</i></p>\n</blockquote>\n\n<p>DSC 構成:</p>\n\n<ul>\n <li>DSC リソースの使用:</li>\n</ul>\n\n<blockquote>\n<p><i>Import-DscResource -ModuleName &lt;ModuleName&gt; -ModuleVersion &lt;バージョン&gt;</i></p>\n</blockquote>\n\n<ul>\n <li>モジュールの使用:</li>\n</ul>\n\n<blockquote>\n<p><i>Import-Module &ndash;Name &lt;ModuleName&gt; -RequiredVersion &lt;バージョン&gt;</i></p>\n</blockquote>\n\n<p>UI と同様に、既定では、最新バージョンのモジュールが実行時に使用されます。 たとえば、TestModule モジュールには、モジュールバージョンを出力するGet-MyVersionというコマンドレットが含まれています。 次の Runbook:</p>\n\n<blockquote>\n<p><i>Get-MyVersion</i></p>\n</blockquote>\n\n<p>次のように出力されます。</p>\n\n<p><img alt=\"Announcing PowerShell v5 support in Azure Automation\" border=\"0\" height=\"259\" src=\"https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/72c644de-3c64-417d-b06e-9ba02ca23405.png\" style=\"border-left-width: 0px; border-right-width: 0px; border-bottom-width: 0px; float: none; margin-left: auto; display: block; border-top-width: 0px; margin-right: auto\" title=\"Azure Automationでの PowerShell v5 サポートの発表\" width=\"360\">&nbsp;</p>\n\n<p>しかし、Runbook でモジュールのバージョン 1.0.0 を明示的に読み込む場合:</p>\n\n<blockquote>\n<p><i>Import-Module &ndash;Name TestModule -RequiredVersion 1.0.0</i></p>\n</blockquote>\n\n<blockquote>\n<p><i>Get-MyVersion</i></p>\n</blockquote>\n\n<p>次のように出力されます。</p>\n\n<p><em><img alt=\"Announcing PowerShell v5 support in Azure Automation\" border=\"0\" height=\"266\" src=\"https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/4b5402f2-a195-40b1-b965-feb2b77ae410.png\" style=\"border-left-width: 0px; border-right-width: 0px; border-bottom-width: 0px; float: none; margin-left: auto; display: block; border-top-width: 0px; margin-right: auto\" title=\"Azure Automation\" width=\"360\">での PowerShell v5 サポートの発表 </em></p>\n\n<p>安全を確保するために、Runbook 間で同じモジュールの異なるバージョンを使用する場合&rsquo;は、Import-Module を使用して Runbook で使用するバージョンを常に宣言する必要があります。 使用するバージョンが最新バージョンであってもそうです。 これは、Runbook のジョブが同じサンドボックスで実行される可能性があるためです。 サンドボックスが既に特定のバージョン番号のモジュールを明示的に読み込んでいる場合 (そのサンドボックス内の以前のジョブがそうであると言っているため)、そのサンドボックス内の将来のジョブでは、そのモジュールの最新バージョンが自動的に読み込まれません (一部のバージョンが既に読み込まれているためです)。</p>\n\n<h2>まとめ</h2>\n\n<p>ご覧のように、PowerShell v5 には多くの優れた新機能があります。 これで、これらの機能をAzure Automationで利用できるようになりました。</p>\n\n<p>Azure Automationの概要 このサービスについては、<a href=\"https://aka.ms/Q2p1ap\">こちらを</a>参照し、<a href=\"https://twitter.com/AzureAutomation\">Twitter</a> のAzure Automationに従って最新かつ最も優れた情報を入手してください。</p>\n"
}