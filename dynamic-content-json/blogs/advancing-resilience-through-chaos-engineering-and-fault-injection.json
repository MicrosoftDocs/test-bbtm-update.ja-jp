{
    "Slug": "advancing-resilience-through-chaos-engineering-and-fault-injection",
    "Title": "カオス エンジニアリングとフォールト挿入による回復性の向上",
    "Summary": "This post is designed to get you thinking about how best to validate typical failure conditions, including examples of how we at Microsoft validate our own systems.",
    "Content": "<p>&ldquo;<a href=\"https://azure.microsoft.com/en-us/blog/advancing-microsoft-azure-reliability/\" target=\"_blank\">昨年 7 月の投稿</a>でこの<a href=\"https://azure.microsoft.com/en-us/blog/tag/advancing-reliability/\" target=\"_blank\">高い信頼性ブログ シリーズを</a>初めて開始したとき、信頼できる一連のクラウド サービスを提供するというコミットメントの一環として、プラットフォームの可用性を向上させ続けるために進行中のいくつかの取り組みを強調しました。 私が言及した領域の1つは、障害の挿入であり&rsquo;、障害が発生した場合にシステムが設計どおりに動作することをますます検証しています。 今日、Ive&rsquo; は、この領域のプリンシパル プログラム マネージャー <strong>である Chris Ashton</strong> に、これらのより広範な &lsquo;カオス エンジニアリング&rsquo; の概念を明らかにし、これらをストレス テストと合成ワークロードと共に既に適用して、アプリケーションとサービスの回復性を向上させる方法&rsquo;の Azure の例を概説するよう依頼しました。&rdquo; - Mark Russinovich、CTO、Azure</p>\n\n<hr>\n<p>&nbsp;</p>\n\n<p>大規模な分散アプリケーションの開発はかつてないほど簡単になりましたが、キャッチがあります。 はい。インフラストラクチャは、パブリック クラウドのおかげで数分で提供されます。選択できる言語オプションが多数あり、利用できるオープンソースコードが多数用意されており、構築に必要な豊富なコンポーネントとサービスがマーケットプレースに用意されています。 はい。 <a href=\"https://docs.microsoft.com/en-us/azure/architecture/framework/\" target=\"_blank\">Azure Well-Architected Framework や Azure</a> <a href=\"https://docs.microsoft.com/en-us/Azure/architecture/\" target=\"_blank\">アーキテクチャ センター</a>のその他のリソースなど、ソリューションのアーキテクチャと設計について説明するのに役立つ適切なリファレンス ガイドがあります。 ただし、アプリケーションの開発は簡単ですが、&rsquo;依存関係の中断による影響のリスクも高くなります。 ただし、まれに、制御を超える停止がいつでも発生したり、依存関係にインシデントが発生したり、主要なサービスやシステムの応答が遅くなったりする可能性があります。 1 つの領域での小規模な中断を拡大したり、別の領域で長い間副作用を起こしたりすることができます。 これらのサービスの中断は、開発者の生産性を奪い、顧客の信頼に悪影響を与え、ビジネスの損失を引き起こし、さらには組織&rsquo;の収益に影響を与える可能性があります。</p>\n\n<p>最新のアプリケーションと、それらが構築されているクラウド プラットフォームは、障害に対して設計され、継続的に検証される必要があります。 開発者は既知および不明な障害状態を考慮する必要があります。アプリケーションとサービスは冗長性のために設計する必要があり、アルゴリズムには再試行とバックオフのメカニズムが必要です。 システムは、運用の停止や中断の頻度は低いが、必然的に発生するシナリオや状況に対して回復性を備える必要があります。 この投稿は、Microsoft が独自のシステムを検証する方法の例を含め、一般的な障害状態を検証する最善の方法について考えやすいように設計されています。</p>\n\n<h2>回復力</h2>\n\n<p>回復性は、システムが正常に失敗し、&mdash;最終的に中断イベントから&mdash;回復する機能です。 アプリケーション、サービス、またはプラットフォームの回復性を検証することは、障害のために構築するのと同じくらい重要です。 個々のコンポーネントの信頼性を分離して検証し、システム全体が同じくらい信頼性が高いが、それは間違いかもしれないと推測するのは簡単で魅力的です。 回復性は、コンポーネントだけでなく、システム全体のプロパティです。 システムが本当に回復力があるかどうかを理解するには、実行される環境内のシステム全体の回復性を測定して理解することをお勧めします。 しかし、どのようにこれを行い、どこから始めますか?</p>\n\n<h2>カオスエンジニアリングとフォールトインジェクション</h2>\n\n<p>カオス エンジニアリングは、運用環境で直面する実際の障害と依存関係の中断にシステムを適用する方法です。 障害の挿入は、堅牢性とエラー処理を検証するために、システムに障害を意図的に導入することです。</p>\n\n<p>一般に、障害の挿入とカオス エンジニアリング プラクティスの適用を通じて、アーキテクトは設計 &ndash; に自信を持ち、開発者はアプリケーションの回復性を測定、理解、改善できます。 同様に、サイト信頼性エンジニア (SRE) と実際には、この領域で幅広いチームの責任を負うすべてのユーザーは、サービス レベルの目標が目標内にあることを確認し、運用環境のシステム正常性を監視できます。 同様に、運用チームは、顧客の使用のためにロールアウトする前に、新しいハードウェアとデータセンターを検証できます。 リリース検証に混乱の手法を組み込むことにより、管理を含むすべてのユーザーが、組織が構築しているシステムに対する信頼を得ることができます。</p>\n\n<p>開発プロセス全体を通して、すでにすでに行っていることを願っていますので、早い段階でテストし、頻繁にテストしてください。 アプリケーションまたはサービスを運用環境に移行する準備をするときは、ユニット、機能、ストレス、統合テストを追加して実行することで、通常のテストプラクティスに従ってください。 意味がある場合は、エラー ケースのテスト カバレッジを追加し、エラー挿入を使用してエラー処理とアルゴリズムの動作を確認します。 さらに大きな影響を与えるために、混乱エンジニアリングが実際に機能する場所として、障害の挿入を使用してエンド ツー エンドのワークロード (ストレス テスト、パフォーマンス ベンチマーク、合成ワークロードなど) を拡張します。 運用環境で実験を実行する前に実稼働前のテスト環境から開始し、実際の顧客トラフィックに潜在的な影響を与える前に、合成ワークロードを使用して安全な環境でソリューションがどのように動作するかを理解します。</p>\n\n<p>検証プロセスでの障害挿入の正常な使用には、次の 1 つ以上が含まれる場合があります。</p>\n\n<ul>\n    <li><strong>テスト環境での新機能のアドホック検証:</strong><br>\n開発者は、テスト仮想マシン (VM) を立ち上げて、新しいコードを分離して実行できます。 既存の機能テストまたはストレス テストの実行中に、障害を挿入してリモート依存関係 (SQL Server など) へのネットワーク アクセスをブロックし、新しいコードがシナリオを正しく処理することを証明できます。</li>\n    <li><strong>デプロイゲートや回復性ゲートなど、CI/CD パイプラインの自動障害挿入カバレッジ:</strong><br>\n既存のエンド ツー エンドのシナリオ テスト (統合テストやストレス テストなど) は、障害の挿入で拡張できます。 通常の実行の後に新しいステップを挿入するだけで、いくつかのエラーが適用された状態で実行を続行するか、もう一度実行します。 障害を追加すると、通常はテストで見つからない問題を見つけたり、最終的に見つかる可能性のある問題の検出を高速化したりすることができます。</li>\n    <li><strong>インシデント修正の検証とインシデント回帰のテスト:</strong><br>\n障害の挿入は、ワークロードまたは手動実行と組み合わせて使用して、インシデントの原因となったのと同じ条件を誘発し、インシデント シナリオの特定のインシデント修正または回帰テストの検証を可能にすることができます。</li>\n    <li><strong>実稼働前環境での BCDR ドリル:</strong><br>\nデータベース のフェールオーバーを引き起こしたり、ストレージをオフラインにしたりする障害は、BCDR ドリルで使用して、これらの障害が発生した場合にシステムが適切に動作し、フェールオーバー テスト中にデータが失われないことを検証できます。</li>\n    <li><strong>運用環境でのゲームの日数:</strong><br>\n&lsquo;ゲームの日&rsquo;は、システムがイベントを正しく処理することを検証するために、停止またはインシデントの調整されたシミュレーションです。 これには通常、監視システムの検証と、インシデントの間に発生する人間のプロセスが含まれます。 ゲーム日を実行するTeamsは、障害挿入ツールを利用して、仮定のシナリオを表す障害を制御された方法で調整できます。</li>\n</ul>\n\n<h2>一般的なリリース パイプライン</h2>\n\n<p>この図は、一般的なリリース パイプラインと、障害の挿入を含める機会を示しています。</p>\n\n<p><a href=\"https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/ff02832d-0324-4078-832d-4d72f5d25263.png\"><img alt=\"release pipeline chaos opportunities\" border=\"0\" height=\"285\" src=\"https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/2287a5aa-df08-4221-9552-df191a7b542c.png\" style=\"border: 0px currentcolor; border-image: none; margin-right: auto; margin-left: auto; display: block; background-image: none;\" title=\"\" width=\"1024\"></a></p>\n\n<p>&nbsp;</p>\n\n<p>いくつかの基本的なコンポーネントに基づいて構築されている場合、障害挿入への投資はより成功します。</p>\n\n<ul>\n    <li>調整されたデプロイ パイプライン。</li>\n    <li>自動 ARM デプロイ。</li>\n    <li>合成ランナーと合成エンド ツー エンドのワークロード。</li>\n    <li>監視、アラート、およびダッシュボードの作成。</li>\n</ul>\n\n<p>これらの設定を行うと、障害の挿入をデプロイ プロセスに統合し、追加のオーバーヘッド &ndash; をほとんどまたはまったく発生させず、運用環境に向かう途中でコード フローをゲートするために使用できます。</p>\n\n<p>過去のインシデントの根本原因分析では、ローカライズされたラックの停電と機器の障害が単一障害点として見つかっています。 サービスが影響を受け、回復性がないラーニング、運用環境のこれらのイベントの 1 つは、通話中のエンジニアにとって、時間のかかる、痛みを伴う、コストのかかるプロセスです。 障害の挿入を使用して、制御された環境と時間枠でリリース パイプライン全体でこれらのエラーに対する回復性を検証する機会がいくつかあります。これにより、コード作成者が発見された問題の調査をリードする機会が増えます。 コードの変更や新しいコードを持つ開発者は、VM の強制終了、サービスへのアクセスのブロック、単にアクセス許可の変更など、依存関係をオフライン &ndash; にすることをシミュレートする障害がある機能テストとツールを使用して、テスト環境の作成、コードのデプロイ、アドホック実験の実行を行うことができます。 ステージング環境では、同様の障害の挿入を、自動化されたエンドツーエンドおよび統合テストまたはその他の合成ワークロードに追加できます。 テスト結果とテレメトリを使用して、障害の影響を特定し、ベースライン パフォーマンスと比較して、必要に応じてコード フローをブロックできます。</p>\n\n<p>実稼働前または &lsquo;カナリア&rsquo; 環境では、依存関係へのアクセスを再度ブロックしたり、オフラインにしたりする障害で自動ランナーを使用できます。 その後、監視、アラート、および Liveite ダッシュボードを使用して、障害が観察されたことを検証したり、システムが回復性を示した問題&mdash;に対応して補償したりすることができます。 この同じ環境では、SRE または運用チームがビジネス継続性/ディザスター リカバリー (BCDR) 訓練を実行し、障害の挿入を使用してストレージまたはデータベースをオフラインにし、再びシステム メトリックを監視して回復性とデータの整合性を検証することもできます。 これらの同じカナリア アクティビティは、実際の顧客トラフィックがある運用環境でも実行できますが、そうすると顧客に影響を与える可能性が高くなります。そのため、パイプラインの前の段階で障害の挿入を利用した後にのみこれを行うことをお勧めします。 これらのプラクティスを確立し、障害の挿入をデプロイ パイプラインに組み込むことで、体系的かつ制御された回復性検証が可能になります。これにより、チームはエンド カスタマーに影響を与えることなく、問題を軽減し、アプリケーションの信頼性を向上させることができます。</p>\n\n<h2>Microsoft での障害の挿入</h2>\n\n<p>Microsoft では、一部のチームは検証パイプラインと自動テスト パスの早い段階で障害の挿入を組み込みます。 さまざまなチームが、自動検証ゲートでストレス テスト、パフォーマンス ベンチマーク、または合成ワークロードを通常どおり実行し、ベースラインが確立されます。 その後、ワークロードが再び実行されます。今度は、CPU の負荷、ディスク IO ジッター、ネットワーク待機時間などの障害が適用 &ndash; されます。 ワークロードの結果が監視され、テレメトリがスキャンされ、クラッシュ ダンプがチェックされ、サービス レベル インジケーター (SLA) がサービス レベル目標 (SLO) と比較されて影響を測定します。 結果が失敗と見なされた場合、コードがパイプラインの次のステージにフローしない可能性があります。</p>\n\n<p>他の Microsoft チームは、通常のビジネス継続性、ディザスター リカバリー (BCDR) 訓練、およびゲーム日数で障害の挿入を使用します。 一部のチームは、毎月、四半期ごと、または半期ごとに BCDR 訓練を実施し、障害の発生を誘発し、復旧プロセスとアラート、監視、ライブ サイト プロセスの両方を検証するために障害の挿入を使用します。 これは多くの場合、実際の顧客トラフィックで運用環境自体で使用される前に、実稼働前のカナリア環境で行われます。 一部のチームでは、過去のインシデントのレプリケーションなどの架空のシナリオを考え出し、障害の注入を使用して調整するゲーム の日も実行します。 この場合、障害は、VM のクラッシュ、ネットワーク アクセスの無効化、データベースのフェールオーバーの原因、データセンター全体のオフラインのシミュレーションなど、より破壊的&mdash;な可能性があります。 ここでも、通常のライブ サイトの監視とアラートが使用されるため、DevOpsとインシデント管理プロセスも検証されます。 すべての関係者に親切にするために、これらのアクティビティは通常、営業時間中に実行され、夜間や週末には実行されません。</p>\n\n<p>また、運用チームは、お客様が使用するためにデプロイされる前に、障害の挿入を使用して新しいハードウェアを検証します。 ドリルは、ラックまたはデータセンターに電源が遮断された場所で実行されるため、監視システムとバックアップ システムを監視して、期待どおりに動作することを確認できます。</p>\n\n<p>Microsoft では、カオス エンジニアリングの原則とフォールト インジェクション手法を使用して、出荷する製品の回復性と信頼性を高めています。 これらは、お客様に提供するアプリケーションと、開発者が利用できるサービスを検証するために使用されます。 これらは、デプロイ前に新しいハードウェアをテストするために、基になる Azure プラットフォーム自体を検証するために使用されます。 これらは個別にまとめて、Azure プラットフォーム&mdash;の全体的な信頼性と、サービスの品質の向上に貢献します。</p>\n\n<h2>意図しない結果</h2>\n\n<p>障害の挿入は強力なツールであり、注意して使用する必要があることを覚えておいてください。 テスト環境または実稼働前環境で導入された障害が運用環境にも影響しないように、セーフガードを実施する必要があります。 他のコンポーネントやエンド カスタマーへの影響を最小限に抑えるために、障害シナリオのブラスト半径を含める必要があります。 障害を挿入する機能は、事故を防ぎ、悪意のあるハッカーによる潜在的な使用を防ぐために、アクセスが制限されている必要があります。 障害注入は運用環境で使用できますが、慎重に計画し、事前生産で最初にテストし、ブラスト半径を制限し、必要に応じて実験を突然終了できるようにフェールセーフを確保します。 <a href=\"https://www.history.com/news/chernobyl-disaster-timeline\" target=\"_blank\">1986年のチェルノブイリ原発事故</a>は、故障注入訓練が間違っていたという地味な例です。 意図しない結果からシステムを絶縁するように注意してください。</p>\n\n<h2>サービスとしての混乱?</h2>\n\n<p>Mark Russinovich <a href=\"https://azure.microsoft.com/en-us/blog/advancing-microsoft-azure-reliability/\" target=\"_blank\">がこの前のブログ記事で</a>述べたように、私たちの目標は、顧客とパートナーが独自のアプリケーションとサービスで同じ検証を実行できるように、ネイティブの障害注入サービスを利用できるようにすることです。 これは、クラウド サービスの信頼性を向上させ、まれだが避けられない中断の影響を軽減する可能性が非常に高いエキサイティングな空間です。 この領域には多くの興味深いことを行うチームが数多く存在し&rsquo;、これらのさまざまなツールと障害を組み合わせて、内部開発者が Azure サービスを構築し、Microsoft 365などの組み込みの Azure サービスのために作業を容易&mdash;にする最善の方法を探りますMicrosoft Teamsと Dynamics、そして最終的には、お客様とパートナーが同じツールを使用して、独自のアプリケーションとソリューションに大混乱を引き起こす (そして最終的には回復性を向上させる) ためです。</p>\n"
}