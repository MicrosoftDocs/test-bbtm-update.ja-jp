{
    "Slug": "announcing-azure-sdk-2-5-for-net-and-visual-studio-2015-preview",
    "Title": "Azure SDK 2.5 for .NET および Visual Studio 2015 プレビューの発表",
    "Summary": "Today, we are excited to announce Azure SDK 2.5 for Visual Studio 2012, 2013 and 2015 Preview. We are also excited to announce Visual Studio 2015 Preview which adds even more Azure features.",
    "Content": "本日は、Azure SDK 2.5 Visual Studio 2012、2013、2015 プレビューをお知らせします。また、さらに多くの Azure 機能を追加する Visual Studio 2015 プレビューをお知らせします。この投稿では、これらのリリースの機能と、それらが有効にするシナリオについて説明します。\n\n<span style=\"text-decoration: underline\">.NET 用 Azure SDK 2.5 [<a href=\"https://www.microsoft.com/web/handlers/webpi.ashx/getinstaller/VWDOrVs2013AzurePack.appids\">VS 2013VS</a> |  <a href=\"https://www.microsoft.com/web/handlers/webpi.ashx/getinstaller/VWDOrVs11AzurePack.appids\">2012VS</a> |  <a href=\"https://www.microsoft.com/web/handlers/webpi.ashx/getinstaller/VWDOrVs2015AzurePack.appids\">2015 Preview</a> 用ダウンロード]</span>\n<ul>\n <li><strong>Cloud ServicesとVirtual Machinesの診断の機能強化</strong>: 診断機能で Azure 拡張機能モデルが使用されるようになりました。そのため、再デプロイせずに診断を有効にしたり、構成を更新したりできます。新機能には、構造化ログ記録用の ETW、クラッシュ ダンプ、Virtual Machines初めてサポートが含まれます。</li>\n <li><strong>Azure Resource Manager ツール: Azure</strong> ギャラリー テンプレートを使用して、複数の Azure リソースで構成されるアプリケーションを作成します。このエクスペリエンスは、JSON テンプレートとパラメーター ファイルを使用して、宣言型で反復可能な方法で複雑な環境を作成できる新しい Cloud Deployment Project 型で利用できます。</li>\n <li><strong>クイック スタート</strong>: [ファイル&gt;の新規作成] Project &gt; [クラウド] ダイアログには、Microsoft Azure サービスを示す新しいテンプレートが含まれています。</li>\n <li><strong>WebJobs リモート デバッグとサーバー エクスプローラーのサポート</strong>: コンソールまたは Web プロジェクトから WebJobs を発行する機能が以前に追加されました。このリリースでは、サーバー エクスプローラーのサポートとリモート デバッグが追加されます。</li>\n <li><strong>Storage Explorerでの BLOB フォルダーのサポート: Storage Explorer</strong>を使用して BLOB Storage コンテナー内のフォルダーを表示および作成します。</li>\n <li><strong>HDInsight サーバー エクスプローラーと Hive クエリのサポート</strong>: Hive クエリを記述し、Visual Studioから直接 Hive ジョブを表示します。</li>\n</ul>\n∙\n\n<span style=\"text-decoration: underline\">Visual Studio 2015 プレビュー [<a href=\"https://aka.ms/vs2015preview\">ダウンロード</a>]</span>\n\nAzure SDK 2.5 は、Visual Studio 2015 プレビューで初めてサポートされる Azure SDK です。 上記のVisual Studio 2013機能に加えて、Visual Studio 2015 プレビューでは、次の機能が導入されています。\n<ul>\n <li><strong>接続済みサービスの追加</strong>: Azure StorageやMobile Servicesなどのサービスに簡単に接続できます。このフローでは、適切なプロジェクト参照を追加し、接続文字列を挿入し、サービスの使用に関する入門ガイダンスを提供します。</li>\n <li><strong>Enterprise SSO</strong>: Azure Active Directoryを使用してエンタープライズ シングル サインオン (SSO) を簡単に構成します。</li>\n <li><strong>複数の Azure アカウントにConnect Visual Studio</strong>: Visual Studioサインインによって、Azure サブスクリプションに自動的にサインインするようになりました。 追加の Azure アカウントにサインインして、すべてのアカウントの Azure サブスクリプションとリソースに同時にアクセスすることもできます。</li>\n <li><strong>Azure のCode Analysis</strong>: このNuGet パッケージには、Azure アプリケーションでパフォーマンス、スケーラビリティ、セキュリティの問題を引き起こすコーディング パターンを識別するコード分析規則が用意されています。</li>\n <li><strong>ASP.NET 5.0</strong>: Azure への発行は、[プレビュー] タブとパフォーマンスの向上によって更新されました。</li>\n</ul>\n<h1>診断: ETW を使用した診断ログの改善</h1>\nETW イベント ソースを使用して構造化ログとセマティック ログを実行できるようになりました。 ETW イベント ソースとイベント ID を使用すると、アプリケーション ワークフローの論理イベントとステージを定義できます。 複数の階層にわたるイベントを追跡して、アプリケーション ワークフローの問題を診断するのに役立ちます。\n\nイベント ソースのログ記録を有効にするには、まずソースでイベント クラスを定義します。 次のスニペットは、2 つのイベントを含むサンプル ゲストブック アプリケーションの <b>EventSource</b> を示しています。\n<pre class=\"prettyprint\">[EventSource(Name=\"Contoso-GuestBook\")]\npublic sealed class GuestBookEventSource: EventSource\n{\n    ...\n\n    [Event(1, Message = \"Added entry in table storage for guest '{1}'\", \nLevel = EventLevel.Informational)]\n    public void GuestBookEntryAdded (string guestName, Guid activityID )\n    {\n        if (this.IsEnabled()) {WriteEvent(1, guestName, activityID);}\n    }\n\n    [Event(2, Message = \"Queued message to process blob '{0}'\", \nLevel = EventLevel.Informational)]\n    public void ThumbnailRequestPosted(string pictureUrl, Guid activityID)\n    {\n        if (this.IsEnabled()) { WriteEvent(2, pictureUrl, activityID);}\n    }\n    ...\n}</pre>\nイベントを定義したら、アプリケーションでログに記録します。 たとえば、ゲストブック アプリケーションでは、GuestBookEntryAdded イベントをログに記録します。\n<pre class=\"prettyprint\">GuestBookEventSource.Log.GuestBookEntryAdded(\n    entry.GuestName, GuestBookEventSource.CurrentThreadActivityId);</pre>\nコード内のイベントをログに記録したら、ロールを右クリックして <b>[プロパティ</b>] を選択して、ロールの診断を構成します。 <b>[構成</b>] プロパティ ページで、[<b>診断の有効化]</b> がオンになっていることを確認し、[<b>構成]を</b>クリックします。 を追加します。\n\n[ <b>診断の構成</b> ] ダイアログで、[ <b>ETW ログ</b> ] タブに移動し、[ <b>ETW ログの転送を有効にする</b>] を選択します。 イベント ソース名を指定し、[イベント ソースの追加] ボタンをクリックして、転送する適切な <b>イベント ソースを追加</b> します。 追加したら、ログの保存場所、ログ レベル、キーワード フィルター、転送頻度などの追加のプロパティを構成します。\n\n<a href=\"https://acom.azurecomcdn.net/80C57D/blogmedia/blogmedia/2014/11/09/Diagnostics1.png\"><img style=\"padding-top: 0px;padding-left: 0px;padding-right: 0px;border-width: 0px\" title=\"Diagnostics1\" alt=\"Diagnostics1\" src=\"https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/Diagnostics1_thumb.png\" width=\"610\" height=\"454\" border=\"0\" /></a>\n\nクラウド サービスをデプロイすると、高度な診断の概要が得られます。 ロールの診断データを表示するには、それを右クリックして [ <b>診断データの表示</b>] を選択します。 これにより、ETW ログの新しいセクションが表示される診断の概要ページが表示されます。 適切な ETW ログ テーブルを選択して、対応するエラーを表示します。\n\n<a href=\"https://acom.azurecomcdn.net/80C57D/blogmedia/blogmedia/2014/11/09/clip_image004.png\"><img style=\"padding-top: 0px;padding-left: 0px;padding-right: 0px;border-width: 0px\" title=\"clip_image004\" alt=\"clip_image004\" src=\"https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/clip_image004_thumb.png\" width=\"610\" height=\"562\" border=\"0\" /></a>\n\n新しい診断機能では拡張機能モデルが使用されるため、クラウド サービスの発行後に実行中のサービスの診断構成を更新できます。 そのためには、 <b>サーバー エクスプローラー</b> を開き、ロールを右クリックして [ <b>診断の更新</b>] を選択します。\n<h1>診断: クラッシュ ダンプの構成</h1>\nクラッシュ ダンプを構成するには、[診断の構成] ダイアログの [ <b>クラッシュ ダンプ</b> ] タブに移動します。 クラッシュ ダンプを収集するプロセスの名前を追加するだけで、診断によって選択した BLOB コンテナーに収集されます。 既定では、クラウド ロールの最も一般的なプロセスは、クラッシュ ダンプ収集用に事前に選択されています。\n\n<a href=\"https://acom.azurecomcdn.net/80C57D/blogmedia/blogmedia/2014/11/09/clip_image006.png\"><img style=\"padding-top: 0px;padding-left: 0px;padding-right: 0px;border-width: 0px\" title=\"clip_image006\" alt=\"clip_image006\" src=\"https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/clip_image006_thumb.png\" width=\"610\" height=\"454\" border=\"0\" /></a>\n<h1>診断: Virtual Machines</h1>\nVirtual Machinesから診断データを収集し、アプリケーションを監視したり、トレース ログを使用してデバッグしたりできます。 診断を有効にするには、サーバー エクスプローラー (<b>サーバー エクスプローラー</b><b>の表示</b>&gt;) を開き、仮想マシンを右クリックし、[構成] を選択<b>します。</b>\n\n<a href=\"https://acom.azurecomcdn.net/80C57D/blogmedia/blogmedia/2014/11/09/clip_image008.jpg\"><img style=\"padding-top: 0px;padding-left: 0px;padding-right: 0px;border-width: 0px\" title=\"clip_image008\" alt=\"clip_image008\" src=\"https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/clip_image008_thumb.jpg\" width=\"429\" height=\"357\" border=\"0\" /></a>\n\n開いたダイアログに、[ <b>インストールされている拡張機能</b> ] セクションが表示されます。 このセクションのドロップダウン メニューをクリックし、<b>診断拡張機能Microsoft Monitoring Agent</b>選択し、[<b>追加</b>] をクリックします。\n\n<a href=\"https://acom.azurecomcdn.net/80C57D/blogmedia/blogmedia/2014/11/09/clip_image010.png\"><img style=\"padding-top: 0px;padding-left: 0px;padding-right: 0px;border-width: 0px\" title=\"clip_image010\" alt=\"clip_image010\" src=\"https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/clip_image010_thumb.png\" width=\"610\" height=\"334\" border=\"0\" /></a>\n\nこれにより、診断構成ダイアログが表示されます。 設定は PaaS シナリオで見たのとまったく同じです。 そのため、ETW EventSource を使用して診断コードを開発し、IaaS VM の診断構成をまったく同じ方法で設定できます。 ログに記録する内容の構成が完了したら、変更を保存し、構成を更新して仮想マシンに変更を適用します。\n\n<em>2.5 リリースの診断機能の 1 つの制限は、コンピューティング Emulatorでアプリケーションをローカルでデバッグするときに診断ログがキャプチャされないことです。パフォーマンス カウンター、IIS ログ、またはイベント ログは取得されません。また、ローカル デバッグ シナリオでは、ログは Azure ストレージまたは開発ストレージに転送されません。アプリケーションをローカルでデバッグするときにアプリケーション ログを表示するには、System.Diagnostics.Trace を使用します。このトレースは、コンピューティング Emulatorにトレースを表示できます。</em>\n<h1>Azure Resource Manager ツール</h1>\nAzure Resource Manager ツールを使用すると、リソース グループ内でリソースをすばやく効率的に作成してデプロイし、組織と再現性を向上させることができます。このツールでは、カスタマイズとパラメーター化を可能にする Azure ギャラリー テンプレートを使用するため、ある環境から次の環境に移行するときのコストが削減されます。<b>概要、File-New&gt; Project-&gt; Cloud-&gt; Cloud Deployment Projectからデプロイ</b> プロジェクトを作成します。\n\n<a href=\"https://acom.azurecomcdn.net/80C57D/blogmedia/blogmedia/2014/11/09/clip_image012.png\"><img style=\"padding-top: 0px;padding-left: 0px;padding-right: 0px;border-width: 0px\" title=\"clip_image012\" alt=\"clip_image012\" src=\"https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/clip_image012_thumb.png\" width=\"610\" height=\"423\" border=\"0\" /></a>\n\nプロジェクトを作成すると、一般的な Azure ギャラリー テンプレートの一覧が表示されます。 今後のリリースでは、ネットワーク、ストレージ、仮想マシンなどの他の Azure 機能を使用するアプリケーション シナリオ用のテンプレートが追加される予定です。 ビルドするソリューションに最も近いテンプレートを選択します。\n\n<b><a href=\"https://acom.azurecomcdn.net/80C57D/blogmedia/blogmedia/2014/11/09/clip_image014.png\"><img style=\"padding-top: 0px;padding-left: 0px;padding-right: 0px;border-width: 0px\" title=\"clip_image014\" alt=\"clip_image014\" src=\"https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/clip_image014_thumb.png\" width=\"610\" height=\"458\" border=\"0\" /></a></b>\n<h2>クラウド アプリ ソリューション</h2>\nAzure ギャラリーから <b>Web サイト </b>テンプレートを選択して、ASP.NET Web サイト Projectと新しいプロジェクトの種類 (<b>MyAzureCloudApp.Deployment</b> という Azure Resource Manager デプロイ プロジェクト) を含むソリューションを作成します。 デプロイ プロジェクトには、デプロイ テンプレート ファイル (<b>WebSiteDeploy.json</b>)、テンプレート パラメーター定義 (<b>WebSiteDeploy.param.dev.json</b>)、およびリソースを Azure にデプロイするために使用できる PowerShell スクリプト (<b>Publish-AzureResourceGroup.ps1</b>) が含まれます。\n\n<a href=\"https://acom.azurecomcdn.net/80C57D/blogmedia/blogmedia/2014/11/09/clip_image016.jpg\"><img style=\"padding-top: 0px;padding-left: 0px;padding-right: 0px;border-width: 0px\" title=\"clip_image016\" alt=\"clip_image016\" src=\"https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/clip_image016_thumb.jpg\" width=\"413\" height=\"315\" border=\"0\" /></a>\n\nデプロイ テンプレートとパラメーター ファイルを使用すると、クラウド ライフサイクル パターンで簡単に作業でき、これらのファイルをコードとして構成として扱うことができます。 *.dev.json という名前のパラメーター ファイルが既定で作成されていることに注意してください。このパラメーター ファイルをコピーし、*.test.json または *.staging.json という名前を付けることで、1 つのテンプレートを使用して複数の環境を構築できます。\n\nVisual Studioを使用すると、組み込みの JSON エディターでこれらの JSON ファイルを簡単に編集でき、公開された JSON スキーマに基づいて IntelliSense が含まれます。\n\n<a href=\"https://acom.azurecomcdn.net/80C57D/blogmedia/blogmedia/2014/11/12/image.png\"><img style=\"padding-top: 0px;padding-left: 0px;padding-right: 0px;border-width: 0px\" title=\"image\" alt=\"image\" src=\"https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/image_thumb.png\" width=\"610\" height=\"391\" border=\"0\" /></a>\n<h2>Azure リソースを作成する</h2>\nAzure にリソースをデプロイする最も簡単な方法は、デプロイ Projectを右クリックし、[<b>新しいデプロイのデプロイ&gt;]..</b>. を選択することです。 これにより、[リソース グループへのデプロイ] ダイアログが表示されます。\n\n<a href=\"https://acom.azurecomcdn.net/80C57D/blogmedia/blogmedia/2014/11/09/clip_image018.png\"><img style=\"padding-top: 0px;padding-left: 0px;padding-right: 0px;border-width: 0px\" title=\"clip_image018\" alt=\"clip_image018\" src=\"https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/clip_image018_thumb.png\" width=\"500\" height=\"326\" border=\"0\" /></a>\n\nWeb アプリケーションに必要なすべてのリソースを含む Azure リソース グループを作成するには、[ <strong>リソース グループ</strong> ] コンボ ボックスをクリックし、[新規作成] を選択 <strong>して [リソース グループの作成] ダイアログを表示します</strong>。 [<b>リソース グループの作成</b>] ダイアログの [<strong>作成</strong>] ボタンをクリックすると、Azure リソース グループはプロビジョニングされますが、リソースはまだプロビジョニングされません。\n\nデプロイ テンプレート ファイル (websitedeploy.json) とテンプレート パラメーター ファイル (websitedeploy.param.dev.json) は、デプロイとプロビジョニングの詳細、またはリソースを指定します。 ストレージ アカウントは、アプリケーション パッケージを Azure Resource Manager にアップロードするために使用されるため、テンプレートのデプロイに含めることができます。 ストレージ アカウントがまだない場合は、続行する前に <a href=\"https://azure.microsoft.com/en-us/documentation/articles/storage-create-storage-account/\">ストレージ アカウントを作成する</a> 必要があります。\n\n[パラメーターの <b>編集</b> ] ボタンをクリックすると、Web サイト名、Web ホスティング プラン名、Web サイトの場所などを指定できるダイアログが表示されます。\n\n<a href=\"https://acom.azurecomcdn.net/80C57D/blogmedia/blogmedia/2014/11/09/clip_image019.png\"><img style=\"padding-top: 0px;padding-left: 0px;padding-right: 0px;border-width: 0px\" title=\"clip_image019\" alt=\"clip_image019\" src=\"https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/clip_image019_thumb.png\" width=\"403\" height=\"318\" border=\"0\" /></a>\n\nパラメーター値は <b>WebSiteDeploy.param.dev.json</b> ファイルに保存されるため、この Web サイトを次回デプロイするときにこの情報を入力する必要はありません。 ローカル JSON をカスタマイズして格納できるため、リソースを再デプロイするときにエラーが発生する可能性が低くなります。\n\nすべてのパラメーターを指定して保存したら、[ <strong>デプロイ</strong> ] ボタンをクリックして、アプリケーションとリソースを Azure にデプロイします。 [出力] ウィンドウで詳細な進行状況を確認し、リソース グループとデプロイされたすべてのリソースを、新しく強化された <a href=\"https://portal.azure.com/\">Azure Portal</a> に表示できます。\n<h1>クイック スタート</h1>\nクイック スタートには、Azure SDK やその他のライブラリを利用して Azure Services と対話する方法を示すサンプル コードが用意されています。 <b>[ファイル] -&gt; [新しいProject] - [クラウド] -&gt;&gt; [クイック スタート] でクイック スタートを検索します</b>。\n\n<a href=\"https://acom.azurecomcdn.net/80C57D/blogmedia/blogmedia/2014/11/12/dialog.png\"><img style=\"padding-top: 0px;padding-left: 0px;padding-right: 0px;border-width: 0px\" title=\"ダイアログ (dialog)\" alt=\"dialog\" src=\"https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/dialog_thumb.png\" width=\"610\" height=\"423\" border=\"0\" /></a>\n\n現在のリリースでは、Azure Storage (BLOB、テーブル、キュー)、DocumentDB、Azure Redis Cache Service、Azure Media Services、Azure WebJobs (BLOB、テーブル、キュー、Service Bus キュー) とService Bus (トピック、キュー) の使用方法を示すサンプルがあります。 また、Microsoft Azure管理ライブラリ (MAML) を使用して、C# を使用して Azure でリソースをプログラムで作成する方法を示すサンプルもあります。\n<h1>WebJobs</h1>\nAzure WebJobs と WebJobs SDK が一般公開されました。 WebJobs と WebJobs SDK の詳細については、 <a href=\"https://aka.ms/webjobs\">Azure WebJobs の推奨リソース</a>の概要を参照してください。\n\n以前に、コンソールまたは Web プロジェクトから Web ジョブを発行する機能を追加しました。 このリリースでは、サーバー エクスプローラーのサポートとリモート デバッグを追加しました。\n<h2>WebJobs SDK は WebJobs テンプレートにプレインストールされています</h2>\nWebJobs プロジェクト テンプレートに <a href=\"https://go.microsoft.com/fwlink/?LinkID=320976\">、WebJobs SDK</a> への参照が自動的に含まれるようになりました。 プロジェクトの作成時に、必要な Web ジョブの種類を指定します。\n\n<a href=\"https://acom.azurecomcdn.net/80C57D/blogmedia/blogmedia/2014/11/09/clip_image023.jpg\"><img style=\"padding-top: 0px;padding-left: 0px;padding-right: 0px;border-width: 0px\" title=\"clip_image023\" alt=\"clip_image023\" src=\"https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/clip_image023_thumb.jpg\" width=\"610\" height=\"325\" border=\"0\" /></a>\n\nオンデマンド ジョブとスケジュールされたジョブの場合、プロジェクトにドロップされるファイルは、スケジュールされたタスクまたはオンデマンド タスクに固有です。 オンデマンドまたはスケジュールされたジョブの Program.cs ファイルには、WebJob を明示的に実行するためのコードが含まれています。\n\n<a href=\"https://acom.azurecomcdn.net/80C57D/blogmedia/blogmedia/2014/11/09/clip_image025.jpg\"><img style=\"padding-top: 0px;padding-left: 0px;padding-right: 0px;border-width: 0px\" title=\"clip_image025\" alt=\"clip_image025\" src=\"https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/clip_image025_thumb.jpg\" width=\"610\" height=\"303\" border=\"0\" /></a>\n\n継続的 WebJobs は、別の Program.cs ファイルを取得します。 継続的なテンプレート コードには、WebJob ホストを開始して終了をブロックする呼び出しが含まれています。\n\n<a href=\"https://acom.azurecomcdn.net/80C57D/blogmedia/blogmedia/2014/11/09/clip_image027.jpg\"><img style=\"padding-top: 0px;padding-left: 0px;padding-right: 0px;border-width: 0px\" title=\"clip_image027\" alt=\"clip_image027\" src=\"https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/clip_image027_thumb.jpg\" width=\"610\" height=\"303\" border=\"0\" /></a>\n\n同様に、Functions.cs ファイル内の継続的 Web ジョブ プロジェクトにドロップされるコードには、キューの監視に使用される WebJobs SDK 対応属性の一部Azure Storage含まれています。\n\n<a href=\"https://acom.azurecomcdn.net/80C57D/blogmedia/blogmedia/2014/11/09/clip_image029.jpg\"><img style=\"padding-top: 0px;padding-left: 0px;padding-right: 0px;border-width: 0px\" title=\"clip_image029\" alt=\"clip_image029\" src=\"https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/clip_image029_thumb.jpg\" width=\"610\" height=\"300\" border=\"0\" /></a>\n<h2>WebJobs サーバー エクスプローラーの機能</h2>\nWeb ジョブは、サーバー エクスプローラーの対応する Web サイトの下に表示され、実行モードに従ってグループ化されます。\n\n<a href=\"https://acom.azurecomcdn.net/80C57D/blogmedia/blogmedia/2014/11/09/clip_image031.jpg\"><img style=\"padding-top: 0px;padding-left: 0px;padding-right: 0px;border-width: 0px\" title=\"clip_image031\" alt=\"clip_image031\" src=\"https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/clip_image031_thumb.jpg\" width=\"489\" height=\"520\" border=\"0\" /></a>\n\n各 WebJob Server Explorer ノードは、追加された機能のコンテキスト メニュー ジェスチャを公開します。 WebJob のダッシュボードへのアクセスは、1 回のメニュー クリックと同じくらい簡単です。 開発者は、コンテキスト メニュー ジェスチャを使用して、オンデマンドまたはスケジュールされた Web ジョブを実行することもできます。\n\n<a href=\"https://acom.azurecomcdn.net/80C57D/blogmedia/blogmedia/2014/11/09/clip_image033.jpg\"><img style=\"padding-top: 0px;padding-left: 0px;padding-right: 0px;border-width: 0px\" title=\"clip_image033\" alt=\"clip_image033\" src=\"https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/clip_image033_thumb.jpg\" width=\"610\" height=\"450\" border=\"0\" /></a>\n\n継続的な WebJob ノードでは、Azure WebJob のダッシュボードにアクセスするためのワンクリックの方法も提供されます。 継続的な Web ジョブは、コンテキスト メニューから開始または停止することもできます。\n\n<a href=\"https://acom.azurecomcdn.net/80C57D/blogmedia/blogmedia/2014/11/09/clip_image035.jpg\"><img style=\"padding-top: 0px;padding-left: 0px;padding-right: 0px;border-width: 0px\" title=\"clip_image035\" alt=\"clip_image035\" src=\"https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/clip_image035_thumb.jpg\" width=\"610\" height=\"507\" border=\"0\" /></a>\n<h2>Web ジョブのリモート デバッグ</h2>\n継続的な Web ジョブに対するリモート デバッグのサポートも追加されました。 継続的 Web ジョブが開始されると、デバッガーのアタッチ ジェスチャは、Continuous WebJob のノードのコンテキスト メニューから表示されます。\n\n<a href=\"https://acom.azurecomcdn.net/80C57D/blogmedia/blogmedia/2014/11/09/clip_image037.jpg\"><img style=\"padding-top: 0px;padding-left: 0px;padding-right: 0px;border-width: 0px\" title=\"clip_image037\" alt=\"clip_image037\" src=\"https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/clip_image037_thumb.jpg\" width=\"610\" height=\"445\" border=\"0\" /></a>\n\n継続的 Web ジョブのコードにブレークポイントを配置し、デバッガーをアタッチすることで、コードをステップ実行し、Visual Studioでローカルで実行されているかのようにデバッグできます。\n\n<a href=\"https://acom.azurecomcdn.net/80C57D/blogmedia/blogmedia/2014/11/09/clip_image039.png\"><img style=\"padding-top: 0px;padding-left: 0px;padding-right: 0px;border-width: 0px\" title=\"clip_image039\" alt=\"clip_image039\" src=\"https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/clip_image039_thumb.png\" width=\"610\" height=\"274\" border=\"0\" /></a>\n<h1>Storage Explorer</h1>\nBLOB フォルダーを使用すると、BLOB のグループを論理ユニットに簡単にセグメント化できます。これは、1 つの BLOB コンテナーを使用してすべての情報を格納する場合に特に便利です。 これらの BLOB フォルダーは、文字で区切られた <b>/</b> BLOB 名のプレフィックスにすぎません。 たとえば、<b>ピクチャ</b> フォルダー内に <b>file.png</b> BLOB がある場合、その BLOB の URL は <span style=\"text-decoration: underline\">https://&lt; storageaccountname.blob.core.windows.net/&gt;&lt; blobcontainernamepictures&gt;/<b>/file.png</b></span>\n\nこのリリース以降、Azure BLOB コンテナー内のフォルダーを確認し、Visual Studioから移動できます。 フォルダーをダブルクリックしてフォルダー内に移動し、上向き矢印を使用してレベルを上げます。\n\n<a href=\"https://acom.azurecomcdn.net/80C57D/blogmedia/blogmedia/2014/11/09/clip_image041.png\"><img style=\"padding-top: 0px;padding-left: 0px;padding-right: 0px;border-width: 0px\" title=\"clip_image041\" alt=\"clip_image041\" src=\"https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/clip_image041_thumb.png\" width=\"610\" height=\"208\" border=\"0\" /></a>\n\nまた、[アップロード] ボタンを使用して BLOB をAzure Storageにアップロードするときにフォルダーを作成することもできます。\n<h1>HDInsight サーバー エクスプローラーと Hive クエリのサポート</h1>\nこれで、SDK には、HDInsight のホストされた Hadoop サービスを使用し、Hive を使用してデータセットのクエリを実行してビッグ データを使用する生産性を高めるツールがサーバー エクスプローラーに含まれています。\n\n他の Azure サービスと同様に、サブスクリプション内の HDInsight リソースを参照し、一般的な開発テスト タスクを実行できます。サーバー エクスプローラーを使用すると、Hive テーブルを簡単に参照したり、スキーマを調べたり、テーブルの最初の 100 行に対してクエリを実行したりできます。これは、使用しているデータの形状を理解するのに役立ちます。\n\nまた、Hive クエリを作成し、ジョブとして送信するためのツールもあります。 Hadoop クラスターに対するコンテキスト メニューを使用して、クイック スクリプトの \"Hive クエリの記述\" からすぐに始めます。 ジョブ ブラウザー ツールは、ジョブの送信と状態を視覚化するのに役立ちます。任意のジョブをダブルクリックして、[Hive ジョブの概要] ウィンドウで概要と詳細を取得します。次の例では、地理情報を使用してテーブルにクエリを実行して、すべての国の数を検索し、国別に並べ替えます。\n\n最後に、HDInsight で使用されるバッキング BLOB ストレージがエクスプローラーに一覧表示されます。任意の BLOB コンテナーに移動し、開いてファイルを操作できます。 バッキング ストアは、Azure ダッシュボードでのクラスターの作成時に Hadoop クラスターに関連付けられます。 Hadoop クラスターの管理は、引き続き同じ Azure ダッシュボードで実行されます。\n\n<a href=\"https://acom.azurecomcdn.net/80C57D/blogmedia/blogmedia/2014/11/12/clip_image002.jpg\"><img style=\"padding-top: 0px;padding-left: 0px;padding-right: 0px;border-width: 0px\" title=\"clip_image002\" alt=\"clip_image002\" src=\"https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/clip_image002_thumb.jpg\" width=\"610\" height=\"367\" border=\"0\" /></a>\n\nより複雑なスクリプト開発とライフサイクル管理のために、Visual Studio内に Hive プロジェクトを作成できます。 新しいプロジェクト ダイアログ (下記参照) には、新しい HDInsight テンプレート カテゴリが表示されます。 役立つ出発点は、Hive サンプル プロジェクトの種類です。 このプロジェクトには、Web サーバー ログを処理する場合の、より複雑な Hive クエリとサンプル データが事前に設定されています。\n\n<a href=\"https://acom.azurecomcdn.net/80C57D/blogmedia/blogmedia/2014/11/12/clip_image0041.png\"><img style=\"padding-top: 0px;padding-left: 0px;padding-right: 0px;border-width: 0px\" title=\"clip_image004[1]\" alt=\"clip_image004[1]\" src=\"https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/clip_image0041_thumb.png\" width=\"610\" height=\"423\" border=\"0\" /></a>\n<h1>Visual Studio 2015 Preview</h1>\nAzure SDK 2.5 は、Visual Studio 2015 プレビューで初めてサポートされる Azure SDK です。 上記のVisual Studio 2013機能に加えて、Visual Studio 2015 プレビューでは次の機能が導入されています。\n<h1>複数のアカウントでサインインする</h1>\nVisual Studio 2015 Preview に、Azure サブスクリプションにも関連付けられているアカウントでサインインすると、自動的に Azure にサインインします。 サーバー エクスプローラーに Azure リソースが表示されます。 同じアカウントで 2 回サインインする必要がなくなりました。\n\n複数のアカウントで同時にサインインすることもできます。 たとえば、MSDN サブスクリプションに関連付けられている Microsoft アカウントでサインインし、会社のサブスクリプションの組織アカウントで同時にサインインできます。 別のアカウントでサインインするには、サーバー エクスプローラーで Azure ノードを右クリックし、[サブスクリプションの管理] を選択<b>します。 </b>これにより、[Microsoft Azure サブスクリプションの管理] ダイアログが表示され、Visual Studioに追加したすべてのアカウントが表示されます。 新しいアカウントを追加するには、[アカウントの追加] リンクをクリックします。\n\n<a href=\"https://acom.azurecomcdn.net/80C57D/blogmedia/blogmedia/2014/11/09/clip_image043.png\"><img style=\"padding-top: 0px;padding-left: 0px;padding-right: 0px;border-width: 0px\" title=\"clip_image043\" alt=\"clip_image043\" src=\"https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/clip_image043_thumb.png\" width=\"500\" height=\"360\" border=\"0\" /></a>\n\nまた、このダイアログでアカウント、サブスクリプション、リージョン、または証明書をオフにして、サーバー エクスプローラーで関連付けられているリソースをフィルター処理することもできます。\n\n注: サインイン機能のもう 1 つの優れた改善点は、証明書をインポートせずにサーバー エクスプローラーで SQL データベースを表示できることです。 この特定の機能は、Visual Studio 2013 Update 4でも使用できます。 Azure アカウントにサインインし、サーバー エクスプローラーで SQL データベースを表示するだけです。\n<h1>接続済みサービスの追加</h1>\nVisual Studio 2015 の新しい [接続済みサービスの追加] ダイアログでは、アプリケーションをAzure Storage、Azure Mobile Services、Office 365、Salesforce に簡単に接続できます。 シングル サインオンAzure Active Directory設定することもできます。\n\nASP.NET Web アプリケーションからAzure Storageへの接続を追加するには、[参照] ノードを右クリックし、[<b>接続済みサービスの追加</b>] を選択します。\n\n<a href=\"https://acom.azurecomcdn.net/80C57D/blogmedia/blogmedia/2014/11/09/clip_image045.jpg\"><img style=\"padding-top: 0px;padding-left: 0px;padding-right: 0px;border-width: 0px\" title=\"clip_image045\" alt=\"clip_image045\" src=\"https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/clip_image045_thumb.jpg\" width=\"436\" height=\"379\" border=\"0\" /></a>\n\n[接続済みサービスの追加] ダイアログで、サービス プロバイダーの一覧から<b>Azure Storage</b>を選択し、[<b>構成</b>] をクリックします。\n\n<a href=\"https://acom.azurecomcdn.net/80C57D/blogmedia/blogmedia/2014/11/09/clip_image047.png\"><img style=\"padding-top: 0px;padding-left: 0px;padding-right: 0px;border-width: 0px\" title=\"clip_image047\" alt=\"clip_image047\" src=\"https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/clip_image047_thumb.png\" width=\"610\" height=\"400\" border=\"0\" /></a>\n\n後続のAzure Storage ダイアログには、さまざまなサブスクリプションから使用できるストレージ アカウントの一覧が表示されます。 既存のストレージ アカウントを選択するか、新しいストレージ アカウントをプロビジョニングします。 アカウントを選択したら、[ <b>追加 </b>] をクリックして、アプリケーションからそのストレージ アカウントに接続します。\n\n<a href=\"https://acom.azurecomcdn.net/80C57D/blogmedia/blogmedia/2014/11/09/clip_image049.png\"><img style=\"padding-top: 0px;padding-left: 0px;padding-right: 0px;border-width: 0px\" title=\"clip_image049\" alt=\"clip_image049\" src=\"https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/clip_image049_thumb.png\" width=\"610\" height=\"419\" border=\"0\" /></a>\n\nダイアログには、最新のStorage NuGet パッケージと、web.configで選択したストレージ アカウントの接続文字列を使用して、Azure Storage参照が追加されます。次に、Azure Storageを使用するための次の手順を示すはじめに ページが表示されます。 ソリューション エクスプローラーで<b>GettingStarted.htmlファイルを</b>右クリックし、[<b>ブラウザーで表示</b>] を選択して、はじめに ページを再表示します。\n\n[接続済みサービスの追加] ダイアログの [スマイルの送信] アイコンをクリックして、フィードバックをお送りください。 フィードバックをお寄せください。\n<h1>Enterprise シングル サインオン </h1>\nビジネス アプリケーションの一般的なタスクは、Azure Active Directoryを使用してエンタープライズ シングル サインオン用にアプリケーションを構成することです。 これで、アプリケーションを右クリックして [Azure AD Authenticationの<b>構成</b>] を選択することで、アプリケーションの構築中にいつでも簡単にこれを行うことができます。 これにより、[接続済みサービスの追加] エクスペリエンスに似たウィザードが表示され、Active Directory で動作するようにアプリケーションを構成するプロセスが案内されます。 ウィザードでActive Directory ドメインを指定すると、その Active Directory にアプリケーションが登録され、サインインを求めるメッセージが表示されるアプリケーションが構成されます。 アプリケーションをドメインに登録することは、開発テスト環境で作業を開始するための優れた方法です。 アプリケーションのライフサイクルで環境間を移動する際に、他のドメインを使用するようにアプリケーションの構成ファイルを簡単に再構成できます。 この機能<a href=\"https://channel9.msdn.com/Events/Visual-Studio/Connect-event-2014/411\" title=\"の詳細については、「Azure Active Directoryの概要\">Azure Active Directory概要</a>」ビデオを参照してください。\n\n<a href=\"https://acom.azurecomcdn.net/80C57D/blogmedia/blogmedia/2014/11/12/foo.png\"><img src=\"https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/foo-537x369.png\" alt=\"Configure Azure AD Authentication\" width=\"537\" height=\"369\" class=\"alignnone size-medium wp-image-219253\" style=\"padding-top: 0px;padding-left: 0px;padding-right: 0px;border-width: 0px\" /></a>\n\n<h1>Microsoft Code Analysis for Azure Preview</h1>\nVisual Studio 2015 プレビューの.NET Compiler Platformには、コードを記述するときにコードの問題をリアルタイムで検出する新しいコード分析機能が用意されています。 これらの機能を活用して、Microsoft Code Analysis for Azure NuGet パッケージを通じて利用できる Azure 用のコード分析規則の小さなセットを作成しました。 これらのルールは、コード内の問題を特定し、可能な場合は自動修正を推奨します。\n\nパッケージをインストールするには、ソリューションを右クリックし、[ソリューション<b>のNuGetパッケージの管理</b>] を選択します。 [<b>プレリリースを含める</b>] チェック ボックスがオンになっていることを確認し、<b>Azure Code Analysis</b>を検索します。\n\n<a href=\"https://acom.azurecomcdn.net/80C57D/blogmedia/blogmedia/2014/11/09/clip_image051.png\"><img style=\"padding-top: 0px;padding-left: 0px;padding-right: 0px;border-width: 0px\" title=\"clip_image051\" alt=\"clip_image051\" src=\"https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/clip_image051_thumb.png\" width=\"610\" height=\"96\" border=\"0\" /></a>\n\n<b>これにより、Microsoft.VisualStudio.Azure.CodeAnalysis パッケージが見</b>つかります<b>。</b> ソリューションでプロジェクトを選択し、[ <b>インストール</b> ] をクリックして、それらのプロジェクトのコード分析を有効にします。 アナライザーがプロジェクトに追加されると、コード分析は常に実行されます。 ソリューション全体でコード分析を実行するには、ソリューションをビルドします。 ソース ファイルを編集すると、コード分析の警告またはエラーがエラー 一覧に自動的に表示されます。\n\nコードを作成すると、問題が発生した行には、赤 (エラーの場合) または緑 (警告の場合) の下線が表示されます。 下線付きコードにカーソルを合わせると、詳細情報が表示されます。 問題の横にある電球をクリックすると、修正プログラムの詳細が表示されます。 たとえば、次のスクリーンショットは、非同期として宣言されているワーカー ロールの Run() メソッドに関するコードの問題を示しています。 これは、ワーカー ロールで一部の非同期操作を実行する一般的なシナリオです。 ただし、Run() メソッド自体を非同期として宣言すると、ロールは無限ループで再起動されます。 問題を検出し、電球メニューを介して、非同期操作を別のメソッドに移動する Run() メソッドをリファクタリングする自動修正を提供します。\n\n<b><a href=\"https://acom.azurecomcdn.net/80C57D/blogmedia/blogmedia/2014/11/09/clip_image053.png\"><img style=\"padding-top: 0px;padding-left: 0px;padding-right: 0px;border-width: 0px\" title=\"clip_image053\" alt=\"clip_image053\" src=\"https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/clip_image053_thumb.png\" width=\"610\" height=\"206\" border=\"0\" /></a></b>\n\nすべてのコードの問題に自動修正があるわけではありません。 自動修正プログラムを提供できない場合は、電球メニューから問題の解決方法を説明するドキュメントが表示されます。\n\nNuGet パッケージで提供されるコード分析規則は、新しい .NET コンパイラでコード分析機能を紹介するように設計された最初のルールセットにすぎません。 フィードバックを受け取ると、より多くのルールを提供し、エクスペリエンスを反復処理し続けます。\n<h1>ASP.NET 5.0 発行</h1>\nASP.NET 5.0 (vNext) プロジェクトを発行するには、プロジェクトを右クリックし、[<b>発行]</b> を選択します。 このリリースの新機能として、[プレビュー] タブが有効になり、アップロードしようとしているファイルを確認できるようになりました。\n\n<a href=\"https://acom.azurecomcdn.net/80C57D/blogmedia/blogmedia/2014/11/09/Publish1.png\"><img style=\"padding-top: 0px;padding-left: 0px;padding-right: 0px;border-width: 0px\" title=\"Publish1\" alt=\"Publish1\" src=\"https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/Publish1_thumb.png\" width=\"610\" height=\"479\" border=\"0\" /></a>\n<h1>まとめ</h1>\nAzure SDK 2.5 と Visual Studio 2015 プレビューにより、豊富なクラウド アプリケーションの開発をこれまで以上に簡単に開始できます。 Azure デベロッパー センターの .NET 開発者リソースのセットの増加に加えて、今日のリリースでは、開発エクスペリエンスをより楽しく効率的にする必要があります。 以前のバージョンからの重大な変更とプレビュー機能に関する既知の問題については、 <a href=\"https://msdn.microsoft.com/en-us/library/azure/dn873976.aspx\">Azure SDK 2.5 リリース ノート</a> を参照してください。\n\nまだ Azure アカウントをお持ちでない場合は、無料試用版にサインアップして、上記のすべての機能の使用を今すぐ開始できます。 その後、 <a href=\"https://azure.microsoft.com/en-us/develop/net/\">Azure デベロッパー センター</a> にアクセスして、アプリをビルドする方法の詳細を確認できます。 SDK の使用を開始するには、次の 2 つの方法があります。\n<ul>\n <li><span style=\"text-decoration: underline\">SDK をローカルにインストール</span>する: <a href=\"https://www.microsoft.com/web/handlers/webpi.ashx/getinstaller/VWDOrVs2013AzurePack.appids\">VS 2013VS</a> |  <a href=\"https://www.microsoft.com/web/handlers/webpi.ashx/getinstaller/VWDOrVs11AzurePack.appids\">2012VS</a> |  <a href=\"https://www.microsoft.com/web/handlers/webpi.ashx/getinstaller/VWDOrVs2015AzurePack.appids\">2015 Preview 用に</a>ダウンロードする</li>\n <li><span style=\"text-decoration: underline\">Azure の VM イメージ</span>: Azure SDK 2.5 の使用を開始する最も簡単な方法は、Azure SDK 2.5 を使用した Visual Studio 2015 プレビュー用、または Azure 仮想マシン ギャラリーから Azure SDK 2.5 を使用した Visual Studio Community 2013 のイメージを使用することです。 これらのイメージはいずれも、すべての Azure ユーザーが利用できます。 MSDN サブスクライバーの場合は、Windows 8.1とWindows Server 2012に基づいて追加のVisual Studio 2013 イメージを利用することもできます。このイメージは、Update 4 と Azure SDK 2.5 Visual Studioに更新されています</li>\n</ul>\n<h1>謝辞</h1>\n<i>このブログ記事は、複数のユーザーのコラボレーションです。Saurabh Bhatia と Azure Cloud Tools チームに感謝します。</i>"
}