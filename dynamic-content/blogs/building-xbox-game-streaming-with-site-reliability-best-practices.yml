### YamlMime:Yaml
ms.openlocfilehash: cfa577a765af6228547b52174592dfeb5f0e6172
ms.sourcegitcommit: d03bdc7fe5447adb6530886aab848b75fe8fa8ee
ms.translationtype: MT
ms.contentlocale: ja-JP
ms.lasthandoff: 03/11/2022
ms.locfileid: "139909058"
Slug: building-xbox-game-streaming-with-site-reliability-best-practices
Title: サイト信頼性のベスト プラクティスを使用した Xbox ゲーム ストリーミングの構築
Summary: 先月、Microsoft の複数のチームDevOpsストーリーを通じて、Microsoft での新しい取り組みについて共有し始め、導入に対するアプローチDevOpsしました。
Content: >-
  <p>先月、Microsoft の複数のチームDevOpsのストーリーと、導入の取り組みがどのように取り組むかについて、<a href="https://azure.microsoft.com/en-us/blog/sharing-the-devops-journey-at-microsoft/" target="_blank">Microsoft</a> での新しい取り組DevOpsしました。 このシリーズの次のストーリーとして、従来の運用ロールからサイト信頼性エンジニアリング (SRE) の役割 (Xbox 信頼性エンジニアリングおよび運用 (xREO) チームのストーリー) への移行を 1 つのチームで共有したいと考えます。</p>


  <p>この切り替えは簡単ではなく、Microsoft がクラウド ゲーム ストリーミング (プロジェクト <a href="https://www.xbox.com/en-US/xbox-game-streaming/project-xcloud" target="_blank">xCloud</a>) を通じて、Xbox ゲームを任意の場所でゲームに持ち込もうと決めたときに必要でした。 &mdash;最高のカスタマー エクスペリエンスを備えた最先端のテクノロジを提供するために、チームは、開発チームとのコラボレーションの実現方法を再定義し、自動化に投資し、アプリケーションライフサイクルの初期段階に関与する必要がありました。 このブログでは、チーム&rsquo;が途中で収集した主要な学習の一部を確認します。 チームの完全なストーリーを確認するには、 <a href="https://azure.microsoft.com/en-us/solutions/devops/devops-at-microsoft/xbox-sre/" target="_blank">xREO チームの取り組みをご覧ください</a>。</p>


  <h2>一貫したゲームの要件と共同作業の必要性</h2>


  <p>ゲーム ストリーミング セッションを成功するには、一貫したエクスペリエンスが重要です。 ゲームがクラウドからストリーミングされたゲームを確実に体験するには、近くのコンソールで実行されているような感じがする必要があります。 つまり、エンド ユーザーに近い多くのデータ センターで実行されるグローバル分散クラウド ソリューションを作成します。 <a href="https://azure.microsoft.com/en-us/global-infrastructure/" target="_blank">Azures&rsquo; グローバル インフラストラクチャでは</a> これを可能にしていますが、非常に多くの Azure リージョンで実行されるシステムを運用する方法は重大な課題です。</p>


  <p>このテクノロジの設計と構築&ldquo;&rdquo;を開始した Xbox 開発者は、このシステムを構築して運用に投げ込むのはできないと理解しました。 どちらのチームも、アプリケーションライフサイクル全体を通じて連携して共同作業を行い、運用環境での運用方法に関する考慮事項を考慮してシステムを最初から設計する必要があります。</p>


  <p><img alt="Mobile device showing a racing game streamed from the cloud" border="0" height="529" src="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/3117ec80-75a2-47d5-8aaa-d37c1670b6e5.jpg" style="border: 0px currentcolor; border-image: none; display: inline; background-image: none;" title="" width="940"></p>


  <h2>運用を念頭に置いてクラウド ソリューションを設計する</h2>


  <p>多くの大規模な組織では、開発チームと運用チームがサイロで作業しているのが一般的です。 開発者はシステムの&rsquo;計画と構築時に操作を常に考慮する必要はありません。一方、運用チームは、コードをデプロイして運用する場合でも、コードに触れる権限はありません。 SRE アプローチでは、システムの信頼性がアプリケーションのライフサイクル全体に組み込み、実稼働環境でシステムを運用するチームは計画フェーズで重要な共同作成者です。 設計フェーズで xREO チームが関与する新しいアプローチでは、コラボレーション環境を実現し、共同テクノロジの選択を行い、スケーリングに必要な要件で動作できるシステムを設計しました。</p>


  <h2>コンテナーを利用して所有権を明確に定義する</h2>


  <p>開発チームと xREO チームが最初に行った技術的な決定の 1 つは、コンテナー テクノロジを利用するマイクロサービス アーキテクチャを実装する方法でした。 これにより、開発チームは所有する .NET Core マイクロサービスをコンテナー化し、コンテナーを実行し、xREO チームが所有するクラウド インフラストラクチャから依存関係を削除できます。</p>


  <p>両方のチームが早い段階で行ったもう 1 つの技術的な決定は、基になるコンテナー オーケストレーション プラットフォームとして Kubernetes を使用する方法でした。 これにより、xREO チームは <a href="https://azure.microsoft.com/en-us/services/kubernetes-service/" target="_blank">、Kubernetes</a> クラスターのデプロイを簡略化するマネージド Kubernetes クラウド プラットフォームである Azure Kubernetes Service (AKS) を活用し、チームが複数の Azure リージョンで複数のクラスターを実行する必要がある運用上の複雑さの多くを取り除く必要がありました。 これらの共同選択&mdash;によって所有権が明確にされました。開発者はコンテナー内のすべての責任を負い、xREO チームは AKS クラスターと他の Azure サービスを担当し、これらのコンテナーをホストするクラウド インフラストラクチャを作成します。 各チームは、運用におけるそれぞれの部分のデプロイ、監視、操作を所有しています。</p>


  <p>この種のアプローチでは、明確な説明責任が生み出され、実稼働環境でのインシデント管理が容易になります。これは、インフラストラクチャとアプリケーション ロジックにコードの依存関係が含まれるモノリシック アーキテクチャでは非常に困難であり、物事が横向きになるときにもつれにくいものになります。</p>


  <h2><img alt="Two members of the xREO team, seated in a conference room in front of a laptop." border="0" height="557" src="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/5bda261e-23b0-4868-a610-b307d5b939d1.jpg" style="border: 0px currentcolor; border-image: none; display: inline; background-image: none;" title="" width="991"></h2>


  <h2>インフラストラクチャの自動化によるスケーリング</h2>


  <p>xREO チームが投資したもう 1 つのベスト プラクティスは、インフラストラクチャの自動化でした。 各 Azure リージョンに複数のクラウド サービスを手動でデプロイする方法はスケーラブルではなく、時間が長すぎます。 コードとしての&ldquo;&rdquo;インフラストラクチャ (IaC) と呼ばれるプラクティスを使用して、チームは <a href="https://docs.microsoft.com/en-us/azure/azure-resource-manager/template-deployment-overview" target="_blank">Azure Resource Manager</a> テンプレートを使用して、最小限の労力で複数の Azure リージョンにデプロイできるクラウド環境の宣言定義を作成しました。</p>


  <p>インフラストラクチャをコードとして管理すると、継続的インテグレーションと継続的デリバリー (CI/CD) を使用してデプロイし、新しい Azure リソースを既存のデータ センターにデプロイしたり、インフラストラクチャ定義を更新したり、必要に応じて新しい Azure リージョンをオンラインにしたりするプロセスをさらに自動化できます。 IaC と CI/CD の両方で、チームは無駄をなくし、反復的な作業を避け、手動の手順に伴う人的エラーのリスクの大部分を取り除く許可を得ていました。 チームは、手動作業とチェックリストに時間を費やすのではなく、プラットフォームとその回復性の向上に集中できます。</p>


  <h2>サイト信頼性エンジニアリングの動作&nbsp;</h2>


  <p>xREO チームの取り組みでは、ゲームのユーザーに最高のカスタマー エクスペリエンスを提供する必要が生じ始めました。 これは、最先端のイノベーションによって顧客に新しいエクスペリエンスを提供したいチームが、ソフトウェアの設計、構築、運用の方法を進化させる必要がある方法を示す良い例です。 運用へのアプローチをシフトし、開発チームとより密接に共同作業を行うのは、xREO チームが行った真の変革でした。</p>


  <p>この新しい考え方が整ったので、チームは、より多くの回復性を構築し続け、システムをさらにスケーリングし、クラウド ゲーム ストリーミングの約束をすべてのマージャーに提供する立場に置かされました。</p>


  <h2>リソース</h2>


  <ul>
      <li><a href="https://azure.microsoft.com/en-us/solutions/devops/devops-at-microsoft/xbox-sre" target="_blank">xREO チームの完全なストーリー</a></li>
      <li>その他のストーリー: <a href="https://azure.microsoft.com/en-us/solutions/devops/devops-at-microsoft/" target="_blank">Microsoft DevOps体験</a></li>
      <li><a href="https://developer.microsoft.com/en-us/games" target="_blank">Microsoft Game Stack</a></li>
  </ul>
