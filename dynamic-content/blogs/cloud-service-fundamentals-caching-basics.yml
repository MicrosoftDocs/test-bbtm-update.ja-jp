### YamlMime:Yaml
ms.openlocfilehash: 1cb25e6c04880fda4e7b3d7fec549cd9aaa4d529
ms.sourcegitcommit: d03bdc7fe5447adb6530886aab848b75fe8fa8ee
ms.translationtype: MT
ms.contentlocale: ja-JP
ms.lasthandoff: 03/11/2022
ms.locfileid: "139893125"
Slug: cloud-service-fundamentals-caching-basics
Title: クラウドサービスの基礎-キャッシュの基礎
Summary: この記事は、AzureCAT チームからの Rama Rama によって執筆されました。  "CSFundamentals 基礎" と呼ばれる "クラウドサービスの基礎" アプリケーションは、データベースに対応した Azure を構築する方法を示しています...
Content: '<p>この記事は、AzureCAT チームからの <a href="https://social.msdn.microsoft.com/profile/rama%20ramani%20(azure%20cat)/">Rama Rama</a> によって執筆されました。</p>  <p>"CSFundamentals 基礎" と呼ばれる "<a href="https://code.msdn.microsoft.com/Cloud-Service-Fundamentals-4ca72649" target="_blank">クラウドサービスの基礎</a>" アプリケーションは、データベースによってサポートされる Azure サービスを構築する方法を示しています。 &nbsp;シャーディングの以前の DAL &ndash; のブログ記事では、データベース層で水平方向のスケーラビリティを実装するための <em>シャーディング</em> という手法について説明しました。 この記事では、キャッシュの必要性、考慮すべき考慮事項、Windows Azure で構成して実装する方法について説明します。</p>  <p>分散キャッシュアーキテクチャはスケールアウトに基づいて構築されています。複数のマシン (物理または仮想) は、ワークロードを分散するための固有のパーティション分割機能を使用して、クラスターリングの一部として参加します。 キャッシュはキー、値 &gt; 参照パラダイム、 &lt; 値はシリアル化されたオブジェクトです。これは、データベース内の複数のテーブル間の結合など、はるかに複雑なデータストア操作の結果セットである可能性があります。 そのため、データストアに対して操作を何度も実行するのではなく、キャッシュに対してクイックキー検索を実行します。</p>  <h4>キャッシュの内容について</h4>  <p>まず、ワークロードを分析し、キャッシュに適した候補を決定する必要があります。 データがキャッシュされるたびに、キャッシュと &ldquo; &rdquo; staleness &rdquo; の間の &ldquo; 許容範囲は、アプリケーションの許容範囲内である必要があります。 全体的には、キャッシュを使用して、ユーザープロファイル、ユーザーセッション (シングルユーザーの読み取り/書き込み) などの参照 (すべてのユーザーの読み取り専用データ)、または場合によってはリソースデータ (ロック API を使用してすべてのユーザーに対して読み取り/書き込み) を行うことができます。 特定のデータセットが急速に変化している場合や、アプリケーションが staleness を許容できない場合や、トランザクションを実行する必要がある場合など、特定のデータセットがキャッシュ &ndash; に適していないことがあります。</p>  <h4>容量計画</h4>  <p>次の手順では、アプリケーションのキャッシュ要件を推定します。 &nbsp;これには、キャッシュサイズだけでなく、一連のメトリックを確認することが含まれます。</p>  <ul>  <li><strong>キャッシュサイズ:</strong> 必要なメモリ量は、オブジェクトの平均サイズとオブジェクト数を使用して概算できます。</li>  <li><strong>アクセスパターン &amp; スループットの要件:</strong> 読み取り/書き込みミックスでは、作成された新しいオブジェクト、既存のオブジェクトの再書き込み、またはオブジェクトの読み取りが示されます。</li>  <li><strong>ポリシー設定:</strong>有効期限 (TTL)、高可用性 (HA)、有効期限の種類、削除ポリシーを設定します。</li>  <li><strong>物理リソース:</strong> メモリの外部では、ネットワーク帯域幅と CPU 使用率も重要です。 ネットワーク帯域幅は、特定の入力に基づいて推定される場合がありますが、ほとんどの場合、これを監視し、再計算の基礎として使用する必要があります。</li>  </ul>  <p>より詳細なキャパシティプランニングスプレッドシートは、 <a href="https://msdn.microsoft.com/en-us/library/hh914129" target="_blank">https://msdn.microsoft.com/en-us/library/hh914129</a></p>  <h4>Azure キャッシュトポロジ</h4>  <p>次の表は、Azure で利用可能な PAAS オプションの一覧と、簡単な説明を示しています。&nbsp;</p>  <table border="1" cellspacing="0" cellpadding="0">  <tbody>  <tr>  <td valign="top" width="222">  <p>型</p>  </td>  <td valign="top" width="402">  <p>説明</p>  </td>  </tr>  <tr>  <td valign="top" width="222">  <p>In-Role 専用</p>  </td>  <td valign="top" width="402">  <p>専用トポロジでは、キャッシュ専用のワーカーロールを定義します。 これは、すべてのワーカーロールの使用可能なメモリが、キャッシュと運用のオーバーヘッドに使用されることを意味します。</p>  <p><a href="https://msdn.microsoft.com/en-us/library/windowsazure/hh914140.aspx" target="_blank">https://msdn.microsoft.com/en-us/library/windowsazure/hh914140.aspx</a></p>  </td>  </tr>  <tr>  <td valign="top" width="222">  <p>併置された In-Role<strong></strong></p>  </td>  <td valign="top" width="402">  <p>併置型トポロジでは、キャッシュのアプリケーションロールで使用可能なメモリの割合を使用します。 たとえば、各 web ロールインスタンスのキャッシュに対して、物理メモリの20% を割り当てることができます。</p>  <p><a href="https://msdn.microsoft.com/en-us/library/windowsazure/hh914128.aspx" target="_blank">https://msdn.microsoft.com/en-us/library/windowsazure/hh914128.aspx</a></p>  </td>  </tr>  <tr>  <td valign="top" width="222">  <p>Azure Cache Service の Windows<strong></strong></p>  </td>  <td valign="top" width="402">  <p>Windows Azure Cache Service (現在 (Sep 2013) はプレビュー段階です。 役に立つリンクのセットを次に示します。</p>  <p><a href="" target="_blank"></a></p>  <p><a href="https://msdn.microsoft.com/en-us/library/windowsazure/dn386094.aspx" target="_blank">https://msdn.microsoft.com/en-us/library/windowsazure/dn386094.aspx</a></p>  </td>  </tr>  <tr>  <td valign="top" width="222">  <p>Windows Azure 共有キャッシュ</p>  </td>  <td valign="top" width="402">  <p>(調整とクォータを使用した) マルチテナントキャッシュ (2014 年9月以降に廃止される)。 詳細については、「」を参照 <a href="https://azure.microsoft.com/en-us/pricing/details/cache/" target="_blank">https://azure.microsoft.com/en-us/pricing/details/cache/</a> してください。 キャッシュを活用するために、上記のオプションのいずれかを使用することをお勧めします。</p>  </td>  </tr>  </tbody>  </table>  <h4>実装の詳細</h4>  <p><a href="https://code.msdn.microsoft.com/Cloud-Service-Fundamentals-4ca72649" target="_blank">Csfundamentals アプリケーション</a>は In-Role 専用の Azure キャッシュを利用して、頻繁にアクセスされる情報 (ユーザープロファイル情報、ユーザーコメント) の読み取りを効率化します。 キャッシュ関連のワークロードを分離するため、In-Role 専用のデプロイが推奨されていました。 これは、パフォーマンスカウンター (CPU 使用率、ネットワーク帯域幅、メモリなど) を使用して監視でき、キャッシュロールインスタンスは適切にスケーリングされます。</p>  <p>注: csfundamentals 基礎の実装中に、新しい Windows Azure Cache Service を利用できませんでした。 キャッシュされたデータを CSFundamentals アプリケーションの外部で使用できるようにする必要がある場合は、この方法をお勧めします。</p>  <p>ICacheFactory インターフェイスは、GetCache メソッドシグネチャを定義します。 ICacheClient インターフェイスは、GET &lt; t &gt; および PUT &lt; t &gt; メソッドシグネチャを定義します。&nbsp;</p>  <p>パブリックインターフェイス ICacheClient</p>  <p>&nbsp;<a href=""><img src="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/8508.1.JPG" alt="" border="0"></a></p>  <p>AzureCacheClient は、このインターフェイスの実装であり、Windows azure キャッシュ NuGet パッケージを介して追加された Windows azure キャッシュクライアントアセンブリへの参照を含んでいます。</p>  <p>&nbsp;<a href=""><img src="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/4162.caching.png" alt="" border="0"></a></p>  <p>DataCacheFactory オブジェクトの作成では、キャッシュロールインスタンスへのコストのかかる接続が確立されるため、<a href="https://msdn.microsoft.com/en-us/library/dd642331.aspx" target="_blank">遅延 &lt; T &gt; </a>を使用して静的および遅延インスタンスとして定義されます。</p>  <p>app.config で自動検出が有効になっていて、キャッシュワーカーロールを正しくポイントするために識別子が使用されています。</p>  <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;自動検出 isEnabled = "true" identifier = "CSFundamentalsCaching"/&gt;</p>  <p>注: 新しい Windows azure Cache Service を使用するようにソリューションを変更するには、identifier 属性を Windows azure Portal から作成されたキャッシュサービスエンドポイントに置き換えます。 さらに、API キー (ポータルの [キーの管理] オプションを使用して取得可能) を app.config の messageSecurity authorizationInfo &rsquo; フィールドに &lsquo; コピーする必要があります。</p>  <p>GET &lt; t &gt; および PUT &lt; t &gt; メソッドの実装では、binaryserializer クラスを使用します。このクラスは、シリアル化と逆シリアル化のために Protobuf クラスを活用します。 <em>protobuf</em> は <a href="https://code.google.com/p/protobuf-net/" target="_blank">プロトコルバッファー</a>の .net 実装であり、.net オブジェクトを効率的かつ簡単にシリアル化することができます。 これは、protobuf-net NuGet パッケージを使用して追加されました。</p>  <p><a href=""><img src="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/3348.protobuf.png" alt="" border="0"></a></p>  <p>シリアル化では、渡されたパラメーター T の byte [] 配列が生成されます。これは Windows Azure Cache クラスターに格納されます。 特定のキーに対して要求されたオブジェクトを返すために、GET メソッドは逆シリアル化メソッドを使用します。</p>  <p><a href=""><img src="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/5482.2.JPG" alt="" border="0"></a></p>  <p>このブログでは、キャッシュの基礎の概要について説明します。 詳細については、 <a href="https://code.msdn.microsoft.com/Cloud-Service-Fundamentals-4ca72649" target="_blank">CloudServiceFundamentals Visual Studio ソリューションの icacheclient</a>、AzureCacheFactory、AzureCacheClient、および binaryserializer を参照してください。</p>'
