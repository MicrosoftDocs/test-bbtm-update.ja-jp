### YamlMime:Yaml
ms.openlocfilehash: 8ad01e90239f8582c2abc4b107c9123a1890b223
ms.sourcegitcommit: d03bdc7fe5447adb6530886aab848b75fe8fa8ee
ms.translationtype: MT
ms.contentlocale: ja-JP
ms.lasthandoff: 03/11/2022
ms.locfileid: "139891628"
Slug: how-skype-modernized-its-backend-infrastructure-using-azure-cosmos-db-part-3
Title: Azure Cosmos DB を使用したバックエンドインフラストラクチャの最新の Skype 方法-パート3
Summary: 'Azure Cosmos DB を使用すると、3つのモノリシックで地理的に分離されたデータストアを、スループットの向上、待機時間の短縮、可用性の向上を実現する、グローバルに分散された単一のユーザーデータサービスに置き換える Skype ます。 '
Content: >-
  <p><em>これは、実際のニーズを満たすために Azure Cosmos DB をどのように使用しているか、およびそれに加えた違い &rsquo; に関する3部構成のブログ投稿シリーズです。<a href="https://azure.microsoft.com/en-us/blog/how-skype-modernized-its-backend-infrastructure-using-azure-cosmos-db-part-1/">第1部</a>では、行動を取るために直面した Skype の課題について説明しました。<a href="https://azure.microsoft.com/en-us/blog/how-skype-modernized-its-backend-infrastructure-using-azure-cosmos-db-part-2/">パート 2</a>では、バックエンドインフラストラクチャを最新化するために Azure Cosmos DB Skype 実装する方法について説明します。この投稿 (3 部構成) では、これらの取り組みの結果について説明します。</em></p>


  <p><strong>注:</strong> 斜体/かっこ内のコメントは&#39;s です。</p>


  <h2>結果</h2>


  <h3>全体、待機時間、スケーラビリティなどの機能強化</h3>


  <p>Azure Cosmos DB を使用すると、3つのモノリシックで地理的に分離されたデータストアを、スループットの向上、待機時間の短縮、可用性の向上を実現する、グローバルに分散された単一のユーザーデータサービスに置き換える Skype ます。 新しい pc サービスでは、将来の成長に対応するためにオンデマンドで弾力的にスケーリングできます。また、独自のインフラストラクチャ &mdash; を維持する負担なしに、古い pc システムを維持するためのコストを抑えながら、そのデータの Skype チームの所有権を得ることができます。 ソリューションの開発は、Azure Cosmos DB によって提供される広範な機能と、それ &rsquo; が完全にホストされるサービスであるという点から、迅速かつ簡単に開発されました。</p>


  <h3>待機時間の短縮と待機時間の短縮</h3>


  <p>以前のソリューションと比較して、新しい pc サービスはスループットの向上と待機時間 &mdash; の短縮を実現しているため、Skype チームはすべての sla を簡単に満たすことができます。 &ldquo;Azure Cosmos DB によって有効になっているのと同じように、簡単な地理的分散は、kaduk のようなすべて &rdquo; の機能を実現するための重要な機能です。 &ldquo;たとえば、ユーザーがどこにいる &rsquo; かに近い場所にデータを格納できるようにすることで、呼び出し &mdash; のセットアップに使用される &rsquo; アクセス許可サービスに必要な時間を大幅に短縮し、そのタスクの全体的な1秒の SLA を満たすことができるようになりました。&rdquo;</p>


  <h3>より高い可用性</h3>


  <p>新しい PC サービスは、タイムアウト、デッドロック、サービス品質の低下 &mdash; を伴わずにワークロードをサポートしています。これは、ユーザーが不適切なデータを都合たり、待機したりすることがなくなることを意味します。 また、サービスは Azure Cosmos DB で実行されるため、Skype チームは、新しい pc サービスが実行されている基になるインフラストラクチャの可用性について心配する必要がなくなりました。&nbsp;</p>


  <p>&ldquo;Azure Cosmos DB では、すべてのマルチリージョンアカウントに対して99.999% の読み取り可用性 SLA が提供されています。組み込み機能を使用すると、kaduk というような、地域的な障害 &rdquo; が発生する可能性の低いイベントから保護できます。 &ldquo;マルチリージョンアカウントのフェールオーバーの順序に優先順位を付けることができます。また、手動でフェールオーバーをトリガーして、アプリケーション &mdash; のエンドツーエンドの可用性をテストすることもできます。これにより、データ損失がゼロになります。&rdquo;</p>


  <h3>柔軟なスケーラビリティ</h3>


  <p>Azure Cosmos DB を使用すると、Skype チームは、世界中でいつでも<a href="https://docs.microsoft.com/en-us/azure/cosmos-db/partition-data" target="_blank">ストレージとスループットを弾力的にスケーリング</a>できます。 スケールに必要な物理パーティションの管理はすべて Azure Cosmos DB によって完全に管理され、Skype チームにとっては透過的です。 Azure Cosmos DB は、物理パーティションと論理パーティション間でのデータの分散を処理し、可用性、一貫性、待機時間、スループットを損なうことなく、クエリ要求を適切なパーティション &mdash; にルーティングします。 これにより、チームは現在必要なストレージとスループットのみに対して料金を支払うことができ、必要になる前に &rsquo; 予備容量の時間、エネルギー、コストに投資する必要がなくなります。</p>


  <p>&ldquo;スケールに Azure Cosmos DB する機能は明らか &rdquo; です。 kaduk ということです。 &ldquo;18か月前に100テラバイトのデータを予定しており、その増加を処理する大きな問題140はありません。</p>


  <h3>メンテナンスと管理がゼロのデータ &ndash; の完全な所有権</h3>


  <p>Azure Cosmos DB は完全に管理された Microsoft Azure サービスなので、Skype チーム &rsquo; は日常の管理、ソフトウェアの展開と構成、アップグレードの処理について心配する必要はありません。 すべてのデータベースは自動的にバックアップされ、地域の障害から保護され、暗号化されているので、チーム &rsquo; は、新しい顧客価値の提供に専念するための時間を確保するために、このような作業 &mdash; について心配する必要はありません。</p>


  <p>&ldquo;新しい PC サービスの優れた点の1つは、データストアを完全に所有しているということです。これ &rsquo; までは、Kaduk で &rdquo; はありませんでした。 &ldquo;以前は、Skype が Microsoft によって最初に取得されたときに、データベースを管理するチームがいました。 &rsquo;管理を続行したくないので、中央チームに渡します。 現在、同じユーザーデータがフルコントロール &rsquo; に戻されています。日々のメンテナンス &mdash; には負担がかかっていませんが、この &rsquo; 2 つの長所はどちらも優れています。&rdquo;</p>


  <h3>コストの削減</h3>


  <p>kaduk &rsquo; のチーム &rsquo; は、古い pc データベースを維持するために支払いを行っていませんでしたが、コスト &mdash; がかかり、Azure Cosmos DB で実行されている新しいソリューションの月額料金が大幅に減少していることがわかっています。 &ldquo;新しい PC データストアは、古いものよりも約40% 低コストで &rdquo; あるということです。 &ldquo;現時点ではコストがかかりますが、すべての利点 &rsquo; を考慮してください。&rdquo;</p>


  <h3>迅速で簡単な実装</h3>


  <p>kaduk では、Azure Cosmos DB への移行が &ldquo; 非常にシンプルで簡単であると感じています。 &rdquo;開発は2017年5月から開始され、2017年10月に、すべての開発が完了し、チームはすべての 40億 Skype ユーザーの新しいソリューションへの移行を開始しました。 チームは、8人の開発者、1つのプログラムマネージャー、および1つのマネージャーで行います。</p>


  <p>&ldquo;私たちは Azure Cosmos DB を使用した経験がありませんでしたが、このような状況には非常に簡単 &rdquo; になりました。 &ldquo;いくつかの教訓が得られましたが、これは6か月で行いました。これは、この規模のプロジェクトでは非常に優れています。 この迅速な成功の理由の1つは、物理的なインフラストラクチャの展開について心配する必要がないということ &rsquo; でした。 また Azure Cosmos DB は、SQL の構文と変更フィードのストリーミング機能の両方が厳密な sla の下に組み込まれた、スキーマフリーのドキュメントデータベースを提供しています。 これにより、アーキテクチャが大幅に簡素化され、最小限の時間ですべての要件を満たすことができるようになりました。&rdquo;</p>


  <h3>得られた教訓</h3>


  <p>プロジェクトを確認すると、Kaduk によっていくつか &ldquo; の教訓が呼び戻されます。 &rdquo; 次のようなものがあります。</p>


  <ul>
   <li>パフォーマンス &ndash; <strong>向上のために Direct モードを使用する</strong><strong></strong>クライアントが Azure Cosmos DB に接続する方法は、特に観察されたクライアント側の待機時間に関して、パフォーマンスに大きな影響を与えます。 このチームは、既定のゲートウェイモード接続ポリシーを使用して開始しましたが、パフォーマンスが <a href="https://docs.microsoft.com/en-us/azure/cosmos-db/performance-tips" target="_blank">向上</a>しているため、Direct モード接続ポリシーに切り替えました。</li>
   <li><strong>ストアドプロシージャを記述して処理する方法について説明し</strong>ます。 &ndash;Azure Cosmos DB では、トランザクションを実装できるのは、1つのトランザクションとしてコレクションに対して登録および実行される JavaScript で記述されたアプリケーションロジックの<a href="https://docs.microsoft.com/en-us/rest/api/cosmos-db/stored-procedures" target="_blank">ストアドプロシージャ</a> &mdash; を使用する場合のみです。 <em>(Azure Cosmos DB では、JavaScript はデータベースと同じメモリ空間でホストされます。このため、ストアドプロシージャ内で行われた要求は、データベースセッションと同じスコープで実行されます。これにより、1つのストアドプロシージャの一部であるすべての操作に対して ACID を保証 Azure Cosmos DB できます)。</em></li>
   <li><strong>クエリデザイン</strong> &ndash; に注意するAzure Cosmos DB では、クエリは RU の消費量に大きな影響を与えます。 &rsquo;開発者は最初にクエリデザインにあまり注意を払っていませんが、RU のコストが必要以上に高くなっていることがすぐにわかりました。 これにより、可能な限りポイントドキュメントの読み取りを使用したり、API ごとにクエリの選択を最適化したりするなど、クエリのデザインの最適化に重点が投入されました。</li>
   <li><strong>Azure Cosmos DB SDK 2.x を使用して接続の使用</strong> &ndash; を最適化するAzure Cosmos DB 内では、各リージョンに格納されているデータは、数十の物理パーティションに分散されます。 読み取りと書き込みを行うには、Azure Cosmos DB クライアント SDK で、パーティションをホストしている物理ノードとの接続を確立する必要があります。 チームは Azure Cosmos DB SDK 1.x を使用して作業を開始しましたが、接続の多重化のサポートがないため、接続の確立と終了率が過剰になっていることがわかりました。 接続の多重化をサポートする Azure Cosmos DB SDK 2.x に切り替えると、問題 &mdash; を解決し、 <a href="https://docs.microsoft.com/en-us/azure/load-balancer/load-balancer-outbound-connections-classic" target="_blank">SNAT ポートの枯渇の問題</a>を軽減するのに役立ちます。</li>
  </ul>


  <p>次の図は、SDK 1.x を使用する場合の接続状態と time_waits を示しています。</p>


  <p><a href="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/cac09d06-6942-43fb-a46b-15249728b69f.png"><img alt="Chart showing connection when using SDK 1.x" border="0" height="399" src="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/87a294c4-dc66-4620-bb96-81cd063f9239.png" style="border: 0px currentcolor; border-image: none; margin-right: auto; margin-left: auto; float: none; display: block; background-image: none;" title="SDK 1.x を使用する場合の接続を示すグラフ" width="1012"></a></p>


  <p>次に示すのは、SDK 2.x に移行した後の同じです。</p>


  <p><a href="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/b055741f-a73d-4db2-8e8b-0edef0d462e8.png"><img alt="Chart showing connection when using SDK 2.x" border="0" height="393" src="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/e1d501df-7e69-43a2-a5b9-486998133d24.png" style="border: 0px currentcolor; border-image: none; margin-right: auto; margin-left: auto; float: none; display: block; background-image: none;" title="SDK 2.x を使用する場合の接続を示すグラフ" width="1144"></a></p>
