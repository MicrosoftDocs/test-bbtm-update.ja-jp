### YamlMime:Yaml
ms.openlocfilehash: a0c7d751ec977bca9720ad26a08130d2b85e937c
ms.sourcegitcommit: d03bdc7fe5447adb6530886aab848b75fe8fa8ee
ms.translationtype: MT
ms.contentlocale: ja-JP
ms.lasthandoff: 03/11/2022
ms.locfileid: "139894908"
Slug: announcing-node-for-azure-mobile-apps
Title: Azure Mobile Apps の Node.js サポートの発表
Summary: Azure Mobile Apps のノード SDK がリリースされたことを発表します。これにより、App Service で Node.js を使用してモバイルバックエンドを構築して実行できるだけでなく、プッシュ通知、モバイル認証、オフライン同期、その他のモバイル機能、バックエンド Api を App Service で実行されているすべての Node.js アプリに追加できます。
Content: >-
  <p>先月は、Azure App Service の Mobile Apps 機能を大幅に更新することを<a href="https://azure.microsoft.com/en-us/blog/azure-mobile-apps-august-2015-update/">発表</a>しました。これにより、開発者は .net でモバイルバックエンド api をすばやく構築したり、既存の ASP.NET web アプリにモバイル機能を追加したり、.net モバイルバックエンドに web ページを追加したりできます。</p>


  <p>現時点では、Azure Mobile Apps 用の Node SDK をリリースし、Node.js アプリに似たエクスペリエンスを拡張しています。 これにより、App Service で Node.js を使用してモバイルバックエンドを構築して実行できるだけでなく、プッシュ通知、モバイル認証、オフライン同期、その他のモバイル機能、バックエンド Api を App Service で実行されているすべての Node.js アプリに追加することができます。</p>


  <p>この SDK は、MIT ライセンスでオープンソースとしてリリースされており、 <a href="https://github.com/Azure/azure-mobile-apps-node/blob/master/contributor.md">コミュニティからの投稿</a>を歓迎しています。</p>


  <h1 id="getting-started-with-node-and-azure-mobile-apps">Node と Azure Mobile Apps の概要</h1>


  <p>これを行うには、readme に記載されている簡潔で簡単な <a href="https://github.com/Azure/azure-mobile-apps-node#quickstart">クイックスタート</a> の手順に従います。</p>


  <ol>
   <li>
   <p><a href="https://azure.microsoft.com/en-us/documentation/articles/app-service-mobile-dotnet-backend-ios-get-started-preview/#create-a-new-azure-mobile-app-backend">ここ</a>に記載されている手順に従って &nbsp; 、Azure モバイルアプリを作成します。 API、モバイル、および Web Apps でモバイルアプリのエクスペリエンスを利用できるため、Web アプリまたは API アプリを使用することもできます。</p>
   </li>
   <li>
   <p>新しいディレクトリを作成し、git を初期化して、npm を初期化します。</p>

   <pre class="prettyprint">
  <code>mkdir quickstart

  git init

  npm init

  </code></pre>
   </li>
   <li>
   <p>(Npm を使用して) azure-mobile アプリと express パッケージをインストールします。</p>

   <pre class="prettyprint">
  <code>npm install express azure/azure-mobile-apps-node --save

  </code></pre>
   </li>
   <li>
   <p>server.js ファイルを作成し、次のコードをファイルに追加します。</p>

   <pre class="prettyprint">
  <code>var app = require(&#39;express&#39;)(); // Create an instance of an Express app

  var mobileApp = require(&#39;azure-mobile-apps&#39;)(); // Create an instance of a Mobile App with default settings


  mobileApp.tables.add(&#39;TodoItem&#39;); // Create a Table for &#39;TodoItem&#39; with default settings


  mobileApp.attach(app); // Attach the mobileApp to express

  app.listen(process.env.PORT || 3000);

  </code></pre>
   </li>
   <li>
   <p>を実行してローカルでプロジェクトを実行する <code>node server.js.</code></p>
   </li>
   <li>
   <p>プロジェクトをリモートとして追加し、変更をプッシュして、既存の Azure モバイルアプリにプロジェクトを発行します。</p>

   <pre class="prettyprint">
  <code>git remote add azure https://{user}@{sitename}.scm.azurewebsites.net:443/{sitename}.git


  git add package.json server.js


  git commit -m &#39;Quickstart created&#39;


  git push azure master

  </code></pre>
   </li>
  </ol>


  <p>手順4-5 では、 <a href="https://github.com/Azure/azure-mobile-services-quickstarts">クライアント &amp; サーバーのクイックスタート</a> にあるクライアントのいずれかを使用してテストできます。 ローカルでテストするには、を <code>https://localhost:3000</code> 指すようにクライアントを設定します。</p>


  <p><a href="https://expressjs.com/">Express</a>を使用してサイトを実行する&#39;を再実行することになりましたか。 これは、Web の利点の1つであり、1つの統合されたエクスペリエンスである Mobile Apps の1つの例です &nbsp; 。 これは、 <a href="https://azure.microsoft.com/en-us/documentation/articles/web-sites-nodejs-develop-deploy-mac/">Web アプリのように</a> デプロイされ、 <a href="https://azure.microsoft.com/en-us/documentation/articles/web-sites-staged-publishing/">デプロイスロット</a> や <a href="https://azure.microsoft.com/en-us/documentation/articles/web-sites-create-web-jobs/">web ジョブ</a>などの機能を使用できることを意味します。</p>


  <h2 id="using-mobile-apps-tables">Azure Mobile Apps テーブルの使用</h2>


  <p>モバイルアプリテーブルは、Azure Mobile Apps クライアントがアプリケーション&#39;s データにアクセスできるようにする、データストアの最上位層です。 現在、運用アプリケーション用の Azure SQL DB と SQL Server がサポートされています。 また、運用環境では使用されないようにするメモリ内&#39;ストアも含まれていますが、デモや開発目的では便利な場合があります。&#39; 最初の要求でモバイルアプリにテーブルを追加すると、テーブル SQL Server の場合に SDK によって作成されます。 このテーブルには、id やタイムスタンプなどの SDK の重要な列がいくつかあります。 また、テーブル定義で列が指定されていて、動的スキーマが有効になっている場合は、本文に含まれる列も追加されますが、テーブルには既に含まれていません。</p>


  <p>1行のコードを含むテーブルを追加できますが、CRUD 操作をカスタマイズする場合はどうでしょうか。 簡単にできるように、便利なテーブル構成オブジェクトがあります。 これをディレクトリ内の <code>./tables</code> 別のファイルに定義することをお勧めします。そのため、TodoItem.js ファイルを作成&#39;ます。</p>


  <pre class="prettyprint">

  <code>// TodoItem.js

  var todoTable = require(&#39;azure-mobile-apps&#39;).table(&#39;TodoItem&#39;);

  // Export our table

  module.exports = todoTable;

  //todoTable.columns = {&quot;text&quot;:&quot;string&quot;, &quot;complete&quot;:&quot;boolean&quot;} //Dynamic schema will create these for us. It&#39;s on by default.

  todoTable.dynamicSchema = true; // this is the default setting


  todoTable.read(function(context){
    return context.execute();
  });

  </code></pre>


  <p>この4つの従来の CRUD 操作には、insert、read、update、delete という名前の対応するメソッドがサポート &nbsp; されています。 テーブル操作の詳細については、API のドキュメントを参照してください。</p>


  <p>コンテキストオブジェクトは、操作に応じてさまざまなプロパティを公開します。read query オブジェクトを公開し、insert および update はアイテムオブジェクトを公開します。 これらを使用すると、CRUD 操作の動作を既定値から変更できます。</p>


  <pre class="prettyprint">

  <code>// TodoItem.js continued

  // Attach a user id to the item that was inserted

  table.insert(function (context) {
    context.item.user = context.user.id;
    return context.execute();
  });


  // Only return items where the user id matches the current user

  table.read(function (context) {
    context.query.where({
      user: context.user.id
    });
    return context.execute();
  });

  </code></pre>


  <p>テーブル (およびディレクトリ内 <code>./tables</code> のその他のテーブル) を含める <code>TodoItem</code> には、server.js ファイルにインポート行を追加するだけです。</p>


  <pre class="prettyprint">

  <code>// server.js

  var app = require(&#39;express&#39;)(); // Create an instance of an Express app

  var mobileApp = require(&#39;azure-mobile-apps&#39;)(); // Create an instance of a Mobile App with default settings


  mobileApp.tables.import(&#39;./tables&#39;); // Import tables from &#39;./tables&#39;


  mobileApp.attach(app); // Attach the mobileApp to express

  app.listen(process.env.PORT || 3000);

  </code></pre>


  <p>アプリケーション設定でデータベースを指定していない場合 (ポータルではこのような場合に役に立ちます)、実稼働環境では使用しないメモリ内ストアが使用されます。これは、&#39;t です。 現時点では、SDK では SQL Server のみがサポートされていますが、その他のオプションを再調査し&#39;、この領域での投稿を再び開始&#39;ます。 <a href="https://github.com/Azure/azure-mobile-apps-node">ローカル環境変数を設定して</a>ローカルで SQL できるようにする方法については、GitHub のページを参照してください。</p>


  <h2 id="using-auth-with-mobile-apps-node">Azure Mobile Apps &nbsp; とノードでの auth の使用</h2>


  <p>次の質問は、その <code>context.user</code> オブジェクトに関連していると考えられます。 どのように表示されるのでしょうか。 Azure Mobile Apps 統合認証機能を&#39;しています。 認証を設定する方法の詳細については、 <a href="https://azure.microsoft.com/en-us/documentation/articles/app-service-mobile-dotnet-backend-ios-get-started-users-preview/">はじめに認証に</a> 関するチュートリアルを参照してください。 この操作が完了し&#39;たら、次のコードを使用して、特定のテーブルアクションに対して認証を要求できます。</p>


  <pre class="prettyprint">

  <code>table.insert.authorise = true;

  </code></pre>


  <p>テーブル全体をセキュリティで保護する場合は、次のように入力します。</p>


  <pre class="prettyprint">

  <code>table.authorise = true;

  </code></pre>


  <p>ローカルで動作するように認証を設定するには、後で説明&#39;いくつかの追加の手順が必要です。</p>


  <h1 id="feedback-and-thanks">フィードバックと感謝</h1>


  <p>このリリースの前に、早期にフィードバックをお寄せいただいたすべてのコミュニティメンバー &nbsp; に感謝します。 私たちは、すべての &nbsp; ユーザーに対して、製品またはその使用経験に関するフィードバックを提供することをお勧めします&#39;。 バグや新機能については、GitHub で<a href="https://github.com/Azure/azure-mobile-apps-node/blob/master/contributor.md#submitting-an-issue">問題を解決</a>してください。</p>


  <p>プッシュは近日対応予定です。リリース前に SDK の具体化を維持している間に、さらに多くのブログとドキュメントが表示されます&#39;。 では、いくつかのアプリの構築を開始してください。</p>


  <p>詳細情報と情報については、次を参照してください。</p>


  <ul>
   <li><a href="https://twitter.com/azuremobile">フォロー @AzureMobile</a></li>
   <li>StackOverflow で質問する</li>
  </ul>
