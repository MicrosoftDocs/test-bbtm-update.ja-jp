### YamlMime:Yaml
ms.openlocfilehash: b1fdbc7aa7a0b74934e4ffd23bc6f533553f1b87
ms.sourcegitcommit: d03bdc7fe5447adb6530886aab848b75fe8fa8ee
ms.translationtype: MT
ms.contentlocale: ja-JP
ms.lasthandoff: 03/11/2022
ms.locfileid: "139891452"
Slug: new-full-iis-capabilities-differences-from-hosted-web-core
Title: 'IIS の完全な新機能: ホストされる Web コアとの違い'
Summary: 導入プログラムインサイトシリーズでは、お客様がソリューションをデプロイする際に役立つ Azure テクノロジ導入プログラム Windows に関連する Microsoft サービスコンサルタントのエクスペリエンスについて説明します...
Content: '<p><i>導入プログラムインサイトシリーズでは、お客様が Windows azure platform にソリューションをデプロイするために役立つ、Windows azure テクノロジ導入プログラムに関連する Microsoft サービスコンサルタントのエクスペリエンスについて説明します。この投稿は Tom Hollander によって送信されました。</i></p>  <p>Azure SDK 1.3 の新しい Windows では、完全な iis がサポートされているため、web ロールは、オンプレミスの iis インストールで利用可能な web サーバーのすべての機能にアクセスできます。 ただし、アプリケーションを完全な IIS にデプロイすることを選択した場合は、理解しておく必要がある、ホストされている Web コアモデルの動作にいくつかの微妙な違いがあります。&nbsp; </p>  <h3>完全な IIS とは</h3>  <p>Windows Azure の web ロールでは、web サイトとサービスのデプロイが常に許可されています。 しかし、多くの担当者は、Web ロールが完全インターネットインフォメーションサービス (IIS) を実際に実行していないことを realised していない可能性があります。 代わりに、ホストされた Web コア (HWC) と呼ばれるコンポーネントを使用しました。これは、別のプロセスでホストできる Web ページを提供するためのコアエンジンです。 ほとんどの単純なシナリオでは、HWC または IIS を実行している場合、実際には問題になりません。 ただし、複数のサイトや仮想アプリケーションのサポート、Windows アクティベーションサービスを介した非 HTTP トランスポート経由での WCF サービスのアクティブ化など、IIS にのみ存在する便利な機能が多数あります。</p>  <p>PDC 2010 で行われた多くのお知らせの1つは、Windows Azure Web ロールが完全な IIS をサポートすることです。 この機能は現在、一般公開されており、 <a target="_blank" href="https://www.microsoft.com/downloads/en/details.aspx?FamilyID=7a1089b6-4050-4307-86c4-9dadaa5ed018">Azure SDK Windows</a>に含まれています。 HWC ではなく完全な IIS で実行するように Windows Azure SDK に指示するには、有効な<b> &lt; サイト &gt; </b>セクションをファイルに追加するだけで済みます。 このセクションは、新しいクラウドサービス Project を作成するときに既定で作成されるので、これについて考える必要はありません。 Visual Studio</p>  <p>1つの web サイトを定義する単純な<b> &lt; サイト &gt; </b>セクションは次のようになります。</p>  <p>&nbsp;&nbsp;&nbsp;&lt;場所&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;Site name = "Web"&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;バインド&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;Binding name = "Endpoint1" endpointName = "Endpoint1"/&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;/バインド&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;/Site&gt;<br>&nbsp;&nbsp;&nbsp;&lt;/サイト&gt;</p>  <p>このセクションをカスタマイズすると、次の例に示すように、複数の web サイト、仮想アプリケーション、または仮想ディレクトリを定義できます。</p>  <p>&lt;サイト&gt;<br>&nbsp;&lt;Site name = "Web"&gt;<br>&nbsp;&nbsp;&nbsp;&lt;Virtualapplication name = "WebAppA" physicalDirectory = "C:\Projects\WebAppA\" /&gt;<br>&nbsp;&nbsp;&nbsp;&lt;バインド&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;Binding name = "HttpIn" endpointName = "HttpIn"/&gt;<br>&nbsp;&nbsp;&nbsp;&lt;/バインド&gt;<br>&nbsp;&lt;/Site&gt;<br>&nbsp;&lt;Site name = "その他のサイト" physicalDirectory = "C:\ プロジェクト > その他のサイト"&gt;<br>&nbsp;&nbsp;&nbsp;&lt;バインド&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;Binding ホストヘッダー = "その他のサイト. example .com" name = "httpin" endpointName = "HttpIn"/&gt;<br>&nbsp;&nbsp;&nbsp;&lt;/バインド&gt;<br>&nbsp;&lt;/Site&gt;<br>&lt;/サイト&gt;</p>  <p>過去2か月間、完全な IIS を使用する早期導入者のお客様と協力した後、既存の web アプリケーションを Azure Windows に移植することは、これまで以上に簡単になりました。 ただし、異なるホスティングモデルによって HWC を使用した場合に、少し異なる方法で行う必要がある領域もいくつかありました。</p>  <h3>新しいホスティングモデル</h3>  <p>HWC または完全な IIS のどちらを使用するかによって、Windows Azure でコードをホストする方法に大きな違いがあります。 HWC では、 <b>roleentrypoint</b>メソッド ( <b>roleentrypoint</b>から派生する<b>WebRole</b>クラスの<b>OnStart</b>メソッドなど) と web サイト自体の両方が<b>WaWebHost.exe</b>プロセスで実行されます。 ただし、完全な IIS の場合、 <b>Roleentrypoint</b> は <b>WaIISHost.exe</b>で実行されますが、web サイトは通常の iis <b>w3wp.exe</b> プロセスで実行されます。 すべてのコードが同じ Visual Studio プロジェクトに属し、同じ DLL にコンパイルされるため、これは多少予期しないことがあります。 次の図は、 <b>WebRole1.dll</b>と呼ばれるバイナリにコンパイルされた web プロジェクトを、Azure Windows HWC および IIS でホストする方法を示しています。</p>  <p><a target="_blank" href=""><img src="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/7652.IIS.png" border="0"></a></p>  <p>この違いは、次のセクションで説明するように、予期しない影響を与える可能性があります。 </p>  <h3>RoleEntryPoint と web サイトから構成ファイルを読み取っています</h3>  <p>Windows Azure アプリケーションに構成を格納するための推奨される方法は serviceconfiguration.cscfg ファイルにありますが、通常の .net 構成ファイル (特に .net システムコンポーネントまたは再利用可能なフレームワークを構成する場合) を使用する場合もあります。 特に Windows Azure 診断を使用するときは常に、.net 構成ファイルで<b>DiagnosticMonitorTraceListener</b>を構成する必要があります。</p>  <p>web ロールプロジェクトを作成すると、Visual Studio によって .net 構成の web.config ファイルが作成されます。 Web アプリケーションはこの情報にアクセスできますが、 <b>Roleentrypoint </b>コードは、web サイトの一部として実行されていないため、できません。 既に説明したように、 <b>WaIISHost.exe</b>と呼ばれるプロセスで実行されるので、構成がWaIISHost.exe.config という名前のファイルに含まれることを想定して<b>います。</b> &nbsp;したがって、この名前のファイルを web プロジェクトに作成し、[出力ディレクトリにコピー] プロパティを [常にコピーする] に設定すると、 <b>Roleentrypoint</b>がこのことを確認できることがわかります。<b></b>これは、同じプロジェクト内に2つの .net 構成ファイルがある場所を考えることができる唯一のケースの1つです。</p>  <h3>RoleEntryPoint と web サイトからの静的メンバーへのアクセス</h3>  <p>この変更にはもう1つの意味があります。これは、静的変数などの AppDomain スコープデータが、RoleEntryPoint と web アプリケーションの間で共有されなくなることです。 これにより、さまざまな方法でアプリケーションに影響を与える可能性がありますが、既存の Windows Azure アプリケーションを完全な IIS を使用するように移行する場合は、多くのシナリオが発生する可能性があります。 CloudStorageAccount クラスを使用したことがある場合は、次のようなコードを使用して、格納されている接続文字列からインスタンスを初期化する必要があります。</p>  <p>var storageAccount = CloudStorageAccount. FromConfigurationSetting ("ConnectionString");</p>  <p>このコードが機能するようにするには、 <b>Cloudstorageaccount</b> で構成を取得する必要があることを指定する必要があります。 <b>Cloudstorageaccount</b>では、特定の構成ファイルのみを既定として使用するのではなく、任意の場所から構成を取得できるデリゲートを設定する必要があります。 そのため、Serviceconfiguration.cscfg から接続文字列を取得するには、次のコードを使用します。</p>  <p>CloudStorageAccount. SetConfigurationSettingPublisher ((configName, Configname) =&gt;<br>{<br>&nbsp;&nbsp;&nbsp; configSetter (RoleEnvironment (Configsetter));<br>});</p>  <p>以前のバージョンの SDK で HWC を使用している場合 (または、 <b> &lt; sdk 1.3 で Sites &gt; </b>構成設定を削除した場合)、このコードを<b>WebRole</b>に追加することができます。 ただし、完全な IIS に移行するとすぐに、 <b>Cloudstorageaccount. FromConfigurationSetting </b>の呼び出しが InvalidOperationException で失敗し <b>ます。</b></p>  <p style="padding-left: 30px;"><i>FromConfigurationSetting を使用するには、SetConfigurationSettingPublisher を呼び出す必要があります</i></p>  <p>"ですが、 コンピューターを scream します (少なくとも、私が行ったことです)。 実際には、 <b>WaIISHost.exe</b> プロセスで appdomain に呼び出されました。これは、IIS 下のまったく異なる appdomain でホストされている web サイトには影響しません。 解決策としては、同じ AppDomain 内で <b>Cloudstorageaccount. SetConfigurationSettingPublisher</b> と <b>cloudstorageaccount</b> を呼び出すようにします。これは、おそらく web サイトから実行します。 <b>Application_Start</b>イベントに Windows Azure SDK クラスへのアクセスに関する問題がありましたが、これらは適用されなくなりました。これは、構成設定の発行元を初期化するのに最適な場所です。</p>  <p>または、Serviceconfiguration.cscfg ファイルを接続文字列に使用した方がよい場合は、 <b>Cloudstorageaccount. FromConfigurationSetting (...)</b> の呼び出しを次のように置き換えて、このデリゲートを完全に設定しないようにすることができます。</p>  <p>var storageAccount = CloudStorageAccount. Parse (GetConfigurationSettingValue ("ConnectionString"));</p>  <h3>さまざまな web サイトとアプリケーションのリソースのセキュリティ保護</h3>  <p>最後に、複数のサイトまたは仮想アプリケーションを実行するように Web ロールを構成すると、それぞれが独自のアプリケーションプールと独自のユーザーアカウントで実行されることに注意してください。 これにより、さまざまな柔軟性が得られます。たとえば、ファイルシステムのパスや証明書など、さまざまなリソースへのアクセス権を別の仮想アプリケーションに与えることができます。 これを活用するには、別の新しい SDK 1.3 機能を利用し、昇格された特権で実行するスタートアップタスクを指定します。 このタスクでは、アクセス制御リストを設定する PowerShell スクリプトを起動して、各アプリケーションが必要なリソースにアクセスできるようにすることができます。</p>  <h3>まとめ </h3>  <p>Azure Web ロール Windows で完全な iis を使用するオプションを使用すると、既存の iis ベースのアプリケーションの移行を容易にする多くの新機能にアクセスできます。また、新しいアプリケーションを開発する場合にも、より多くのオプションが提供されます。 基になるホスティングとセキュリティモデルについて理解を深めることで、これらの新機能を使用して開発に悩まをかけることができます。</p>  <p><iframe src="https://www.facebook.com/plugins/like.php?href=;layout=box_count&amp;show_faces=false&amp;width=300&amp;action=like&amp;font=segoe+ui&amp;colorscheme=light&amp;height=50" style="overflow: hidden; width: 300px; height: 50px;" frameborder="0" scrolling="no"></iframe><br><a data-url="" data-count="horizontal" data-via="Windowsazure" href="https://twitter.com/share" class="twitter-share-button">ツイート</a>  <script src="https://platform.twitter.com/widgets.js" type="text/javascript"></script>  </p>'
