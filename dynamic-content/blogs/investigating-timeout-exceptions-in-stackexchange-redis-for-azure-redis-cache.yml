### YamlMime:Yaml
ms.openlocfilehash: bb4ad9048ec55ff80ae141a35d993de284d1f98b
ms.sourcegitcommit: d03bdc7fe5447adb6530886aab848b75fe8fa8ee
ms.translationtype: MT
ms.contentlocale: ja-JP
ms.lasthandoff: 03/11/2022
ms.locfileid: "139892960"
Slug: investigating-timeout-exceptions-in-stackexchange-redis-for-azure-redis-cache
Title: Azure Redis Cache の StackExchange.Redis でのタイムアウト例外の調査
Summary: StackExchange.Redis では、同期操作に "synctimeout" という名前の構成設定が使用されます。
Content: >-
  <p>StackExchange.Redis &quot;は同期操作に synctimeout&quot; という名前の構成設定を使用します。これは 1000 ミリ秒の既定値です。 この設定は、指定された時間内&rsquo;に同期呼び出しが完了しない場合、タイムアウト エラーがスローされます。 スローされるエラーは次のようなものです。System.TimeoutException: Timeout performing MGET 2728cc84-58ae-406b-8ec8-3f962419f641, inst: 1,mgr: Inactive, queue: 73, qu=6, qs=67, wr=0, wr=1/1, 0<br />

  IOCP: (Busy=6,Free=999,Min=2,Max=1000),WORKER (Busy=7,Free=8184,Min=2,Max=8191)</p>


  <p>エラー コードの説明を次に示します。</p>


  <table border="1" cellpadding="2" cellspacing="0" width="675">
      <tbody>
          <tr>
              <td valign="top" width="202"><strong>エラー コード</strong></td>
              <td valign="top" width="471"><strong>詳細</strong></td>
          </tr>
          <tr>
              <td valign="top" width="204">inst</td>
              <td valign="top" width="470">最後のタイム スライスで: 0 つのコマンドが発行されました</td>
          </tr>
          <tr>
              <td valign="top" width="205">mgr</td>
              <td valign="top" width="469">ソケット マネージャー &quot;が socket.select&quot; を実行しています。つまり、何かを行う必要があるソケットを示す OS に求める場合があります。基本的に、リーダーは何も行う必要はないと考えるので、&#39;がネットワークから積極的に読み取りを行いません。</td>
          </tr>
          <tr>
              <td valign="top" width="206">queue</td>
              <td valign="top" width="469">進行中の操作の合計が 73 件ある</td>
          </tr>
          <tr>
              <td valign="top" width="206">qu</td>
              <td valign="top" width="469">6 つが未送信キューに入っています。まだ送信ネットワークに書き込みされていません</td>
          </tr>
          <tr>
              <td valign="top" width="206">qs</td>
              <td valign="top" width="469">これらの 67 件がサーバーに送信されましたが、応答はまだ使用できません。&nbsp; 応答は次の場合があります。 <ul>
                  <li>サーバーによってまだ送信されていない</li>
                  <li>はサーバーによって送信されますが、クライアントによってまだ処理されていません。</li>
              </ul>
              </td>
          </tr>
          <tr>
              <td valign="top" width="206">qc</td>
              <td valign="top" width="469">これらの 0 件は応答を確認しましたが、完了ループを待機するためにまだ完了としてマークされていません</td>
          </tr>
          <tr>
              <td valign="top" width="206">wr</td>
              <td valign="top" width="469">アクティブなライターがある (つまり、6 つの未送信が無視されない) バイト/アクティブライター</td>
          </tr>
          <tr>
              <td valign="top" width="206">in</td>
              <td valign="top" width="469">NIC バイト/アクティブリーダーで読み取り可能なアクティブリーダーと 0 バイト</td>
          </tr>
          <tr>
              <td valign="top" width="206">&nbsp;</td>
              <td valign="top" width="469">
              <p>詳細については、このリンクを参照 <a href="https://gist.github.com/JonCole/db0e90bedeb3fc4823c2"><u>してください</u></a>。</p>
              </td>
          </tr>
      </tbody>
  </table>


  <h3>調査する手順:</h3>


  <p>タイムアウトを再受信する理由&nbsp;&#39;調査を開始するには、最初の手順として、同期タイムアウト時間内に完了しない操作を保持する&#39;を特定します。 <strong>以下に、最初にいくつかの手順を示します。</strong> &nbsp;</p>


  <ol>
      <li><strong>ベスト プラクティスとして、次のパターン&nbsp;&nbsp;を使用して StackExhange Redis クライアントを接続してください</strong>

      <p style="text-align: left;">private static LazyConnectionMultiplexer&lt;&gt; lazyConnection = new LazyConnectionMultiplexer&gt;&lt;(() = {&gt; return ConnectionMultiplexer.Connect(&quot;cachename.redis.cache.windows.net,ssl=true,abortConnect=false,password=password&quot;); });</p>

      <p style="text-align: left;">public static ConnectionMultiplexer Connection { get { return lazyConnection.Value; } }</p>
      </li>
      <li><strong>Azure 内の同じRedis Cacheに Azure クライアントがインストールされていないか確認します</strong>。 たとえば、キャッシュが米国東部にあるのに、クライアントが米国西部にあるときにタイムアウトが発生する可能性があります。また、同期時間内に要求が&#39;完了しないか、ローカル開発マシンx からデバッグするときにタイムアウトが発生する可能性があります。
      <ol>
          <li>キャッシュとクライアントを同じ Azure リージョン内に配置することを強くお勧めします。 リージョン間の呼び出しを実行するシナリオがある場合は、synctimeout を高い値に設定します。</li>
      </ol>
      </li>
      <li><strong>StackExchange.Redis パッケージの最新バージョンを使用NuGetですか? </strong>StackExchange.Redis の最新バージョンを使用している場合は、こちらを確認してください<a href="https://www.nuget.org/packages/StackExchange.Redis/">https://www.nuget.org/packages/StackExchange.Redis/</a>。コードには、タイムアウトに対する堅牢性を高め、最新バージョンを使用すると役立つバグが常に修正されています。</li>
      <li><strong>サーバーでネットワークがバインドされていますか? </strong>さまざまなサイズの Redis Cache のテスト中に得た最大帯域幅を次に示します。 (次の数値は保証されません。これは、Azure Redis Cache エンドポイントに対して Iaas VM から実行されている redis-benchmark.exe を使用してテスト中に取得した数値です)帯域幅によってバインドされている要求がある場合は、完了に時間がかかるので、タイムアウトが発生します。 より多くの帯域幅を得るには、より大きなキャッシュ サイズに移動をお勧めします。 帯域幅 <a href="https://azure.microsoft.com/en-us/documentation/articles/cache-faq/#cache-performance">の数</a> の詳細については、こちらを参照してください。
      <table border="1" cellpadding="2" cellspacing="0" width="481">
          <tbody>
              <tr>
                  <td valign="top" width="101"><strong>キャッシュ名</strong></td>
                  <td valign="top" width="101"><strong>キャッシュ サイズ</strong></td>
                  <td valign="top" width="148"><strong>GET/秒 (1 KB 値の単純な GET 呼び出し)</strong></td>
                  <td valign="top" width="129"><strong>帯域幅 (Mbits/秒)</strong></td>
              </tr>
              <tr>
                  <td valign="top" width="101">C0</td>
                  <td valign="top" width="101">250 MB</td>
                  <td valign="top" width="147">610</td>
                  <td valign="top" width="129">5</td>
              </tr>
              <tr>
                  <td valign="top" width="101">C1</td>
                  <td valign="top" width="101">1 GB</td>
                  <td valign="top" width="147">12,200</td>
                  <td valign="top" width="129">100</td>
              </tr>
              <tr>
                  <td valign="top" width="101">C2</td>
                  <td valign="top" width="101">2.5 GB</td>
                  <td valign="top" width="147">24,300</td>
                  <td valign="top" width="129">200</td>
              </tr>
              <tr>
                  <td valign="top" width="101">C3</td>
                  <td valign="top" width="101">6 GB</td>
                  <td valign="top" width="147">48,875</td>
                  <td valign="top" width="129">400</td>
              </tr>
              <tr>
                  <td valign="top" width="101">C4</td>
                  <td valign="top" width="101">13 GB</td>
                  <td valign="top" width="147">61,350</td>
                  <td valign="top" width="129">500</td>
              </tr>
              <tr>
                  <td valign="top" width="101">C5</td>
                  <td valign="top" width="101">26 GB</td>
                  <td valign="top" width="147">112,275</td>
                  <td valign="top" width="129">1000</td>
              </tr>
              <tr>
                  <td valign="top" width="101">C6</td>
                  <td valign="top" width="101">53 GB</td>
                  <td valign="top" width="147">153,219</td>
                  <td valign="top" width="130">1000+</td>
              </tr>
          </tbody>
      </table>
  &nbsp;</li>
      <li><strong>クライアントでネットワークがバインドされていますか? </strong>クライアントにネットワークバインドが設定されていないか確認します。 クライアントでネットワークバインドを取得すると、ボトルネックが発生し、タイムアウトが発生します。 キャッシュのサイズ/速度に合った高い VM サイズにクライアントを移動すると、最適な結果が得られます。帯域幅モニタープログラム<a href="https://github.com/JonCole/SampleCode/tree/master/BandWidthMonitor">を使用</a>&nbsp;&nbsp;して、クライアントで取得する帯域幅を確認できます。</li>
      <li><strong>サーバーまたはクライアントで CPU がバインドされていますか? </strong>クライアント上の CPU にバインドされ、その結果、要求が syntimeout 設定で処理されなくなってタイムアウトが発生する可能性がある場合に確認します。 より大きなマシン サイズに移動したり、負荷を分散したりすると、これを制御するのに役立ちます。ポータルからサーバーで CPU バインドを取得している場合は、確認します。 Redis が CPU バインドの間に要求が送信された場合、それらの要求はタイムアウトになります。 1 つの方法は、データを複数のキャッシュに分割して負荷を分散することです。</li>
      <li><strong>サーバーでの処理に時間がかかっているコマンドはありますか? </strong>redis-server での処理に時間がかかっているコマンドが原因で、要求がタイムアウトする可能性があります。 実行時間の長いコマンドの例としては、多数のキー、キー *、または記述が不十分な lua スクリプトが含まれる mget があります。redis-cli クライアントを使用Redis Cache Azure Redis Cache に接続し、SlowLog コマンドを実行して、要求に予想よりも時間がかかるか確認できます。 コマンドの詳細 <a href="https://redis.io/commands/slowlog">https://redis.io/commands/slowlog</a>については、Redis Server と StackExchange.Redis を参照してください。大きな要求が少ないのではなく、多くの小さな要求に最適化されています。&nbsp; データを小さなチャンクに分割すると、ここで改善される可能性があります。 stunnel で <a href="https://blogs.msdn.com/b/webdev/archive/2014/05/12/announcing-asp-net-session-state-provider-for-redis-preview-release.aspx">コマンド を使用して </a>SSL エンドポイントredis-cli.exeする方法については、このブログ記事を参照してください。</li>
      <li><strong>Redis-server サーバーの負荷が高いですか? </strong>Redis-cli クライアント ツールを使用すると、Redis &quot;エンドポイントに接続し、INFO CPU&quot; を実行して、その値をserver_load。 サーバーの負荷が 100 (最大値) の場合、redis サーバーが要求を処理する (アイドル状態ではない) すべての時間ビジー状態を示します。redis-cli から Slowlog を実行して、処理に時間がかかっている要求が存在し、サーバーの負荷が最大になっているのを確認します。</li>
      <li><strong>ネットワーク のブクリップを引き起こした可能性がある他のイベントがクライアント側に発生しましたか? </strong>クライアント (Web、worker ロール、または Iaas VM) で、クライアント インスタンスの数のスケールアップまたはスケールダウンのようなイベントが発生した場合、または新しいバージョンのクライアントまたは自動スケールのデプロイが有効になっているか確認します。このテストでは、自動スケールまたはスケールアップ/スケールダウンによって、送信ネットワーク接続が数秒失われる可能性があるという問題が見つかりました。 StackExchange.Redis コードはこのようなイベントに対応し、再接続します。 この再接続中に、キュー内のすべての要求がタイムアウトする可能性があります。</li>
      <li><strong>一部の要求の前に、時間が切Redis Cache大きな要求が出ましたか? </strong>エラー メッセージ &ldquo;のパラメーター qs&rdquo; は、クライアントからサーバーに送信されたが、まだ応答を処理していない要求の数を示します。&nbsp; StackExchange.Redis では 1 つの TCP 接続が使用され、一度に 1 つの応答しか読み取れないので、この値は増え続けています。&nbsp; 最初の操作がタイム アウトした場合でも、サーバーとの間で送信されるデータは停止されません。その他の要求は、これが完了するまでブロックされます。 これにより、タイム アウトが発生します。 解決策の 1 つは、キャッシュがワークロードに十分な大きさであり、大きな値を小さなチャンクに分割することで、タイムアウトの可能性を最小限に抑える方法です。もう 1 つの解決策は、クライアントで ConnectionMultiplexer オブジェクトのプールを使用し、新しい要求を送信するときに最も読み込み少ない ConnectionMultiplexer &quot;&quot; を選択することです。&nbsp;これにより、1 回のタイムアウトによって他の要求もタイムアウトするのを防ぐ必要があります。</li>
      <li><strong>RedisSessionStateprovider を使用し、再試行タイムアウトを正しく設定していますか? </strong>RedisSessionStateProvider の設定を次に示します。 retrytimeoutInMilliseconds は operationTimeoutinMilliseonds より大きい値である必要があります。それ以外の場合&#39;再試行されません。たとえば、次の設定では、少なくとも 3 回再試行してから、タイミングアウトします。設定の詳細については、こちらを参照 <a href="https://github.com/Azure/aspnet-redis-providers/wiki/Configuration">してください</a>。
      <pre class="prettyprint">
  &lt;add


  name=&quot;AFRedisCacheSessionStateProvider&quot;


  type=&quot;Microsoft.Web.Redis.RedisSessionStateProvider&quot;


  host=&quot;enbwcache.redis.cache.windows.net&quot;


  port=&quot;6380&quot;


  accessKey=&quot;&hellip;&quot;


  ssl=&quot;true&quot;


  databaseId=&quot;0&quot;


  applicationName=&quot;AFRedisCacheSessionState&quot;


  connectionTimeoutInMilliseconds = &quot;5000&quot;


  operationTimeoutInMilliseconds = &quot;1000&quot;


  retryTimeoutInMilliseconds=&quot;3000&quot;/&gt;


  </pre>
      </li>
      <li><strong>データused_memory_rssより高used_memory? </strong>redis-cli.exe を使用すると、キャッシュに接続し、メモリに関連する redis INFO コマンドを実行できます allocationused_memory_rss: オペレーティング システムによって表示される Redis が割り当てるバイト数 (常駐セット サイズ).used_memory: アロケーターを使用して Redis によって割り当てられた合計バイト数 (標準 libc、malloc、 jemalloc など)キャッシュ サイズ: 作成されたキャッシュのサイズ (この場合は 26 GB)。 削除ポリシーが設定されている場合、Redis はキャッシュ サイズにヒットUsed_Memoryキーの削除を開始します。 理想的には、used_memory_rss値は、値の値よりもわずかに高used_memory。 rss を使用 &gt;&gt; した場合、大きな違いはメモリの断片化 (内部または外部) を意味します。 rss を &gt;&gt; 使用すると、Redis メモリの一部がオペレーティング システムによってスワップオフされたことを意味します。待機時間が大幅に長くなると予想されます。 Redis は割り当てをメモリ ページにマップする方法を制御できないので、多くの場合、メモリ使用量の急増used_memory_rssが高い場合があります。 Redis がメモリを解放すると、メモリはアロケーターに戻されますが、アロケーターがシステムにメモリを戻すとは限りません。 オペレーティング システムによって報告された値とメモリused_memoryの間に不一致が生じている可能性があります。 ファクト メモリは Redis で使用された後、解放されても、システムに戻されていないことが原因である可能性があります。 詳細については、「 <a href="https://www.redis.io/commands/info">https://www.redis.io/commands/info</a> 現在、断片化が発生し、まだ展開されていないときにシステムの動作が向上する、エンド でいくつかの変更をテストしています」を参照してください。 その間、それを軽減するために実行できる操作は次のとおりです。 <ul>
          <li>キャッシュをより大きいサイズにアップグレードし、システムのメモリ制限に達しないようにします。</li>
          <li>キーに有効期限を設定し、古い値が事前に削除されるようにします。</li>
          <li><a href="https://redis.io/commands/info">Redis info コマンド 、&ldquo;&rdquo;特に値</a>のused_memory_rssします。&nbsp;その値がキャッシュのサイズに近づくと、パフォーマンスの問題が発生し始める可能性があります。 複数のキャッシュ間でデータをシャード化してメモリの使用率を低くしたり、より大きなキャッシュにアップグレードしたりすると役立ちます。</li>
      </ul>
  &nbsp;</li>
      <li><strong>お問い</strong>合わせ: まだ解決できない場合は、このページの [サポートの受け取り] をクリックしてサポート チケットを開いてください <a href="https://azure.microsoft.com/en-us/support/options/">https://azure.microsoft.com/en-us/support/options/</a> 。 調査に役立つ次の詳細が必要です。 <ol>
          <li>キャッシュ名</li>
          <li>Cache Size</li>
          <li>エラーの日付と時刻 (タイムゾーンを含む)</li>
          <li>スタック トレース全体を含む例外メッセージ</li>
          <li>クライアント インスタンスの数と種類 (Web サイト、Web ロール、worker ロール、VM など)</li>
          <li>パブリック仮想 IP (VIP) クライアント展開のアドレス</li>
          <li>StackExchange.Redis のバージョン (および Microsoft.Web.RedisSessionStateProvider (該当する場合)</li>
          <li>ConnectionMultiplexer オブジェクトを構成して使用する方法を示すコード スニペット。 クライアント プロセス全体で ConnectionMultiplexer の 1 つのインスタンスを共有していますか?</li>
          <li>キャッシュ サービスとクライアントは、どのリージョンにありますか?</li>
          <li>エラーが発生した頃にクライアントに何か変更が加えらたか。 クライアント インスタンスの数をスケールアップまたはスケールダウンしましたか、または新しいバージョンのクライアントをデプロイしましたか? クライアントで自動スケールが有効になっているか。</li>
          <li>インシデントの前と中の両方で、クライアントの CPU 使用率は何でしたか?</li>
          <li>すべての要求で、インシデントの時点で待機時間が長い、またはタイムアウトが発生しましたか、または一部の要求のみですか?</li>
          <li>エラーはクライアント間でどのように分散されていますか? 1 つのクライアントで、またはすべて一方で分割されますか?</li>
          <li>キャッシュから取得またはキャッシュに格納する値のサイズは何ですか?</li>
          <li>同期タイムアウトと接続タイムアウトのためにクライアントに設定されるタイムアウト値は何ですか?</li>
      </ol>
      </li>
  </ol>


  <p>お問い合わせ: まだ解決できない場合は、[サポートの取得] をクリックしてサポート チケット <a href="https://azure.microsoft.com/en-us/support/options/">を開いてください</a>。 詳細については、このリンクを参照してください。</p>
