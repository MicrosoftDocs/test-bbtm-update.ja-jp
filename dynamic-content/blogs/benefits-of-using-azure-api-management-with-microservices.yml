### YamlMime:Yaml
ms.openlocfilehash: 3eb658c60db4062a77c4994efca21208559e04d1
ms.sourcegitcommit: d03bdc7fe5447adb6530886aab848b75fe8fa8ee
ms.translationtype: MT
ms.contentlocale: ja-JP
ms.lasthandoff: 03/11/2022
ms.locfileid: "139904925"
Slug: benefits-of-using-azure-api-management-with-microservices
Title: Azure API Management をマイクロサービスで使用する利点
Summary: IT 業界では、モノリシックアプリケーションからマイクロサービスベースのアーキテクチャへの移行が発生しています。
Content: >-
  <p>IT 業界では、 <a href="https://azure.microsoft.com/en-us/blog/microservices-an-application-revolution-powered-by-the-cloud/" target="_blank">モノリシックアプリケーションからマイクロサービスベースのアーキテクチャへ</a>の移行が発生しています。 <a href="https://docs.microsoft.com/en-us/azure/architecture/guide/architecture-styles/microservices#benefits" target="_blank">この新しいアプローチに</a>は、次のような利点があります。</p>


  <ul>
   <li>独立した<strong>開発と自由なテクノロジ</strong> &ndash; の選択開発者は、さまざまなマイクロサービスで同時に作業し、解決している問題に最適なテクノロジを選択できます。</li>
   <li><strong>独立したデプロイとリリースサイクル</strong> &ndash;マイクロサービスは、独自のスケジュールで個別に更新できます。</li>
   <li><strong>詳細なスケーリング</strong> &ndash;個々のマイクロサービスは個別に拡張できるため、全体的なコストを削減し、信頼性を高めることができます。</li>
   <li><strong>単純</strong> &ndash; 化より小規模なサービスは、製品の開発、テスト、デバッグ、および起動を促進することが容易になります。</li>
   <li><strong>フォールト分離</strong> &ndash; マイクロサービスに障害が発生しても、他のサービスの障害につながることはありません。</li>
  </ul>


  <p>このブログ投稿では、次のことについて説明します。</p>


  <ul>

  </ul>


  <ol>
   <li>単純なオンラインストアシステムを設計して、上記の利点を実感する方法。</li>
   <li>マイクロサービスベースのアーキテクチャで公開されている Api を管理する理由と方法。</li>
   <li>Azure API Management とマイクロサービスの使用を開始する方法について説明します。</li>
  </ol>


  <ul>

  </ul>


  <h2>例: マイクロサービスを使用して実装されたオンラインストア</h2>


  <p>単純なオンラインストアシステムを考えてみましょう &rsquo; 。 Web サイトの訪問者は、製品 &rsquo; の詳細を表示したり、注文を出したり、配置された注文をレビューしたりできる必要があります。</p>


  <p>注文が配置されるたびに、システムは注文の詳細を処理し、出荷要求を発行する必要があります。 ユーザーシナリオとビジネス要件に基づいて、システムには次のプロパティが必要です。</p>


  <ul>
   <li><strong>詳細なスケーリング</strong> &ndash; 製品の詳細の表示は、注文を配置するよりも少なくとも1000回の平均で発生します。</li>
   <li><strong>単純</strong> &ndash; 化独立したユーザーアクションは明確に定義されており、この分離はシステムのアーキテクチャに反映される必要があります。</li>
   <li><strong>フォールト分離</strong> &ndash; 出荷機能の失敗は、製品の表示や注文の配置に影響を与えることはありません。</li>
  </ul>


  <p>これらは、次の3つのマイクロサービスを使用してシステムを実装することを示しています。</p>


  <ul>
   <li>注文の表示と配置を担当するパブリック GET と POST API &ndash; を使用した注文。</li>
   <li>製品の詳細を表示するための、public GET API &ndash; を使用した製品。</li>
   <li>注文の処理と出荷を担当するイベント &ndash; によって内部でトリガーされた出荷。</li>
  </ul>


  <p>このため、実装と管理が簡単な <a href="https://azure.microsoft.com/en-us/services/functions/" target="_blank">Azure Functions</a>を使用します。 イベントドリブンの性質とは、相互作用に対して実行され、課金されることを意味します。 これは、ストアのトラフィックが予測できない場合に便利です。 基になるインフラストラクチャは、トラフィックがないときにゼロにスケールダウンします。 また、米国での Black 金曜のように、マーケティングキャンペーンが急激に増加したり、ショッピングの休日中に負荷が増加したりする場合にも、トラフィックの急増に対応できます。</p>


  <p>スケーリングの粒度を維持し、シンプルさを確保し、リリースサイクルを独立させておくには、すべてのマイクロサービスを個々の Function App に実装する必要があります。</p>


  <p><a href="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/1a0f71db-c861-49f9-9566-3296bd8931b3.png"><img alt="Flowchart of microservice being implemented in an indivudal function app " border="0" height="343" src="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/d4057126-035d-44b1-ba68-f7e3a1ebb695.png" style="border: 0px currentcolor; border-image: none; margin-right: auto; margin-left: auto; float: none; display: block; background-image: none;" title="Indivudal function app で実装されているマイクロサービスのフローチャート " width="640"></a></p>


  <p>注文と製品マイクロサービスは、HTTP トリガーを使用する外部に接続された関数です。 出荷マイクロサービスは、 <a href="https://azure.microsoft.com/en-us/services/service-bus/" target="_blank">Azure Service Bus</a>にメッセージを作成する注文マイクロサービスによって間接的にトリガーされます。 たとえば、項目を注文すると、web サイトは order 関数を実行する POST Order API 呼び出しを発行します。 次に、注文は Azure Service Bus インスタンス内のメッセージとしてキューに登録され、その処理のために出荷関数がトリガーされます。</p>


  <h2>マイクロサービスベースのアーキテクチャで外部 API 通信を管理する主な理由</h2>


  <p>提示されたアーキテクチャには基本的な問題があり、外部からの通信を処理する方法があります。</p>


  <ul>
   <li>クライアントアプリケーションは、内部マイクロサービスと結合されます。 これは、マイクロサービスの分割、マージ、または書き換えを行う場合に特に煩雑になります。</li>
   <li>Api は同じドメインまたは IP アドレスの下には表示されません。</li>
   <li>共通 API 規則をマイクロサービス全体に簡単に適用することはできません。</li>
   <li>API の変更を管理し、新しいバージョンを導入することは困難です。</li>
  </ul>


  <p><a href="https://docs.microsoft.com/en-us/azure/azure-functions/functions-proxies" target="_blank">Azure Functions プロキシ</a>は統合された API プレーンを提供しますが、他のシナリオでは短時間で済みます。 制限事項については、 <a href="https://aka.ms/apimlearn" target="_blank">Azure API Management</a>を使用した fronting Azure Functions で対処する必要があります。これは、 <a href="https://azure.microsoft.com/en-us/blog/announcing-azure-api-management-for-serverless-architectures/" target="_blank">サーバーレスの従量課金レベルで利用できるようになりまし</a>た。</p>


  <p><a href="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/7cacb6d7-e97b-43ae-872a-b09806048630.png"><img alt="Flowchart showing the fronting of Azure API Managemnet to Azure Functions" border="0" height="353" src="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/f4450b7e-e152-438c-9d91-8e4fd6af62ad.png" style="border: 0px currentcolor; border-image: none; margin-right: auto; margin-left: auto; float: none; display: block; background-image: none;" title="Azure Functions する Azure API Managemnet の fronting を示すフローチャート" width="640"></a></p>


  <p><strong>API Management は、実装から api を抽象化し、同じドメインまたは静的 IP アドレスでそれらをホストし</strong>ます。 これにより、クライアントアプリケーションを内部マイクロサービスから切り離すことができます。 Azure API Management のすべての Api は、ホスト名と静的 IP アドレスを共有します。 カスタムドメインを割り当てることもできます。</p>


  <p><strong>API Management を使用すると、Azure API Management で api を集計し、マイクロサービスを直接公開することなく、Api をセキュリティで保護</strong>できます。 これにより、潜在的な攻撃のセキュリティを低下させることができます。 サブスクリプションキー、JWT トークン、クライアント証明書、またはカスタムヘッダーを使用して API 要求を認証できます。 トラフィックは、信頼された IP アドレスに対してのみフィルター処理できます。</p>


  <p><strong>API Management では、api に対してルールを実行することもでき</strong>ます。 受信要求と送信応答の API ポリシーは、グローバル、API ごと、または API 操作ごとに定義できます。 認証方法、調整、キャッシュ、変換など、ほぼ50のポリシーがあります。 詳細については、「 <a href="https://docs.microsoft.com/en-us/azure/api-management/api-management-policies" target="_blank">API Management ポリシー</a>」を &ldquo; 参照してください。&rdquo;</p>


  <p><strong>API Management</strong>により、api の変更が簡単になります。 新しいバージョンやリビジョンを導入するために、設計フェーズからライフサイクル全体を通して Api を管理できます。 リビジョンとは対照的に、バージョンには、API 操作の削除や認証の変更など、互換性に影響する変更が含まれていることが想定されています。</p>


  <p><strong>API Management を使用する場合は、api を監視することもでき</strong>ます。 Azure API Management インスタンスの使用状況メトリックを確認できます。 <a href="https://azure.microsoft.com/en-us/services/monitor/" target="_blank">Azure アプリケーションインサイト</a>の API 呼び出しをログに記録して、グラフの作成、ライブトラフィックの監視、デバッグの簡略化を行うことができます。</p>


  <p><strong>API Management を使用すると、api を外部開発者に簡単に発行</strong>できます。 Azure API Management には、自動的に生成され、完全にカスタマイズ可能な web サイトである開発者ポータルが付属しています。これは、訪問者が Api を発見し、それらの使用方法を学習し、対話形式で実行して、OpenAPI 仕様をダウンロードし、最後にサインアップして API キーを取得します。</p>


  <h2>マイクロサービスで API Management を使用する方法</h2>


  <p>Azure API Management は、最近 <a href="https://azure.microsoft.com/en-us/blog/announcing-azure-api-management-for-serverless-architectures/" target="_blank">、新しい価格レベルで使用できるように</a>なりました。 <a href="https://aka.ms/apimpricing" target="_blank">実行ごとの課金</a>によって、従量課金レベルはマイクロサービスベースのアーキテクチャやイベント駆動型システムに特に適しています。 たとえば、これは、架空のオンラインストアの場合に適しています。</p>


  <p>より高度なシステムでは、 <a href="https://aka.ms/apimfeatures" target="_blank">API Management の他の層が豊富な機能セットを提供</a>します。</p>


  <p>選択したサービスレベルに関係なく、Azure API Management インスタンスを使用して簡単に Azure Functions できます。 <a href="https://docs.microsoft.com/en-us/azure/api-management/import-function-app-as-api" target="_blank">Azure API Management の使用を開始</a>するには数分しかかかりません。</p>
