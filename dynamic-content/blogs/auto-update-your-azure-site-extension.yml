### YamlMime:Yaml
ms.openlocfilehash: ef0ba53bc2ff4273035ef1ae08fa3347e295fc85
ms.sourcegitcommit: d03bdc7fe5447adb6530886aab848b75fe8fa8ee
ms.translationtype: MT
ms.contentlocale: ja-JP
ms.lasthandoff: 03/11/2022
ms.locfileid: "139896553"
Slug: auto-update-your-azure-site-extension
Title: Azure サイト拡張機能を自動更新する
Summary: この投稿では、Azure サイト拡張機能の自動更新を可能にする 1 つの行コードの変更を確認します。
Content: >-
  <a href="https://azure.microsoft.com/blog/2014/06/20/azure-web-sites-extensions/" target="_blank">Azure サイト拡張機能を使用</a>すると、Azure Web アプリを簡単に拡張し、サイトの機能を強化できます。たとえば、Azure Web アプリにオンライン<a href="https://docs.newrelic.com/docs/agents/net-agent/azure-installation/azure-web-apps" target="_blank">New RelicとVisual Studio</a>統合する拡張機能があります。独自の書き込みを行い、サイト拡張機能ギャラリー <a href="https://github.com/projectkudu/kudu/wiki/Azure-Site-Extensions#site-extension-gallery" target="_blank">に投稿することもできます</a>。サイト拡張機能を作成してギャラリーに発行する方法が分からない場合は、こちらを参照してください。


  ただし、これらのサイト拡張機能を更新すると、少し面倒な場合があります。 以前は、サイト拡張機能の新しいバージョンを発行するときに、ユーザーがサイト拡張機能ギャラリーを参照して最新バージョンを取得し、更新ボタンを使用して更新プログラムを手動で展開する必要がありました。ここでは、サイト拡張機能を 1 行のコードで自動的に<a href="https://github.com/projectkudu/SiteExtensionUpdater" target="_blank"></a>更新する方法を紹介します。

  <h2>自動更新を有効にする</h2>

  <h3>1 つの定期船</h3>

  サイト拡張機能を自動更新するには、サイト拡張機能のホーム ページ (またはユーザーが頻繁にアクセスする任意のページ) に次のスクリプト タグを含める必要があります。

  <pre class="prettyprint">&lt;script src=""&gt;&lt;/script&gt;</pre>

  このように簡単です。


  これで、すべてのユーザーがサイト拡張機能に移動するたび、スクリプトがバックグラウンドで実行され、新しいバージョンの拡張機能が使用可能な状態にあるかが確認されます。 ある場合、スクリプトはユーザーのサイト拡張機能のコピーを更新し、新しいビットを取得するためにページを更新するように求めます。 ほんの数秒ですべて!

  <blockquote><strong>メモ：</strong> 自動更新機能は、UI を使用するサイト拡張機能に対して機能します。</blockquote>

  <h3>Bower を使用してインストールする</h3>

  Bower を使用する場合は、そこでも説明しています。 次のコマンドを実行して、bower を使用してスクリプトをインストールできます。

  <pre class="prettyprint">bower install  azure-site-extension-updater</pre>

  <h2></h2>

  <h2>カスタム applicationHost.xdt ファイルの使用</h2>

  サイト拡張機能に applicationHost.xdt ファイルを使用しない場合は、このセクションをスキップできます。そうする場合は、注意する必要があるものがあります。


  自動アップデータ機能に必要な点の 1 つは、サイト拡張機能の *.nuspec ファイルで発行する ID が、applicationHost.xdt ファイル内のサイト拡張機能に対して一覧表示するルートと一致する必要がある点です。

  <blockquote><em><strong>メモ：</strong> applicationHost.xdt ファイルをサイト拡張子と一緒に含めなかった場合、Kudu によって正しいルートで既定のファイルが生成されます</em></blockquote>

  *.nuspec ファイルの例:

  <pre class="prettyprint">&lt;?xml version="1.0"?&gt;

  &lt;package &gt;
    &lt;metadata&gt;
      &lt;id&gt;MySiteExtension&lt;/id&gt;
      &lt;version&gt;7.0.0&lt;/version&gt;
      &lt;authors&gt;ZainRizvi&lt;/authors&gt;
      &lt;owners&gt;ZainRizvi&lt;/owners&gt;
      &lt;licenseUrl&gt;https://www.github.com/zainrizvi/mysite/license&lt;/licenseUrl&gt;
      &lt;projectUrl&gt;https://www.github.com/zainrizvi/mysite&lt;/projectUrl&gt;
      &lt;iconUrl&gt;https://www.github.com/zainrizvi/mysite/image.ico&lt;/iconUrl&gt;
      &lt;requireLicenseAcceptance&gt;false&lt;/requireLicenseAcceptance&gt;
      &lt;description&gt;Package description&lt;/description&gt;
      &lt;releaseNotes&gt;Summary of changes made in this release of the package.&lt;/releaseNotes&gt;
      &lt;copyright&gt;Copyright 2015&lt;/copyright&gt;
      &lt;tags&gt;Tag1 Tag2&lt;/tags&gt;
    &lt;/metadata&gt;
    &lt;files&gt;
      &lt;file src="\**\*.*" target="content" /&gt;
    &lt;/files&gt;
  &lt;/package&gt;

  </pre>

  applicationHost.xdt ファイルの例:

  <pre class="prettyprint">&lt;?xml version="1.0"?&gt;

  &lt;configuration xmlns:xdt=""&gt;
    &lt;system.applicationHost&gt;
      &lt;sites&gt;
        &lt;site name="%XDT_SCMSITENAME%" xdt:Locator="Match(name)"&gt;
          &lt;application path="/MySiteExtension" xdt:Locator="Match(path)" xdt:Transform="Remove" /&gt;
          &lt;application path="/MySiteExtension" applicationPool="%XDT_APPPOOLNAME%" xdt:Transform="Insert"&gt;
            &lt;virtualDirectory path="/" physicalPath="%XDT_EXTENSIONPATH%" /&gt;
          &lt;/application&gt;
        &lt;/site&gt;
      &lt;/sites&gt;
    &lt;/system.applicationHost&gt;
  &lt;/configuration&gt;</pre>

  <h2>制限事項</h2>

  自動更新スクリプトには、次の 2 つの注意点があります。

  <ol>
   <li>自動更新スクリプトはブラウザーで実行する必要がある javascript ファイルなので、サイト拡張機能を実際に更新するには、スクリプトをインポートするページにユーザーが移動する必要があります。 つまり、UI ベースのサイト拡張機能のみを自動更新できます。</li>
   <li>更新は、Kudu (scm) サイトに対して API 呼び出しを行って発生しますが、 <a href="https://github.com/projectkudu/kudu/wiki" target="_blank">Kudu</a> サイトにアクセスするには、ユーザーを認証する必要があります。 つまり、サイト拡張機能へのルートが既に Kudu サイトに基づいておらない場合 (サイト拡張機能が https://&lt; sitename.scm.azurewebsites.net/&gt;...) でルーティングされていない場合、サイト拡張機能には必要な承認が不足し、自動更新されません。 (既定では、サイト拡張機能は Kudu サイトの下にルーティングされます)</li>
  </ol>

  &nbsp;

  <h2>それはどのように機能しますか?</h2>

  このスクリプトでは、ページの URL を解析して、サイト拡張機能の名前を確認します。 そのため、サイト拡張機能が次の場所にある場合:

  <pre class="prettyprint"> https://&lt;sitename&gt;.scm.azurewebsites.net/MySiteExtension/</pre>

  名前は "MySiteExtension" である必要があります。


  このスクリプトでは、名前を使用して、Kudu サイトに対して API 呼び出しを 2 回行って、更新されたバージョンのサイト拡張機能が使用可能な場合に確認します。 更新プログラムが利用可能な場合、スクリプトは次を送信して、Kudu に最新バージョンのサイト拡張機能をインストールするように求めます。

  <pre class="prettyprint">PUT https://&lt;sitename&gt;.scm.azurewebsites.net/api/siteExtensions/&lt;siteExtensionName&gt;</pre>

  &nbsp;


  これは、ギャラリーのサイト拡張機能の [更新] ボタンをクリックした場合と同じ要求です。


  詳細については、プロジェクトと未GitHubについては、こちらを参照<a href="https://github.com/projectkudu/SiteExtensionUpdater">してください</a>。


  コーディングをお楽しみください!
