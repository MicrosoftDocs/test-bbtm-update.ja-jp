### YamlMime:Yaml
ms.openlocfilehash: eda7bc7d6769baac660868e85249027161b31e22
ms.sourcegitcommit: d03bdc7fe5447adb6530886aab848b75fe8fa8ee
ms.translationtype: MT
ms.contentlocale: ja-JP
ms.lasthandoff: 03/11/2022
ms.locfileid: "139904860"
Slug: dal-sharding-of-rdbms
Title: DAL – RDBMS のシャーディング
Summary: '編集者注: この投稿は、Shaun Tinline-Jones と Chris Chris Christon&nbsp; によって書かれており、クラウドとクラウド グループのシニア AzureCATProgram&nbsp;&nbsp; マネージャー Enterpriseします。  "クラウド サービス...'
Content: '<p><strong>エディターの注: </strong>この投稿は、<a href="https://social.msdn.microsoft.com/profile/shauntj/">Shaun Tinline-Jones</a> と <a href="https://social.technet.microsoft.com/profile/chris%20clayton%20(azurecat)/?ws=usercard-inline">Chris Chris Christon によって書か</a>れており、&nbsp;クラウドとクラウド グループのシニア AzureCATProgram&nbsp;&nbsp; マネージャー Enterpriseします。</p>  <p>"CSFundamentals" と呼ばれる "<a href="https://code.msdn.microsoft.com/Cloud-Service-Fundamentals-4ca72649" target="_blank">クラウド</a> サービスの基礎" アプリケーションは、データベースを基盤にした Azure サービスを構築する方法を示しています。&nbsp;これには、シナリオ、実装アーキテクチャ、ログ記録、構成、データ アクセス用の再利用可能なコンポーネントの説明が含まれます。&nbsp;このコード ベースは、Windows Azure Customer Advisory Team による運用デプロイに基づいて、Azure でスケーラブルで使用可能なサービスを提供するためのベスト プラクティスを具体的に調査することを目的としています。</p>  <p>最近の大多数の企業では、クラウド イニシアチブの前進を目指しています。特定のソリューションのビジネス ドライバーは、コストの削減から機敏性とスケールの大幅な向上まで、大きく異なります。&nbsp;ソリューションがクラウド&ldquo;&ldquo;&nbsp;&rdquo;&ldquo;&rdquo;&rdquo;のスケールを実現しようとしている場合、垂直スケーラビリティの戦略 (ハードウェアをアップグレードして容量を増やす) は水平方向のスケーラビリティに置き換えられるので、特定のタスクを共有するマシンの数が増えます。このトレードオフの良い例は、多くのサーバーが同じ Web サイト コンテンツを提供する Web ファームの作成と、1 台のモノリシック マシンで負荷の処理を試みる場合です。</p>  <p>このパスを開始するほとんどのユーザーは、コンピューティング ノードでの水平スケーラビリティを計画しますが、リレーショナル データベース管理システム (RDBMS)&nbsp; やキャッシュなど、より複雑で潜在的に重要な状態レベルをバイパスします。多くの場合、これらのサービスは IO を集中的に使用し、1 つのインスタンスによってバインドされます。&nbsp; 状態レベルで水平方向のスケーラビリティを実装する手法の 1 つは、シャーディング <em>と呼ばれる方法です</em>。&nbsp; シャーディングとは、RDBMS データを複数のデータベース (通常は同じスキーマ) に論理的に分離する場合です。 たとえば、従業員テーブルは、各データベースに異なる部門の従業員が格納されている 3 つの異なるデータベースに分割&rsquo;できます。</p>  <p>シャーディングの利点は、容量関連のシナリオよりもはるかに役立ちます。&nbsp;この投稿では、Azure SQL Database プラットフォームに実装され、主に OLTP シナリオに対応する RDBMS のシャーディングに焦点を当てる必要があります。&nbsp;シャード化されたデータベース構造の恩恵を受ける可能性があるシナリオの例を次に示します。</p>  <ul>  <li>スロットルのしきい値またはスループットの制限に達する頻度が高すぎます。</li>  <li>データベースのサイズが使い分けなくなります (インデックスの再構築、バックアップ)。</li>  <li>使用できない単一のデータベースは、(1 つのシャードではなく) すべてのユーザーに影響します。</li>  <li>需要に応じて適切にスケールアップおよびスケールダウンが困難なデータベース。</li>  <li>マルチテナントやサービスとしてのソフトウェア オファリングなど、特定のビジネス モデル。</li>  </ul>  <p>Windows Azure SQL Database などのマルチテナント データベースをサービス ソリューションとして使用する場合は、通常、さまざまな条件下でクライアントを調整するサービス品質 (QOS) 制御が適用されます。 調整は、通常、リソースの圧力が高い場合に発生します。&nbsp; シャーディングは、通常は 1 つのサーバーに影響を与える負荷を受け取り、それぞれがシャードを含む複数のサーバーとして分散することで、リソースの負荷を軽減するための重要な戦略です。 たとえば、5 つのシャードを作成すると、各データベースの負荷が約 20% に減少します。&nbsp;</p>  <p>より大きな力を与えるものと同様に、犠牲を払う必要があります。&nbsp; シャーディングを使用すると、いくつかの重要な領域の複雑さを増し、より多くの計画が必要になります。 次のようなものがあります。</p>  <ul>  <li>将来のビジネス ニーズでシャード数を削減する必要がある場合は、ID 列をすべてのシャードでグローバルに一意にする必要があります。&nbsp; ID がすべてのシャードで一意ではない場合、2 つのシャードをマージすると競合が発生する可能性があります。</li>  <li>参照整合性は、独立したデータベースである他のシャード内の行へのリレーションシップを参照または強制することはできません。</li>  <li>シャード間のクエリは、各シャードに対してクエリを実行し、結果をマージする必要があるため、可能であれば回避する必要があります。&nbsp;シャード全体で&ldquo;&rdquo;クエリをファンアウトする必要性は、パフォーマンスの観点からコストがかかるだけでなく、それをサポートする必要があるシャーディング フレームワークの複雑さを増します。&nbsp;クロスシャード クエリが必要な場合、一般的な方法は、各シャードに非同期的にクエリを実行します。&nbsp;ただし、同期アプローチで結果セットのサイズを制御できる場合があります。 &nbsp; &nbsp;</li>  </ul>  <p>ほとんどの場合、シャーディングはデータ アクセス層 (DAL) の概念であり、より高いレベルのアプリケーション ロジックから重要なほとんどを抽象化します。&nbsp;</p>  <p>テナントの定義方法 &ldquo;は&rdquo; 、シャード化されたアーキテクチャを構築するときに行える最も重要な決定の 1 つです。&nbsp; テナントは、同じシャード上に含まれており、データの最大の一意の分類です。&nbsp; 1 つのテナントに制限されているクエリは、通常の動作状態の間にファンアウト操作を実行する必要がなくな、パフォーマンスが向上します。&nbsp; 適切なテナント定義の決定に影響を与える要因には、次のようなものがあります。</p>  <ul>  <li>識別子の上位レベルのアプリケーション コードの認識レベル。</li>  <li>このレベルで実行されるほとんどのコア ビジネス トランザクションの機能。</li>  <li>テナントの細分性に関する一般的な毎日の操作で調整を回避する機能。</li>  </ul>  <p>これらの概念と考慮事項を大きなレベルで把握するために、Windows Azure カスタマー アドバイザリ チームは、Cloud Services Fundamentals (CSF) パッケージ (<a href="https://code.msdn.microsoft.com/Cloud-Service-Fundamentals-4ca72649" target="_blank">https://code.msdn.microsoft.com/Cloud-Service-Fundamentals-4ca72649</a>) に基本的なシャーディング データ アクセス層 (DAL) を構築しました。</p>  <p>CSF では、テナントは個々のユーザーとして定義されます。&nbsp; このテナントを選択する要因の一部を次に示します。</p>  <ul>  <li>主要なビジネス要件の多くでは、複数のユーザーに対するクエリは必要ではありません。</li>  <li>使用できないシャードは、定義された一連のユーザーにのみ影響を与え、他のすべてのユーザーはシステムの一般的な使用を継続します。&nbsp; 1 つのシャード上のユーザーの数は、ビジネスに耐え得る数に制御できます。</li>  </ul>  <p>テナントが定義され、実装され、データベース間のトランザクションは必要ありません。&nbsp; 図 1 では、この一連のデータをシャードレット (データ モデル トランザクション境界) と呼しています。</p>  <p>&nbsp;<a href=""><img src="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/2783.data-model-transaction-boundary.png" alt="" border="0"></a>&nbsp;</p>  <p><em><span style="font-size: x-small;">図 1 - データ モデルトランザクションの境界</span></em></p>  <p>ユーザーがセッションで初めてデータベースに接続すると、一連の単純なクエリを実行して、オフライン シャードが原因で使用できない機能を把握できます。&nbsp;</p>  <p>CSF で示されているシャーディング手法を簡略化するために、近い将来の容量のニーズを満たすのに十分なストレージを備えるシャードのセットを作成することを決定しました。 このサイズを選択することで、シャードの数を増やして減らす必要がなくなります。これには、テナントの移動などのアクションも含まれます。&nbsp; テナント名をハッシュすることで整数&rsquo;が生成され、この ID はシャード マップ内の一致する範囲を参照するために &ldquo;使用されます&rdquo;。&nbsp; CSF は範囲ベースのメカニズムを使用します。このメカニズムでは、これらの数値の範囲が特定のシャードに割り当てられます (シャード マップで &ldquo;キャプチャされます&rdquo;)。&nbsp;</p>  <p>シャード セットにシャードを追加または削除する必要がある場合は、新しいシャードに移行するまでテナントが使用できなくなる必要があります。 この大きな制限により、シャード セットは、複雑なシャード管理を行う必要を減らすか、または排除するために最初に作成された時点で、プロビジョニングよりも大幅にオーバーされる可能性があります。&nbsp;</p>  <p>このソリューションでは、データ アクセス層 (DAL) がテナント ID を認識して、シャード セット内のテナントの配置を決定する必要があります。&nbsp; 使用できないシャードを含むクエリが実行されると、クエリ全体が失敗します。&nbsp; DAL にテナント ID が含めなかった場合は、すべてのシャードに対してクエリを実行する必要があります。そうすることで、障害が発生する可能性が高く、パフォーマンスが低下します。&nbsp;</p>  <p>現在、より高度なシャーディング手法を示す追加のコード サンプルを提供する準備作業が進行中です。&nbsp; このサンプルでは、次の領域の機能強化が提供されます。</p>  <ul>  <li>リアクティブでプロアクティブなシャード管理。</li>  <li>グローバルな一意性と ID 管理。</li>  <li>セット内のシャード間でのテナントの移行。</li>  <li>シャード セットの拡張と縮小。</li>  <li>テナントに対応していないクエリの機能強化。</li>  </ul>  <p>結論として、Cloud Services Fundamentals &ldquo;&rdquo; コード サンプルは、クラウド スケール アプリケーションを作成するための重要な手法であるシャーディングの基本的な概念を見始めるのに最適な方法です。 &nbsp;</p>'
