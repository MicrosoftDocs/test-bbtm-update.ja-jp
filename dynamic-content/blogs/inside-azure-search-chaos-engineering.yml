### YamlMime:Yaml
ms.openlocfilehash: ddb2e771402a12e942108b5109d64e8a0f966eb5
ms.sourcegitcommit: d03bdc7fe5447adb6530886aab848b75fe8fa8ee
ms.translationtype: MT
ms.contentlocale: ja-JP
ms.lasthandoff: 03/11/2022
ms.locfileid: "139890733"
Slug: inside-azure-search-chaos-engineering
Title: 'Azure Search の内部: 混乱エンジニアリング'
Summary: 'システムのスケーリングとして、ノードの異常終了がランダムで予期しない方法で失敗することを想定しています。突然のパーティションを使用するためのネットワーク、およびいつでもメッセージを削除する必要があります。 Azure Search は、混乱エンジニアリングを使用してこの問題を解決するのに役立ちます。  '
Content: >-
  クラウドコンピューティングの中核となるのは、障害が避けられないことです。システムのスケーリングとして、ノードの異常終了がランダムで予期しない方法で失敗することを想定しています。突然のパーティションを使用するためのネットワーク、およびいつでもメッセージを削除する必要があります。


  この事実を戦うのではなく、これを採用しています。障害について計画し、システムをフォールトトレランス、回復性、および自己安定化として設計します。しかし、設計と構築が完了したら、すばらしいフォールトトレラントシステムが必要に応じて実際にエラーに対応しているかどうかを確認するにはどうすればよいでしょうか。


  機能テストでは、これだけを行うことができます。分散システムは、パーツを移動する複雑なエコシステムです。各コンポーネントはエラーの影響を受けます。また、他のシステムコンポーネントとの相互作用には、独自のエラーモードもあります。これらのコンポーネントが考えられる障害にどのように対応するかについて、すべてのことを armchair して theorize ことができますが、障害の可能性があるすべての組み合わせを見つけることは現実的ではありません。システムで発生する可能性があるすべての障害モードに対して、管理を行う場合でも、動作を変更するたびに、この方法でシステムの応答を再検証することはできません。


  &nbsp;

  <h2>カオス エンジニアリング</h2>

  <a href="https://azure.microsoft.com/en-us/services/search/">Azure Search</a> は、混乱エンジニアリングを使用してこの問題を解決します。最近の優れたブログ投稿では、Netflix によって造語になっています。混乱工学は、分散システムへの自動フォールト挿入を制御するインフラストラクチャを構築するための手法です。これを実現するために、Netflix は、顧客のサービスにエラーを挿入するツールのコレクション ("猿" といいます) を使用して Netflix Simian アーミーを作成しました。


  Netflix Simian 軍の最初のメンバーである混乱のあるサルによって、独自の "検索混乱のあるサル" が作成され、テスト環境に対する大混乱を防ぐことができました。

  この環境には、トポロジと状態をランダムに変更する検索サービスが含まれています。サービス呼び出しは、このサービスに対して定期的に実行され、完全に動作していることを確認します。


  私たちのプロビジョニングとスケーリングのワークフローに関する問題を解決するには、このターゲット環境を、検索の混乱を目的としてセットアップするだけでも、非常に便利です。検索の混乱のあるサルが休止状態になると、テストサービスがスムーズに動作することが期待されます。このため、エラーが発生した場合は、既存のワークフローのバグまたは警告システムからの誤検知が原因であると見なされます。運用を開始する前に、いくつかのバグをこの方法でキャッチしました。


  <img style="background-image: none; float: none; padding-top: 0px; padding-left: 0px; margin-left: auto; display: block; padding-right: 0px; margin-right: auto; border: 0px;" title="Azure Search の内部: 混乱エンジニアリング" src="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/chaos-monkey-2.png" alt="Inside Azure Search: Chaos Engineering" width="610" height="374" border="0" />

  <h2></h2>

  <h2>混乱の定量化</h2>

  テストサービスが安定化された後は、検索の混乱を unleashed 』し、いくつかのツールを用意して、楽しく使えるようにしました。継続的に実行され、テスト環境で実行するために一定の間隔で操作をランダムに選択します。

  サルが選ぶことのできる一連の操作は、テスト環境での混乱のレベルによって異なります。


  <strong>混乱が少ない </strong>場合は、サービスの可用性を最小限に抑えるか、中断せずに、システムが正常に復旧できたというエラーを意味します。したがって、検索の混乱を伴うサルは、混乱の少ない操作のみを実行するように設定されていますが、テストサービスから発生したすべてのアラートはバグと見なされます。


  <strong>中規模の混乱 </strong>の障害も正常に復旧できますが、サービスのパフォーマンスや可用性の低下が発生し、優先度の低いアラートが呼び出し時にエンジニアに通知される可能性があります。


  <strong>混乱の多い </strong>エラーはより致命的で、サービスの可用性を中断します。このような場合、優先度の高いアラートが通話エンジニアに送信され、多くの場合、手動による修正が必要になります。


  大量の混乱操作は、お客様のデータの整合性を維持しながら、システムが正常に失敗することを保証するために重要です。中規模の混乱操作と共に、アラートが予想どおりに発生することを確認する否定テストとしても機能し、エンジニアが問題に対応できるようにします。


  すべての操作は、必要に応じて実行することもできます。


  &nbsp;

  <h2>例外的な障害から予想されるエラーへのダウングレード</h2>

  このような混乱レベルにより、エラーが既知で予想されるエラーとしてインフラストラクチャに組み込まれるように、体系的で反復的なパスが提供されます。


  システムに発生した、またはシステムに追加された障害には、システムがどのように反応するかを測定する混乱レベルが割り当てられています。このエラーは、システムの処理をトレーニングしたり、既存の混乱操作から検出されたバグをトレーニングしたり、実際の検索サービスによって発生した障害を再現したりすることができます。どちらの方法でも、最初に新しいエラーを自動で自動化できるので、検索の混乱のあるサルの1回の呼び出しで簡単にトリガーできるようになります。


  上記の低、中、高の各レベルに加えて、障害は "極端な" レベルの混乱の原因として分類される可能性があります。


  <strong>極端な混乱</strong> 操作とは、サービスが正常に低下したり、データが失われたり、アラートを生成せずに警告なしでエラーが発生したりするエラーです。大量の混乱の障害が発生した後にシステムがどのような状態になるかを予測することはできないため、この指定の操作は、大きな混乱にダウングレードするために修正が追加されるまで、連続して実行される検索混乱にはなりません。


  混乱レベルを可能な限り小さくすることは、システム、極端な問題、またはそれ以外のシステムに追加するすべての障害の目標です。


  システムをフロアに配置する極端な混乱の障害である場合は、少なくともサービスの整合性と顧客データを保持するためにインフラストラクチャを有効にすることをお勧めします。これにより、混乱の激しい障害にダウングレードすることができます。場合によっては、実際の修正が見つかるまでサービスの可用性を犠牲にすることがあります。


  混乱を軽減する必要がある大きな混乱が発生した場合は、エラーが発生した直後に、インフラストラクチャを自動的に軽減するようにします。これにより、優先度の高いアラートでエンジニアに連絡する必要がなくなります。


  私たちは、お客様のサービスが影響を受ける前に、検索の混乱を伴うサルがシステムを破壊し、バグを発見したとしていましたが、これは特に、サルによって高および極端な混乱の障害が明らかになったときに、お客様のサービスが停止している夜の電話を受信した後、bleary eyed パニックでバグを修正するよりも、リリース前に問題を修正する方がはるかに快適です。


  中程度の混乱エラーも、緊急でない場合は歓迎されます。システムが既に復旧可能な場合は、早期検出を改善して、サービスの可用性が影響を受けることをエンジニアに通知する前に手順を実行できるようにすることができます。 エンジニアが呼び出しに対処する必要があるノイズが少ないほど、実際の問題に対応できるようになります。


  このプロセスでは、混乱レベルを促進するための鍵となります。最小限の労力で特定の障害を発生させることができるため、混乱レベルの削減に向けたテスト主導の開発アプローチに緩く対応できます。また、検索の混乱を防ぐために、自動故障が発生した場合は、システムに対する今後の変更が障害の処理能力に影響しないように、回帰テストとして機能することができます。


  <img style="background-image: none; float: none; padding-top: 0px; padding-left: 0px; margin-left: auto; display: block; padding-right: 0px; margin-right: auto; border: 0px;" title="Azure Search の内部: 混乱エンジニアリング" src="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/chaos-monkey-3_480.png" alt="Inside Azure Search: Chaos Engineering" width="285" height="360" border="0" />

  <h2></h2>

  <h2>動作中の混乱エンジニアリング</h2>

  これがどのように動作するかを説明するために、このモデルを使用して極端な混乱から混乱を少なくすることから、障害の最近の例を紹介します。


  <strong>極端な混乱: 初期検出。  </strong>サービスが予期しない低優先度のアラートを生成した。さらに調査した後、少なくとも1つの必要なバックグラウンドタスクが実行されていないことを示すダウンストリームエラーが発生しました。最初の分類では、このエラーは極端に混乱しています。クラスターは不明な状態になり、正しく通知されませんでした。


  <strong>大きな混乱: 軽減。  </strong>この時点では、根本原因を認識していなかったため、エラーを自動化できませんでした。むしろ、このような問題は、大きな混乱のレベルにまで進めてきました。手動による修正が行われたことを確認しましたが、レプリカを使用しないサービスの可用性に影響を与えました。このアラートは正しいレベルに調整されているため、呼び出しのエンジニアは、エラーが再度発生したときにいつでもこの手動修正を実行できます。2つの unlucky エンジニアが、障害が修正される前に優先度の高いアラートによって起動されるようになりました。


  <strong>オートメーション。  </strong>お客様のサービスが安全であることが確認できたら、エラーの再現に注力しました。関連のないコンポーネントに影響を与える外部呼び出しを行うと、根本的な原因が予期しない状態になりました。これを見つけるには、呼び出しを行うコンポーネントで人為的な待機時間が発生するように、フォールト挿入を追加する必要があります。


  <strong>混乱の少ない: 修正と検証。  </strong>根本原因を特定した後、修正は簡単でした。システムの他の部分からの呼び出しで待機時間が発生しているコンポーネントを分離して、すべての停止がそのコンポーネントにしか影響しないようにしています。このコンポーネントには、待機時間の影響を受けないように、または分離された停止だけでなく、長時間に及ぶ停止 (非常にまれな部分) でも、このコンポーネントにいくつかの冗長性が導入されました。


  自動混乱操作を使用して、元の障害が問題なく円滑に処理されたことを証明できました。潜在的な可用性に影響する可能性のある修正を実行するために呼び出しエンジニアをウェイクアップするために使用された障害は、システムによって障害が発生した場合でも、ノイズをまったく発生させずに、混乱を防ぐことができるようになりました。


  この時点で、自動化されたエラーは、混乱の少ない操作として定期的に実行され、システムが重大なエラーを処理するシステムの能力を継続的に検証するために、検索の混乱を伴うサルに渡すことができます。


  &nbsp;

  <h2>混乱エンジニアリングとクラウド</h2>

  <a href="https://azure.microsoft.com/en-us/services/search/">Azure Search</a>では、信頼性とフォールトトレラントなクラウドサービスを開発する際には、混乱エンジニアリングが非常に便利なモデルであることが実証されています。私たちの検索混乱のために、例外的な障害を検出して、計画的で自動化されたソリューションによる影響の少ないエラーとして解決するための決定的なフレームワークを提供してきました。
