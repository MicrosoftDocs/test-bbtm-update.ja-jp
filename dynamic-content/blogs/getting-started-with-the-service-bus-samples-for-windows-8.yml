### YamlMime:Yaml
ms.openlocfilehash: 7ed2c3f75abb9d16413b0f363aa93cb3747bcefb
ms.sourcegitcommit: d03bdc7fe5447adb6530886aab848b75fe8fa8ee
ms.translationtype: MT
ms.contentlocale: ja-JP
ms.lasthandoff: 03/11/2022
ms.locfileid: "139896780"
Slug: getting-started-with-the-service-bus-samples-for-windows-8
Title: Windows 8 の Service Bus サンプルを使用したはじめに
Summary: Windows 8 用の Azure Toolkit Windows の一部として、最近、Windows 8 metro スタイルアプリケーションから Service Bus にアクセスするためのサンプルライブラリと、その方法を示す metro アプリのサンプルをリリースしました。
Content: "<p><a href=\"https://watwindows8.codeplex.com/\" target=\"_blank\">Windows 8 用の Azure Toolkit Windows</a>の一部として、Windows 8 metro スタイルアプリケーションから Service Bus にアクセスするためのサンプルライブラリと、基本的な Service Bus 機能の使用方法を示す metro アプリのサンプルがリリースされました。 この記事では、サンプルアプリを簡単に紹介し、サンプルライブラリの概要を確認し、サンプルライブラリの動作を詳しく調べます。</p>  <h3><b>Windows 8 用の Service Bus サンプルブラウザー</b></h3>  <p>作業を簡単に開始できるように、Windows 8 用の Service Bus サンプルブラウザーを構築しました。この単純な metro スタイルアプリケーションを使用すると、Service Bus の機能についての調査と学習が可能になり、常にコードの近くに保持されます。</p>  <p>すべてのサンプルでは、サンプルブラウザーで AppBar を起動します (マウスを使用して右クリックするか、下ベゼルからタッチでスワイプします)。 Visual Studio で使用するために、サンプルのソースコードをクリップボードにコピーできます。</p>  <p>サンプルブラウザーを起動すると、3つの簡単なサンプルが含まれています。</p>  <p><b>単純なキュー</b><br>Service Bus キューは、分散アプリケーションまたはコンポーネント間の通信を許可する先入れ先出し型のメッセージキューです。 <a href=\"https://azure.microsoft.com/en-us/develop/net/how-to-guides/service-bus-queues/\" target=\"_blank\">Service Bus キューの詳細</a>については、WindowsAzure.com を参照してください。 キューを使用するパターンは簡単です。キューにメッセージが送信されると、他のユーザーが後でメッセージを受信することがあります。</p>  <p><img src=\"https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/3617.ServiceBusSamples1.png\" alt=\"\" border=\"0\"></p>  <p>単純なキューのサンプルでは、Windows 8 metro スタイルアプリケーション内でこのメッセージングパターンを使用する方法の簡単な例に従うことができます。&nbsp;</p>  <p><b>簡単なトピック</b><br>Service Bus のトピックとサブスクリプションは、パブリッシュ/サブスクライブ通信モデルをサポートします。メッセージは1つのトピックに送信され、複数のサブスクライバーが受信できます。 Service Bus の<a href=\"https://azure.microsoft.com/en-us/develop/net/how-to-guides/service-bus-topics/\" target=\"_blank\">トピックの詳細</a>については、WindowsAzure.com を参照してください。 トピックの使用は、キューを使用するのと同じです。他のユーザーがトピックにメッセージを送信し、各サブスクライバーが後でそのメッセージのコピーを受け取ることができます。</p>  <p><img src=\"https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/8831.ServiceBusSamples2.png\" alt=\"\" border=\"0\">&nbsp;</p>  <p>単純なトピックのサンプルでは、トピックを作成し、1つまたは複数のサブスクライバーを追加して、メッセージを送受信します。<b></b></p>  <p><b>ピークロック、破棄して完了</b><br>キューとサブスクリプションはどちらも、メッセージを受信するためのさまざまな方法をサポートしています。 最初の、Receive および Delete は、受信時にキューまたはサブスクリプションからメッセージを削除します。受信側がメッセージの処理に失敗した場合、その内容は失われます。 2番目のピークロックでは、受信操作と削除操作が2つの個別の操作になります。つまり、受信側がメッセージをキューからピーク、その後 (キューまたはサブスクリプションから削除して処理済みとしてマークする)、またはメッセージを破棄 (未完了または未処理としてマーク) できます。 ピークロックタイムアウトが破棄された場合、キューまたはサブスクリプションにメッセージが返されます (既定では、ピークロックタイムアウトは30秒です)。</p>  <p>ピークロックのサンプルでは、自分でロックをピークします。 各図形をクリックしてキューに送信し、受信を試行します。 図形を受信したら、それを選択して完了または破棄します。完了したメッセージはキューに戻りませんが、破棄されます。 メッセージを完了しない場合、または破棄した場合は、ロックの有効期限が切れ、自動的にキューに戻されることがわかります。&nbsp;</p>  <h3><b>Windows 8 用のサンプル Service Bus ライブラリ-Microsoft. サンプル</b></h3>  <p>開始するには、 <a href=\"https://watwindows8.codeplex.com/\" target=\"_blank\">Windows Azure Toolkit を Windows 8 に</a>ダウンロードします。</p>  <p>Service Bus REST API の使用を容易にするために、キュー、トピック、サブスクリプションなどの一般的な Service Bus プリミティブをラップする Windows 8 用のサンプルライブラリを構築しました。キューの作成、メッセージの送信、メッセージの受信、キューの削除を示すために、いくつかのコードについて簡単に説明します。 Service Bus を初めて使用する場合は、 <a href=\"https://azure.microsoft.com/en-us/develop/net/how-to-guides/service-bus-queues/\" target=\"_blank\">Service Bus キュー</a>と Service Bus に関する<a href=\"https://azure.microsoft.com/en-us/develop/net/how-to-guides/service-bus-topics/\" target=\"_blank\">トピック</a>を参照してください。</p>  <p>HTTP 経由で Service Bus を呼び出すため、いくつかの点を考慮する必要があります。</p>  <ol>  <li><b>パッケージマニフェストでインターネット (クライアント) 機能を要求</b>する: Service Bus がインターネット上にあるため、アプリケーションがネットワークにアクセスするためのアクセス許可を持っていることを確認する必要があります。</li>  <li><b>ネットワークへの呼び出しは、常に非同期である必要があり</b>ます。ネットワーク呼び出しの完了には少し時間がかかるため、常に非同期 IO を使用することをお勧めします。 サンプル Service Bus ライブラリは、すべての操作の単純な非同期メソッドを公開することによって役立ちます。&nbsp;</li>  </ol>  <p>まず、トークンプロバイダーが必要です。 トークンプロバイダーは、Access Control Service (ACS) から認証トークンを要求するためにライブラリによって使用され、Service Bus に対して行われた要求にそのトークンをアタッチします。 トークンプロバイダーは、一連の資格情報のように考えることができます。これは、\"だれが\" service bus リソースに対してアクションを実行しようとしているかを指定します。&nbsp;</p>  <p><span style=\"color: #008000;\">TokenProvider</span> TokenProvider = <span style=\"color: #008000;\">TokenProvider</span>.CreateSharedSecretTokenProvider(<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;serviceNamespace: <span style=\"color: #993300;\">\"Service Bus 名前空間の名前 (例: contoso\"</span>,<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 発行者: <span style=\"color: #993300;\">\"owner\"</span>,<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;issuersecret:<span style=\"color: #993300;\"> \"Service Bus の発行者のシークレット (例: b66Gxx...\"</span>);</p>  <p>次に、キューを作成します。このスーパー単純な呼び出しでは、作成するキューのパスを指定し、既定のキューの説明を使用します。 作成中のキューの設定を微調整する場合は、パラメーターとしてキューの説明を受け取る便利なオーバーロードがあります。</p>  <p style=\"padding-left: 30px;\"><span style=\"color: #008000;\">Queue</span> myQueue = <span style=\"color: #0000ff;\">await</span> <span style=\"color: #008000;\">キュー</span>。CreateAsync (<span style=\"color: #993300;\">\"MyQueue\"</span>, tokenProvider);</p>  <p>キューを Service Bus で作成したら、メッセージを送信できます。 サンプルライブラリを使用すると、本文が JSON 形式のオブジェクトであるプレーンテキストメッセージまたはメッセージを簡単に送信できます。 ここでは、メッセージの本文としてプレーンテキスト文字列を非同期的に送信します。</p>  <p style=\"padding-left: 30px;\"><span style=\"color: #0000ff;\">await</span> myQueue (<span style=\"color: #993300;\">\"Hello World!\"</span>);</p>  <p>メッセージの受信は単なる単純なので、受信と削除のセマンティクスを使用してキューから受信しようとします。 ピークロックセマンティクスを使用する場合は、近くに PeekLockAsync メソッドがあります。 メッセージを受信した後は、プレーンテキストの本文を抽出します。</p>  <p style=\"padding-left: 30px;\"><span style=\"color: #008000;\">Brokeredmessage</span> message = <span style=\"color: #0000ff;\">await</span> myQueue ();<br><span style=\"color: #0000ff;\">string</span>挨拶 = message。GetBody &lt; <span style=\"color: #0000ff;\">文字列</span> &gt; ();</p>  <p>最後に、自分でクリーンアップし、キューを削除します。</p>  <p style=\"padding-left: 30px;\">待機 &nbsp; <span style=\"color: #008000;\">キュー</span>。DeleteAsync (<span style=\"color: #993300;\">\"MyQueue\"</span>, tokenProvider);&nbsp;</p>  <p>ここでは、Service Bus でエンティティを作成、送信、受信、削除するための数行のコードについて説明します。 Windows 8 用のサンプル Service Bus ライブラリでは、簡単に使用できるようにするためのシンプルな API サーフェス領域と、必要なときに使用可能な REST API サーフェイスの能力を備えています。 このライブラリはオープンソースのライセンスされたサンプルとして出荷されています。これにより、コードを詳細に把握し、その内容に合わせて調整することができます。&nbsp;</p>  <p>Windows 8 用のサンプル Service Bus ライブラリの簡素化された API サーフェイスを使用すると、Service Bus に接続された優れた Metro スタイルアプリの作成を簡単に開始できます。一般的なシナリオを実現し、必要に応じて高度な機能を簡単に理解できるようにするために必要な概念の合計数を削減しようとしています。 このサンプルライブラリの有用性についてのご意見をお待ちしております。 <a href=\"https://watwindows8.codeplex.com/\" target=\"_blank\">Windows Azure Toolkit の Windows 8</a>については、ディスカッションリストでご意見をお寄せください。</p>  <h3><b>詳細: Windows 8 のサンプル Service Bus ライブラリのしくみ</b></h3>  <p>Service bus の操作は、管理またはランタイムの2つのクラスのいずれかに分類されます。 管理操作は、キュー、トピック、サブスクリプションなどの service bus エンティティの作成、列挙、取得、削除に使用されます。ランタイム操作は、メッセージを送受信するために使用されます。 まず、Windows 8 のサンプル Service Bus ライブラリが管理操作を実装する方法について詳しく説明します。次に、ランタイム操作の実装方法について説明します。</p>  <p><b>管理操作: 作成、取得、列挙、および削除</b><br>Service bus 名前空間は、ATOM フィードのセットと考えることができます。それぞれが、その下のパスに存在するエンティティを記述します。 たとえば、' Foo ' という名前のキューが Uri <a href=\"https://contoso.servicebus.windows.net/Foo\" target=\"_blank\">https://contoso.servicebus.windows.net/Foo</a> に存在する場合、そのアドレスに次のような atom エントリが見つかります。</p>  <p>&nbsp;<img src=\"https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/1778.ServiceBusSampleCode.png\" alt=\"\" border=\"0\"></p>  <p>マークアップをすばやく検索すると、キューのアドレス (3 行目)、キューの名前 (4 行目)、およびここに存在するキューの説明 (行 12-25) が表示されます。 このパターンは名前空間全体で true です。すべてのエンティティは、Atom エントリにラップされた XML エンティティの説明として表されます。</p>  <p>Service bus エンティティの管理は、HTTPS を介して service bus 名前空間内のこれらのフィードに対して RESTful 操作を実行することで実現されます。 http <b>PUT</b>を発行するエンティティを作成するには、http <b>get</b> を発行するエンティティを取得し、http <b>delete</b>を発行するエンティティを削除します。 列挙は、予約された<b>$Resources</b>コレクション内で、名前空間のルート (たとえば、 <b>/$Resources/QUEUES</b>) で HTTP <b>GET</b>を発行することによって実行されます。</p>  <p>作成できるエンティティとサブエンティティの種類はそれぞれ、リソースの説明の階層で表されます。 これには、使い慣れたキュー、トピック、サブスクリプションの説明、およびルールの説明、ルールフィルター、ルールアクションなどのより高度なエンティティが含まれます。</p>  <p><img src=\"https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/6253.ServiceBusSamples3.png\" alt=\"\" border=\"0\"></p>  <p>リソース記述の種類は、service bus エンティティを表す Atom エントリの内容をカプセル化します。 ( <a href=\"https://msdn.microsoft.com/en-us/library/system.runtime.serialization.datacontractserializer.aspx\" target=\"_blank\">DataContractSerializer</a>を使用して) XML にシリアル化し、Atom エントリにラップする場合、これらの型を使用して service bus のエンティティの作成、削除、一覧表示、および表現を行うことができます。</p>  <p>Windows 8 のサンプル Service Bus ライブラリ内では、 <b>AsSyndicationItem ()</b>メソッドを呼び出すことで、リソースの説明を Atom エントリとして表すことができます。 <a href=\"https://msdn.microsoft.com/en-us/library/system.servicemodel.syndication.syndicationitem.aspx\" target=\"_blank\">SyndicationItem</a>型は、RSS フィードと Atom フィードの両方を使用するクラスを提供する<a href=\"https://msdn.microsoft.com/en-us/library/system.servicemodel.syndication.aspx\" target=\"_blank\">system.servicemodel</a>名前空間内にあります。 同様に、静的な <b>resourcedescription. Create &lt; T &gt; (SyndicationItem)</b> メソッドを使用して、必要なリソースの種類を <b>t </b>(たとえば、 <b>t</b> は <b>queuedescription</b>) として指定することで、Atom エントリからリソースの説明を抽出できます。&nbsp;</p>  <p>さまざまな service bus エンティティ ( <b>Resourcedescription</b>) の記述をモデル化する方法と、それらの説明を Atom との間でどのように変換するか ( <b>AsSyndicationItem ()</b> と <b>resourcedescription. Create &lt; T &gt; (SyndicationItem item)</b> メソッドを使用) については、作成、取得、一覧表示、および削除の各操作を実装する方法を確認してください。 キューを使用して、管理操作の実装方法を確認しますが、トピック、サブスクリプション、ルールのロジックは非常に似ています。</p>  <p>キューを作成する方法を見てみましょう。&nbsp;</p>  <p style=\"padding-left: 30px;\"><span style=\"color: #008000;\">Queue</span> myQueue = <span style=\"color: #0000ff;\">await</span> <span style=\"color: #008000;\">キュー</span>。CreateAsync (<span style=\"color: #993300;\">\"Foo\"</span>, tokenProvider);&nbsp;</p>  <p><b>Queue. CreateAsync を</b>呼び出すと、次の操作が実行されます。</p>  <ol>  <li><b>Queuedescription</b>のインスタンスを作成し、パスとして<b>\"Foo\"</b>を指定します。</li>  <li><b>TokenProvider</b>で指定された service bus 名前空間の<b>NamespaceManager</b>を作成します。</li>  <li><b>NamespaceManager</b>が、指定された<b>queuedescription</b>を使用して新しいキューを作成するように要求します。</li>  <li><b>NamespaceManager</b>内で、 <b>AsSyndicationItem ()</b>; を呼び出して、<b>キューの説明</b>を<b>Atom</b>にラップします。</li>  <li><b>SyndicationClient</b>が、指定された<b>SyndicationItem</b>を持つ新しいリソースを作成するように要求します。</li>  <li><b>SyndicationClient</b>は、 <b>TokenProvider</b>を使用して<b>認証トークン</b>を要求します。</li>  <li><b>SyndicationClient</b>は、 <b>SyndicationItem</b>を本文として、<b>認証トークン</b>をヘッダーとして使用して<b>HTTP PUT</b>を発行します。</li>  <li><b>HTTP 応答</b>が読み取られ、 <b>SyndicationClient</b>によって<b>SyndicationItem</b>に読み込まれます。</li>  <li><b>SyndicationItem</b>が<b>NamespaceManager</b>に返されます。</li>  <li><b>NamespaceManager</b>は、 <b>SyndicationItem</b>の<b>内容</b>を<b>queuedescription</b>として抽出します。</li>  <li><b>Queuedescription</b>が呼び出し元のキューに返され<b>ます。 createasync</b>メソッド。</li>  <li>新しく作成された Queuedescription をカプセル化するために、 <b>キュー</b> のインスタンスが作成され <b>ます。</b></li>  </ol>  <p><b>Queue</b>、 <b>NamespaceManager</b> 、および<b>SyndicationClient</b>は、要求を service bus に渡す前に、最初の目的に情報のレイヤーを追加して foo という名前のキューを作成することによって視覚化できます。</p>  <p><img src=\"https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/1616.ServiceBusSamples4.png\" alt=\"\" border=\"0\">&nbsp;</p>  <p><b>キュー</b>は、キューの説明と、1つの場所での送信/受信のような操作をカプセル化する便宜的なクラスです。 <b>キュー</b>の種類では、 <b>NamespaceManager</b>を使用して、Service Bus 名前空間のエンティティを作成、一覧表示、取得、および削除します。 <b>NamespaceManager</b>は、 <b>SyndicationClient</b>を使用して http 呼び出しを作成する前に、( <b>servicebusenvironment</b>を使用して) http 要求を発行する必要がある完全な URI を調べ、Atom でリソースの説明を ( <b>AsSyndicationItem</b>メソッドを使用して) ラップする役割を担います。 <b>SyndicationClient</b>は、( <b>TokenProvider</b>を使用して) 認証トークンを取得し、HTTP 呼び出し ( <b>httpclient</b>を使用) を行います。&nbsp;</p>  <p>すべての管理操作は同じように行われます。これらは、キュー、トピック、サブスクリプションなどの高レベルの抽象化に対して最初に発行され、名前空間マネージャーに渡されます。これは、サービスバスに対する実際の未加工の HTTP 要求を実行するために、シンジケーションクライアントによって処理されます。</p>  <p><b>ランタイム操作: 送信、受信、ピークロック、破棄、完了</b><br>HTTP 経由でのメッセージの送受信は、非常に単純です。 メッセージを送信するには、キューまたはトピックの \"メッセージ\" コレクションに対して HTTP POST を発行し、(受信および削除モードで) 受信するために、キューまたはサブスクリプションの \"メッセージ\" コレクションの先頭に HTTP DELETE を発行します。 ピークロックは同様に、messages コレクションの &nbsp; 先頭に HTTP POST を発行してピークロックを作成し、メッセージを破棄してロックの場所に対して HTTP DELETE を発行するために、HTTP PUT をロックの場所に発行することで実現されます。</p>  <p>Service Bus メッセージには、ヘッダー (送信時刻、メッセージ Id、有効期限など)、ユーザー指定のメッセージプロパティ、および本文があります。 HTTP 経由では、ヘッダーは <b>Brokerproperties</b>という名前の予約済みの HTTP ヘッダーに JSON 形式の構造としてカプセル化されます。ユーザー指定のメッセージプロパティは、プレーンな HTTP ヘッダーとしてカプセル化され、service bus メッセージの本文は HTTP メッセージの本文であると推測されます。 &nbsp; キューへのメッセージの送信は、そのキューで <b>Sendasync</b> を呼び出すことによって簡単に行うことができます。</p>  <p style=\"padding-left: 30px;\"><span style=\"color: #0000ff;\">await</span> myQueue (<span style=\"color: #993300;\">\"Hello, World!\"</span>);&nbsp;</p>  <p>このメッセージを送信するための HTTP トレースを見て、次のような内容を理解してみましょう。</p>  <p style=\"padding-left: 30px;\"><b>POST</b> <a href=\"https://contoso.servicebus.windows.net/Foo/Messages%20HTTP/1.1\"> https://contoso.servicebus.windows.net/Foo/Messages HTTP/1.1</a><br><b>ホスト</b>: contoso.servicebus.windows.net<br><b>Authorization</b>: WRAP access_token = \"...\"<br><b>Content-type</b>: text/plain<br><b>コンテンツの長さ</b>:13</p>  <p>Hello, World!</p>  <p>メッセージを受信するのは簡単です。今度は、キューの先頭からメッセージを受信して削除します。</p>  <p style=\"padding-left: 30px;\"><span style=\"color: #008000;\">Brokeredmessage</span> message = <span style=\"color: #0000ff;\">await</span> myQueue ();</p>  <p>する HTTP 要求と応答のトレースを次に示します。</p>  <p style=\"padding-left: 30px;\"><b>削除</b> <a href=\"https://contoso.servicebus.windows.net/Foo/Messages/Head?timeout=30\">https://contoso.servicebus.windows.net/Foo/Messages/Head?timeout=30</a> HTTP/1.1<br><b>ホスト</b>: contoso.servicebus.windows.net<br><b>Authorization</b>: WRAP access_token = \"...\"<br><b>Content-length: 0</b></p>  <p style=\"padding-left: 30px;\">-</p>  <p style=\"padding-left: 30px;\"><b>HTTP/1.1 200 OK</b><br><b>転送-エンコード</b>: チャンク<br><b>Content-type</b>: text/plain<br><b>サーバー</b>: MICROSOFT-httpapi/2.0<br><b>Brokerproperties</b>: {\"deliverycount\": 1, \"MessageId\": \"62a7eceab7eb4d52ac741af5f44 393ce\", \"SequenceNumber\": 1, \"TimeToLive\": 922337203685.47754}<br><b>日付</b>: 月曜日、04年8月 2015 16:23:42 GMT</p>  <p style=\"padding-left: 30px;\">Hello, World!</p>  <p>ここでは、HTTP を介した service bus メッセージの単純な形式を確認し、 <b>Brokerproperties</b> ヘッダーで使用可能なメタデータの一部を識別し始めます。 Windows 8 のサンプル Service Bus ライブラリ内では、型<b>brokeredmessage</b>は、Service Bus メッセージ、そのヘッダー、プロパティ、および本文のカプセル化として使用されます。 ここでは、SendAsync の呼び出しが実際にどのように機能するかを見ていきましょう。</p>  <ol>  <li><b>Sendasync (string &hellip; ) </b>は、プレーンテキストの service bus メッセージを送信する必要があることを示すために呼び出されます。</li>  <li>新しい <b>Brokeredmessage</b> が構築され、メッセージの本文がストリームに書き込まれ <b>ます。</b></li>  <li>キューは、新しく構築されたメッセージを使用して、 <b>MessageSender</b>上で<b>Sendasync (brokeredmessage)</b>を呼び出します。</li>  <li><b>MessageSender</b>は、 <b>TokenProvider</b>を使用して<b>認証トークン</b>を要求します。</li>  <li><b>MessageSender</b>は、BrokeredMessage の bodystream を本文として指定する<b>HTTP POST</b>を発行します。</li>  <li><b>Brokerproperties</b>、ユーザー指定のメッセージプロパティ、 <b>Authorization</b> <b>ヘッダー</b>などの HTTP ヘッダーが要求に追加されます。</li>  <li><b>HTTP 応答</b>の状態コードが OK (200) であることを確認します。</li>  </ol>  <p>メッセージの送信者は、JSON にシリアル化することによって、より複雑な型をメッセージの本文として送信することもできます。 <b>MessageReceiver</b>は、キューまたはサブスクリプションからメッセージを受信する場合と同様の方法で使用されます。</p>  <p>Windows 8 のサンプル Service Bus ライブラリのクイック超特急ツアーでは、開始するためのいくつかのポインターが提供されています。 私たちはライブラリについてのフィードバックをお待ちしており、それを使用して構築された、優れた接続型アプリを確認<a href=\"https://watwindows8.codeplex.com/\">Windows 8 Toolkit Windows</a>できます</p>"
