### YamlMime:Yaml
ms.openlocfilehash: 2c4a87448eabb0e02b13accce05c9b4f31583eb6
ms.sourcegitcommit: d03bdc7fe5447adb6530886aab848b75fe8fa8ee
ms.translationtype: MT
ms.contentlocale: ja-JP
ms.lasthandoff: 03/11/2022
ms.locfileid: "139889994"
Slug: azure-cli-0-6-9-ships-pure-joy
Title: azure-cli 0.6.9 同梱
Summary: これまで数か月で、私たち &rsquo; は cli を具体化にして、より多くの Azure サービスを簡単に提供してきました。 このリリースでは、 &nbsp; さまざまなことが考えられます。
Content: '<p>これまで数か月で、私たち &rsquo; は <a href="https://github.com/windowsazure/azure-sdk-tools-xplat" target="_blank">cli</a> を具体化にして、より多くの Azure サービスを簡単に提供してきました。 今回のリリースでは、 &nbsp; 表示されている内容に似ていると思います。</p>  <p>ここで &rsquo; は、最新のビットを取得するときに期待すべきことを簡単に説明します。</p>  <ul>  <li>カスタム web サイトのデプロイ &ldquo; azure サイトの deploymentscript &rdquo; 。</li>  <li>モバイルサービスは azure mobile &rdquo; をサポート &ldquo; しています。</li>  <li>Windows インストーラー。</li>  <li>azure sb &rdquo; を Service Bus &ldquo; します。</li>  <li>Storage アカウント &ldquo; の azure アカウントストレージ &rdquo; 。</li>  </ul>  <h4>独自の方法でカスタム Web サイトをデプロイ &ndash; する</h4>  <p>よく寄せられる要求の1つは、Azure Websites でのコードのデプロイ方法をカスタマイズすることです。 たとえば、ステージング環境に配置するたびにサーバーでカスタムステップを実行する場合があります。</p>  <p>今回のリリース &rsquo; では、 <strong>azure site deploymentscript</strong> &rdquo; を実行する &ldquo; ための新しいコマンドが導入されています。 これにより、サイトの展開時に実行されるすべてのサーバーロジックを含む bash または cmd 形式のスクリプトが生成されます。 その後、そのスクリプトを自分のハート &rsquo; のコンテンツに簡単にカスタマイズできます。</p>  <p>この機能を使用する場合、実際には、学校にとってはあまりクールではありません。 実際の動作を確認するために、git 経由でプッシュするたびに、mocha スクリプトがノードアプリで実行されるようにするための一般的なシナリオを有効にする方法について説明します。 Express &rdquo; cli を実行 &ldquo; して単純な express hello world を作成したとします。</p>  <p>その後、ダミー test.js を作成しました。このダミーは常に失敗します。</p>  <p><a href=""><img src="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/0312.codesnippet.PNG" alt="" border="0"></a></p>  <p>ここで、アプリフォルダーに、ノードアプリを指定して deploymentscript コマンドを実行し、bash スクリプトを作成します。</p>  <p><a href="" target="_blank"><img src="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/0815.bash.png" alt="" border="0"></a></p>  <p>生成されたスクリプトは、この gist: <a href="https://gist.github.com/4331260/revisions" target="_blank">https://gist.github.com/4331260/revisions</a> 最後のファイルを見ることで確認できます。</p>  <p>スクリプト &rsquo; を見ると、いくつかの異なるセクションが表示されます。</p>  <ul>  <li>#前提条件 &ndash; このセクションでは、他のものよりも前に実行する必要があるコードを定義します。 ノードアプリの場合は、ノードがインストールされているかどうかが検出されます。 *</li>  <li>#&ndash;この設定は、スクリプト変数の設定や、その他の必要なモジュールのインストールを処理します。 たとえば &rsquo; 、ノード &ldquo; kudusync &rdquo; モジュールがインストールされます。これは、ファイルがターゲット web サイトにプッシュされる場所からファイルを移動するために使用されます。</li>  <li>#デプロイ &ndash; このハンドルは、実際にコードを展開する (kudusync を呼び出す) と、ノードモジュールに対して npm を呼び出すなどの手順を実行します。</li>  </ul>  <p>* メモ: このの bash バージョンには、現在、where &rdquo; コマンドを使用 &ldquo; して bash で動作しないノードを検索するバグがあります。 修正は、上記の24行目にあります。</p>  <p>このスクリプトの優れた点の1つは、実際にローカルで実行できるように設計されていることです。 ローカルフォルダーにあるかどうかを検出し、コピーされたファイルのアーティファクトフォルダーだけを作成します。 これは、を開発するときに非常に便利です。</p>  <p>単体テストシナリオでは、既定で生成されるスクリプトとは少し異なる方法で実行します。</p>  <ul>  <li>Kudusync をインストールするのと同じ方法で mocha をインストールする必要があります。</li>  <li>後ではなく、web サイトにファイルをコピーする前に npm を実行したいと思います。</li>  <li>次に、mocha を実行し、テストが失敗した場合に配置を中止する必要があるかどうかを選択します。</li>  </ul>  <p>これを行うには、いくつかの点を移動し、いくつかの新しい手順を追加します。 これもローカル &rsquo; で動作させるために、一部のライトは体操ていますが、ロケット科学はありません。</p>  <p>最終的なスクリプトは、gist リビジョン ( <a href="https://gist.github.com/4331260/revisions" target="_blank">https://gist.github.com/4331260/revisions</a> ) に含まれる最上位のファイルです。</p>  <p>&rsquo;「# Gb で変更したパーツ」に注釈を付け &ldquo; ました。 &rdquo; github &rsquo; のすばらしい diff 機能により、コメントと変更内容を簡単に確認できます。</p>  <p>これで、サイトをデプロイすると、テストが実行され、git コミット時に出力が表示されます。</p>  <p><a href="" target="_blank"><img src="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/0068.code3.jpg" alt="" border="0"></a></p>  <p>上記のテストが失敗し、web サイトが更新されていないことに注意してください。</p>  <p>これは、新しいカスタムデプロイ機能を通じてユーザーが開いている多くのシナリオの1つにすぎません。</p>  <h4>Mobile Services</h4>  <p>このリリース &rsquo; では、 <a href="https://www.windowsazure.com/en-us/develop/mobile/tutorials/schedule-backend-tasks/" target="_blank">Windows Azure Mobile Services</a>用のコマンドを実行して、Win 8、Windows Phone、IOS、Android の各アプリケーション用のモバイルバックエンドをシェルから直接作成できるようにします。 いくつかのコマンドを実行するだけ &nbsp; で、新しいサービスの作成、データベースのプロビジョニング、テーブルの作成とクエリ、スクリプトの管理などを行うことができます。</p>  <p>次に、 <strong>azure mobile create</strong> &rdquo; を使用して &ldquo; 新しいモバイルサービスを &nbsp; 作成していることがわかります。 作成呼び出しでは、サービス名、ユーザー、パスワードが渡されまし &rsquo; た &rsquo; 。</p>  <p><a href="" target="_blank"><img src="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/1586.code-4.png" alt="" border="0"></a></p>  <p>新しいサービスが作成され、新しい SQL Server とデータベースがデプロイされていることがわかります。 また、sqlServer や &nbsp; <strong> &ndash; sqlDb</strong>など<strong> &ndash; </strong> &nbsp; のパラメーターを渡して、既存のサーバーとデータベースを使用することもできます。</p>  <p>次に、 <strong>azure mobile table create</strong> &rdquo; を使用 &ldquo; して、2つの新しいテーブルを作成し、その詳細を表示します。</p>  <p><a href="" target="_blank"><img src="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/8078.code5.png" alt="" border="0"></a></p>  <p>テーブルを作成したので、azure モバイルスクリプトの<strong>アップロード</strong> &rdquo; を使用して &ldquo; スクリプトをアップロードし、azure モバイル<strong>スクリプトの一覧</strong> &rdquo; を使用して既存の &ldquo; スクリプトを一覧表示し、 <strong>azure mobile スクリプトのダウンロード</strong> &rdquo; を使用して &ldquo; ダウンロードすることもできます。</p>  <p><a href=""><img src="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/1220.1111.PNG" alt="" border="0"></a></p>  <p>スクリプトを作成したら、モバイルサービスを使用するモバイルアプリを構築する準備ができました。 サービスと対話するには、アプリケーションの url とキーが必要です。 <strong>azure mobile &nbsp; show &rdquo; </strong>コマンドに &ldquo; 感謝します。</p>  <p><a href="" target="_blank"><img src="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/2577.code7.png" alt="" border="0"></a></p>  <p>この例では、 &nbsp; 非常に単純な例を構築しました。この例 &nbsp; では、ポータルで作成した hello world のように、ミニ連絡先マネージャーさん:-) に対してのみ機能します。</p>  <p><a href="" target="_blank"><img src="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/1067.code8.png" alt="" border="0"></a></p>  <p>データ &rsquo; を作成したので、簡単にテーブルにクエリを実行することができます。</p>  <p><a href="" target="_blank"><img src="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/3757.Code9.png" alt="" border="0"></a></p>  <p>これは、azure mobile &rdquo; が提供する機能 &ldquo; のプレビューにすぎません。 「Azure mobile &ndash; help &rdquo; 」と入力 &ldquo; して、その他の内容を確認します。</p>  <h4>Windows 用の CLI インストーラー</h4>  <p>今回のリリース &rsquo; では、1回クリックするだけで、Windows の手間を省くことができます。&nbsp;</p>  <p><a href="" target="_blank"><img src="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/5850.Code10.png" alt="" border="0"></a></p>  <p>つまり、ノード開発者 &rsquo; でない場合は、ノードのインストール、ノード、npm からのモジュールの取得について心配する必要はありません。インストーラーを使用すると、すべての処理が自動的に行われます。</p>  <p><a href="https://go.microsoft.com/fwlink/?LinkID=275464&amp;clcid=0x409">インストーラーはこちらからダウンロード</a>できます。</p>  <h4>Storage アカウントと Service Bus</h4>  <p>sdk を使用して<a href="https://www.windowsazure.com/en-us/develop/net/fundamentals/cloud-storage/" target="_blank">Windows Azure Storage</a> <a href="https://www.windowsazure.com/en-us/home/features/messaging/" target="_blank">または Service Bus</a>と対話する場合は、ほとんど &nbsp; の場合、Azure portal を使用してストレージアカウントまたは名前空間を作成し、キーを管理します。 そうではなく、 これで、cli を両方に使用できるようになりました。</p>  <p><strong>ストレージ アカウント</strong></p>  <p>ここでは、 <strong>azure アカウントストレージ</strong> &rdquo; &nbsp; を使用して &ldquo; 新しいストレージアカウントを作成し、ストレージキーを取得する方法について説明します。</p>  <p><a href="" target="_blank"><img src="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/4846.Code11.png" alt="" border="0"></a></p>  <p><strong>Service Bus</strong></p>  <p>次に、 <strong>azure sb 名前空間 create</strong> &rdquo; を使用して &ldquo; 、新しい Service Bus 名前空間を作成します。 返された接続文字列が返され、使用時に Sdk に直接渡すことができます。</p>  <p><a href="" target="_blank"><img src="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/1768.Code12.png" alt="" border="0"></a></p>  <p><strong>Azure sb namespace show</strong> &rdquo; コマンドを使用 &ldquo; して、任意の時点で名前空間の情報 (接続文字列を含む) を取得することもできます。</p>  <h4>より良い方法</h4>  <p>今後数か月の間に、新しい CLI への機能を見つけるために、非常に便利な機能 (少なくとも考えてみてください) が表示されます。 たとえば、現在のアカウントとサブスクリプションのみを使用できますが、将来的 &rsquo; には、blob のアップロード、テーブルの照会、メッセージの送信など、Storage と Service Bus &nbsp; 直接操作することもできます。</p>  <p>選好度を使用するだけでなく、;-) について質問してきた非常に便利な機能 &rsquo; のプレビューを<a href="https://github.com/WindowsAzure/azure-sdk-tools-xplat/blob/s20/lib/commands/log_.js#L74" target="_blank">ご覧</a>ください。 (表示されている内容を必ず読んで &lsquo; ください。説明 &rsquo; )</p>  <p><a href="https://www.twitter.com/gblock">@gblock</a>&nbsp;</p>'
