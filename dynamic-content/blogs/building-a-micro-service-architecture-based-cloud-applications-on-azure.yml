### YamlMime:Yaml
ms.openlocfilehash: b04c21bbc751ac454a18f294d27c60a1f3e53806
ms.sourcegitcommit: d03bdc7fe5447adb6530886aab848b75fe8fa8ee
ms.translationtype: MT
ms.contentlocale: ja-JP
ms.lasthandoff: 03/11/2022
ms.locfileid: "139896063"
Slug: building-a-micro-service-architecture-based-cloud-applications-on-azure
Title: Azure でのマイクロサービスアーキテクチャベースのクラウドアプリケーションの構築
Summary: ワンクリックでユーザーエクスペリエンスを備えたスマートデバイスとデータ組み合わせるの爆発は、改良されるアプリケーションアーキテクチャをプッシュすることです。
Content: >-
  <p>ワンクリックでユーザーエクスペリエンスを備えたスマートデバイスとデータ組み合わせるの爆発は、改良されるアプリケーションアーキテクチャをプッシュすることです。 世界2020では、40億接続された人のアプリケーションで、40ペタバイトのデータを処理する25万を超えるアプリケーションを処理することが予測されています。 コンシューマーは、always on サービスを使用してさまざまなニーズを選択できます。 これにより、従来のソフトウェアアーキテクチャ、デプロイモデル、および低速リリースプロセスは十分ではないという事実がものます。</p>


  <h2>アーキテクチャの進化</h2>


  <p>大規模なモノリシックアプリケーションを開発してパッケージ化するには、分散されたチーム全体でより高いレベルのリリース共同細かくが必要です。 多くの場合、統合の問題は、最後の1分間に検出されず、リリースをドラッグできます。 この復旧に向けたマイクロサービスアーキテクチャには、モノリシックサイロを、独立して開発、テスト、展開できる分散疎結合された自律サービスに分割するメカニズムが用意されています。 これは、次のような点で役立ちます。</p>


  <ul>
      <li><strong>職務の分離:</strong> 開発者は、特定のサービスに専念し、任意の言語を使用してサービスを開発できます。 これにより、チーム全体の複雑な共同細かく問題を軽減できます。</li>
      <li><strong>インスタントリリースの作成:</strong> 各サービスを個別にパッケージ化、保守、およびデプロイできます。これにより、ジャストインタイムリリースが可能になります。</li>
  </ul>


  <p>マイクロサービスには、分散されたきめ細かい性質があるため、いくつかの課題が生じる可能性があります。</p>


  <ul>
      <li><strong>サービス間の統合と相互依存:</strong> サービスは分離されていますが、互いに機能的に依存している可能性があります。 サービスの構成を構築して、必要なビジネス目標を達成できるようにする必要があります。</li>
      <li><strong>ポータブルデプロイ:</strong> 堅牢なアプリケーションのデプロイを行うには、開発者と QA の間で運用環境をミラーリングする必要があります。 ただし、アプリケーションは、他のスケーラビリティのニーズに基づいて再構成する必要があります。 インフラストラクチャの依存関係からアプリケーションパッケージを抽象化することによって、さまざまな環境間でアプリケーションを移植でき、そのため、手間を省くことができます。</li>
      <li><strong>ジャストインタイムリリース:</strong> 即時のジャストインタイムソフトウェアリリースでは、ビルドのバージョン管理に加えて、継続的な統合とデプロイが必要です。</li>
      <li><strong>リリースの有効性を測定します。</strong> チーム全体でのハンドオフ、コードの整合性、ビルドの正常性など、リリースの有効性に対する可視性が欠如しているため、気付かれず、測定可能であることがわかります。</li>
      <li><strong>インフラストラクチャのオンデマンドプロビジョニング:</strong> コンテナーまたはコンテナークラスターを作成するには、インフラストラクチャのプロビジョニングと管理に関する知識と経験が必要です。</li>
  </ul>


  <p>私たちの DevOps パートナーである<a href="https://www.bluemeric.com/">Bluemeric</a>は、goPaddle の新しいバージョンの v3 を最近発表した DevOps &rdquo; 組織 &ldquo; をサポートしています。 goPaddle は、最初の手順としてマイクロサービスアーキテクチャ (設計/構成) が作成される統合の最初のアプローチを提供する、マイクロサービスの ALM プラットフォームです。 Jira や Microsoft Team Foundation Server (TFS) などの Project 管理ツールを使用して、ソフトウェアリリースを作成および管理できます。 goPaddle を使用すると、アクティブなリリースをいつでもデプロイできる状態に保つことができます。 パイプラインを作成して、Jira/TFS で計画されたリリースに関連付けることができます。 これらのパイプラインは、いつでもトリガーでき、ビルドの有効性を監視できます。</p>


  <p>開発者はアプリケーションの開発に専念できるようになりました。 goPaddle は、Docker コンテナーの形式でサービスをパッケージ化してビルドし、リリースパイプラインで定義済みのワークフローに基づいてアプリケーションをテストおよびデプロイするのに役立ちます。</p>


  <p>マイクロサービスは docker コンテナーとしてパッケージ化されるため、アプリケーションを1回だけ設計し、どこにでもデプロイできます。 開発者は、既存の Azure クラウドアカウントを利用して、Kubernetes や Docker の群れなどのクラスターソリューションをプロビジョニングし、それらのサービスをデプロイすることができます。 Azure Container Service (ACS) を使用すると、VM スケールセットを使用して Azure クラウド上に Docker の群れや Os などのスケーラブルなクラスターを作成する柔軟性が得られます。 goPaddle は、わずか数回のクリックで Azure にクラスターを作成するという、ACS とのシームレスな統合を提供します。</p>


  <p>Microsoft アカウントを使用したシングルサインオンによる <a href="https://gopaddle.io/">goPaddle</a> の使用、既存の TFS アカウントの登録、ソフトウェアリリースの計画、Azure での Docker の群れまたは Kubernetes クラスターの作成、スケーラブルなアプリケーションのシームレスなデプロイを実行できます。</p>
