### YamlMime:Yaml
ms.openlocfilehash: ca8b7a025cc0f8077319db9d03bdd254495147e5
ms.sourcegitcommit: d03bdc7fe5447adb6530886aab848b75fe8fa8ee
ms.translationtype: MT
ms.contentlocale: ja-JP
ms.lasthandoff: 03/11/2022
ms.locfileid: "139890514"
Slug: best-practices-for-queries-used-in-log-alerts-rules
Title: ログ アラート ルールで使用されるクエリのベスト プラクティス
Summary: クエリは、検索演算子や共用体演算子のようなテーブル名で始まる場合があります。 これらのコマンドは、データの探索中や、データ モデル全体の用語の検索に役立ちます。 ただし、これらの演算子は、アラートの製品化には効率的ではありません。
Content: >-
  <p>クエリは、SecurityEvent や Perf &ldquo;&rdquo; &ldquo;&rdquo; のようなテーブル名で始めるか、複数テーブル/複数列の検索エクスペリエンスを提供できる検索演算子と共用体演算子を使用して開始できます。 これらの演算子は、データ探索中や、データ モデル全体の用語の検索に役立ちます。 ただし、これらの演算子は、アラートの製品化には効率的ではありません。 Log Analytics と Application インサイト のログ アラート ルール クエリは、クエリ実行の明確なスコープを定義するテーブルから常に開始する必要があります。 クエリのパフォーマンスと結果の関連性の両方が向上します。 詳細については、ドキュメント「クエリのベスト プラクティス」&nbsp;&ldquo;<a href="https://docs.microsoft.com/azure/kusto/query/best-practices" target="_blank">を参照してください</a>。&rdquo;</p>


  <p>union 演算子が<a href="https://docs.microsoft.com/azure/azure-monitor/log-query/cross-workspace-query" target="_blank">使用されている場合でも</a>、ログ &ldquo;&rdquo; アラート ルールでリソース間クエリを使用すると非効率的とは見なされません。 リソース &ldquo;間&rdquo; クエリの &ldquo;共用体は、この例に示すように特定のリソースとテーブルにスコープを設定しますが、union * のクエリ スコープは&rdquo; データ モデル全体です。</p>


  <pre>

  Union


  app(&#39;Contoso-app1&#39;).requests,


  app(&#39;Contoso-app2&#39;).requests,


  workspace(&#39;Contoso-workspace1&#39;).Perf</pre>


  <p>データ探索とクエリ作成の後、このクエリを使用してログ アラートを作成できます。 これらの例では、クエリを変更し&ldquo;、検索演算子と共用体 * 演算子<strong>を</strong>&rdquo;回避<strong>する方法</strong>&ldquo;を示&rdquo;します。</p>


  <h3>例 1</h3>


  <p>次のクエリでログ アラートを作成する必要があります。</p>


  <pre>

  search ObjectName == &#39;Memory&#39; and (CounterName == &#39;% Committed Bytes In Use&#39; or CounterName == &#39;% Used Memory&#39;) and TimeGenerated &gt; ago(5m)


  | summarize Avg_Memory_Usage =avg(CounterValue) by Computer


  | where Avg_Memory_Usage between(90 .. 95)


  | count</pre>


  <p>検索演算子を使用せずに有効なアラート クエリを&ldquo;&rdquo;作成するには、次の手順に従います。</p>


  <p>1. プロパティがホストされているテーブルを特定します。</p>


  <pre>

  search ObjectName == &#39;Memory&#39; and (CounterName == &#39;% Committed Bytes In Use&#39; or CounterName == &#39;% Used Memory&#39;)


  | summarize by $table</pre>


  <p>結果は、これらのプロパティが Perf テーブルに属している状態を示します。</p>


  <p><a href="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/5c8bb1fa-cee3-4da7-b821-67c57f81976d.png"><img align="left" alt="Perf table screenshot" border="0" height="81" src="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/a8ad7036-9260-4668-a08f-5c82222e9f24.png" style="border-image: none; float: left; display: inline; background-image: none;" title="Perf テーブルのスクリーンショット" width="128"></a></p>


  <blockquote>

  <p>&nbsp;</p>

  </blockquote>


  <p>&nbsp;</p>


  <p>&nbsp;</p>


  <p>2. クエリで使用されるプロパティは Perf テーブルからのみ行われるので、クエリはそれから開始し、クエリ実行のスコープをそのテーブルに設定する必要があります。</p>


  <pre>

  Perf


  | where ObjectName == &#39;Memory&#39; and (CounterName == &#39;% Committed Bytes In Use&#39; or CounterName == &#39;% Used Memory&#39;) and TimeGenerated &gt; ago(5m)


  | summarize Avg_Memory_Usage=avg(CounterValue) by Computer


  | where Avg_Memory_Usage between(90 .. 95)


  | count</pre>


  <h2>例 2</h2>


  <p>次のクエリでログ アラートを作成する必要があります。</p>


  <pre>

  search (ObjectName == &#39;Processor&#39; and CounterName == &#39;% Idle Time&#39; and InstanceName == &#39;_Total&#39;)


  | where Computer !in ((union * | where CounterName == &#39;% Processor Utility&#39; | summarize by Computer)) | summarize Avg_Idle_Time = avg(CounterValue) by Computer, CounterPath | where Avg_Idle_Time &lt; 5 | count</pre>


  <p>クエリを変更するには、次の手順に従います。</p>


  <p>1.クエリでは検索演算子と&ldquo;&rdquo;&ldquo;共用体 *&rdquo; 演算子の両方が使用されます。このクエリでは、プロパティをホストするテーブルを 2 つのステージで識別する必要があります。</p>


  <pre>

  search (ObjectName == &#39;Processor&#39; and CounterName == &#39;% Idle Time&#39; and InstanceName == &#39;_Total&#39;)


  | summarize by $table</pre>


  <p>クエリの最初の部分のプロパティは、Perf テーブルに属しています。</p>


  <p><a href="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/b3252def-9f92-4e70-9825-c5ee77a212a1.png"><img align="left" alt="Perf table screenshot 2" border="0" height="81" src="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/1480292a-e6c8-47dd-a4da-96af5dd489bc.png" style="border: 0px currentcolor; border-image: none; float: left; display: inline; background-image: none;" title="Perf テーブルのスクリーンショット 2" width="128"></a></p>


  <p>&nbsp;</p>


  <p>&nbsp;</p>


  <p>&nbsp;</p>


  <p>&ldquo;withsource = table コマンドは、&rdquo; プロパティをホストするテーブル名を指定する列を追加します。</p>


  <pre>

  union withsource = table * | where CounterName == &#39;% Processor Utility&#39;


  | summarize by table</pre>


  <p>クエリの 2 番目の部分の プロパティも Perf テーブルに属します。</p>


  <p><a href="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/98abdc3d-a836-44d1-92b5-5d2ee63980d3.png"><img alt="Perf table screenshot 3" border="0" height="84" src="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/63ae442e-f020-4adb-b85e-c24b30c6db19.png" style="border: 0px currentcolor; border-image: none; float: none; display: inline; background-image: none;" title="Perf テーブルのスクリーンショット 3" width="131"></a>&nbsp;</p>


  <p>2. クエリで使用されるプロパティは Perf テーブルからのみ行われるので、外側と内部の両方のクエリはそこから始め、クエリ実行のスコープをこのテーブルに設定します。</p>


  <pre>

  Perf


  | where ObjectName == &#39;Processor&#39; and CounterName == &#39;% Idle Time&#39; and InstanceName == &#39;_Total&#39;


  | where Computer !in ((Perf | where CounterName == &#39;% Processor Utility&#39; | summarize by Computer))


  | summarize Avg_Idle_Time = avg(CounterValue) by Computer, CounterPath


  | where Avg_Idle_Time &lt; 5


  | count</pre>
