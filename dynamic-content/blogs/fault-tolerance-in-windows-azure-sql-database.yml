### YamlMime:Yaml
ms.openlocfilehash: 12a4ea377f2529234cd1c0ca54c30edf44a10916
ms.sourcegitcommit: d03bdc7fe5447adb6530886aab848b75fe8fa8ee
ms.translationtype: MT
ms.contentlocale: ja-JP
ms.lasthandoff: 03/11/2022
ms.locfileid: "139896473"
Slug: fault-tolerance-in-windows-azure-sql-database
Title: Windows Azure SQL Database のフォールトトレランス
Summary: 'エディター &rsquo; のメモ: &nbsp; 現在 &rsquo; の投稿は、SQL Server &amp; Windows Azure SQL Database チームの Tony Petrossian のプリンシパルグループプログラムマネージャーによって提供されています。 &nbsp;この投稿では概要を説明します...'
Content: <p><em><strong>エディター &rsquo; のメモ:</strong> &nbsp;今日 &rsquo; の投稿は、SQL Server &amp; Windows Azure SQL Database チームの<a target="_blank" href="https://social.msdn.microsoft.com/profile/tony%20petrossian/?ws=usercard-mini">Tony Petrossian</a>のプリンシパルグループプログラムマネージャーによって提供されています。 &nbsp;この記事では、Windows Azure SQL Database のフォールトトレランス機能の概要について説明します。</em></p>  <h3>はじめに</h3>  <p>数年前に、クラウド RDBMS サービスである<a href="https://www.windowsazure.com/en-us/home/features/data-management/?WT.mc_id=cmp_pst001_blg_post0161sql" target="_blank">Windows Azure SQL Database</a>の構築を開始したときに、フォールトトレランスがクラウドデータベースオファリングの基本的な要件であると想定しています。 &nbsp;クラウドのお客様は、ストレージソリューションに多様なニーズを持っていますが、アプリケーションのために RDBMS を必要とするお客様のニーズに対応することに重点を置いていました。 &nbsp;たとえば、初期の採用会社の1人が、 <a href="https://www.windowsazure.com/en-us/pricing/free-trial/?WT.mc_id=cmp_pst001_blg_post0161tri" target="_blank">Windows Azure</a>で大量のチケット予約システムを構築していました。 &nbsp;これらのアプリケーションには、同時実行制御と一貫性と持続性を備えたトランザクション guaranties によるリレーショナル機能が必要でした。&nbsp;</p>  <p>真の RDBMS サービスを構築するには、サービスのすべての原子性、一貫性、分離性、および耐久性 (ACID) の特性が SQL Server データベースの特性と一致していることを確認するだけでなく、フォールトトレラントでなければなりませんでした。 &nbsp;さらに、プロビジョニングの手間をかけることなく、何千ものデータベースを作成および削除するための弾力性とスケーリング機能をお客様に提供したいと考えています。 &nbsp;クラウドスケールでフォールトトレランス (FT) システムを構築するには、優れたイノベーションが必要でした。&nbsp;</p>  <p>さまざまな障害の種類に関する大量のデータを収集することから始めましたが、さまざまなシステム障害モデルの教育の詳細に reveled しました。 &nbsp; &nbsp;最終的には、次の2つの原則によって問題領域が簡略化されました。</p>  <ol>  <li>ハードウェアおよびソフトウェアの障害は不可避である</li>  <li>障害につながるミスを運用スタッフが犯すことがある</li>  </ol>  <p>障害モデルを簡略化することを決定するために、2つの推進要因がありました。 まず、フォールトトレラントなシステムでは、低頻度の障害、計画された停止、および高頻度の障害に対処する必要があります。 第2に、クラウドのスケールでは、毎日ではなく、週ごとに低頻度のエラーが発生します。&nbsp;</p>  <p>フォールトトレランスの設計は、すべてのコンポーネントで障害が発生する可能性があると想定した後、いくつかのソリューションに関連するようになりました。また、システム内のコンポーネントごとに異なる FT ソリューションを使用するのは現実的ではありませんでした。 &nbsp; たとえば、コンピューター内のすべてのコンポーネントで障害が発生する可能性がある場合は、電源装置や RAID などの冗長なコンポーネントに投資するのではなく、冗長なコンピューターがある可能性があります。</p>  <p>最後に、データベースをホストするデータベースサーバーを実行するフォールトトレラントシステムを構築するのではなく、最高レベルのスタックでフォールトトレラントな SQL データベースを構築することにしました。 &nbsp;最新ではありませんが、FT 機能は、オペレーターや顧客による構成や管理を必要としない、オファリングの固有の部分です。&nbsp;</p>  <h3>SQL データベースの Fault-Tolerant</h3>  <p>お客様は、自分のデータベースの回復性に最も関心があり、サービス全体の回復性にはあまり関心がありません。 &nbsp;データベース &rdquo; がダウンしているデータベースの0.1% に含まれている場合 &ldquo; 、サービスの稼働時間は99.9% には意味がありません。 &nbsp;各データベースは、フォールトトレラントである必要があり、障害対策によってコミットされたトランザクションが失われることはありません。 &nbsp;フォールトトレラントデータベースの基盤を提供する2つの主要なテクノロジがあります。</p>  <ul>  <li>データベースのレプリケーション</li>  <li>障害検出 &amp; のフェールオーバー</li>  </ul>  <p>これらのテクノロジを併用することで、データベースは、ユーザー &rsquo; のデータベースでコミットされたトランザクションが失われることがないように、ヒューマン介入を使用せずに自動化された方法で障害を許容し、軽減することができます。&nbsp;</p>  <h3>データベース Fault-Tolerance 簡単に</h3>  <p>Windows Azure SQL Database は、サーバーラックやネットワークルーターなど、完全に独立した物理サブシステムに配置された、さまざまな物理ノードにあるすべてのデータベースの複数のコピーを保持します。 Windows Azure SQL Database では、各データベース &ndash; の3つのレプリカが1つのプライマリレプリカと2つのセカンダリレプリカに保持されます。 Windows Azure SQL Database では、トランザクションがコミットされることを検討する前に、プライマリレプリカと1つのセカンダリレプリカにデータが書き込まれるクォーラムベースのコミットスキームを使用します。 プライマリレプリカで障害が発生した場合は、Windows Azure SQL Database によってエラーが検出され、セカンダリレプリカにフェールオーバーされます。 レプリカが物理的に失われた場合、Windows Azure SQL Database によって新しいレプリカが自動的に作成されます。 したがって、データセンターにトランザクションの一貫性がある各データベースには、少なくとも2つのレプリカがあります。 データセンター全体の損失以外は、サービスによってすべてのエラーが軽減されます。</p>  <p>Windows Azure SQL Database のレプリケーション、障害検出、およびフェールオーバーメカニズムが完全に自動化され、ユーザーの介入なしで動作します。 このアーキテクチャの目的は、コミットされたデータを絶対に損失しないことと、データの持続性を最優先することです。</p>  <h3>お客様の主な利点は次のとおりです。</h3>  <ol>  <li>お客様は、複雑なハードウェア、ソフトウェア、OS、または仮想化環境を構成したり保守したりすることなく、レプリケートされたデータベースを最大限に活用することができます。</li>  <li>リレーショナルデータベースの完全な ACID プロパティは、システムによって管理されます。</li>  <li>コミットされたデータを失わずに、フェールオーバーが完全に自動化される</li>  <li>プライマリレプリカへの接続のルーティングは、アプリケーションロジックを必要としないサービスによって動的に管理されます。</li>  <li>高レベルの自動冗長性は追加料金なしで提供されます。</li>  </ol>  <p>詳細については、次の2つのセクションでは、レプリケーションとフェールオーバーテクノロジの内部動作について詳しく説明します。</p>  <h3>Windows Azure SQL Database レプリケーションの内部構造</h3>  <p>冗長性は、フォールトトレランスと Windows Azure SQL Database の鍵となります。 &nbsp;Windows Azure SQL Database 内の冗長性はデータベースレベルで保持されるため、各データベースは物理的かつ論理的に冗長になります。 &nbsp;データベースのライフサイクル全体にわたって、 &rsquo; 各データベースの冗長性が適用されます。 &nbsp;すべてのデータベースは、お客様に提供される前に &rsquo; レプリケートされ、お客様によってデータベースが削除されるまで、レプリカは保持されます。 &nbsp;データベースの3つのレプリカはそれぞれ別のノードに格納されます。 各データベースのレプリカは複数のノードに分散されており、同じ障害ドメイン ( &rdquo; たとえば、同じネットワークスイッチまたは同じラック) に &ldquo; 2 つのコピーが存在しないようになっています。 データベースが同じ顧客に属している場合でも、各データベースのレプリカは、他のデータベースのノードへの割り当てとは無関係にノードに割り当てられます。 つまり、2つのデータベースのレプリカが同じノードに格納されているということは、それらのデータベースの他のレプリカが別のノードに併置されていることを意味するわけではありません。</p>  <p>各データベースについて、ある時点で1つのレプリカがプライマリとして指定されます。 トランザクションは、データベースのプライマリレプリカ (または単にプライマリデータベース) を使用して実行されます。 プライマリレプリカは、すべてのクエリ、更新、およびデータ定義言語の操作を処理します。 Windows Azure SQL Database のレプリケーションプロトコルを使用して、更新とデータ定義言語の操作をセカンダリレプリカに配布します。 現在、システムではセカンダリレプリカの読み取りは許可されていません。 トランザクションはプライマリデータベースを使用してすべての読み取りと書き込みを実行するため、プライマリパーティションに直接アクセスするノードは、データに対するすべての処理を行います。 更新レコードがデータベース &rsquo; のセカンダリレプリカに送信され、それぞれに更新プログラムが適用されます。 セカンダリレプリカでは読み取りが処理されないため、各プライマリには、セカンダリレプリカよりも多くの作業が必要です。 負荷を分散するために、各ノードはプライマリデータベースとセカンダリデータベースを組み合わせてホストします。 &nbsp; 平均で、3方向のレプリケーションでは、各ノードは2つのセカンダリレプリカごとに1つのプライマリデータベースをホストします。 当然ながら、データベースの2つのレプリカが同じ物理ノードに併置されることはありません。</p>  <p>各ノードでプライマリデータベースとセカンダリデータベースを混在させるもう1つの利点は、障害が発生したノードの負荷をシステムが多数のライブノードに分散できるようにすることです。 たとえば、ノードが3つのプライマリデータベース (PE、PF、PG) をホストしているとします。 が失敗し、PE、PF、PG のセカンダリレプリカが異なるノードに分散されている場合、PE、PF、PG の新しいプライマリデータベースを3つの異なるノードに割り当てることができます。</p>  <p>レプリケーションプロトコルは、信頼性が低いと見なされるハードウェアおよびソフトウェアコンポーネントのコレクションで実行されている間に、クラウドが確実に動作するように特別に構築されています (コンポーネントエラーは避けられません)。 &nbsp; トランザクションコミットメントプロトコルでは、レプリカのクォーラムのみが稼働している必要があります。 一連のレプリカを維持するために、Paxos と同様の合意アルゴリズムが使用されます。 動的クォーラムは、複数の障害が発生した場合に可用性を維持するために使用されます。</p>  <p>プライマリからセカンダリへの更新の伝達は、レプリケーションプロトコルによって管理されます。 &nbsp; トランザクション T &rsquo; s プライマリデータベースは、t によって各更新の後画像を含むレコードを生成します。このような更新レコードは、テーブルキーによって識別されるものの、ページ ID では指定されていない論理 redo レコードとして機能します。 これらの更新レコードは、発生したときにセカンダリレプリカにストリーミングされます。 T が中止された場合、プライマリは各セカンダリに中止メッセージを送信します。これにより、T 用に受け取った更新が削除されます。がコミット操作を発行する場合、プライマリは次のコミットシーケンス番号 (CSN) に割り当てられます。これは、セカンダリレプリカに送信されるコミットメッセージにタグを付けます。 各セカンダリは、t に対応する独立したローカルトランザクションのコンテキスト内のコミットシーケンス番号の順序で、更新をデータベースに適用 &rsquo; し、プライマリに受信確認 (ACK) を送り返します。 プライマリは、レプリカのクォーラム (それ自体を含む) から ACK を受信すると、永続的なコミットレコードをローカルに書き込み、成功 &rdquo; した場合はコミット操作に &rsquo; 戻り &ldquo; ます。 セカンダリは、トランザクション T &rsquo; s コミットメッセージに応答して ACK を直ちに送信することができます。これは、対応するコミットレコードと、それに先行する更新レコードが強制的にログに記録される前に &rsquo; 行われます。 したがって、コミットする前に、ノードのクォーラムにはコミットのコピーがあります。</p>  <p>更新されたレコードは最終的に、プライマリレプリカとセカンダリレプリカによってディスクにフラッシュされます。 その目的は、フェールオーバーイベント中にデータ損失の可能性を減らすために、プライマリレプリカとセカンダリレプリカの間のデルタを最小限に抑えることです。</p>  <p>セカンダリによって失われたコミットされたトランザクション (クラッシュのためなど) の更新は、プライマリレプリカから取得できます。 復旧レプリカは、コミットされた最後のトランザクションのコミットシーケンス番号をプライマリに送信します。 プライマリ応答は、回復しているレプリカが必要とする更新のキューを送信するか、または、復旧レプリカに対して過度に遅れていることを通知することによって発生します。 後者の場合、復旧レプリカはプライマリに新しいコピーを転送するように要求できます。 セカンダリは、プライマリノードから受信した更新を即座に適用するので、常に最新の状態になります。 そのため、構成の変更 (たとえば、負荷分散やプライマリ障害による) のためにプライマリになる必要がある場合は、ほぼ瞬時に再割り当てが発生します。 つまり、セカンダリレプリカはホットスタンバイであり、非常に高い可用性を提供します。</p>  <h3>障害検出 &amp; フェールオーバーの内部</h3>  <p>大規模な分散システムでは、信頼性の高い障害検出システムが必要です。これにより、障害の信頼性を迅速に、かつ顧客にできるだけ近づけることができます。 &nbsp;分散ファブリック Windows Azure SQL Database は SQL エンジンとペアになっているため、データベースの1つのデータベース内の障害を検出できます。&nbsp;</p>  <p>非常に大規模なシステムの正常性を集中管理することは、非効率的で信頼性の低い機能です。 &nbsp;Windows Azure SQL Database エラー検出は完全に分散されているため、システム内の任意のノードをその一部の近隣ノードで監視できます。 &nbsp;このトポロジを使用すると、通常の ping ストームや、不必要な遅延エラー検出を回避する、非常に効率的でローカライズされた迅速な検出モデルを実現できます。&nbsp;</p>  <p>以降の分析では、コンポーネントレベルのエラーの詳細なテレメトリを収集しますが、フェールオーバーの決定を行うためにファブリックによって検出された高レベルのエラー署名のみを使用します。 &nbsp; 長年にわたり、異常なノードの低下状態が保持されないように、フェールファーストと復旧の機能が向上しています。&nbsp;</p>  <p>Windows Azure SQL Database のフェールオーバーユニットはデータベースであるため、各データベース &rsquo; の正常性は、必要に応じて慎重に監視およびフェールオーバーされます。 Windows Azure SQL Database は、グローバルパーティションマネージャー (GPM) &nbsp; で、すべてのデータベースとそのレプリカのグローバルマップを保持します。 &nbsp; グローバルマップには、すべてのデータベースとそのレプリカの正常性、状態、および場所が含まれます。 &nbsp;分散ファブリックは、グローバルマップを保持します。 &nbsp; &nbsp;Windows Azure SQL Database のノードで障害が発生した場合、分散ファブリックは確実かつ迅速にノード障害を検出し、GPM に通知します。 &nbsp;GPM は、障害が発生したノード上に存在していたプライマリデータベースとセカンダリデータベースの割り当てを再構成します。</p>  <p>Windows Azure SQL Database で動作するのはレプリカのクォーラムのみであるため、セカンダリレプリカの障害の影響を受けることはありません。 バックグラウンドでは、障害が発生したものを置き換える新しいレプリカが作成されます。</p>  <p>短時間だけ一時的に使用できないレプリカは、不足している少数のトランザクションが不足していることを示すだけです。 ノードは、ダウンしている間にレプリカが失われたことを、更新キューの末尾に送信するように操作レプリカに要求します。 一時的に使用不可になっているセカンダリレプリカを迅速に同期できるようにすることは、厳密には必要でない場合にレプリカを完全に再利用することを回避する最適化です。</p>  <p>プライマリレプリカで障害が発生した場合、セカンダリレプリカの1つを新しいプライマリとして指定する必要があり、その決定に従ってすべての操作レプリカを再構成する必要があります。 このプロセスの最初の手順では、GPM を利用して、データベース &rsquo; の構成を再構築するリーダーを選択します。 リーダーは、レプリカセット全体のメンバーとの通信を試行し、更新が失われていないことを確認します。 リーダーは、どのセカンダリが最新の状態であるかを判断します。 最新のセカンダリレプリカは、変更が不足している他のレプリカに必要な変更を反映します。</p>  <p>Windows Azure SQL Database データベースへのすべての接続は、負荷分散された一連のゲートウェイプロセスによって管理されます。 ゲートウェイは、クライアントからの受信データベース接続要求を受け入れ、データベースのプライマリレプリカを現在ホストしているノードにバインドします。 ゲートウェイは、分散ファブリックと連携して、顧客 &rsquo; のデータベースのプライマリレプリカを特定します。 &nbsp; フェールオーバーが発生した場合、ゲートウェイは、障害が発生したプライマリにバインドされているすべての接続の接続バインドを、使用可能になったらすぐに新しいプライマリに再ネゴシエートします。</p>  <p>接続ゲートウェイ、分散ファブリック、および GPM の組み合わせにより、Windows Azure SQL Database によって管理されているデータベースレプリカを使用して、障害を検出し、軽減できます。&nbsp;&nbsp;</p>
