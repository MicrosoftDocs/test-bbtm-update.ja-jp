### YamlMime:Yaml
ms.openlocfilehash: ed032f7d72268e6a54fc0df1c83b166adc8c990d
ms.sourcegitcommit: d03bdc7fe5447adb6530886aab848b75fe8fa8ee
ms.translationtype: MT
ms.contentlocale: ja-JP
ms.lasthandoff: 03/11/2022
ms.locfileid: "139904859"
Slug: dash-live-streaming-with-azure-media-service
Title: Azure Media Service を使用した DASH ライブ ストリーミング
Summary: この記事では、Azure Media Service によって有効になっているライブ ストリーミング DASH 機能と、Web ブラウザーとすべての種類の新しいデバイスにライブおよびビデオ オンデマンドのアダプティブ ストリーミングを配信する方法について説明します。 DASH ライブ ストリーミングはパブリック プレビューで利用できる状態で、プレビュー期間後に通常のサービス レベル アグリーメントで "一般提供" されます。
Content: >-
  この記事では、Azure Media Service によって有効になっているライブ ストリーミング DASH 機能と、DASH 標準のサポートを追加している Web ブラウザーとすべての種類の新しいデバイスにライブおよびビデオ オンデマンドのアダプティブ ストリーミングを配信する方法について説明します。DASH ライブ ストリーミングはパブリック プレビューで利用できる状態で、プレビュー期間後に通常のサービス レベル アグリーメントで "一般提供" されます。


  DASH 出力は、すべてのライブ および VOD ストリーミングのランタイム オプションであり、Azure Media Services。プレーヤーは、各 URL 要求に DASH 形式タグを含め、DASH メディア プレゼンテーション記述マニフェストと互換性のある ISO Base Media File Format "Media Segments" を要求できます。同じファイルまたはライブ ストリームを Microsoft Smooth Streaming、Apple HLS、Adobe HDS で配信するには、URL 形式タグでこれらの形式を指定します。これにより、従来のプレーヤーや形式との互換性を維持しながら、新しいブラウザーやデバイスに DASH を導入できます。メディア セグメントをリアルタイムで動的にパッケージ化する機能は、低待機時間のライブ ストリーミングと効率的なマルチプラットフォーム サポートに不可欠です。


  ライブ チャネル、ライブ エンコーダー、ストリーミング配信元サーバーを使用して Azure Media アカウントを設定する方法については、Jason Suess の優れたブログ「<a href="https://azure.microsoft.com/blog/2014/09/10/getting-started-with-live-streaming-using-the-azure-management-portal/" target="_blank">Azure Media</a> 管理ポータル を使用したライブ ストリーミングでの はじめに」を参照してください。  Azure Media 配信元サーバーは、コンテンツ配信ネットワーク (CDN) を使用して数百万の同時ストリームをサポートAzure CDN。

  <h2>DASH ストリーミングとは</h2>

  DASH は、"HTTP を使用した動的ストリーミング" の頭字語です。DASH は、国際標準の <a href="https://standards.iso.org/ittf/PubliclyAvailableStandards/c065274_ISO_IEC_23009-1_2014.zip" target="_blank">ISO/IEC 29009-1:2014 "Information technology — Dynamic adaptive streaming over HTTP (DASH) — Part 1: Media presentation description and segment formats" (情報技術 — HTTP (DASH)</a> を使用した動的アダプティブ ストリーミング — パート 1: メディア プレゼンテーションの説明とセグメント形式) で指定されているアダプティブ ストリーミング プロトコルです。DASH は MPEG (ISO/IEC Moving Picture Experts Group 29/ワーキング グループ 11) で標準化されました。これには、メディア プレゼンテーション記述マニフェスト (MPD) の XML スキーマと、MPEG-2 トランスポート ストリーム の特定のプロファイルや MPEG-4 ISO ベース メディア ファイルなど、メディアを記述するための一般的なオプションが含まれています。 ISO メディア プロファイルは、Microsoft Smooth Streaming Adobe HDS に似ています。Smooth、Flash、PrimeTime のプレーヤーは類似性のため、DASH の ISO メディア プロファイルのサポートを大きな変更なしで追加できます。


  アダプティブ ストリーミングを使用すると、さまざまなビデオ デバイスが複数のオプションから互換性のあるオーディオとビデオ エンコードを選択し、ネットワークとデバイスがサポートできる最高の品質で継続的なビデオを配信するために、ネットワークの状態に応じてより高いビットレートまたは低いビットレートを動的に選択することができるため、インターネット (現在はインターネット データの大部分) を使用したビデオの増加が可能になっています。 HTTP アダプティブ ストリーミングでは、Web サーバーと Content Delivery Networks (CDN) を利用して、サーバーとバックボーンの負荷を追加せずに、同じキャッシュされたメディア セグメントからの数百万の同時ストリームをサポートします。


  DASH 標準は、インターネット ビデオ配信用の 1 つの形式を開発するために参加しているすべての主要なビデオ仕様組織と業界セクターを含む共同作業でした。 は、HTTP、PNG、Unicode、MP3 などの他の Web 標準と同様に、非ビデオ メディアタイプの Web ページをグローバルに相互運用可能にしています。Netflix、YouTube、その他の大規模なビデオ プロバイダーは、ISO メディアを使用して DASH に移行しています。すべての主要なブラウザーは DASH 再生用の W3C API をサポートし、新しいモバイル デバイス、接続されたテレビ、およびセットトップ ボックスは DASH 再生をサポートしています。DASH と ISO メディアは、インターネット上でテレビ コンテンツを配信するために、ブロードキャストおよび機器メーカーによって採用されています。 Silverlight や Flash などのブラウザー プラグインは、セキュリティと複雑さの理由から非推奨とされました。そのため、独自のストリーミング形式を置き換えるには、HTML5 ブラウザーでのスクリプト化された DASH 再生のネイティブ サポートが必要です。


  発行元とブロードキャスト担当者の目標は、DASH とその対話型 Web エクスペリエンスを HTML5 ブラウザーを使用してすべてのデバイスにストリーミングする 1 つの HTML5 Web ページを作成する方法です。デバイスの種類ごとに個別のアプリケーションを開発してサポートすると、コスト、リーチ、市場に出る時間がかかるので、新しい HTML5 ブラウザーが十分な市場シェアに達すると、1 つの Web ページで複数のアプリが置き換わる可能性があります。

  <h2>DASH ストリーミングは "Just Work" ですか?</h2>

  いいえ。


  DASH は基本的に、プレゼンテーションを記述する "ツールキット" ですが、メディア形式、デコード、アダプティブ切り替え動作、プレーヤーの実装、または相互運用性は指定しません。


  DASH 業界フォーラム、3GPP、DVB、EBU、DECE、HbbTV、DLNA などの組織では、DASH 標準に含まれる "ISO Media Live Profile" と "ISO Media On Demand Profile" から派生した DASH "プロファイル" が指定されています。DASH で指定された ISO メディア プロファイルは、一般的な MPEG 標準からアプリケーション仕様を派生するデジタルテレビ、DVD など、過去に行われたものと同様に、特定のアプリケーション シナリオと専門知識を持つ他の組織による一貫した派生を可能にすることを目的としていました。 DASH 標準のプロファイルでは、一般的に、一般的なプレゼンテーション タイムラインでオーディオとビデオのムービー フラグメントをダウンロードして同期するために、ISO メディアムービー フラグメントを含む ISO メディア セグメントを MPD で記述する方法を指定します。DASH では、シームレスに切り替え可能なセグメント、アダプティブ ビットレート ストリーミングの基本的な要件、デコード可能かどうかは指定できません。これは、DASH 標準で指定されていないパーサーとデコーダーの機能に依存します。そのため、エンコード/デコードの相互運用性にはアプリケーション仕様が必要です。


  DASH-IF 実装ガイドラインなどの仕様では、さまざまな表現、コーデック、エンコード パラメーター、暗号化パラメーター、適応セット制約からセグメントをシームレスに切り替え可能にするためのスプライスに重要なムービー フラグメント パッケージ制約、および DASH コンテンツとプレーヤーが確実に再生するためにサポートおよび識別できる、定義された "相互運用性ポイント" を作成するための特定の DASH ツールとその使用を定義します。


  Azure Media Service では、DASH-IF ガイドラインに準拠した DASH MPD とメディア セグメントが生成されます。Azure Media の特定の機能のサブセットは、幅広い配信シナリオやプレーヤーとの互換性を提供し、高度にスケーラブルで可用性の高いシステムでのターゲット広告や DRM コンテンツ保護などの重要な用途をサポートします (つまり、冗長性と可用性が 100% の複数のデータ センターから複数の大陸に対して大陸に配信することで大規模にテストされます)。

  <h2>DASH Live MPD の作成</h2>

  <strong>その自動!</strong>


  以下のような DASH MPD は、RTMP などのアップリンク プロトコルを使用して Azure Media Channel (取り込み URL) に配信されたオーディオストリームとビデオ ストリームに基づいて自動的に作成されます。または、チャネルからのプログラムにストリーミング ロケーター (配信元サーバー) が割り当てられた後にメディア セグメントが要求された場合に CSF ムービー フラグメントとしてパッケージ化された MP4 ストリームまたはマルチビットレートでエンコードされたムービー フラグメントをプッシュする Smooth Streaming HTTP:(Post) を使用します。詳細については、「 <a href="https://azure.microsoft.com/blog/2014/09/10/getting-started-with-live-streaming-using-the-azure-management-portal/" target="_blank">Azure Media はじめに を使用したライブ ストリーミングの使用」を管理ポータル。</a>


  AVC のコード化されたビデオ シーケンスの期間は約 2 秒である必要があります。これはビデオ セグメントの期間を決定し、2 秒のセグメントはビデオ コーデックの効率とバランスが取れた迅速なビットレート適応に最適です。また、2 秒のセグメントでは、ライブ エンコーダーにビデオ フレームが到着し、プレーヤーでのプレゼンテーションの間の待機時間が比較的短くなる可能性があります。実際の待機時間は、各プレーヤーのバッファリング ロジックと、そのネットワーク接続の信頼性によって異なります。待機時間は通常、数秒から 30 秒の任意の場所にチューニングされます。Azure Media Service では "リアルタイム" セグメント アドレス指定と MPD セグメント タイムラインが使用されます。そのため、プレーヤーは最後に使用可能なメディア セグメントを確実に知っています。そのため、まだ利用できないセグメントを要求するリスクなく、リアルタイム ストリームの "ライブ エッジ" に参加できます。まだ使用できないセグメントを要求すると、Content Delivery Network (CDN) とオリジン サーバーの間で HTTP 404 (見つからない) エラーが連鎖して発生します。そのため、何千人ものプレーヤーが繰り返す場合は、サービス拒否攻撃のようなネットワークを clog できます。 プレーヤー クロックとオリジン サーバー クロックの同期に依存する DASH アドレス指定スキームでは、最悪の場合のクロック エラーを超える追加の安全マージンによって "バックオフ" する必要がありますが、セグメント タイムラインでは余分な待機時間が回避されます。


  プレビュー期間の初めには、AAC オーディオと AVC ビデオの単純なトラックの組み合わせがサポートされますが、一般提供が発表される前に、複数のトラックと追加のコーデックが検証されます。 CEA-608/708 キャプションは、プレーヤーへのクローズド キャプション配信のために AVC ストリーム内のの、CAPTION メッセージに埋め込まれている場合があります。DASH、Smooth、HLS、HDS で同等の同時表示を可能にするために、単一期間の MPD がサポートされています。一貫性のあるイベント メッセージ形式を使用すると、ブロードキャスト ビデオに既に存在するプログラム挿入メッセージ (SCTE-35、VMAP など) をすべてのプラットフォームに配信できます。これにより、プレーヤーは DASH 固有のソリューションである複数の期間に依存することなく広告の挿入などを実行できます。


  取り込まれたメディアとメタデータは、DASH 形式タグ (format=mpd-time-csf) を持つマニフェストが次のようなストリーミング ロケーターで要求されるたびに MPD を構築するために使用されます。

  <blockquote> &lt;https:// ストリーミング ロケーター urlyour&lt;&gt;/ presentation name.ism&gt;/manifest(format=mpd-time-csf)</blockquote>

  ライブ プレゼンテーションでは、MPD に対する軽微な変更 ("静的" <a href="mailto:MPD@presentationDuration">MPD@presentationDuration</a> <a href="mailto:MPD@availabilityStartTime">MPD@availabilityStartTime</a><a href="mailto:MPD@timeshiftBufferDepth">MPD@timeshiftBufferDepth</a> への変更、ではなく の追加、存在する場合は制限の削除など) で VOD <a href="mailto:MPD@type">MPD@type</a> プレゼンテーションで使用できるアセットが生成されます。


  DASH ライブ プロファイルはライブ配信と VOD 配信の両方に便利ですが、DASH の "オンデマンド プロファイル" は VOD 配信に限定され、動的広告の挿入や、各 ISO メディア ファイルに格納されているバイト範囲インデックスを無効にするその他のランタイム変更用には設計されません。 Azure Media Service では DASH "ISO Media Live Profile" が使用されます。これは、ライブおよびオンデマンド配信シナリオの全範囲に対して 1 つのソリューションを提供し、格納されているメディアの再利用と編集を最適化し、1 つのプロファイルのプレーヤーの実装とテストを簡素化する理由です。


  Azure Media Service では、Mingfei のブログ「<a href="https://azure.microsoft.com/blog/2014/09/10/announcing-public-availability-of-azure-media-services-content-protection-services/" target="_blank">announcing</a> public availability of Azure Media Services Content Protection Services(Azure Media Services Content Protection サービスの一般公開の発表)、およびブログ「<a href="https://mingfeiy.com/playready">Announcing PlayReady as a service and AES dynamic encryption with (サービスとしての PlayReady の発表と AES による動的暗号化)」で説明されている条件付きアクセス エンベロープ暗号化に関する記事で説明したように、Azure Media Service では、オーディオストリームとビデオ ストリームの Common Encryption と PlayReady DRM ライセンスもサポートされています。Azure Media Services"。</a>

  <h2>Azure Media Live Streaming MPD の例</h2>

  <h3>注意が必要な機能:</h3>

  <ol>
   <li>DASH "ISO Media Live Profile" に準拠し、独立したオーディオセグメントとビデオ セグメントを使用して、プレーヤーセグメントのスプライスと独立したトラックストレージと組み合わせを簡略化します。</li>
   <li>ライブ エンコードおよび更新 (<a href="mailto:MPD@type=”dynamic">MPD@type="動的</a>")。</li>
   <li>MPD は起動時にのみダウンロードする必要があります。また、プレーヤーがメディア セグメント内のイベント メッセージ ボックス ('emsg') によって通知された場合にのみダウンロードする必要があります。0 の更新期間 (<a href="mailto:MPD@minimumUpdatePeriod=”PTS0S">MPD@minimumUpdatePeriod="PT0S</a>") &lt;と InbandEventStream&gt; 要素は、サーバーが必要に応じて MPD 更新イベントを送信します (ライブ プレゼンテーションの最後など)。単純なプレーヤーには、メディア ストリーム内の更新イベントを無視し、代わりにセグメント期間 (2 秒おきなど) にほぼ等しい頻度で MPD 更新プログラムをダウンロードすることもできますが、これにより、ネットワークの効率が低下し、待機時間が増加します。</li>
   <li>各 MPD バージョンは によって識別されます <a href="mailto:MPD@publishTime">MPD@publishTime</a>。これは、MPD の更新が必要かどうかを判断するために、イベント メッセージ MPD の有効期限と比較できます。</li>
   <li>サーバーは、この例のライブ エッジから 4 分遅れた PVR タイム シフト バッファーの深さを維持しています (既定では、記録されたビデオはすべてランダムにアクセスできる無限 PVR バッファーです)。</li>
   <li><a href="mailto:MPD@availabilityStartTime">MPD@availabilityStartTime</a> は、ライブ プレゼンテーションが開始された UTC 時刻です。また、すべてのメディア トラック/適応セットを同期する MPD プレゼンテーション時間も 0 です。</li>
   <li><a href="mailto:AdaptationSet@bitstreamSwitching=”true">AdaptationSet@bitstreamSwitching="true</a>" の場合、適応セットごとに 1 つの初期化セグメントのみを起動時に処理する必要があります。ビットレート スイッチでは再初期化は必要ありません。セグメントの連続シーケンスは、有効な ISO Media CSF (Common Streaming Format) ファイルを形成します。DECE DMEDIA の <a href="https://www.uvvuwiki.com/doc/sites/default/files/CFFMediaFormat-1.1r1.pdf" target="_blank">「Common File Format Media &amp; Formats Specification」を参照してください</a> 。これにより、既存のデコーダーで最高のパフォーマンスが得られます。また、さまざまなプレーヤー間で最もシームレスなビットレートの切り替えが行われます。その一部は、メディア パイプラインとデコーダーが再初期化されるとグリッチする可能性があります。</li>
   <li><strong>&lt;SegmentTemplate を使用&gt;</strong> すると、プレーヤーは新しいプレイリストをダウンロードせずに次のセグメント アドレスを計算して、次の URL を取得できます。URL は、$Time$ 置換パラメーターを各セグメントの開始のメディアプレゼンテーション時間に解決することで形成されます。メディアプレゼンテーション時間は、すべての CSF メディア セグメントの Track Fragment Decode Time Box ('tfdt') に格納されます。これは、ISO メディア トラックタイムスケールで整数として表されるタイムスタンプであり、ISO <a href="mailto:AdaptationSet@timescale">AdaptationSet@timescale</a> メディア トラック XML 表現のタイムスタンプです。Azure Media Service によって提供される形式は、URL 形式タグ (例: "./Fragments(video=$Time$,format=mpd-time-csf)" によって決まります。この場合は、時間アドレス指定を使用する MPD とメディア セグメント、および CSF メディア セグメントを示します。 URL はドキュメントの相対値なので、同じ MPD を編集時に異なるルート URL (ストリーム ロケーター URL) に検索できます。</li>
   <li><strong>&lt;SegmentTimeline&gt;</strong> は、適応セットのメディア タイムラインを保持します。適応セット内の各セグメントの開始時刻と継続時間が一覧表示され、スプライス、シーン検出、ドロップセグメント、その他のライブ エンコードの現実によって発生する可変期間セグメントを正確にタイムスタンプで提供します。 正確なセグメント タイムラインを使用すると、同じライブ フィードから動作する独立したエンコーダーとサーバー間でセグメントのタイムスタンプと URL を同期し、広告挿入などのイベントの時間ベースの同期も可能になります。属性 @t は、ピリオド内の最初のセグメントのメディア タイムスタンプを識別します。これは UTC @availabilityStartTimeと一致します。この場合、1 つのピリオドが 0 のプレゼンテーション時刻から始まる場合です。ライブ エンコードされたストリームの期間、タイムスタンプ、およびタイムスケールは、さまざまなプレゼンテーション (ライブから VOD など) に対して変更する必要があります。セグメント タイムラインでは柔軟なメディアタイムベースとスタート ポイントがサポートされています。 正確なオーディオ/ビデオ同期を行う場合、ビデオでは負の合成オフセットを使用して、最初のサンプルプレゼンテーション時間を各セグメントの最初のサンプル デコード時間と等しくする必要があります (最初のサンプル デコード時間は各セグメントの 'tfdt' ボックスに格納されます)。この例のビデオ SegmentTimeline は非常に簡潔です。これは、映画のフラグメントの継続時間が正確に一致し、120 秒の 2 秒のセグメント (@r=119 は同じ正確な期間の 119 回の繰り返しを示す) を示すので、非常に簡潔です。これはローリング 4 分のタイム シフト バッファーを埋め、MPD は公開時に使用可能なセグメントを超える値を一覧表示する必要があります。</li>
   <li>この例では、ビデオアダプテーション セットに <strong>8</strong> つの異なる表現が含まれるので、それぞれがソース ビットレートと画像サイズの一部であるビットレートと空間サブサンプリングでエンコードされています。AVC エンコードパラメーターとトリミング パラメーターを正確にコーディングすると、正確な再スケールとピクセル登録が可能になります。これにより、比較的小さなビットレート スイッチが認識されなくなります。また、ビットレートの低下に比例したサブサンプリングは、ビットレートが減少する画像の "占め" 以外のコーディング成果物を回避することで、認識される視覚品質を維持するのに役立ちます。</li>
   <li>&lt;オーディオ適応セットには、単一の表現と、10MHz のタイムベースがオーディオ 44.1kHz トラックのタイムベース、同期フレーム期間、セグメント期間の倍数でなくても、セグメント要素 S&gt; @d の期間がわずかに異なる異常なパターンがあります。</li>
  </ol>

  <h3>MPD の例 (DASH メディア プレゼンテーションの説明 XML ドキュメント)</h3>

  <pre class="prettyprint">&lt;?xml version="1.0" encoding="utf-8"?&gt;

  &lt;MPD xmlns="urn:mpeg:dash:schema:mpd:2011" xmlns:xsi=<a href="https://www.w3.org/2001/XMLSchema-instance">https://www.w3.org/2001/XMLSchema-instance</a></pre>

  <blockquote>

  <pre class="prettyprint">profiles="urn:mpeg:dash:profile:isoff-live:2011"</pre>

  <pre class="prettyprint">type="dynamic"</pre>

  <pre class="prettyprint">publishTime="2014-09-11T22:16:32Z"</pre>

  <pre class="prettyprint">minimumUpdatePeriod="PT0S"</pre>

  <pre class="prettyprint">timeShiftBufferDepth="PT4M0S"</pre>

  <pre class="prettyprint">availabilityStartTime="2014-09-09T21:36:00Z"</pre>

  <pre class="prettyprint">minBufferTime="PT3S"&gt;</pre>

  <pre class="prettyprint"> &lt;Period start="PT0S"&gt;
    &lt;AdaptationSet id="1" group="1" profiles="ccff" bitstreamSwitching="true" segmentAlignment="true"</pre>
  <pre class="prettyprint">                contentType="video" mimeType="video/mp4" codecs="avc1.64001F" maxWidth="1280" maxHeight="720" startWithSAP="1"&gt;</pre>

  <pre class="prettyprint">   &lt;InbandEventStream schemeIdUri="urn:mpeg:dash:event:2012" value="1"/&gt;</pre>

  <pre class="prettyprint">   &lt;SegmentTemplate timescale="10000000"</pre>

  <pre class="prettyprint">                       media="QualityLevels($Bandwidth$)/Fragments(video=$Time$,format=mpd-time-csf)"</pre>

  <pre class="prettyprint">                       initialization="QualityLevels($Bandwidth$)/Fragments(video=i,format=mpd-time-csf)"&gt;
     &lt;SegmentTimeline&gt;
      &lt;S t="1749929391643" d="20000000" r="119"/&gt;
     &lt;/SegmentTimeline&gt;
     &lt;/SegmentTemplate&gt;
     &lt;Representation id="1_V_video_3036584097160919574" bandwidth="477000" width="368" height="208"/&gt;
     &lt;Representation id="1_V_video_1525935660032550912" bandwidth="2962000" width="1280" height="720"/&gt;
     &lt;Representation id="1_V_video_8768634852038808351" bandwidth="1427000" width="768" height="432"/&gt;
     &lt;Representation id="1_V_video_7183729080090115923" bandwidth="331000" width="284" height="160"/&gt;
     &lt;Representation id="1_V_video_5821161055196117281" bandwidth="688000" width="448" height="252"/&gt;
     &lt;Representation id="1_V_video_11970265954542642125" bandwidth="991000" width="592" height="332"/&gt;
     &lt;Representation id="1_V_video_12301116055337443231" bandwidth="2056000" width="992" height="560"/&gt;
     &lt;Representation id="1_V_video_13845503576954141943" bandwidth="230000" width="224" height="128"/&gt;
    &lt;/AdaptationSet&gt;
    &lt;AdaptationSet id="2" group="5" profiles="ccff" bitstreamSwitching="true" segmentAlignment="true"</pre>
  <pre class="prettyprint">                contentType="audio" mimeType="audio/mp4" codecs="mp4a.40.2"&gt;
     &lt;InbandEventStream schemeIdUri="urn:mpeg:dash:event:2012" value="1"/&gt;
     &lt;SegmentTemplate timescale="10000000"</pre>
  <pre class="prettyprint">                       media="QualityLevels($Bandwidth$)/Fragments(audio=$Time$,format=mpd-time-csf)"</pre>

  <pre class="prettyprint">                       initialization="QualityLevels($Bandwidth$)/Fragments(audio=i,format=mpd-time-csf)"&gt;
      &lt;SegmentTimeline&gt;
       &lt;S t="1749929389828" d="20201361"/&gt;
       &lt;S d="19969161" r="5"/&gt;
       &lt;S d="20201360"/&gt;
       &lt;S d="19969162"/&gt;
       &lt;S d="19969161"/&gt;
       &lt;S d="19969160"/&gt;
       &lt;S d="19969162"/&gt;
       &lt;S d="19969161"/&gt;
       &lt;S d="19969160"/&gt;
       &lt;S d="19969162"/&gt;
       &lt;S d="20201360"/&gt;
       &lt;S d="19969161" r="5"/&gt;
       &lt;S d="20201361"/&gt;
       &lt;S d="19969161"/&gt;
       &lt;S d="19969160"/&gt;
       &lt;S d="19969162"/&gt;
       &lt;S d="19969161" r="1"/&gt;
       &lt;S d="19969160"/&gt;
       &lt;S d="19969162"/&gt;
       &lt;S d="20201360"/&gt;
       &lt;S d="19969161" r="5"/&gt;
       &lt;S d="20201361"/&gt;
       &lt;S d="19969161"/&gt;
       &lt;S d="19969160"/&gt;
       &lt;S d="19969162"/&gt;
       &lt;S d="19969161" r="3"/&gt;
       &lt;S d="20201360"/&gt;
       &lt;S d="19969161" r="5"/&gt;
       &lt;S d="20201361"/&gt;
       &lt;S d="19969161" r="6"/&gt;
       &lt;S d="20201360"/&gt;
       &lt;S d="19969161" r="5"/&gt;
       &lt;S d="20201361"/&gt;
       &lt;S d="19969161" r="6"/&gt;
       &lt;S d="20201360"/&gt;
       &lt;S d="19969161" r="5"/&gt;
       &lt;S d="20201361"/&gt;
       &lt;S d="19969161" r="6"/&gt;
       &lt;S d="20201360"/&gt;
       &lt;S d="19969161" r="6"/&gt;
       &lt;S d="20201361"/&gt;
       &lt;S d="19969161" r="5"/&gt;
       &lt;S d="20201360"/&gt;
       &lt;S d="19969161"/&gt;
       &lt;S d="19969162"/&gt;
       &lt;S d="19969160"/&gt;
       &lt;S d="19969161"/&gt;
       &lt;S d="19969162"/&gt;
       &lt;S d="19969160"/&gt;
       &lt;S d="19969161"/&gt;
       &lt;S d="20201361"/&gt;
       &lt;S d="19969161" r="5"/&gt;
      &lt;/SegmentTimeline&gt;
     &lt;/SegmentTemplate&gt;
    &lt;Representation id="5_A_audio_10091442596786975675" bandwidth="160000" audioSamplingRate="44100"/&gt;
    &lt;/AdaptationSet&gt;
   &lt;/Period&gt;
  &lt;/MPD&gt;</pre>

  </blockquote>

  <h2>お試しください。</h2>

  次のようにすることができます。


  1. Microsoft、Google などの最新の HTML5 ブラウザーで、この <a href="https://dashplayer.azurewebsites.net/" target="_blank">Javascript</a> プレーヤーを使用してライブ ストリーミングをテストします。


  このプレーヤーは、DASH.js オープンソース <a href="https://github.com/Dash-Industry-Forum/dash.js" target="_blank"> GitHub</a> プロジェクトに基づいており、発行元は web ページに DASH.js スクリプトを追加して DASH をストリーミングできます。このプレーヤーは、ライブ ストリーミング サポートが組み込まれる最新の開発ブランチを使用します。


  2.エンコーダー、Azure Media アカウント、ライブ チャネルを設定して、独自のライブ ストリームをエンコードします (こちら)。


  <a href="https://azure.microsoft.com/blog/2014/09/10/getting-started-with-live-streaming-using-the-azure-management-portal/">"azure はじめに を使用したライブ ストリーミングの管理ポータル"</a>


   3.また、「Richard Li のブログ」で説明されている 24 x 7 ライブ ストリーミング テスト サーバーを使用してプレーヤーをテストする


  <a title="&quot;Live 24/7 リファレンス ストリーム"&quot;" href="https://azure.microsoft.com/blog/2014/10/07/live-247-reference-streams-available/" target="_blank">Live 24/7 Reference ストリーム Available"</a>

  <h3>チャネル 1</h3>

  <ul>
   <li>プロパティ
  <ul>
   <li>リージョン: 米国東部</li>
   <li>timeShiftBufferDepth: 1 時間</li>
   <li>フラグメント サイズ: 2 秒 </li>
  </ul>

  </li>
   <li>マニフェスト ファイル</li>
   <li><a href="https://b028.wpc.azureedge.net/80B028/Samples/a38e6323-95e9-4f1f-9b38-75eba91704e4/5f2ce531-d508-49fb-8152-647eba422aec.ism/Manifest(format=mpd-time-csf)" target="_blank">MPEG-DASH</a></li>
  </ul>

  <h3>チャネル 2</h3>

  <ul>
   <li>プロパティ
  <ul>
   <li>リージョン: 米国東部</li>
   <li>timeShiftBufferDepth: 15 分</li>
   <li>フラグメント サイズ: 2 秒</li>
  </ul>

  </li>
   <li>マニフェスト ファイル</li>
   <li>MPEG-DASH</li>
  </ul>

  その他の Microsoft DASH プレーヤー オプションについては、「 <a href="https://blogs.iis.net/cenkd/archive/2014/04/02/announcing-microsoft-smooth-streaming-client-2-5-with-mpeg-dash-support.aspx" target="_blank">Announcing: Microsoft Smooth Streaming Client 2.5 with MPEG DASH</a> support」で始まる Cenk Dingiloglu のブログで説明されています。彼の他のブログでは、OSMF プラグインを使用した Flash での DASH 再生、WINDOWS PHONEでの DASH 再生などについて説明しています。 またMicrosoft PlayReadyチームは、ANDROID および iOS システム上の <a href="https://www.microsoft.com/playready/features/ClientOptions.aspx" target="_blank">DASH と PlayReady</a> アプリ用の開発キットも提供しています。Azure Media Servicesでは、DASH VOD サービスの一般提供を 2014 年に発表し、Microsoft や他のソースの多くの DASH プレーヤーがサポートしていますが、プレーヤーはライブ ストリーミングの信頼性を判断するために、Azure Media Live DASH ストリームを使用してテストする必要があります。
