### YamlMime:Yaml
ms.openlocfilehash: 108879afc2fe5ed24f3c3e911f747793e15ce165
ms.sourcegitcommit: d03bdc7fe5447adb6530886aab848b75fe8fa8ee
ms.translationtype: MT
ms.contentlocale: ja-JP
ms.lasthandoff: 03/11/2022
ms.locfileid: "139893797"
Slug: using-the-mysql-sys-schema-to-optimize-and-maintain-a-database
Title: MySQL sys スキーマを使用したデータベースの最適化と保守
Summary: Azure Database for MySQL 5.7 で完全に有効になっている MySQL sys スキーマは、読み取り専用データベース内のユーザー 向けビューの強力なコレクションを提供します。 MySQL のパフォーマンスと...
Content: >-
  <p>Azure Database for MySQL 5.7 で完全に有効になっている MySQL sys スキーマは、読み取り専用データベース内のユーザー 向けビューの強力<a href="https://dev.mysql.com/doc/refman/5.7/en/sys-schema-views.html"></a>なコレクションを提供します。 MySQL のパフォーマンススキーマと情報スキーマを基に、MySQL sys スキーマを使用して、パフォーマンスの問題をトラブルシューティングし、リソースを効率的に管理できます。</p>


  <p>MySQL 5.5 で初めて使用できる MySQL パフォーマンス スキーマは、メモリ割り当て、格納されたプログラム、メタデータ ロックなど、多くの重要なサーバー リソースのインストルメンテーションを提供します。ただし、パフォーマンス スキーマには 80 を超えるテーブルが含まれているので、必要な情報を取得するには、多くの場合、パフォーマンス スキーマ内のテーブルと情報スキーマのテーブルの結合が必要です。 MySQL&rsquo; sys スキーマの使い方を詳しく見てみる。</p>


  <p><a href="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/a2e1212b-90fc-4cb3-b981-f87d055bdc91.png"><img alt="image" border="0" height="522" src="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/065ebda8-9a2f-456a-a2ca-18364b0214d3.png" style="border: 0px currentColor; border-image: none; padding-top: 0px; padding-right: 0px; padding-left: 0px; display: inline; background-image: none;" title="イメージ" width="287"></a></p>


  <p>sys スキーマには 52 のビューが含まれます。各ビューには、次のいずれかのプレフィックスが付いています。</p>


  <ul>
   <li><strong>Host_summary</strong> IO: <strong>I</strong>/O 関連の待機時間。</li>
   <li><strong>Innodb</strong>: Innodb バッファーの状態とロック。</li>
   <li><strong>Memory</strong>:ホストとユーザーによるメモリ使用量。</li>
   <li><strong>スキーマ</strong>: 自動インクリメント、インデックスなどのスキーマ関連情報。</li>
   <li><strong>ステートメント</strong>: SQLに関する情報。テーブル全体のスキャンまたはクエリ時間の長いステートメントを指定できます。</li>
   <li><strong>ユーザー</strong>: ユーザーによって使用およびグループ化されたリソース。 ファイル I/O、接続、メモリなどです。</li>
   <li><strong>待機</strong>: ホストまたはユーザー別にグループ化された待機イベント。</li>
  </ul>


  <h2>パフォーマンスのチューニング</h2>


  <ul>
   <li>IO は、データベースで最もコストのかかる操作です。 sys.user_summary_by_file_io ビューのクエリを行うことにより、平均 IO 待機時間がわかります。 既定の 125 GB のプロビジョニングされたストレージでは、IO 待機時間は約 15 秒です。</li>
  </ul>


  <p><a href="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/7ddf63c7-cc93-4ef2-ba98-86c3500a5a71.png"><img alt="image" border="0" height="242" src="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/261182cf-36de-4472-b569-8847c7e20e70.png" style="border: 0px currentColor; border-image: none; padding-top: 0px; padding-right: 0px; padding-left: 0px; display: inline; background-image: none;" title="イメージ" width="536"></a></p>


  <p>ストレージAzure Database for MySQL IO をスケーリングする場合、プロビジョニングされたストレージを 1 TB に増やした後、IO 待機時間が 571ms に短縮され、パフォーマンスが 26 倍に向上します。</p>


  <p><a href="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/8ee8be45-21df-4b3e-9c41-5da1d1589fac.png"><img alt="image" border="0" height="221" src="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/721d6f4f-d678-45dc-ad5b-921d8af5baa8.png" style="border: 0px currentColor; border-image: none; padding-top: 0px; padding-right: 0px; padding-left: 0px; display: inline; background-image: none;" title="イメージ" width="605"></a></p>


  <ul>
   <li>慎重に計画しているにもかかわらず、多くのクエリでは引き続き完全なテーブル スキャンが発生します。 インデックスの種類と最適化方法の詳細については、ブログの投稿「EXPLAIN を使用して MySQL の低速クエリをプロファイルする」 <a href="https://aka.ms/mysql_explain_blog">を参照してください</a>。 完全なテーブル スキャンはリソースを集中的に消費し、データベースのパフォーマンスを低下させます。 フル テーブル スキャンが行われたテーブルを調べる最も簡単な方法は、sys.schema_tables_with_full_table_scans ビューのクエリを行うことです。</li>
  </ul>


  <p><a href="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/c490c214-b9a0-4578-b206-d8b05a065339.png"><img alt="image" border="0" height="155" src="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/d4bd552c-27c5-40b3-a27f-65dbab9342c5.png" style="border: 0px currentColor; border-image: none; padding-top: 0px; padding-right: 0px; padding-left: 0px; display: inline; background-image: none;" title="イメージ" width="650"></a></p>


  <ul>
   <li>データベースのパフォーマンスの問題をトラブルシューティングするには、データベースの内部で起こっているイベントを明らかにすると役に立つ場合があり、sys.user_summary_by_statement_type ビューがそれに使えることがあります。</li>
  </ul>


  <p><a href="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/07ab2283-fb8e-4b75-b6ab-9798b5f378e3.png"><img alt="image" border="0" height="345" src="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/f8326470-0f58-4bc2-aef9-abb819808931.png" style="border: 0px currentColor; border-image: none; padding-top: 0px; padding-right: 0px; padding-left: 0px; display: inline; background-image: none;" title="イメージ" width="638"></a></p>


  <p>この例では、Azure Database for MySQLログを 44,579 回フラッシュする 53 分を費やしました。 これは&rsquo;長い時間と多くの IOs です。 このアクティビティを減らすには、低速クエリ ログを無効にするか、低速クエリ ログの頻度を低くAzure portal。</p>


  <h2>データベース メンテナンス</h2>


  <ul>
   <li>InnoDB バッファー プールはメモリ内に存在し、DBMS とストレージの間の主なキャッシュ メカニズムです。 InnoDB バッファー プールのサイズはパフォーマンス レベルに関連付けられ、別の製品 SKU を選択しない限り変更できません。<a href="https://docs.microsoft.com/en-us/azure/mysql/howto-server-parameters"></a> オペレーティング システムのメモリと同様に、古いページはスワップ アウトされて新しいデータのための領域が確保されます。 InnoDB バッファー プールのメモリを最も多く消費しているテーブルを調べるには、sys.innodb_buffer_stats_by_table ビューのクエリを行います。</li>
  </ul>


  <p><a href="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/16cc524c-e778-48d4-80de-6f65243e1028.png"><img alt="image" border="0" height="419" src="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/e19cf9df-2617-4de2-a7b4-d67afeb3f322.png" style="border: 0px currentColor; border-image: none; padding-top: 0px; padding-right: 0px; padding-left: 0px; display: inline; background-image: none;" title="イメージ" width="631"></a></p>


  <p>上の図では、システム テーブルとビュー以外に、WordPress サイトの 1 つをホストする mysqldatabase033 データベース内の各テーブルが、メモリ内の 16 KB または 1 ページのデータを占有しているのが明らかです。</p>


  <ul>
   <li>インデックスは、読み取りパフォーマンスを向上させるのに最適なツールですが、挿入とストレージの追加コストが発生します。 Sys.schema_unused_indexes と sys.schema_redundant_indexes は、使われていないインデックスまたは重複するインデックスについての詳しい情報を提供します。</li>
  </ul>


  <p><a href="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/fb975541-6463-4c7a-bab9-3cd67c3e9719.png"><img alt="image" border="0" height="340" src="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/d817e0c8-0dce-421f-a4c8-13f9d2ed7cf8.png" style="border: 0px currentColor; border-image: none; padding-top: 0px; padding-right: 0px; padding-left: 0px; display: inline; background-image: none;" title="イメージ" width="601"></a></p>


  <p><a href="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/9ee96c52-e859-4cc6-aa6c-b3c616995b5f.png"><img alt="image" border="0" height="120" src="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/7a426e8d-5c7b-46c4-98c1-2dfd384d039d.png" style="border: 0px currentColor; border-image: none; padding-top: 0px; padding-right: 0px; padding-left: 0px; display: inline; background-image: none;" title="イメージ" width="634"></a></p>


  <p>要約すると、sys スキーマは、パフォーマンス チューニングとデータベース メンテナンスの両方に最適なツールです。 お使いの Azure Database for MySQL でこの機能を活用してください。</p>


  <h2>リファレンス</h2>


  <ul>
   <li><a href="https://dev.mysql.com/doc/refman/5.7/en/sys-schema-views.html">Sys スキーマ ビュー</a></li>
   <li><a href="https://azure.microsoft.com/en-us/blog/performance-best-practices-for-using-azure-database-for-postgresql/">Azure Database for PostgreSQL でのパフォーマンスのベスト プラクティス</a></li>
  </ul>
