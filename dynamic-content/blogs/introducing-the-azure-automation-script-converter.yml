### YamlMime:Yaml
ms.openlocfilehash: 637b0409d51ccc42a0c3f87ae43ccdf6b7d4194e
ms.sourcegitcommit: d03bdc7fe5447adb6530886aab848b75fe8fa8ee
ms.translationtype: MT
ms.contentlocale: ja-JP
ms.lasthandoff: 03/11/2022
ms.locfileid: "139895887"
Slug: introducing-the-azure-automation-script-converter
Title: Azure Automation スクリプトコンバーターの概要
Summary: Azure Automation スクリプトコンバーターの導入-powershell ワークフローが含まれていない PowerShell スクリプトをインポートする場合は、powershell スクリプトを PowerShell ワークフローに変換しようとします。これにより、Azure Automation runbook として手動で変更することなく、簡単に実行できるようになります。
Content: >-
  <p><strong>更新プログラム 1/8/2016: Azure Automation は、ネイティブ PowerShell runbook をサポートするようになりました。そのため、PowerShell スクリプトを PowerShell ワークフローに変換するために、スクリプトコンバーターは使用されなくなりました。これで、PowerShell スクリプトを Azure Automation の runbook とし &nbsp; て実行 &nbsp; できるようになりました。詳細については、こちらの<a href="https://azure.microsoft.com/en-us/blog/announcing-powershell-script-support-azure-automation-2/">ブログ投稿</a>を参照してください。</strong></p>


  <p>ここまでは、最近一般公開された新しい<a href="https://azure.microsoft.com/en-us/services/automation/">Azure Automation サービス</a>について学習しました &rsquo; 。 Azure Automation を使用してすべての管理プロセスを自動化する方法、コミュニティ<a href="https://azure.microsoft.com/blog/2014/10/07/introducing-the-azure-automation-runbook-gallery/">ギャラリー</a>で runbook を活用する方法、およびチェックポイントを使用して障害が発生した場合の<a href="https://azure.microsoft.com/blog/2014/09/03/azure-automation-reliable-fault-tolerant-runbook-execution-using-checkpoints/">信頼性の高い実行</a>を実現する方法を学習しました &rsquo; 。 しかし、私たちが聞いたことのないことは、Azure Automation スクリプトコンバーターを最近有効に &ndash; した新機能の1つです。 Azure Automation の使用中は、PowerShell スクリプトを実際に実行する &rsquo; のではなく、 <a href="https://blogs.technet.com/b/heyscriptingguy/archive/2012/12/26/powershell-workflows-the-basics.aspx">powershell ワークフロー</a>を実行します。 powershell の機能、モジュール、ナレッジ、コンテンツ、コミュニティを活用できることに加えて、powershell ワークフロー &ndash; にはさまざまな利点があり &rsquo; ます。また、Windows Workflow Foundation の機能にもアクセスできるようになります。 これにより、runbook のチェックポイント、中断、および再開を行うことができ、ロジック、環境、またはネットワークの障害をより適切に処理できるだけでなく、並列または順次で簡単に実行できるようになります。 しかし、ほとんど &rsquo; の機能があるとしても、悪いことはありません。 PowerShell ワークフローは通常の PowerShell とよく似ていますが、純粋な PowerShell と比較すると、追加の機能の一部を使用できるように、 <a href="https://technet.microsoft.com/en-us/magazine/dn151046.aspx">いくつかの相違点と制限</a> があります。 もちろん、これらはすべて、少しの教育およびプラクティス &ndash; で克服できますが &rsquo; 、powershell スクリプトとして既に記述されているものや &rsquo; 、powershell コミュニティから取得したもの &rsquo; をそのまま Azure Automation にインポートした方がよいでしょうか。 &nbsp;</p>


  <h2>スクリプトコンバーターの使用</h2>


  <p>これで実行できるようになりました。 最近、powershell スクリプトを1つの PowerShell ワークフロー以外のものを含む Azure Automation にインポートした場合、インポートは失敗します。 Powershell ワークフローが含まれていない PowerShell スクリプトをインポートすると、インポートが成功 &rsquo; するだけでなく、powershell スクリプトを Powershell ワークフローに変換しようとします。そのため、Azure Automation runbook として手動で変更することなく、簡単に実行できるようになります。 これにより、現時点で PowerShell スクリプトに関する大量のコンテンツを利用できるだけでなく、既に作成した &rsquo; 既存の powershell スクリプトを Azure Automation のように活用できます。 試してみましょう &rsquo; 。ここで &rsquo; は、小規模なすべての Azure vm を停止するために1つの簡単なスクリプトを作成しました。 Powershell ISE で PowerShell スクリプトとして記述しました。 <img alt="Introducing the Azure Automation Script Converter" border="0" height="175" src="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/image001-jolevy-scriptconverter.png" style="float: none; padding-top: 0px; padding-left: 0px; margin: 0px auto; padding-right: 0px; border: 0px;" title="Azure Automation スクリプトコンバーターの概要" width="894"> &nbsp;これは ISE で動作する有効な PowerShell スクリプトですが、これをそのままにして、(PowerShell Workflow) runbook にコピーして Azure Automation の (PowerShell Workflow) runbook に貼り付ける場合は、機能しなくなり &rsquo; <a href="https://technet.microsoft.com/en-us/magazine/dn151046.aspx">ます。これ</a>は、スクリプト内の位置指定パラメーター (具体的<a href="https://technet.microsoft.com/en-us/library/hh849715.aspx"> &ndash; には where-object の filterscript パラメーター</a>) に依存しているためです。 <img alt="Introducing the Azure Automation Script Converter" border="0" height="289" src="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/image003-jolevy-scriptconverter.png" style="float: none; padding-top: 0px; padding-left: 0px; margin: 0px auto; padding-right: 0px; border: 0px;" title="Azure Automation スクリプトコンバーターの概要" width="610"> &nbsp;もちろん、このことがわかっているので、runbook を更新して、この PowerShell スクリプトを有効な PowerShell ワークフローに移動するための適切な変換を行うことができました (この場合は、Where-Object s script block パラメーター値の &ldquo; 前に-filterscript &rdquo; パラメーター名を追加するだけで済みますが) &rsquo; &rsquo; 。 &rsquo; この PowerShell スクリプトを (コピー/貼り付けではなく) インポートするだけで、自分用に変換できるようになりました。 <img alt="Introducing the Azure Automation Script Converter" border="0" height="431" src="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/image005-jolevy-scriptconverter.png" style="float: none; padding-top: 0px; padding-left: 0px; margin: 0px auto; padding-right: 0px; border: 0px;" title="Azure Automation スクリプトコンバーターの概要" width="610"> &nbsp; <img alt="Introducing the Azure Automation Script Converter" border="0" height="519" src="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/image007-jolevy-scriptconverter.png" style="float: none; padding-top: 0px; padding-left: 0px; margin: 0px auto; padding-right: 0px; border: 0px;" title="Azure Automation スクリプトコンバーターの概要" width="899"> &nbsp; Voil &agrave; ! Azure Automation スクリプトコンバーターは、PowerShell スクリプトを正常に実行できる有効な PowerShell ワークフローに変換し、すべての s Vm を停止しました。 <img alt="Introducing the Azure Automation Script Converter" border="0" height="344" src="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/image009-jolevy-scriptconverter.png" style="float: none; padding-top: 0px; padding-left: 0px; margin: 0px auto; padding-right: 0px; border: 0px;" title="Azure Automation スクリプトコンバーターの概要" width="610"> &nbsp; <img alt="Introducing the Azure Automation Script Converter" border="0" height="264" src="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/image010-jolevy-scriptconverter.png" style="float: none; padding-top: 0px; padding-left: 0px; margin: 0px auto; padding-right: 0px; border: 0px;" title="Azure Automation スクリプトコンバーターの概要" width="480"> &nbsp;上記の Stop-SmallVMs runbook のスクリーンショットからわかるように、コンバーターは、変更が加えられるたびに、元のスクリプトからどのような変更が行われたかを確認できるように、コンバーターで &ldquo; 始まるコメントを挿入します。 &rdquo; これにより、スクリプトが runbook として機能するようになります。また、ワークフローとスクリプトの違いについても学習できます。 この場合、すべてのコンバーターは、その内容を PowerShell ワークフローではなく PowerShell スクリプトとして実行し、その内容を PowerShell ワークフローでは &ldquo; なく powershell スクリプトとして実行して、runbook &rsquo; のパラメーターを using: &rdquo; scope 修飾子を使用してその inlinescript に渡す必要がありました。 InlineScript では、コンテンツをワークフローではなく PowerShell スクリプトとして実行しているため、多くの問題を解決できますが、スクリプトコンバーターは、上記のように &rsquo; 対応していない他のいくつかのケースも処理し &rsquo; ます。</p>


  <ul>
   <li>すべての Write-Host を Write-Verbose に変換する</li>
   <li>すべての Read-Host の runbook パラメーターへの変換</li>
  </ul>


  <p>&nbsp; もちろん、時間の経過と共により多くのケースが処理されます。 &nbsp;</p>


  <h2>Runbook ギャラリーとスクリプトコンバーター</h2>


  <p>もう1つの新機能 &rsquo; として、次のように、 <a href="https://azure.microsoft.com/blog/2014/10/07/introducing-the-azure-automation-runbook-gallery/">runbook gallery</a> には PowerShell スクリプトのサポートも追加されています。 &nbsp; <img alt="Introducing the Azure Automation Script Converter" border="0" height="610" src="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/image011-jolevy-scriptconverter.png" style="float: none; padding-top: 0px; padding-left: 0px; margin: 0px auto; padding-right: 0px; border: 0px;" title="Azure Automation スクリプトコンバーターの概要" width="529"> &nbsp; ScriptCenter の <a href="https://gallery.technet.microsoft.com/scriptcenter/site/search?f%5B0%5D.Type=RootCategory&amp;f%5B0%5D.Value=WindowsAzure&amp;f%5B0%5D.Text=Windows%20Azure">Azure カテゴリ</a> には、多くのコミュニティと Microsoft が提供する PowerShell スクリプトが含まれており、Azure Automation で使用するように設計されているわけではありませんが、azure の管理については引き続き役立ちます。 スクリプトの変換がサポートされるようになった Azure Automation、runbook gallery では、これらの PowerShell スクリプトも表示できます。また、runbook をインポートするときに runbook として実行できるよう &rsquo; に Powershell ワークフローに変換することもできます。 &nbsp;</p>


  <h2>注意事項</h2>


  <p>&rsquo;Azure Automation スクリプトコンバーターの使用を開始するのは非常に興奮ですが &ndash; 、powershell ISE に runbook を記述し、そこでテストしてから、最終的なテストと運用操作のために Azure Automation にインポートすること<b>をお勧め</b>します。 powershell ワークフローの学習と runbook の作成は、powershell workflow が最適な方法です。 Powershell スクリプトとして機能するものをコピーして PowerShell Workflow runbook に貼り付けると、上記のように問題が発生する可能性があります。そのため、ローカルテスト用の PowerShell ワークフローを記述すると、runbook ロジックの問題と powershell と PowerShell ワークフローの間の問題を区別するのに役立ちます。 ISE に何らかの書き込みを行い、それを Azure Automation runbook に貼り付けた後に失敗する場合は、PowerShell スクリプトではなく、PowerShell ワークフローとして ISE で動作していることをテストしたことを確認してください。 スクリプトコンバーターを使用する場合でも、ほとんどの時間が動作する powershell スクリプトから powershell ワークフローへの変換を試行しますが、スクリプトを PowerShell ワークフローで完全に実行されるものに完全に変換することはできませんが、 &rsquo; また、スクリプトコンバーターは、ワークフローではなく PowerShell スクリプトとして実行される InlineScript で元のスクリプトをラップするため、並列実行やチェックポイントなど、変換された runbook でワークフロー機能を使用する機能も削除されます。 この2つの理由から、スクリプトコンバーターを使用して、runbook の作成と Azure Automation の使用を開始し、既に Azure Automation に書き込んだ既存の PowerShell スクリプト &rsquo; を取り込むことができるようにすることをお勧めします。 しかし、運用レベルの作業に Automation を使用する場合は、ISE または Azure Automation 作成エクスペリエンスのどちらでも、ベストな結果が得られます。 次の時間が経過 &ndash; するまでは <strong>、をオンにして自動化</strong>します。 &nbsp;Azure Automation を使い始めたばかりですか? &nbsp;<a href="https://aka.ms/Q2p1ap" target="_blank">ここで</a>サービスについて説明し、 <a href="https://twitter.com/AzureAutomation" target="_blank">Twitter</a>の Azure Automation に従います。 個人的なご連絡をお持ちですか? <a href="https://jodoglevy.com" target="_blank">ブログ</a>で連絡するか、 <a href="https://twitter.com/jodoglevy" target="_blank">Twitter</a>でフォローしてください。</p>
