### YamlMime:Yaml
ms.openlocfilehash: 23d31fa34ef26a7b500ec3ba5d35de9285a09459
ms.sourcegitcommit: d03bdc7fe5447adb6530886aab848b75fe8fa8ee
ms.translationtype: MT
ms.contentlocale: ja-JP
ms.lasthandoff: 03/11/2022
ms.locfileid: "139891008"
Slug: a-technical-overview-of-azure-cosmos-db
Title: Azure Cosmos DB の技術概要
Summary: Azure Cosmos DB は、Microsoft がグローバルに分散し、水平方向にパーティション分割されたマルチモデルデータベースサービスです。 このサービスは、顧客が任意の数の地理的リージョン間でスループットとストレージを弾力的に (かつ独立して) スケーリングできるように設計されています。
Content: >-
  <p><em>Microsoft &rsquo; のグローバル分散型マルチモデルデータベースサービス &ndash; の技術概要</em></p>


  <p>Azure Cosmos DB は、Microsoft &rsquo; が<a href="https://aka.ms/acdbglobaldist">グローバルに分散</a>し、水平方向にパーティション分割されたマルチモデルデータベースサービスです。 このサービスは、顧客が任意の数の地理的リージョン間でスループットとストレージを弾力的に (かつ独立して) スケーリングできるように設計されています。 Azure Cosmos DB は、99パーセンタイルでの待機時間の短縮、99.99% の高可用性、予測可能なスループット、および明確に定義された複数の<a href="https://aka.ms/acdbconsistency">整合性モデル</a>を保証します。 Azure Cosmos DB は、今日の業界においてグローバルに分散された最初のデータベースサービスであり、お客様が最もよく使用するグローバルディストリビューションの4つのディメンションすべてを含む包括的なサービスレベルアグリーメント (<a href="https://azure.microsoft.com/en-us/support/legal/sla/cosmos-db/" target="_blank">sla</a>) を提供します。 クラウドサービスとして、マルチテナントとグローバル分散を念頭に置いて Azure Cosmos DB を慎重に設計および設計しました。 このブログ投稿では、Azure Cosmos DB の注目すべき機能とアーキテクチャの選択肢の概要を説明します。</p>


  <h2>Azure Cosmos DB の基礎</h2>


  <p><img align="right" alt="CosmosTech_1" border="0" height="151" src="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/d9ee7656-69d9-4d51-838a-bad7025fb6e1.jpg" style="border: 0px currentColor; border-image: none; padding-top: 0px; padding-right: 0px; padding-left: 0px; float: right; display: inline; background-image: none;" title="CosmosTech_1" width="240"></p>


  <p>Leslie Lamport、チューリング受賞者、世界有数のコンピューター科学者が、多くの大規模な分散システムに影響を与えています。 Azure Cosmos DB は例外ではありません。 Leslie &rsquo; s work は、7年の構築 Azure Cosmos DB を通じて、インスピレーションの私たちにとって、私たちにとっては当然のことです。</p>


  <p>この新しい<a href="https://youtu.be/L_PPKyAsR3w" target="_blank">インタビュー</a>で、Leslie は、Azure Cosmos DB の基礎と、Azure Cosmos DB の設計におけるその影響について彼の意見を共有します。</p>


  <h2>Azure Cosmos DB の設計目標</h2>


  <p>Azure Cosmos DB は Project Florence &rdquo; として &ldquo; 2010 に始まりました。 目標は、Microsoft 内部でインターネット規模のアプリケーションを構築する開発者が直面する基本的な問題点に対処することでした。 Azure Cosmos DB には、次の設計目標を設定します。</p>


  <ol>
   <li><strong>顧客は、要求に応じてグローバルにスループットとストレージを弾力的にスケーリングできます。</strong> システムは、構成されたスループットを99パーセンタイルで5秒以内に提供する必要があります。</li>
   <li><strong>顧客が応答性の高いミッションクリティカルなアプリケーションを構築できるようにします。</strong> システムは、予測可能で保証されたエンドツーエンドの低読み取り待機時間と書き込み待機時間を99パーセンタイルで提供する必要があります。</li>
   <li><strong>システムが常にオンに &rdquo; なっ &ldquo; ていることを確認します。</strong> システムは、データベースに関連付けられているリージョンの数に関係なく、99.99% の可用性を提供する必要があります。 顧客がアプリケーションのエンドツーエンドの可用性プロパティをテストできるようにするには (安定状態)、サービスでは、リージョンの障害をシミュレートしたり、データベースに関連付けられているリージョンをオフラインにしたりすることもできます。 これは、アプリケーションのエンドツーエンドの可用性プロパティを検証するのに役立ちます。</li>
   <li><strong>開発者が、適切なグローバル分散アプリケーションを作成できるようにします。</strong> システムは、データの一貫性に関する直感的で予測可能なプログラミングモデルを提供する必要があります。 強力な一貫性は価格に準拠していますが、最終的に一貫性 &rdquo; のあるデータベースに対してグローバルに分散された &ldquo; 大規模なアプリケーションを作成すると、アプリケーションコードがわかりにくく、脆弱であり、正確性のバグを持つ巧みが得られます。</li>
   <li>上記の1、2、3、および4について、<strong>経済的にサポート</strong>される包括的な Sla を提供します。</li>
   <li><strong>データベーススキーマ/インデックスの管理とバージョン管理の負担を軽減します。</strong> データベーススキーマとインデックスをアプリケーション &rsquo; のスキーマと同期させておくと、グローバル分散アプリケーションでは特に困難になります。</li>
   <li><strong>では、データにアクセスするための複数のデータモデルと人気の Api がネイティブでサポートされています。</strong> 外部に公開された Api と内部データ表現の間の変換は、効率的である必要があります。</li>
   <li><strong>非常に低コストで運用</strong> して、節約額を顧客に渡すことができます。</li>
  </ol>


  <h2>Azure Cosmos DB &rsquo; s 設計の注目すべき側面</h2>


  <p>上記の目標では、個別に、さらに、複雑なエンジニアリングのトレードオフについては、斬新なソリューションと十分なナビゲーションが必要でした。 Azure Cosmos DB &rsquo; の設計の一意性は、これらの制約を移動するために実行した特定のアプローチと、それまで &rsquo; に行ったエンジニアリングのトレードオフに関するものです。</p>


  <p>Azure Cosmos DB &rsquo; s システム設計の注目すべき点を次に示します。 これらの詳細については、今後の投稿で説明します。</p>


  <ol>
   <li>パフォーマンス sla が異なる複数のサービス階層をサポートするために、データベースエンジンと基になるストレージの間の距離を動的に構成するには Azure Cosmos DB &rsquo; s design を使用します。 サービスレベルによっては、システムは計算と記憶域をサポートするように構成できます。これは、同じプロセス領域内に併置されている (a)、同じクラスター内の複数のマシンにわたって (b) 細分類されている、または同じリージョン内の異なるクラスターやデータセンター間で集計されます。</li>
   <li>Azure Cosmos DB &rsquo; は、スループット、待機時間、整合性、可用性のための包括的な sla を実装しています。 これらの Sla は、グローバル分散セットアップの待機時間、一貫性、可用性、スループットのトレードオフを明確に指定します。</li>
   <li>Azure Cosmos DB &rsquo; 、システムの中核となるリソースガバナンスを独自に設計しています。これは、データベース操作の異種セットにわたってスループットをプロビジョニングするための一貫したプログラミングモデルを提供します。</li>
   <li>Azure Cosmos DB &rsquo; は、リージョン間のレプリケーションや透過的なパーティション管理など、さまざまな調整の問題を解決するための高モジュール型の完全なリソース管理アプローチです。</li>
   <li>Azure Cosmos DB &rsquo; s 設計は、sla を維持しながら、複数の地理的リージョン間でスループットを弾力的にスケーリングします。 システムは、リージョン間でスループットを拡張できるように設計されており、スループットの変更が瞬時に行われるようになっています。</li>
   <li><a href="https://lamport.azurewebsites.net/tla/tla.html" target="_blank">TLA +</a>を使用して、厳密に定義された厳密に定義された一連の整合性モデルを正確に指定するための Azure Cosmos DB &rsquo; の設計と実装。 これにより、実際のシナリオに適した実用的な整合性モデルが実現します。provable の一貫性の保証を提供します。は、マルチテナントとグローバル分散セットアップで販売可能です。とには、開発者が適切な分散アプリケーションを記述できる直感的なプログラミングモデルが用意されています。 ご存じのように、Azure Cosmos DB は、制限された<em><a href="https://www.microsoft.com/en-us/research/publication/replicated-data-consistency-explained-through-baseball/" target="_blank">staleness、セッション、一貫性</a></em>のあるプレフィックス整合性モデルを運用し、それらを明確なセマンティクス、パフォーマンス、可用性のトレードオフ性と sla に基づく開発者に公開する唯一のグローバル分散データベースシステムです。</li>
   <li>Azure Cosmos DB &rsquo; の書き込み最適化、リソース管理、および<a href="https://www.vldb.org/pvldb/vol8/p1668-shukla.pdf" target="_blank">スキーマに依存しないデータベースエンジン</a>(注: このドキュメントは、発行された後に大幅に進化しています)。更新を継続的に取り込みすることができます。また、取り込みによって自動的にインデックスが作成され、クライアント &rsquo; の更新を確認してから、待機時間が短くなります。</li>
   <li>Azure Cosmos DB &rsquo; s は、そのコアデータモデルと型システムに加えて、複数のデータモデルと api およびプログラミング言語の型システムを効率的に追加、翻訳し、そのコアデータモデルに射影できるようにする、拡張可能なデータベースエンジンの設計です。</li>
  </ol>


  <h2>マルチモデルのマルチ API データベースサービス</h2>


  <p><img alt="CosmosTech_2" border="0" height="384" src="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/eef36a17-82a7-4c7f-ac32-e0ab0c519f91.png" style="border: 0px currentColor; border-image: none; padding-top: 0px; padding-right: 0px; padding-left: 0px; display: inline; background-image: none;" title="CosmosTech_2" width="640"></p>


  <p><em>図 1.マルチモデルのマルチ API グローバル分散データベースプラットフォームとしての Azure Cosmos DB</em></p>


  <p>図1に示すように、Azure Cosmos DB は、複数のデータモデルをネイティブでサポートします。 Azure Cosmos DB &rsquo; s データベースエンジンのコア型システムは、atom レコードシーケンス (分) に基づいています。 アトムは、文字列、ブール値、数値などのプリミティブ型の小さなセットで構成されます。レコードは構造体で、シーケンスはアトム、レコード、またはシーケンスで構成される配列です。 Azure Cosmos DB のデータベースエンジンでは、データモデルを効率的にデータモデルに変換して、そのデータモデルを予測することができます。 Azure Cosmos DB のコアデータモデルは、動的に型指定されたプログラミング言語からネイティブにアクセスでき、JSON またはその他の同様の表現を使用してそのように公開できます。 この設計では、データアクセスとクエリのために一般的なデータベース Api をネイティブでサポートすることもできます。 Azure Cosmos DB &rsquo; s データベースエンジンは、現在、 <a href="https://docs.microsoft.com/en-us/azure/documentdb/documentdb-sql-query" target="_blank">DocumentDB SQL</a>、MongoDB、 <a href="https://aka.ms/premiumtables">Azure Table Storage</a>、および<a href="https://aka.ms/gremlin" target="_blank">グリーン mlin</a>グラフクエリ API をサポートしています。 他の一般的なデータベース Api もサポートするように拡張する予定です。 主な利点は、開発者は人気のある OSS Api を使用してアプリケーションの構築を継続できますが、完全に管理された、完全に管理された、グローバルに分散されたデータベースシステムのすべてのメリットを得ることができることです。</p>


  <h2>リソースモデルと API のプロジェクション</h2>


  <p>開発者は、Azure サブスクリプションを使用して<em>データベースアカウント</em>をプロビジョニングすることにより、Azure Cosmos DB の使用を開始できます。 データベースアカウントは、1つまたは複数の <em>データベース</em>を管理します。 Azure Cosmos DB データベースは、<em>ユーザー、アクセス許可</em>、<em>コンテナー</em>を管理します。 Azure Cosmos DB<em>コンテナー</em>は、任意のユーザーが生成したエンティティおよび<em>ストアドプロシージャ、トリガー</em> 、および<em>ユーザー定義関数</em>(udf) のスキーマに依存しないコンテナーです。 図2に示すように、顧客 &rsquo; のデータベースアカウント &ndash; データベース、ユーザー、アクセス許可、コンテナーなどのエンティティは <em>リソース</em> と呼ばれます。</p>


  <p><img alt="CosmosTech_3" border="0" height="358" src="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/8d036cf9-df49-45d3-b540-00f18c4f5c31.png" style="border: 0px currentColor; border-image: none; padding-top: 0px; padding-right: 0px; padding-left: 0px; display: inline; background-image: none;" title="CosmosTech_3" width="640"></p>


  <p><em>図 2.リソースモデルと API プロジェクション</em></p>


  <p>各リソースは、安定した論理的な URI によって一意に識別され、JSON ドキュメントとして表されます。 Azure Cosmos DB を使用するアプリケーションの全体的な<em>リソースモデル</em>は、データベースアカウントをルートとするリソースの階層的なオーバーレイであり、ハイパーリンクを使用して移動できます。 任意のユーザー定義コンテンツを表すために使用される <em>項目</em> リソースを除き、他のすべてのリソースにはシステム定義のスキーマがあります。 項目リソースのコンテンツモデルは、前に説明した atom レコードシーケンス (分) に基づいています。 テーブル1に示されているように、コンテナーリソースと項目リソースの両方が、特定の種類の API インターフェイスの具体化リソース型としてさらに <em>投影</em> されます。 たとえば、ドキュメント指向 Api を使用しているときに、コンテナーと項目のリソースはそれぞれ、 <em>コレクション</em> (コンテナー) および <em>ドキュメント </em>(項目) のリソースとして射影されます。同様に、グラフ指向の API アクセスでは、基になるコンテナーと項目リソースが、それぞれ <em>グラフ</em> (コンテナー)、 <em>ノード</em> (項目)、および <em>エッジ</em> (項目) リソースとして射影されます。キー値 API を使用してアクセスしているときに、 <em>テーブル</em> (コンテナー) と <em>項目/行</em> (項目) が射影されます。</p>


  <table border="1" cellpadding="0" cellspacing="0" width="851">
   <tbody>
    <tr>
     <td valign="top" width="245">
     <p><b>API </b></p>
     </td>
     <td valign="top" width="314">
     <p><b>コンテナーはとして投影されます &hellip;</b></p>
     </td>
     <td valign="top" width="290">
     <p><b>項目はとして投影されます &hellip;</b></p>
     </td>
    </tr>
    <tr>
     <td width="245">
     <p>DocumentDB SQL</p>
     </td>
     <td width="314">
     <p>コレクション</p>
     </td>
     <td width="290">
     <p>ドキュメント</p>
     </td>
    </tr>
    <tr>
     <td width="245">
     <p>MongoDB</p>
     </td>
     <td width="314">
     <p>コレクション</p>
     </td>
     <td width="290">
     <p>ドキュメント</p>
     </td>
    </tr>
    <tr>
     <td width="245">
     <p>Azure Table Storage</p>
     </td>
     <td width="314">
     <p>テーブル</p>
     </td>
     <td width="290">
     <p>項目</p>
     </td>
    </tr>
    <tr>
     <td width="245">
     <p>Gremlin</p>
     </td>
     <td width="314">
     <p>Graph</p>
     </td>
     <td width="290">
     <p>ノードとエッジ</p>
     </td>
    </tr>
   </tbody>
  </table>


  <p><em>表 1.特定の API のデータモデルに基づくコンテナーと項目の射影。</em></p>


  <h2>行方向のパーティション分割</h2>


  <p>図3に示すように、Azure Cosmos DB<em>コンテナー</em> (コレクション、テーブル、グラフなど) 内のすべてのデータは、水平方向にパーティション分割され、<em>リソースパーティション</em>によって透過的に管理されます。 <em>リソースパーティション</em>は、顧客が指定した<em>パーティションキー</em>によってパーティション分割されたデータの一貫性のある高可用性コンテナーです。これは、管理対象の一連のリソースに対して単一のシステムイメージを提供し、スケーラビリティと分散の基本単位です。 Azure Cosmos DB は、さまざまな地理的リージョンにまたがるアプリケーショントラフィックパターンに基づいてスループットを弾力的にスケーリングできるように設計されています。これは、geography と time の両方で変動する変動するワークロードをサポートするためです。 システムは、Azure Cosmos DB コンテナーの可用性、一貫性、待機時間、スループットを損なうことなく、パーティションを透過的に管理します。</p>


  <p><img alt="CosmosTech_4" border="0" height="325" src="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/a54b2a12-ea58-4313-ac06-ffe2f32c1846.png" style="border: 0px currentColor; border-image: none; padding-top: 0px; padding-right: 0px; padding-left: 0px; display: inline; background-image: none;" title="CosmosTech_4" width="640"></p>


  <p><em>図 3.行方向のパーティション分割を使用した柔軟なスケーラビリティ</em></p>


  <p>ユーザーは、Azure Cosmos DB コンテナーに対してプログラムによってスループットを弾力的にプロビジョニングすることで、コンテナーのスループットをスケーリングできます。 内部的には、システムは、リソースパーティションを透過的に管理して、特定のコンテナーでスループットを提供します。 リソースの行方向のパーティション分割を使用してスループットを弾力的にスケーリングするには、各リソースパーティションで、システムリソースの特定の予算に対する全体的なスループットの部分を実現できる必要があります。 Azure Cosmos DB コンテナーはグローバルに分散されているため、Azure Cosmos DB によって、コンテナーのスループットは、その値の変化から数秒以内にコンテナーが分散されているすべてのリージョンで使用できるようになります。 顧客は、両方の Azure Cosmos DB コンテナーでスループットをプロビジョニングできます (という<em>通貨単位</em>を使用して測定され<em>ます)。</em></p>


  <h2>Ground-Up からのグローバル分散</h2>


  <p>図5に示すように、顧客 &rsquo; のリソースは、特定のリージョン内で、リソースパーティション (<em>ローカルディストリビューション</em>) を使用して水平方向にパーティション分割されます。 各リソースパーティションは、地理的リージョン (<em>グローバル分散</em>) にもレプリケートされます。</p>


  <p><img alt="CosmosTech_6" border="0" height="480" src="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/de264425-2571-4338-8411-c0ec1f9e7f91.png" style="border: 0px currentColor; border-image: none; padding-top: 0px; padding-right: 0px; padding-left: 0px; display: inline; background-image: none;" title="CosmosTech_6" width="565"></p>


  <p><em>図 5.コンテナーは、ローカルとグローバルに分散させることができます。</em></p>


  <p>スループットまたはストレージを弾力的にスケーリングすると、Azure Cosmos DB はすべてのリージョンでパーティション管理操作を透過的に実行します。 スケール、分散、または障害に関係なく、Azure Cosmos DB は、グローバルに分散されたリソースの単一のシステムイメージを引き続き提供します。 Azure Cosmos DB でのリソースのグローバル分散はターンキーです。これは、ボタンを数回クリックするだけで (またはプログラムによって1つの API 呼び出しで)、任意の数の地理的リージョンをデータベースアカウント<u>に関連付ける</u>ことができます。 Azure Cosmos DB は、データの量やリージョンの数に関係なく、新しく関連する各リージョンが99パーセンタイルの1時間以内にクライアント要求の処理を開始することを保証します。 このことは、ソースとなるリソース パーティションすべてから新しく関連付けられたリージョンにデータをシードおよびコピーする処理を並列的に実行することによって実現しました。 また、既存のリージョンを削除したり、以前にデータベースアカウント &ldquo; に関連付けられていたリージョンをオフライン &rdquo; にしたりすることもできます。</p>


  <h2>透過的なマルチホームと99.99% の高可用性</h2>


  <p>また、お客様は、データベースアカウントに関連付けられているリージョンに優先順位 &rdquo; を動的に関連付ける &ldquo; こともできます。 この優先度は、リージョンで障害が発生した場合にどのリージョンに要求を転送するかの判定に使用します。 地域的な災害が発生した場合、Azure Cosmos DB は優先順位に従って自動的にフェールオーバーされます。 アプリケーションのエンドツーエンドの可用性をテストするために、ユーザーは手動でフェールオーバーをトリガーできます (1 時間以内に2つの操作に制限されます)。 Azure Cosmos DB は、ユーザーがリージョン内のフェールオーバーをトリガーした場合にデータ損失が発生しないことを保証し、地域障害時にシステムによってトリガーされた自動フェールオーバーが発生した場合にデータ損失の上限を保証します。 リージョンのフェールオーバー時にアプリケーションを再デプロイする必要はなく、可用性の Sla が維持されます。 これにより、Azure Cosmos DB は、論理 (リージョンに依存しない) エンドポイントまたは物理 (リージョン固有の) エンドポイントを使用して、開発者がリソースを操作できるようになります。 前者を使用すると、フェールオーバーが発生した場合にアプリケーションを透過的にマルチホームにすることができます。後者は、読み取りと書き込みを特定のリージョンにリダイレクトするために、アプリケーションにきめ細かく制御を提供します。 Azure Cosmos DB は、すべてのデータベースアカウントに対して99.99% の可用性 SLA を保証します。 可用性の保証は、スケール (顧客 &rsquo; のデータベースに関連付けられているスループットとストレージ)、リージョンの数、または特定のデータベースに関連付けられているリージョン間の地理的距離に依存しません。</p>


  <h2>99パーセンタイルでの低待機時間の保証</h2>


  <p>sla の一部として、Azure Cosmos DB は、エンドツーエンドの短い待機時間を99パーセンタイルで顧客に保証します。 一般的な 1 kb 項目の場合、Azure Cosmos DB は、同じ Azure リージョン内の99パーセンタイルで、10ミリ秒およびインデックス付きの書き込みの読み取りのエンドツーエンドの待機時間を15ミリ秒未満に保証します。 平均待機時間は、5ms の下で大幅に低下します。 &nbsp;Azure Cosmos DB は、すべてのデータベーストランザクションで要求処理の上限を使用することにより、待機時間の長いトランザクションと使用できないデータベースを明確に区別できます。</p>


  <h2>Sla に支えられている複数の Well-Defined 整合性モデル</h2>


  <p>現在利用可能な商用分散データベースは2つのカテゴリに分類されます。 (1) データベースは、適切に定義された provable 一貫性の選択肢を提供しません。 以前のシステムは、アプリケーション開発者がレプリケーションプロトコルを細かくし、一貫性、可用性、待機時間、スループットの間に難しいトレードオフを期待するようにしています。 後者のシステムでは、アプリケーション開発者は2つの極端に高い負荷をかけています。 多くの一貫性モデルの研究と提案が膨大なものにもかかわらず、商用の分散データベースサービスは、厳密で最終的な整合性を超える一貫性レベルを運用化することができませんでした。 Azure Cosmos DB を使用すると、開発者は整合性スペクトルに沿って、適切に定義された5つの整合性モデルを選択できます (図 6) &ndash; 。<em>強力、境界 staleness、セッション、一貫性</em>のあるプレフィックスと<em>最終的</em>なものです。</p>


  <p><img alt="CosmosTech_7" border="0" height="135" src="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/5fea81d6-d887-4448-8408-786fdd87a7fd.png" style="border: 0px currentColor; border-image: none; padding-top: 0px; padding-right: 0px; padding-left: 0px; display: inline; background-image: none;" title="CosmosTech_7" width="640"></p>


  <p><em>図 6.広範囲にわたる複数の明確に定義された整合性の選択。</em></p>


  <p>Azure Cosmos DB を使用する開発者は、データベースアカウントの既定の整合性レベルを構成できます (後で特定の読み取り要求の整合性を上書きします)。 内部的には、複数のリージョンにまたがる可能性があるパーティションセット内のデータには、既定の一貫性レベルが適用されます。 お客様の73% について、セッションの一貫性と20% の staleness を使用しています。 お客様の約3% が、アプリケーションの特定の一貫性を選択していく前に、さまざまな一貫性レベルを試しています。 また、平均して、顧客の2% だけが要求ごとに一貫性レベルをオーバーライドすることも確認します。 整合性 Sla の違反を顧客に報告するために、linearizability checker を採用しています。これは、サービステレメトリを継続的に運用します。 Bounded Staleness では、違反がないか監視して k および t 制約に報告します。 4つの緩やかな一貫性レベルすべてについて、他のメトリックの中でも、 <a href="https://pbs.cs.berkeley.edu/" target="_blank">確率論的境界 staleness (PBS)</a> メトリックを追跡して報告しています。</p>


  <h2>完全なリソース管理スタック</h2>


  <p>Azure Cosmos DB は、さまざまなリージョンにまたがるアプリケーショントラフィックパターンに基づいてスループットを弾力的にスケーリングできるように設計されています。これにより、地理と時間の両方に変動する変動するワークロードをサポートできます。 数百ものグローバルに分散した多様なワークロードを操作すると、コスト効率に優れた <em>マルチテナント</em>が必要になります。数百の顧客が同じコンピューターを共有しながら、同じクラスターを何千も共有できます。 コスト効率の高い方法で各顧客にパフォーマンスを分離するために、リソースガバナンスを念頭に置いてシステム全体を設計しまし &rsquo; た。 リソース管理システムとして Azure Cosmos DB は、コンポーネントのカスケードされた分散型のキューシステムで、システムリソースの割り当てられた予算内で動作している間に、予測可能なスループットを提供するように慎重に調整されます。 特定のクラスター内で利用可能なシステムリソース (CPU、メモリ、ディスク、およびネットワーク) を最適に活用するために、クラスター内のすべてのコンピューターは、10 ~ 100 の顧客を <em>動的</em> にホストできます。 レート制限とバック プレッシャが、管理制御からすべての I/O パスに至るまでスタック全体で組み込まれています。 このデータベース エンジンはきめ細かいコンカレンシーを活用するように、および少量のシステム リソースで運用しながら高スループットを実現するように設計されています。</p>


  <p>時間単位 (つまり、スループット) 内で発行されたデータベース操作の数は、システムリソースの予約と消費の基本単位です。 お客様は、データに対して幅広いデータベース操作を実行できます。 操作の種類とサイズ (要求と応答のペイロード) に応じて、操作によって異なる量のシステムリソースが消費される可能性があります。 要求によって使用されるリソースをアカウンティングするための正規化されたモデルを提供するために、特定のリソースパーティションが提供する必要があるスループットに対応する予算システムリソースを提供し、さまざまなデータベース操作のスループットについて顧客を一貫して請求し、ハードウェアに依存しない方法で、 <em>要求ユニット</em> または <em>RU</em> (複数形、 Ru、「図 7 <em>」を参照</em>)。これは、時間粒度- <em>要求ユニット/秒</em> (<em>ru/秒</em>) と 1 <em>分あたりの要求ユニット</em> (<em>ru/m</em>) に基づいて2つの denominations で利用できます。 コンテナーのスループットを弾力的にプロビジョニングするには、コンテナーで RU/s (RU/m) をプログラムによってプロビジョニングします。 内部的には、システムはリソースパーティションを管理して、特定のコンテナーでスループットを提供します。 リソースの行方向のパーティション分割を使用してスループットを弾力的にスケーリングするには、各リソースパーティションで、システムリソースの特定の予算に対する全体的なスループットの部分を実現できる必要があります。</p>


  <p><img alt="CosmosTech_8" border="0" height="250" src="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/d39dc970-f2b2-463c-9d1f-0033153249f6.png" style="border: 0px currentColor; border-image: none; padding-top: 0px; padding-right: 0px; padding-left: 0px; display: inline; background-image: none;" title="CosmosTech_8" width="640"></p>


  <p><em>図 7.RU/秒 (および RU/m) は、さまざまなデータベース操作のための正規化されたスループットの通貨です。</em></p>


  <p>受付制御の一部として、各リソースパーティションでアダプティブレート制限が採用されます。 リソースパーティションが、調整された数よりも多くの要求を受信した場合、クライアントは、バックオフ間隔を指定して要求率が大きすぎ &rdquo; て、クライアントが再試行できるようになり &ldquo; ます。 1秒あたり、リソースパーティションは、(存在する場合) &nbsp; ru の予備容量内で (ログ構造化データベースエンジンのバックグラウンド GC、定期的なスナップショットバックアップの取得、期限切れの項目の削除など) バックグラウンド作業を実行します。要求が受け付けられたら、各マイクロ操作で消費される Ru (項目の分析、ページの読み取り/書き込み、クエリ演算子の実行など) を考慮します。</p>


  <h2>まとめ</h2>


  <p>グローバル分散、柔軟な水平スケーラビリティ、マルチモデルおよびスキーマに依存しないデータベースエンジンは、すべて Azure Cosmos DB &rsquo; s 設計の中核になります。 クラウドで生まれたマルチテナントデータベースシステムとして、Azure Cosmos DB &rsquo; の設計では、スタック全体にわたってリソースガバナンスを行います。 システムは、データのグローバル分散、明確に定義された複数の一貫性レベル、地理的なリージョン全体のスループットを弾力的する機能、およびスループット、一貫性、待機時間、可用性を含む包括的な Sla をすべての顧客に提供するために、一から設計されています。</p>


  <h2>謝辞</h2>


  <p>Azure Cosmos DB Project &rdquo; 遅延2010で開始されまし &ldquo; た。最終的には、現在のフォームに展開して blossoming する前に Azure DocumentDB に拡張されます。 私たちのサポートについては、Campbell、Mark Russinovich、Scott Guthrie、Gopal Kakivaya に感謝ます。 マイクロソフト社内のすべてのチームが、長年にわたりサービスを幅広く利用することにより、Azure Cosmos DB 堅牢になっています。 巨人族 &ndash; のショルダーに立っています。多くのコンポーネント Azure Cosmos DB テクノロジが構築されています。 <a href="https://azure.microsoft.com/en-us/services/service-fabric/" target="_blank">Service Fabric</a>チームに感謝し、優れた分散システムインフラストラクチャ、そのサポート、およびパートナーシップを提供しています。 Leslie Lamport に深くあまり us を感謝、分散システムを設計するためのアプローチに影響を与えることになります。 最後ではありませんが、Azure Cosmos DB エンジニアチームに対して、詳細なコミットメントと注意を感謝ています。</p>
