### YamlMime:Yaml
ms.openlocfilehash: 057acf7ecc58f131f65350f20de1979938bf8330
ms.sourcegitcommit: d03bdc7fe5447adb6530886aab848b75fe8fa8ee
ms.translationtype: MT
ms.contentlocale: ja-JP
ms.lasthandoff: 03/11/2022
ms.locfileid: "139889455"
Slug: how-to-use-socket-io-with-azure-mobile-service-node-backend
Title: Azure Mobile Service ノードバックエンドで Socket.IO を使用する方法
Summary: この記事では、socket.io を使用して、Azure Mobile Service ノードバックエンドとのリアルタイム通信を行う方法について説明します。
Content: "Azure Mobile Service .NET バックエンドでは、SignalR を使用してリアルタイム通信を行うことができますが、このようなオプションはノードバックエンドのお客様には使用できませんでした。 Azure Mobile Service ノードバックエンドの最新の更新により、モバイルサービスで <a href=\"https://socket.io/\">socket.io</a> を簡単にフックできるようになりました。\n<h2>インストール</h2>\nまず、次のようにモバイルサービスの git リポジトリをローカルに複製します。\n<pre class=\"prettyprint\">C:\\&gt; git clone <a href=\"\"></a></pre>\n次に、ディレクトリを ' service ' フォルダーに変更し、' socket.io ' モジュールをインストールします\n<pre class=\"prettyprint\">cd nodetestapp\\service\nnpm install socket.io --save</pre>\n<blockquote><strong>注: </strong>リモートリポジトリに node_modules フォルダーがプッシュされないようにするには、ファイルを追加する必要があります。 詳細については、「 <a href=\"https://blogs.msdn.com/b/azuremobile/archive/2014/01/20/support-for-package-json-in-azure-mobile-services.aspx\" target=\"_blank\">Azure Mobile Services でのパッケージのサポート</a>」を参照してください。</blockquote>\nここで、ディレクトリを ' extensions ' フォルダーに変更し、次の内容を含む ' startup.js ' という名前のファイルを作成します。\n<pre class=\"prettyprint\">var path = require('path');\n\nexports.startup = function (context, done) {\n    var io = require('socket.io')(context.app.server);\n    io.on('connection', function(socket){\n      socket.on('chat message', function(msg){\n        io.emit('chat message', msg);\n      });\n    }); \n\n       context.app.get('/public/chat.html', function(req, res) {\n        res.sendfile(path.resolve(__dirname, '../public/chat.html'));\n    }); \n    done();\n}</pre>\n<span style=\"font-family: Calibri\">上のスニペットでは、socket.io を構成し、チャットアプリをホストするためのルートを追加しました。 </span>\n<h2>チャットアプリ</h2>\n<span style=\"font-family: Calibri\">新しいファイル ' chat.html ' を作成し、次の html を使用して ' service ' フォルダー内の ' public ' という名前の新しいフォルダーに配置します。</span>\n<pre class=\"prettyprint\">&lt;!doctype html&gt;\n&lt;html&gt;\n  &lt;head&gt;\n    &lt;title&gt;Socket.IO chat&lt;/title&gt;\n    &lt;style&gt;\n      * { margin: 0; padding: 0; box-sizing: border-box; }\n      body { font: 13px Helvetica, Arial; }\n      form { background: #000; padding: 3px; position: fixed; bottom: 0; width: 100%; }\n      form input { border: 0; padding: 10px; width: 90%; margin-right: .5%; }\n      form button { width: 9%; background: rgb(130, 224, 255); border: none; padding: 10px; }\n      #messages { list-style-type: none; margin: 0; padding: 0; }\n      #messages li { padding: 5px 10px; }\n      #messages li:nth-child(odd) { background: #eee; }\n    &lt;/style&gt;\n  &lt;/head&gt;\n  &lt;body&gt;\n    &lt;ul id=\"messages\"&gt;&lt;/ul&gt;\n    &lt;form action=\"\"&gt;\n      &lt;input id=\"m\" autocomplete=\"off\" /&gt;&lt;button&gt;Send&lt;/button&gt;\n    &lt;/form&gt;\n    &lt;script src=\"https://code.jquery.com/jquery-1.11.1.js\"&gt;&lt;/script&gt;\n    &lt;script src=\"\"&gt;&lt;/script&gt;    \n    &lt;script&gt;\n      var socket = io();\n      $('form').submit(function(){\n        socket.emit('chat message', $('#m').val());\n        $('#m').val('');\n        return false;\n      });\n      socket.on('chat message', function(msg){\n        $('#messages').append($('&lt;li&gt;').text(msg));\n      });\n    &lt;/script&gt;\n  &lt;/body&gt;\n&lt;/html&gt;</pre>\n最後に、git の add、commit、push コマンドを使用して、すべての変更をコミットし、モバイルサービスにプッシュします。\n\n次に、にアクセス <a href=\"\"></a> して、テキストボックスを表示するページと下部にボタンを表示します。 このページの2つのインスタンスをブラウザーで開きます。 メッセージを入力して Enter キーを押します。 他のウィンドウにもメッセージが表示されます。\n<h2>スケール アウト</h2>\n上記のサンプルは、モバイルサービスのインスタンスが1つしかない場合にのみ機能します。 複数のインスタンスがある場合は、socket.io と共にリアルタイム通信を行うために、redis をバッキングストアとして使用する必要があります。 そのためには、npm から socket.io ノードモジュールをインストールします。\n\n<a title=\"https://www.npmjs.org/package/socket.io-redis\" href=\"https://www.npmjs.org/package/socket.io-redis\">https://www.npmjs.org/package/socket.io-redis</a>\n\nまた、Azure の redis インスタンスに対して機能するように構成することもできます。 詳細については、次の記事を参照してください。\n\n<a title=\"https://azure.microsoft.com/en-us/documentation/articles/cache-dotnet-how-to-use-azure-redis-cache/\" href=\"https://azure.microsoft.com/en-us/documentation/articles/cache-dotnet-how-to-use-azure-redis-cache/\">https://azure.microsoft.com/en-us/documentation/articles/cache-dotnet-how-to-use-azure-redis-cache/</a>"
