### YamlMime:Yaml
ms.openlocfilehash: 75cb65aa910745ed3b50a8b1024d835cdbb79c8d
ms.sourcegitcommit: d03bdc7fe5447adb6530886aab848b75fe8fa8ee
ms.translationtype: MT
ms.contentlocale: ja-JP
ms.lasthandoff: 03/11/2022
ms.locfileid: "139891632"
Slug: hosting-services-with-was-and-iis-on-windows-azure
Title: Azure で WAS と IIS を使用してサービスWindowsする
Summary: 導入プログラム インサイト シリーズでは、Windows Azure テクノロジ導入プログラムに関係する Microsoft サービス コンサルタントの経験について説明し、お客様が ソリューションをデプロイするサポートを提供しています。
Content: "<p><i>導入プログラム インサイト シリーズでは、Windows Azure テクノロジ導入プログラムに関係する Microsoft サービス コンサルタントの経験について説明します。Windows Azure プラットフォームにソリューションをデプロイする支援を行っています。この投稿は TomEr 氏による投稿です。</i></p>  <p>多くの開発者は、サービス指向の手法を使用して、大規模なシステムを小さな疎結合サービスに分割します。 多くの場合、各サービスは異なるコンピューターでホストされ、標準ベースの通信に WS-* プロトコルを使用します。 ただし、ホスティングと通信のアプローチが異なると、より意味がある場合があります。 たとえば、サービスとそのすべてのクライアントを制御する場合は、TCP を使用して送信されるバイナリ メッセージを使用してパフォーマンスを向上させることができます。 また、場合によっては、サービス間の論理的な分離を維持しながら、同じマシン上で複数のサービスをホストし、名前付きパイプなどの最適化されたローカル通信メカニズムを使用することができます。</p>  <p>Microsofts&rsquo; アプリケーション プラットフォームを使用すると、アプリケーション コードを変更する必要が少ない、または変更を行う必要なく、これらのすべてのシナリオを簡単にサポートできます。 Windows Communication Foundation (WCF) は、複数のメッセージング プロトコルに対して統合プログラミング モデルを提供します。一方、Windows プロセス アクティブ化サービス (WAS) を使用すると、IIS でサービスをホストし、TCP &ldquo;&rdquo; や名前付きパイプを含む HTTP 以外のトランスポートを通して送信される受信メッセージによってサービスを起動することができます。</p>  <p>ただし、Azure&rsquo; のアプリケーションをWindowsして&rsquo;アプリケーションをデプロイすることを決定した場合、WAS を活用する方法は明らかではありません。 しかし、良いニュースは、PowerShell&rsquo; の少しの支援を受けながら、この作業を完全に可能にすることです。 スクリプトを作成する必要がある主&rsquo;な手順は次のとおりです。</p>  <ul>  <li>選択したプロトコルの WAS アクティブ化サービスを有効にして開始する</li>  <li>選択したプロトコルのバインドを IIS Web サイトに追加する</li>  <li>Web サイトまたはアプリケーションで選択したプロトコルを有効にします。</li>  </ul>  <p>このブログでは、Web サイト (クライアント) と WCF サービスをホストする仮想アプリケーションを含む単一の Web ロールで構成される単純なアプリケーションについて説明します。 &rsquo;クライアントとサービスの両方が同じコンピューターでホストされているので、通信の最適化には WCFs&rsquo; <b>NetNamedPipeBinding</b> を使用しますが、<b>NetTcpBinding</b> でも同じ基本的なアプローチが機能します。 (MSMQ は Azure の Windowsサポートされていないので、これらのバインドを使用することはできません)。 ソリューション&rsquo;の最も重要な部分のコードを投稿に含めるか、この投稿の下部に含まれている WasInAzure.zip ファイルをクリックしてサンプル全体をダウンロードできます。</p>  <h4>WCF の構成</h4>  <p>WCF&rsquo; 構成に関して Azure 固有のものは何もありませんが、その&rsquo;一部を完全に示します。 単純&rsquo;なサービスを構築し、 <b>NetNamedPipeBinding</b> と <b>net.pipe://</b> URL を使用して 1 つのエンドポイントを構成しました。</p>  <p><i>web.config (サービス):</i></p>  <p>&nbsp;&lt;system.serviceModel&gt;</p>  <p>&nbsp;&nbsp;&nbsp;&lt;サービス&gt;</p>  <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;service name=\"WcfService1.Service1\"&gt;</p>  <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;endpoint binding=\"netNamedPipeBinding\" address=\"net.pipe://localhost/WcfService1/service1.svc\" contract=\"WcfService1.IService1\"/&gt;</p>  <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;/service&gt;</p>  <p>&nbsp;&nbsp;&nbsp;&lt;/services&gt;</p>  <p>&nbsp;&lt;/system.serviceModel&gt;</p>  <p>クライアントの&rsquo; WCF 構成は、一致する ABC (アドレス、バインディング、コントラクト) を使用して、大きな外観を持っています。</p>  <h4>Windows Azure スタートアップ タスク</h4>  <p>Windows Azure&rsquo;&rsquo; インスタンスの起動時にスクリプトを実行する場合は、通常、サービス定義ファイル <b>Startup&gt; 要素で定義されているスクリプトですべての作業を実行します。&lt;</b> ただし、ここで定義されているタスクは、ファブリックで IIS が構成される前に実行されます。そのため、WAS に必要な変更のほとんどを行うのは、この方法は良い場所ではありません。 そのため、スタートアップ タスク&rsquo;で行うのは、後でスタートアップ シーケンスでスクリプトを実行できるよう PowerShell を構成する必要があります。</p>  <p><i>ServiceDefinition.csdef:</i></p>  <p>&lt;ServiceDefinition name=\"WasInAzure\" xmlns=\"\"&gt;</p>  <p>&nbsp;&lt;WebRole name=\"WebRole1\"&gt;</p>  <p>&nbsp;&nbsp;&nbsp; ...</p>  <p><b>&nbsp;&nbsp;&nbsp; &lt;</b><b>スタートアップ</b><b>&gt;</b><b></b></p>  <p><b>&nbsp;&nbsp; &lt;&nbsp;&nbsp;&nbsp;</b><b>Task</b><b> </b><b>commandLine</b><b>=</b><b>\"setup\\startup.cmd\" executionContext=\"elevated\" /&gt;</b></p>  <p><b>&nbsp;&nbsp;&nbsp; &lt;/</b><b>スタートアップ</b><b>&gt;</b><b></b></p>  <p>&nbsp;&lt;/WebRole&gt;</p>  <p>&lt;/ServiceDefinition&gt;</p>  <p><i>Startup.cmd:</i></p>  <p>powershell -command \"set-executionpolicy Unrestricted\" &gt;&gt; out.txt</p>  <h4>Windows Azure Role OnStart</h4>  <p><b>WebRole</b> クラスの <b>OnStart</b> メソッドは、IIS&rsquo; がファブリックによって設定された後に実行されます。そのため、現時点では、必要な構成変更を行うスクリプトを自由に実行できます。 最初に注意する必要がある点は、通常<b>、OnStart</b>&mdash;&rsquo; メソッドは管理者特権で実行されないので、スクリプトが機能するにはこれを変更する必要があります。</p>  <p><i>ServiceDefinition.csdef:</i></p>  <p>&lt;ServiceDefinition name=\"WasInAzure\" xmlns=\"\"&gt;</p>  <p>&nbsp;&lt;WebRole name=\"WebRole1\"&gt;</p>  <p>&nbsp;&nbsp;&nbsp; ...</p>  <p>&nbsp;&nbsp;&nbsp;<b>&lt;</b><b>Runtime</b><b> </b><b>executionContext</b><b>=</b><b>\"elevated\" /&gt;</b></p>  <p>&nbsp;&lt;/WebRole&gt;</p>  <p>&lt;/ServiceDefinition&gt;</p>  <p>これで、ロールの開始時に PowerShell スクリプトを開始するコードを追加できます。</p>  <p><i>WebRole.cs:</i></p>  <p>&nbsp;&nbsp;&nbsp; public class WebRole : RoleEntryPoint</p>  <p>&nbsp;&nbsp;&nbsp; {</p>  <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public override bool OnStart()</p>  <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {</p>  <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; var startInfo = new ProcessStartInfo()</p>  <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {</p>  <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; FileName = \"powershell.exe\",</p>  <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Arguments = @\".\\setup\\rolestart.ps1\"、</p>  <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; RedirectStandardOutput = true、</p>  <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; UseShellExecute=false、</p>  <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; };</p>  <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var writer = new StreamWriter(\"out.txt\");</p>  <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; var process = Process.Start(startInfo);</p>  <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; プロセス。WaitForExit();</p>  <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 作家。Write(process.StandardOutput.ReadToEnd());</p>  <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 作家。Close();</p>  <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; は base を返します。OnStart();</p>  <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</p>  <p>&nbsp;&nbsp;&nbsp; }</p>  <p>  <p>最後に、リスナー サービスを開始し、バインドを構成する PowerShell スクリプトが表示されます。 このスクリプトには、次の点に注意する必要があります。</p>  <ul>  <li>&rsquo;名前付きパイプではなく TCP を使用する場合は、<b>net.pipe</b> へのすべての参照を <b>net.tcp</b><b> </b>に変更し、選択したポートを含むバインディングを変更します (&ldquo;例: 808:*&rdquo;)。 また&rsquo;、 <b>NetTcpPortSharing サービスと NetTcpActivator</b> サービスの両方を有効 <b>にする必要</b> があります。</li>  <li>このスクリプトでは、ロールの名前についていくつかの前提条件を設定し、すべての IIS 仮想アプリケーションのプロトコルも更新します。 ロールとサイトの&rsquo;設定方法によっては、これを変更する必要がある場合があります。</li>  <li>IIS 7.0 と IIS 7.5 の間で IIS PowerShell コマンドレットにアクセスする方法にはいくつかの違いがあります。 スクリプトは IIS 7.5 で動作します。これは、Windows Server 2008 R2 &ldquo;と Windows Azure OS の 2.x&rdquo; ファミリに含まれています。 このバージョンを取得するには、ServiceConfiguration.cscfg ファイルのルート ノードで <b>osFamily=\"2\" </b>を設定してください。 IIS 7.0 (Azure OS &ldquo;1.x&rdquo;) を使用する場合は、PowerShell スクリプトを変更してこれを機能させる方法があります。</li>  </ul>  <p><i>RoleStart.ps1:</i></p>  <p>write-host \"Begin RoleStart.ps1\"</p>  <p>import-module WebAdministration</p>  <p># net.pipe サービスの開始</p>  <p>$listenerService = Get-WmiObject win32_service -filter \"name='NetPipeActivator'\"</p>  <p>$listenerService.ChangeStartMode(\"Manual\")</p>  <p>$listenerService.StartService()</p>  <p># net.pipe バインドを有効にする</p>  <p>$WebRoleSite = (Get-WebSite \"*webrole*\")。名前</p>  <p>Get-WebApplication -Site $WebRoleSite |Foreach-Object { $site = \"IIS:/Sites/$WebRoleSite\" + $_.path; Set-ItemProperty $site -Name EnabledProtocols 'http,net.pipe'}</p>  <p>New-ItemProperty IIS:/Sites/$WebRoleSite\" -name バインド -value @{protocol=\"net.pipe\";bindingInformation=\"*\"}</p>  <p>書き込みホスト \"End RoleStart.ps1\"</p>  <h4>まとめ</h4>  <p>Azure サービス定義ファイルとサービス構成Windows適切な要素を使用すると、コーディングやスクリプトを作成することなく、最も一般的な構成タスクを実現できます。 ただし、現在この方法で公開されていないオンプレミスの Windows インストールから使用できる便利な機能があります。 幸い、スクリプト&rsquo;の手法と Azure のスタートアップ シーケンスWindows慣れた場合は、通常、これらの問題を回避する方法をコード化できます。 Windows プロセス アクティブ&rsquo;化サービスは、Windows Azure では明らかに使用できない便利な機能の 1 つの例ですが、少しの実行に対応できます。&nbsp;</p>  <p><iframe src=\"https://www.facebook.com/plugins/like.php?href= https://blogs.msdn.com/b/windowsazure/archive/2011/06/27/hosting-services-with-was-and-iis-on-windows-azure.aspx;layout=box_count&amp;show_faces=false&amp;width=300&amp;action=like&amp;font=segoe+ui&amp;colorscheme=light&amp;height=50\" style=\"overflow: hidden; width: 300px; height: 50px;\" frameborder=\"0\" scrolling=\"no\"></iframe><br>ツイートします  <script type=\"text/javascript\"></script>  </p>"
