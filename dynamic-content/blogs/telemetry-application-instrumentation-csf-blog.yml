### YamlMime:Yaml
ms.openlocfilehash: 9de124f066390ec6ef3e3fdfb9eadb082886b96f
ms.sourcegitcommit: d03bdc7fe5447adb6530886aab848b75fe8fa8ee
ms.translationtype: MT
ms.contentlocale: ja-JP
ms.lasthandoff: 03/11/2022
ms.locfileid: "139895294"
Slug: telemetry-application-instrumentation-csf-blog
Title: テレメトリ–アプリケーションインストルメンテーションの CSF ブログ
Summary: テレメトリの基本とトラブルシューティングでは、次のような基本的なメトリック、情報ソース、ツール、スクリプトを見て、監視とアプリケーションの正常性に関する基本的な原則を導入しました。
Content: <p>テレメトリの基本とトラブルシューティングでは、Windows Azure platform で提供される基本的なメトリック、情報ソース、ツール、およびスクリプトを確認することで、監視とアプリケーションの正常性に関する基本的な原則を導入しました。 これらの方法を使用して Windows Azure にデプロイされたシンプルなソリューションのトラブルシューティングを行う方法を説明しました (ほとんどのコンピューティングノードインスタンス、単一 Windows Azure SQL Database インスタンス)。 &nbsp;この記事では、そのエントリを展開し、Windows Azure code プロジェクトの<a href="https://code.msdn.microsoft.com/Cloud-Service-Fundamentals-4ca72649" target="_blank">クラウドサービスの基礎</a>で実装されたテレメトリシステムのアプリケーションインストルメンテーションの側面について説明します。 &nbsp;このブログに付属している詳細な wiki エントリでは、Windows Azure 診断 (wad) と統合された CSF インストルメンテーションフレームワークを使用して、アプリケーションに一貫したインストルメンテーションエクスペリエンスを提供する方法を説明します。 &nbsp;CSF アプリケーションで実装した手法は、大規模な Azure デプロイで実証されています。&nbsp;</p>  <p>アプリケーションに関する最も適切な情報源は、アプリケーション自体です。 ただし、優れたツールと堅牢なテレメトリシステムを使用 &rsquo; すると、情報を簡単に取得できますが、最初にアプリケーションをインストルメント化しても、その情報を取得することはできません。 また、すべてのアプリケーションコンポーネントで<em>一貫</em>してインストルメント化していない場合 &rsquo; は、運用環境でのスケーリングを開始するときに運用効率を実現することはほとんどありません。 (問題のトラブルシューティングは、個人 &ndash; またはチーム &ndash; がリアルタイムで取り組むことができるよりもはるかに複雑になります)。アプリケーション全体の一貫したインストルメンテーションと、それを利用できるテレメトリは、アプリケーションを大規模に実行するために必要な情報を、相対的な効率と容易さを使用して展開する唯一の方法です。&nbsp;</p>  <p>CSF には、アプリケーションを迅速にインストルメント化し、効果的なテレメトリシステムを構築するために使用できるいくつかのコンポーネントが用意されています。</p>  <ul>  <li>再試行ロジックを実装し、大規模な再試行ポリシーを提供するデータアクセス層。</li>  <li>NLOG の上に構築されたログ記録フレームワーク</li>  <li>スケーリングをサポートする WAD 用のスケーラブルなカスタム構成。</li>  <li>この情報を収集し、クエリ可能なテレメトリシステムに移動するデータパイプライン。</li>  <li>アプリケーションの監視に使用できる操作テレメトリレポートのサンプルセット</li>  </ul>  <p>これらのプラクティスを採用し、提供したコンポーネントと構成を使用することにより、お客様の開発作業をより正確にターゲットにし、運用効率を向上させるための洞察を得られるように、システムの規模を調整することができます。これにより、最終的に顧客のリソースが少なくなります。 これにより、ユーザーエクスペリエンスを向上させ、今後の問題をユーザーが確認できるようになります。 テレメトリについて詳しく説明する wiki 記事があり<a href="https://social.technet.microsoft.com/wiki/contents/articles/18468.telemetry-application-instrumentation.aspx" target="_blank">ます。アプリケーションインストルメンテーション &rdquo; &ldquo; </a></p>  <p>非常に簡単に読むこと &rsquo; ができ、ユーザーベースの拡大と新しいコード機能のデプロイが非常に難しくなっています。</p>  <p>信頼。 多くの企業では、ある時点 &rsquo; で拡張できず、1つまたは複数の拡張停止を経験していた、ホットな製品またはサービスを持っています。 多くの場合、ユーザーは、信頼性の低いシステムに対する忠実性はほとんどありませんが、他の場所に移動することもできます。たとえば、heels を追跡し、市場を獲得する準備ができている upstart に移動するだけです。&nbsp;</p>  <p>もちろん、独自のアプリケーションインストルメンテーションフレームワークを既に作成しており、多くのベストプラクティスを実装している場合もあります。 &nbsp; そのため、 <a href="https://code.msdn.microsoft.com/Cloud-Service-Fundamentals-4ca72649" target="_blank">MSDN コードギャラリーのソースコードとして、すべてのテレメトリコンポーネントを含む、CSF アプリケーション全体</a>が提供されています。 &nbsp; アプリケーションでインストルメンテーションを実装する際に注意すべき重要な点がいくつかあります。</p>  <ul>  <li>chunky な遠隔測定 (大量、待機時間が長い、詳細なデータ) と chatty な遠隔測定 (少量、待機時間が短い、重要度が高いデータ) のそれぞれに対応する<strong>別々のチャネル</strong>を作成します。</li>  <li>高い情報については、パフォーマンスカウンターやトレースなどの標準 Windows Azure 診断ソースを使用します。</li>  <li>コンテキスト、送信先、メソッド、タイミング情報 (待機時間)、および結果 (成功/失敗/再試行) を使用して、外部サービスへのすべての API 呼び出しをログに記録します。 Chunky logging チャネルを使用して、インストルメンテーション情報でテレメトリシステムが過負荷にならないようにします。</li>  <li>完全な例外の詳細をログに記録しますが、例外は使用しないでください <strong>。ToString ()</strong></li>  <li>テーブル ストレージに書き込まれるデータ (パフォーマンス カウンター、イベント ログ、トレース イベント) は、60 秒ごとに一時的なパーティションに書き込まれます。 書き込むデータの量が多すぎる (参照するソースが多すぎる、収集間隔が短すぎる) と、このパーティションに対する負荷が大きくなることがあります。 調整イベントが発生する可能性があるため、エラーの急増によってテーブル ストレージへの大量の挿入が行われないようにしてください。</li>  <li>ストップウォッチ方法を使用してデータベースおよびその他のサービス応答時間を収集する</li>  <li>Enterprise アプリケーションフレームワークライブラリ、log4net、nlog などの一般的なログライブラリを使用して、ローカルファイルへの一括ログ記録を実装します。 診断モニターの構成でカスタム データ ソースを使用して、この情報を BLOB ストレージに定期的にコピーします。</li>  <li>運用環境のサイトのデータと遠隔測定を同じストレージ アカウントにパブリッシュしないでください。 診断には専用のストレージ アカウントを使用します。</li>  <li>PT5M &rdquo; など、 &ldquo; 転送および分析が必要なデータ量を減らすために、適切な収集間隔 (5 分 &ndash; 15 分) を選択します。</li>  <li>インスタンスを強制的にリセットせずに、実行時にログ構成を変更できるようにします。 また、データベース、キャッシュ、その他のサービスなど、システムの特定の側面について、個別にログを有効にできることを確認します。</li>  </ul>  <p>このブログ記事をお読みいただき、ありがとうございました。 アプリケーションに CSF インストルメンテーションコンポーネントを実装する方法の詳細については、テレメトリに<a href="https://social.technet.microsoft.com/wiki/contents/articles/18468.telemetry-application-instrumentation.aspx" target="_blank"> &ldquo; ついてさらに詳しく説明した「アプリケーションインストルメンテーション &rdquo; </a>」を参照してください。 &nbsp;このシリーズの次の記事では、実装したデータパイプラインを調べて、CSF アプリケーション全体とそのパフォーマンス特性を包括的に把握します。この情報をリレーショナル運用ストアでキャプチャし、Azure platform 全体にわたる全体的なビューを提供する方法を含みます。</p>
