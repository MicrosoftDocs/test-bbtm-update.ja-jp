### YamlMime:Yaml
ms.openlocfilehash: f4d1257bc5bae3772de95c30323ea15e68f7ec02
ms.sourcegitcommit: d03bdc7fe5447adb6530886aab848b75fe8fa8ee
ms.translationtype: MT
ms.contentlocale: ja-JP
ms.lasthandoff: 03/11/2022
ms.locfileid: "139890009"
Slug: announcing-preview-of-java-message-service-2-over-amqp-on-azure-service-bus
Title: Azure 上の AMQP 上の Java Message Service 2.0 のプレビューを発表Service Bus
Summary: Azure Service Bus、業界駆動型 AMQP プロトコルで使い慣れたキューおよびトピック サブスクリプションのセマンティクスを活用することで、エンタープライズ メッセージング シナリオを簡略化できます。
Content: >-
  <div style="background:#eeeeee;border:1px solid #cccccc;padding:5px 10px;">

  <p itemprop="name"><strong>2021 年 2 月 22</strong> 日に更新:Azure Service Bus プレミアム 上の Java Message Service (JMS) 2.0 API が一般提供されました。 詳細については、&nbsp;ブログ記事「Azure Service Bus プレミアム での <a href="https://techcommunity.microsoft.com/t5/messaging-on-azure/announcing-general-availability-for-java-message-service-jms-2-0/ba-p/2073151" target="_blank">Java Message Service (JMS) 2.0 API の一般提供の発表」を参照してください</a>。&nbsp;</p>

  </div>


  <p><a href="https://azure.microsoft.com/en-us/services/service-bus/" target="_blank">Azure Service Bus</a>、業界駆動型の使い慣れたキューとトピック サブスクリプションのセマンティクスを活用することで、エンタープライズ メッセージング シナリオを簡素化します&nbsp;&nbsp;Advanced Message Queuing Protocol (AMQP)。 Azure サービスとの深い統合を備えたフル マネージドのサービスとしてのプラットフォーム (PaaS) オファリングを顧客に提供し、高スループット、信頼性の高い待機時間をメッセージング ブローカーに提供しながら、高可用性、セキュリティで保護された設計、スケーラビリティをファーストクラスのエクスペリエンスとして確保します。 ほとんどのアプリケーション スタックとエコシステムService Bus顧客のワークロードに対して Azure Service Bus を提供します。</p>


  <p>そのビジョンに合&rsquo;って、Azure Service Bus Premium レベルの <strong>AMQP での Java Message Service (JMS) 2.0 のプレビュー サポートをお知らせします</strong>。 これにより、お客様は Java と Spring のワークロードを Azure にシームレスにリフト アンド シフトできる一方で、クラウドで最高のクラスのエンタープライズ メッセージングを使用してアプリケーション スタックを最新化できます。</p>


  <p>企業のお客様は、ワークロードを Azure にリフトアンドシフトする場合、クラウドネイティブの Azure オファリングを活用してアプリケーション スタックを最新化する機会を得る可能性があります。 これは、データ プレーン上のコンポーネントに適しています。データを格納または移動すると、サービスとしてのインフラストラクチャ (IaaS) でホストされているセットアップから、よりクラウドネイティブの PaaS セットアップに移行するメリットがあります。</p>


  <p>データベースとデータ ストアでは、標準化された API とプロトコルを確立することで、シームレスな移行の方法が確立されました。このアプリケーションは、この標準化された API の実際のプロバイダーまたは実装に依存しません。また、ごくわずかまたは構成のコード変更だけで、アプリケーションを現在のオンプレミス プロバイダーから Azure&rsquo; のフル マネージド PaaS オファリングに移行できます。</p>


  <p>エンタープライズ メッセージング エコシステムは、 <strong>2011 年の最新の AMQP 1.0</strong> プロトコル標準化まで、データ エコシステムに比べて大きく断片化され、プロトコル実装によって保証されているすべてのエンタープライズ メッセージ ブローカーで一貫した動作を実現しました。 ただし、これは依然として標準化された API コントラクトに結び付けなかったので、エンタープライズ メッセージング空間の断片化が続く。</p>


  <p><strong>Java </strong>Enterprise コミュニティ (および拡張機能により Spring) は、Java <strong></strong><strong>Message Service (JMS 1.1 および 2.0)</strong> 仕様を使用して、エンタープライズ メッセージング ブローカーと対話するときにプロデューサーおよびコンシューマー アプリケーションによって使用される API を標準化するために、いくつかの前進を行いました。 <strong>Apache QPID コミュニティ</strong>は、AMQP での JMS API 仕様の実装によってこれをさらに進めました。 QPID-JMS は、スタンドアロンでも Spring JMS パッケージの一部としても、さまざまなメッセージ ブローカーを扱うほとんどの企業のお客様に対する事実上の JMS 実装です。</p>


  <h2>Connectを使用して既存のアプリケーションを AMQP Service Bus使用する</h2>


  <p>このプレビューでサポートされている機能一覧 (一般提供によって完全なパリティが計画されている) により、Azure Service Bus ではすべての Java Message Service API コントラクトがサポートされ、顧客はアプリケーションを書き換えることなく既存のアプリケーションを Azure に持ち込むのが可能です。 現在サポートされている JMS 機能の一覧を次に示します。</p>


  <ul>
      <li>キュー</li>
      <li>トピック。</li>
      <li>一時キュー。</li>
      <li>一時的なトピック。</li>
      <li>サブスクリプション。
      <ul>
          <li>共有の永続サブスクリプション。</li>
          <li>共有非永続的サブスクリプション。</li>
          <li>非共有の永続サブスクリプション。</li>
          <li>非共有非永続的サブスクリプション。</li>
      </ul>
      </li>
      <li>QueueBrowser。</li>
      <li>TopicBrowser。</li>
      <li>上記のすべてのエンティティの自動作成 (まだ存在しない&rsquo;場合)。</li>
      <li>メッセージ セレクター。</li>
      <li>配信遅延を含むメッセージの送信 (スケジュールされたメッセージ)。</li>
  </ul>


  <h2>オンプレミスまたは IaaS でホストされている JMS プロバイダーから Azure Service Bus へのシームレスな移行</h2>


  <p>既存の JMS ベースのアプリケーションを Azure Service Bus に接続するには、Azure Service Bus JMS <a href="https://search.maven.org/artifact/com.microsoft.azure/azure-servicebus-jms" target="_blank">Maven</a> パッケージまたは Spring&rsquo; ブート用<a href="https://docs.microsoft.com/azure/developer/java/spring-framework/configure-spring-boot-starter-java-app-with-azure-service-bus" target="_blank">の Azure Service Bus</a> スターターをアプリケーション pom.xml に追加し、構成パラメーターに Azure Service Bus 接続文字列を追加します。</p>


  <p>上記のように、構成のコード変更のみを使用すると、顧客はメッセージ ブローカーに依存しないビジネス ロジックを維持し、ベンダーのロックインを回避できます。<br>

  &nbsp;&nbsp; <a href="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/694d3869-01c4-4b64-bf74-46d43ba9fc12.png"><img alt="migration from on-premises or IaaS hosted JMS provider to Azure Service Bus" border="0" height="319" src="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/31cf3408-2abd-4fba-809d-3b58016ba46d.png" style="border: 0px currentcolor; margin-right: auto; margin-left: auto; display: block; background-image: none;" title="" width="1024"></a></p>


  <h2>シンプルな価格、簡単なデプロイ、スケーラブルなリソーシング</h2>


  <p>Azure Service Bus JMS サポートを活用することで、お客様はライセンスの調達、独自の IaaS コンピューティングでのエンタープライズ メッセージング ブローカーの管理、メッセージング ユニットあたりの固定価格によるコスト管理の簡素化、ワークロードの変動に対処するための自動スケールアップおよびダウン プロビジョニングを利用することで、オーバーヘッドを回避できます。</p>


  <h2>他の Azure オファリングと統合して、アプリケーション スタックをさらに最新化する</h2>


  <p>また、Azure Service Bus他の Azure オファリングとの統合を利用して、アプリケーション スタックを最新化および簡素化できます。 これを行う方法を次に示します。</p>


  <ol>
      <li><strong>Azure Logic Apps</strong>: Azure Service Bus 用の Azure Logic Apps コネクタを使用して、さまざまな重要なビジネス ワークフローを、簡単な低コードの無料のサーバーレスサービスに置き換えます。</li>
      <li><strong>Azure Functions</strong>: Azure Service Bus の Azure Functions トリガーを利用して、カスタム アプリケーションを単純な移動時のサーバーレス PaaS オファリングに置き換える。</li>
      <li><strong>Azure Monitorアラート</strong>: Azure の監視とアラートを利用して、Azure Service Bus 名前空間、キュー、トピック、サブスクリプション レベルのメトリックを監視します。</li>
      <li><strong>Azure KeyVault</strong>: Azure KeyVault との統合を利用して、カスタマー マネージド キーを使用して名前空間のデータを暗号化します。</li>
      <li><strong>仮想ネットワークとプライベート エンドポイント</strong>: 仮想ネットワーク サービス エンドポイントを使用Service Bus Azure Service Busへのアクセスをセキュリティで保護します。 Connectプライベート エンドポイントを使用してプライベート ネットワークでホストされているアドレスを介して、クラウドでホストされるサービスを使用します。</li>
  </ol>


  <h2>概要今日</h2>


  <p>概要、JMS 機能を使用して <a href="https://aka.ms/jmsGettingStarted" target="_blank">Service Bus</a> 名前空間をプロビジョニングし、既存の Java および Spring アプリケーションを <a href="https://aka.ms/jmsActiveMQToServiceBus" target="_blank">Apache ActiveMQ</a> から Service Bus に移行します。</p>
