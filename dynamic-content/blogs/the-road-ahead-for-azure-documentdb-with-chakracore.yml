### YamlMime:Yaml
ms.openlocfilehash: b93230d452ed92bc4a5ffac015de2a27357c43cd
ms.sourcegitcommit: d03bdc7fe5447adb6530886aab848b75fe8fa8ee
ms.translationtype: MT
ms.contentlocale: ja-JP
ms.lasthandoff: 03/11/2022
ms.locfileid: "139891399"
Slug: the-road-ahead-for-azure-documentdb-with-chakracore
Title: Chakra を使用した Azure DocumentDB での JavaScript の実行
Summary: Microsoft が GitHub で Chakra (ChakraCore と呼ばれます) のオープンソースのコアコンポーネントを持つ最新の発表により、Azure DocumentDB のエクスペリエンスを Chakra と今後の計画と共有し、ChakraCore に移行することができます。
Content: >-
  <p><em>この投稿は、Chakra で <a href="https://twitter.com/limin_z">Zhu</a>というプログラムマネージャーと共に作成されました。</em></p>


  <p>Chakra JavaScript エンジンは、Microsoft Edge とユニバーサル Windows アプリケーションの電源をオンにすることがよく知られています。 Windows 8.1 と Windows Server 2012 R2 以降、Chakra には、前述のクライアントのみのシナリオ以外で Chakra を埋め込むことができる埋め込み api ( <a href="https://msdn.microsoft.com/en-us/library/dn249673.aspx">JavaScript ランタイム</a>または JSRT api と呼ばれます) の新しいセットが追加されました。</p>


  <p><a href="https://azure.microsoft.com/en-us/services/documentdb/">Azure DocumentDB</a> は、Chakra を埋め込むための最初のサービスの1つで、データベースエンジン内で JavaScript のプログラミングをネイティブに提供していました。 Microsoft が GitHub で Chakra ( <a href="https://github.com/Microsoft/ChakraCore">ChakraCore</a>と呼ばれます) のオープンソースのコアコンポーネントを持っている<a href="https://aka.ms/ChakraCoreOSS">最新の発表</a>により、当社の経験と今後の計画を Chakra と共有することができます。</p>


  <h2>NoSQL データベースでの JavaScript の実行</h2>


  <p><a href="https://azure.microsoft.com/en-us/services/documentdb/">Azure DocumentDB</a>は、書き込みに最適化された NoSQL ドキュメント指向データベースエンジンであり、JSON および JavaScript をネイティブでサポートするために構築されています。 JSON は、JavaScript オブジェクト式から生成されたもので、構造化データと半構造化データに対して頻繁に使用されるトランスポートメカニズムです。 DocumentDB は Chakra を使用して、データベースエンジン内でネイティブに JavaScript ロジックのトランザクション実行を行うためのサーバー側のプログラミングサーフェイスを提供します。 <a href="https://azure.microsoft.com/en-us/blog/azure-documentdb-javascript-as-modern-day-t-sql/">JavaScript を最新の日付とし</a>て使用する方法は、開発者が、DocumentDB でのサーバー側スクリプト (<a href="https://azure.microsoft.com/en-us/documentation/articles/documentdb-programming/">ストアドプロシージャ、トリガー、ユーザー定義関数</a>) の形式で表されたビジネスロジックを実装するための自然なインターフェイスを提供することを SQL しています。</p>


  <p>マルチテナントサービスとして、最初からリソースガバナンスとパフォーマンスの分離を使用して、DocumentDB スタック <em>全体</em> を構築しました。 DocumentDB &rsquo; s データベースエンジンを含むすべてのコンポーネントは、厳密にリソースガバナンスを適用するように設計されています。 DocumentDB エンジンでは、SLA に支えられたターゲットのパフォーマンスを提供するために、システムリソースの非常に高速な予算内でホストされている各コンポーネントが稼働している必要があります。 &nbsp; このため、JavaScript ランタイムでも同じレベルのパフォーマンスの分離をサポートする必要があり、厳格なリソース制約の下で必要なパフォーマンスを実現できます。 いくつかの JavaScript エンジンを評価した後、すべてのマルチテナント要件を満たすことができるため、最終的には Chakra を使用することにしました。&nbsp;</p>


  <p>ここ &rsquo; では、ストアドプロシージャを使用して、DocumentDB 内で Chakra がどのように使用されるかを確認します。 開発者は、JavaScript で記述されたストアドプロシージャを登録および実行できます。これを使用すると、複数のドキュメントに対してバッチまたは一連の操作を1つの ACID トランザクションとして実行できます。 テナントは、ストアドプロシージャを登録するときに、Chakra によって暗黙的にバイトコードにプリコンパイルします。 テナントがストアドプロシージャを実行すると、スクリプトはサンドボックス環境の Chakra ランタイムで実行されます。 ランタイムは、データベースの分離されたスナップショットに対する JavaScript プログラミングモデルの緊密な統合を提供します。 ストアドプロシージャが正常に完了すると、データベースに対するすべての操作が1つのトランザクションでコミットされます。 スクリプト内から反映された例外がある場合、DocumentDB はトランザクション全体を自動的にロールバックします。</p>


  <p><a href="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/8a478d6e-2884-4251-8f36-8ccb35121a85.gif"><img alt="chakra480" height="344" src="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/1443be9a-b6d2-4def-a17b-9b238a2b1b00.gif" style="float: none; margin-left: auto; display: block; margin-right: auto" title="chakra480" width="610"></a></p>


  <p>ここでは、Chakra のいくつかの<a href="https://blogs.windows.com/msedgedev/2015/05/18/using-chakra-for-scripting-applications-across-windows-10/">機能</a> &rsquo; についてもう少し掘り下げてみましょう &rsquo; 。 DocumentDB でのファーストクラスの JavaScript サポートを提供するための使用方法について説明します。</p>


  <ul>
   <li><strong>レンタルスレッド処理- </strong>Chakra は、JavaScript ランタイムが常にシングルスレッドであり、特定のスレッドにはハードバインドされていない、レンタルスレッド処理モデルを備えています。 つまり、ランタイムは一度に1つのスレッドでしか動作しませんが、スレッドアフィニティは、いつでも自由に変更できます。 レンタルスレッド処理は、documentdb に特に適しています。 DocumentDB はランタイムプールを管理し、各テナントにランタイムを割り当てて JavaScript を実行できるためです。 これにより、テナントごとに新しいランタイムを開始するコストを回避し、DocumentDB が各テナントのセキュリティと分離を維持できるようになります。</li>
   <li><strong>バイトコードシリアル化- </strong>サーバー側のスクリプトを登録すると、DocumentDB は Chakra を使用して、スクリプトをプリコンパイルし、バイトコードにシリアル化します。 通常の JavaScript 実行パイプラインでは、エンジンはコードを解析し、構文ツリーを生成し、実行前にバイトコードを生成する必要があります。 Chakra &rsquo; s バイトコードシリアル化を使用すると、DocumentDB は、バイトコード生成まで (またはそれを含めて) 事前にスクリプトを処理し、再利用できるようにバイトコードのキャッシュされたコピーを保存できます。 これにより、ユーザーが実行されるたびにスクリプトを再解析するコストを回避できます。これにより、時間の経過に伴う大幅なパフォーマンスの節約につながります。</li>
  </ul>


  <p>Chakra <a href="https://aka.ms/coreossannoucement">最近オープンソース</a> のコアコンポーネントであるコードネーム <a href="https://github.com/Microsoft/ChakraCore">ChakraCore</a>。 ChakraCore は、Chakra が持っているのと <a href="https://github.com/Microsoft/ChakraCore/wiki/Architecture-Overview">ほぼ同じ機能セット</a> を備えており、今後開いているときに開発されているスタンドアロン JavaScript エンジンとして整形されています。 DocumentDB は、近い将来、Chakra から ChakraCore に移行するためにコミットされています。 ChakraCore に移行することによって、DocumentDB は前述のすべての利点を保持し、さらに多くの機能をユーザーに提供できます。 Chakra がオープンソースになったので、DocumentDB チームは変更も反映する予定です。</p>


  <h2>最後に</h2>


  <p>Chakra に依存することで、成功を収めることができまし &rsquo; た。 ChakraCore に移行することによって可能なことを楽しみにしています。 <a href="https://github.com/Microsoft/ChakraCore/wiki/Embedding-ChakraCore">埋め込み wiki</a>は、ChakraCore を独自のアプリケーションに埋め込む方法を学習するのに適しています。</p>


  <p>Chakra チームに対するフィードバックをお持ちの場合は、 <a href="https://github.com/Microsoft/ChakraCore">GitHub</a>で問題を開いたり、Twitter () <a href="https://twitter.com/chakracore">@ChakraCore</a> を使用して連絡したりすることができます。</p>


  <p>Documentdb s のサーバー側プログラミングモデルの詳細 &rsquo; については、 <a href="https://azure.microsoft.com/en-us/documentation/articles/documentdb-programming/">documentdb &rsquo; のドキュメントページ</a>を参照してください。</p>


  <p>DocumentDB に関するヘルプが必要な場合、またはご質問がある場合は、 <a href="https://stackoverflow.com/questions/tagged/azure-documentdb">StackOverflow の開発者フォーラム</a> にご連絡いただくか、documentdb エンジニアリングチームとの1:1 チャットをスケジュールしてください。 最新の DocumentDB のニュースや機能については、Twitter の「」 <a href="https://twitter.com/DocumentDB">@DocumentDB</a> をご覧ください。</p>
