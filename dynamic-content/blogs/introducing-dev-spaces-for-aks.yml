### YamlMime:Yaml
ms.openlocfilehash: 0fe8033fe0934a523c146817b25de359d1acb77c
ms.sourcegitcommit: d03bdc7fe5447adb6530886aab848b75fe8fa8ee
ms.translationtype: MT
ms.contentlocale: ja-JP
ms.lasthandoff: 03/11/2022
ms.locfileid: "139889446"
Slug: introducing-dev-spaces-for-aks
Title: AKS の Dev Spaces の導入
Summary: 本日は、azure Kubernetes Services (AKS) 用の Dev Spaces のパブリックプレビューを発表し、Kubernetes 用のアプリケーションを簡単にビルドおよびデバッグできるようになりました。 Azure でのみご利用いただけます。 Microsoft で...
Content: >-
  <p>現在、azure Kubernetes Services (AKS) の Dev Spaces のパブリックプレビューを発表しまし &rsquo; た。これは、azure でのみ使用できる Kubernetes &ndash; 用のアプリケーションを簡単にビルドおよびデバッグする方法です。 Microsoft のビルドでは、開発スペースを使用して、複雑なマイクロサービス環境内の1つのアプリケーションをすばやくデバッグおよび修正する方法を説明しました。 イベントが発生しなかった場合、または <a href="https://twitter.com/ch9/status/993559448982470656?lang=en" target="_blank">オンプレステージの theatrics</a>によって処理されなかった場合は、Dev Spaces がそのような一意の製品である理由を &rsquo; 確認する価値があります。</p>


  <p>新しい従業員が、多数のコンポーネントで構成される複雑なマイクロサービスアプリケーションのバグを修正しようとしている Imagine、それぞれに独自の構成サービスとバックアップサービスがあります。 最初に、ローカル開発環境を構成して、IDE のセットアップ、ツール チェーンの構築、コンテナー化されたサービスの依存関係、ローカル Kubernetes 環境、バッキング サービスのモックなど、運用環境を模倣できるようにする必要があります。 開発環境のセットアップに必要なすべての時間を考えると、最初のバグを修正するのに何日もかかるおそれがあります。</p>


  <p>または、Dev Spaces と AKS を使用することもできます。</p>


  <h2>開発環境を数秒でセットアップ</h2>


  <p>Dev Spaces を使用すると、新しい開発者が必要とするのは IDE と Azure CLI だけです。 AKS 内に新しい開発領域を作成し、他のトラフィックフローを妨げることなく、マイクロサービス環境のコンポーネントで安全に作業を開始するだけです。</p>


  <pre>

  azds space select --name gabe</pre>


  <p>内部的には、Dev Spaces によって Kubernetes 名前空間が作成され、IDE 内でアクティブな開発下にあるマイクロサービスだけが追加されます。 Dev Spaces を設定した場合、環境は数日ではなく、数秒で完了します。</p>


  <h2>コード変更を迅速に反復処理する</h2>


  <p>環境がセットアップされたので、 &rsquo; 今度はコードを記述します。 Microsoft では、コードの記述中 &rsquo; に、バージョンコントロールにプッシュする &rsquo; 前に、このプロセスを内側のループ &rdquo; &ndash; と &ldquo; 呼びます。 コンテナーと Kubernetes を使用すると、コンテナーイメージのビルド、レジストリへのプッシュ、クラスターへのデプロイを待機している間に、コードの作成プロセスがつらい遅くなる可能性があります。 Dev Spaces には、AKS 内で実行されているライブコンテナーと IDE を同期するためのコード同期テクノロジが含まれています。 高速な内部ループエクスペリエンスが必要な場合は、 Dev Spaces を使用すると、IDE の変更が AKS クラスターに数秒でプッシュされます。</p>


  <h2>コンテナーをリモートでデバッグする</h2>


  <p>&rsquo;ソフトウェアデバッガー &rsquo; を使用したことがある場合は、ブレークポイントを設定し、呼び出し履歴を調べて、コードを再記述する &rsquo; ときにメモリを変更することもできます。 残念ながら、コンテナーを使用したリモートデバッグは不安定で、構成が困難です。 実際には、コンテナーベースのマイクロサービスを使用するほとんどの開発者は、特に変更が複雑な一連のサービスに依存している場合に、低速で時間のかかる印刷ラインデバッグを使用するように強制されます。 Dev Spaces でのサービスメッシュテクノロジの革新的な使用により、開発者は単純なホスト名プレフィックスを使用して、分離されたサービスを操作できます。</p>


  <p>たとえば、 &rsquo; contoso.com で実行されているサービスを使用して、結果を返す前に10マイクロサービスを走査する必要があるとします。 という名前 `gabe` の Dev 空間がある場合は、次のようになります。</p>


  <p>gabe.s.contoso.com</p>


  <p>この特別な URL プレフィックスを使用すると、アクティブな開発中のサービスを経由してトラフィックがルーティングされます。 つまり、サービス3とサービス7の IDE にブレークポイントを設定できますが、他のサービスの変更されていないインスタンスを使用しても、通常のトラフィックフローを中断することはありません。 すばらしいですね。 現在、.NET Core と Node.js でのリモートデバッグがサポートされており、より多くの言語を使用できます。</p>


  <p>これで Dev Spaces でできることがわかりました。まず、 <a href="https://aka.ms/get-azds" target="_blank">ドキュメント</a> を参照してください。 また、Visual Studio と Visual Studio Code を使用して開発フローの一部として Azure Dev Spaces を使用する方法については、この<a href="https://aka.ms/vs-devspaces-blog" target="_blank">ブログ</a>を参照してください。</p>


  <h2>新しいアプリケーションを簡単にブートストラップ</h2>


  <p>開発者は、Kubernetes が提供する機敏性、信頼性、スケーラビリティの利点を満足しています。 彼らは、Kubernetes に関するコミュニティとオープンソースエコシステムを気に入っています。 Kubernetes を使用するには、YAML マニフェストと Dockerfiles が必要ですか? でもそんなに簡単ではありません。 幸いなことに、開発者は新しいアプリケーションを簡単にブートストラップできるアプリケーションのスキャフォールディングを利用できます。</p>


  <pre>

  azds prep</pre>


  <p>このコマンドは、アプリケーションの種類を検出し、Dockerfile、ヘルムグラフ、その他のメタデータをソースツリーに配置します。 これにより、不可解の詳細を学習しなくても、アプリケーションのコンテナー化とパッケージ化を簡単に行うことができます。 スキャフォールディングはソースコードの一部になるため、必要に応じて構成を調整できます。 また、スキャフォールディングアセットを変更して、開発環境から運用環境にアプリを移行できるようにすることもできます。</p>


  <h2>オープンソーステクノロジを使用する</h2>


  <p>Dev スペースは Azure でのみ使用できますが、スキャフォールディングはオープンソースの <a href="https://github.com/Azure/draft" target="_blank">ドラフトプロジェクト</a>に基づいて構築されます。これにより、Kubernetes クラスターでの内部ループエクスペリエンスが実現します。 時間の経過と共に、Draft を使用するすべてのプロジェクトは、開発スペースに切り替えることができます。また、その逆も可能です。 Azure での開発スペースの改善に向けて、オープンソースのドラフトプロジェクトでは、Kubernetes コミュニティ全体を活用するイノベーションが増えることを期待できます。</p>


  <p>&rsquo;Azure チームのエキサイティングな月でした。 <a href="https://azure.microsoft.com/en-us/blog/azure-kubernetes-service-aks-ga-new-regions-new-features-new-productivity/" target="_blank">AKS の一般提供が開始され</a> 、過去30日以内に80% を超えました。 AKS は、米国東部2と日本東部を含む12のリージョンで使用できるようになりました。これは、一般公開の2週間前に追加されています。 過去数週間にわたって世界中の対象ユーザーへのスペースを切ることができましたが、応答は overwhelmingly になっています。 開発スペースを使用すると、複雑なマイクロサービス環境に対して簡単に開発できます。 お試しください。 &rsquo;ご意見をお待ちしております。</p>
