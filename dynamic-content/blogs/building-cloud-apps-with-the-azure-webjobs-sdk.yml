### YamlMime:Yaml
ms.openlocfilehash: 74eb96a6ec16c49147d14246c565e08e81bb8179
ms.sourcegitcommit: d03bdc7fe5447adb6530886aab848b75fe8fa8ee
ms.translationtype: MT
ms.contentlocale: ja-JP
ms.lasthandoff: 03/11/2022
ms.locfileid: "139889888"
Slug: building-cloud-apps-with-the-azure-webjobs-sdk
Title: Azure WebJobs SDK を使用したクラウドアプリの構築
Summary: Azure WebJobs 用の Visual Studio の新しい展開機能と、Azure WebJobs SDK の新しい概要ドキュメント。
Content: >-
  最近の投稿に記載されているように、MS Press は Scott Guthrie のプレゼンテーションに基づいて電子書籍を公開し、 <a href="https://weblogs.asp.net/scottgu/free-ebook-building-cloud-apps-with-microsoft-azure">Windows Azure でクラウドアプリを構築</a>しました。


  本書では、web アプリケーションをホストするための既定の選択肢として <a href="https://azure.microsoft.com/en-us/services/websites/">Azure Websites</a> が一貫して機能しますが、1つの例外で <a href="https://azure.microsoft.com/en-us/services/cloud-services/">Cloud Services</a>に切り替わります。 <a href="https://www.asp.net/aspnet/overview/developing-apps-with-windows-azure/building-real-world-cloud-apps-with-windows-azure/queue-centric-work-pattern">キュー中心の作業パターン</a>の章では、この書籍は<a href="https://azure.microsoft.com/en-us/documentation/articles/cloud-services-what-is/">Worker ロール</a>を使用し<a href="https://code.msdn.microsoft.com/windowsazure/Fix-It-app-for-Building-cdd80df4">て、Fix It サンプルアプリケーション</a>のバックエンド処理を処理します。 Scott は、Azure Websites でバックエンドプロセスをホストする方法がなかった時点で、プレゼンテーションを開発したときにそのことを選択しました。 その後、 <a href="https://go.microsoft.com/fwlink/?linkid=390226&amp;clcid=0x409">Azure WebJobs</a> が導入されました。 Web ジョブはまだプレビュー段階であるため、本エディションの本とサンプルアプリケーションは変更されていませんが、次に更新されたエディションでは、バックエンド処理の既定の選択として機能 Web ジョブを計画しています。


  <a href="https://azure.microsoft.com/en-us/documentation/articles/choose-web-site-cloud-service-vm/">クラウドサービスの Web ロールと比較</a>した web サイトと同様、Web ジョブは Worker ロールと比較して簡単かつ迅速に配置でき、プログラムや構成が容易になり、テストとトラブルシューティングが容易になります。 <a href="https://go.microsoft.com/fwlink/?LinkId=390465">Visual Studio Update 3</a>と<a href="https://azure.microsoft.com/en-us/downloads/archive-net-downloads/">Azure .net SDK 2.4</a>のリリースでは、web ジョブ用の自動化されたデプロイ機能を提供することで、さらに優れた機能を提供しています。 詳細については、新しい記事「 <a href="https://azure.microsoft.com/en-us/documentation/articles/websites-dotnet-deploy-webjobs/">Azure Websites に Azure WebJobs をデプロイする方法</a>」を参照してください。


  Web ジョブのもう1つの利点は、Web ジョブ SDK により、 <a href="https://azure.microsoft.com/en-us/documentation/services/storage/">キュー、blob、およびテーブル</a>で動作するコードを簡単に記述できることです。 Web ジョブ SDK の新しい入門用チュートリアルを最近公開しました。 このチュートリアルでは、キューと blob を使用する単純な多層アプリケーションを構築して実行する方法について説明します。また、同じチュートリアルとサンプルアプリケーションの Worker ロールバージョンを使用できるため、Worker ロールの開発を Web ジョブ開発と簡単に比較することができます。

  <ul>
   <li>Worker ロールのチュートリアル: <a href="https://azure.microsoft.com/en-us/documentation/articles/cloud-services-dotnet-get-started/">Azure Cloud Services と ASP.NET にはじめに</a>ます。</li>
   <li>web ジョブチュートリアル: <a href="https://azure.microsoft.com/en-us/documentation/articles/websites-dotnet-webjobs-sdk-get-started/">Azure WebJobs SDK を使用したはじめに</a></li>
  </ul>

  &nbsp;


  後で、Web ジョブと Web ジョブ SDK を使用するように、クラウドアプリの作成に関する電子書籍とその修正プログラムを更新します。 その後、変換を自分で試す場合は、基本的に次の手順が必要になります。

  <ul>
   <li><a href="https://code.msdn.microsoft.com/windowsazure/Fix-It-app-for-Building-cdd80df4">修正プログラムのアプリケーションコードをダウンロード</a>します。</li>
   <li>クラウドサービスとワーカーロールのプロジェクトをソリューションから削除します。</li>
   <li>Web ジョブプロジェクトをソリューションに追加します (「 <a href="https://azure.microsoft.com/en-us/documentation/articles/websites-dotnet-deploy-webjobs">How To Deploy web ジョブ</a>」を参照してください)。</li>
   <li>web ジョブ sdk NuGet パッケージを web ジョブプロジェクトに追加します ( <a href="https://azure.microsoft.com/en-us/documentation/articles/websites-dotnet-webjobs-sdk-get-started/">Azure WebJobs SDK のはじめに</a>を参照してください)。</li>
   <li>web ジョブプロジェクト App.config ファイルに SQL 接続文字列と Storage appSettings を追加します。</li>
   <li>FixitTaskRepository で、非非同期バージョンの CreateAsync メソッドを作成します。 (これは、Web ジョブ SDK の現在のベータ0.3.1 リリースで必要です。今後のリリースでは、非同期メソッドを呼び出すことができます)。</li>
   <li>このメソッドが不要になるため、FixItQueueManager のプロセスをコメントアウトします。</li>
   <li>Web ジョブプロジェクトで、次のコードをプログラム .cs に追加します。</li>
  </ul>

  <pre class="prettyprint">class Program

  {
      private static IContainer container;
      private static ILogger logger;
      private static IFixItTaskRepository repository;
      static CancellationTokenSource tokenSource = new CancellationTokenSource();

      static void Main(string[] args)
      {
          Initialize();
          JobHost host = new JobHost();
          host.RunAndBlock();
      }

      private static void Initialize()
      {
          var builder = new ContainerBuilder();
          builder.RegisterType&lt;Logger&gt;().As&lt;ILogger&gt;().SingleInstance();
          builder.RegisterType&lt;FixItTaskRepository&gt;().As&lt;IFixItTaskRepository&gt;().SingleInstance();
          container = builder.Build();
          logger = container.Resolve&lt;ILogger&gt;();
          repository = container.Resolve&lt;IFixItTaskRepository&gt;();
          logger.Information("MyFixIt.WebJob entry point called");
      }
      public static void CreateFixIt([QueueTrigger("fixits")] FixItTask fixit)
      {
          repository.Create(fixit);
      }

  }</pre>

  これは基本的な概念実証コードであり、現在の修正プログラムと同様に、運用アプリで実行する必要があるすべての処理を行いません。たとえば、Web ジョブと Web ジョブ SDK は正常なシャットダウンを処理できますが、このコードではそれを実装していません。 Web ジョブ SDK の利点は、有害なメッセージの処理 (現在のベータバージョン0.3.1 ではなく、将来のバージョンで予定されています) などのコードを記述しなくても、これらのいくつかの処理を行うことです。


  Web ジョブと Web ジョブ SDK の詳細については、「  <a href="https://go.microsoft.com/fwlink/?linkid=390226&amp;clcid=0x409">Azure WebJobs 推奨リソース</a>」を参照してください。
