### YamlMime:Yaml
ms.openlocfilehash: 1a141d9df698a29744716426fa03298469bd9d27
ms.sourcegitcommit: d03bdc7fe5447adb6530886aab848b75fe8fa8ee
ms.translationtype: MT
ms.contentlocale: ja-JP
ms.lasthandoff: 03/11/2022
ms.locfileid: "139908933"
Slug: iot-hub-message-routing-now-with-routing-on-message-body
Title: 'IoT Hub message routing: now with routing on message body (IoT Hub メッセージ ルーティング: メッセージ本文でのルーティングが可能に)'
Summary: IoT Hub本文でメッセージ ルーティングを実行できます。 メッセージ本文に基づいてメッセージをルーティングする機能を要求しているお客様からのフィードバックの多くのおかげで、チームは作業に優先順位を付け、すべてのユーザーが使用できます。
Content: "<p><a href=\"https://docs.microsoft.com/en-us/azure/iot-hub/iot-hub-devguide-messages-d2c\">IoT Hub本文でメッセージ</a> ルーティングを実行できます。 メッセージ本文に&rsquo;基づいてメッセージをルーティングする機能を要求しているお客様からのフィードバックの多くのおかげで、チームは作業に優先順位を付け、すべてのユーザーが使用できます。</p>\n\n<p>12 月に戻り、IoT ソリューション開発を簡略化 <a href=\"https://azure.microsoft.com/en-us/blog/azure-iot-hub-message-routing-enhances-device-telemetry-and-optimizes-iot-infrastructure-resources/\">IoT Hubのメッセージ</a> ルーティングをリリースしました。 メッセージ ルーティングを使用すると、お客様は IoT Hub 自体の顧客定義のクエリに基づいて、異なるサービスにメッセージを自動的にルーティングできます。また、難しい実装アーキテクチャはすべて、お客様が管理します。 メッセージ ルーティングは、最初はメッセージ ヘッダーに基づいて出荷されました。今日は、現在利用可能な JSON メッセージのメッセージ本文に基づいてメッセージをルーティングできます。</p>\n\n<p>&rsquo;ヘッダーに基づくメッセージ ルーティングを使用すると、サービスが流れるテレメトリを開かなくても、カスタム エンドポイントにメッセージをルーティングすることができますが、顧客は、そうでない場合を含め、ヘッダーに情報を追加する必要があり、便利さを妨げるという制限がありました。 多くのお客様は、&rsquo;興味深い情報が既に存在する場所なので、メッセージ本文の内容に基づいて直接ルーティングできる必要があります。 メッセージ本文でのルーティングは直感的であり、メッセージ ルーティングを完全に制御できます。</p>\n\n<p>メッセージ&rsquo;本文に基づいてルーティングする方法は非常に単純です。ルート クエリ$bodyを使用してメッセージ本文にアクセスします。 たとえば、デバイスは C# デバイス SDK を使用して、次のコード例を使用してメッセージを送信します。</p>\n\n<pre class=\"prettyprint\">\nDeviceClient deviceClient = DeviceClient.CreateFromConnectionString(deviceClientConnectionString); \n \nstring messageBody = @&quot;{ \n                            &quot;&quot;Weather&quot;&quot;:{ \n                                &quot;&quot;Temperature&quot;&quot;:50, \n                                &quot;&quot;Time&quot;&quot;:&quot;&quot;2017-03-09T00:00:00.000Z&quot;&quot;, \n                                &quot;&quot;PrevTemperatures&quot;&quot;:[ \n                                    20, \n                                    30, \n                                    40 \n                                ], \n                                &quot;&quot;IsEnabled&quot;&quot;:true, \n                                &quot;&quot;Location&quot;&quot;:{ \n                                    &quot;&quot;Street&quot;&quot;:&quot;&quot;One Microsoft Way&quot;&quot;, \n                                    &quot;&quot;City&quot;&quot;:&quot;&quot;Redmond&quot;&quot;, \n                                    &quot;&quot;State&quot;&quot;:&quot;&quot;WA&quot;&quot; \n                                }, \n                                &quot;&quot;HistoricalData&quot;&quot;:[ \n                                    { \n                                    &quot;&quot;Month&quot;&quot;:&quot;&quot;Feb&quot;&quot;, \n                                    &quot;&quot;Temperature&quot;&quot;:40 \n                                    }, \n                                    { \n                                    &quot;&quot;Month&quot;&quot;:&quot;&quot;Jan&quot;&quot;, \n                                    &quot;&quot;Temperature&quot;&quot;:30 \n                                    } \n                                ] \n                            } \n                        }&quot;; \n \n// Encode message body using UTF-8 \nbyte[] messageBytes = Encoding.UTF8.GetBytes(messageBody); \n \nusing (var message = new Message(messageBytes)) \n{ \n    // Set message body type and content encoding. \n    message.ContentEncoding = &quot;utf-8&quot;; \n    message.ContentType = &quot;application/json&quot;; \n \n    // Add other custom application properties.  \n    message.Properties[&quot;Status&quot;] = &quot;Active&quot;;    \n \n    await deviceClient.SendEventAsync(message); \n}\n</pre>\n\n<p>メッセージの例に示されている情報に基づいてメッセージをルーティングする方法は、さまざまな方法があります。 実行するクエリの種類を次に示します。</p>\n\n<ul>\n    <li>単純な本文のリファレンス <ul>\n        <li>$body。Weather.Temperature = 50</li>\n        <li>$body。Weather.IsEnabled</li>\n        <li>$body.message.Weather.Location.State = wa &#39;WA&#39;</li>\n    </ul>\n    </li>\n    <li>Body 配列リファレンス <ul>\n        <li>$body。Weather.HistoricalData[0]。Month = &#39;Feb&#39;</li>\n    </ul>\n    </li>\n    <li>複数の本文参照 <ul>\n        <li>$body。Weather.Temperature &gt;= $body。Weather.PrevTemperatures[0] + $body。Weather.PrevTemperatures[1]</li>\n        <li>$body。Weather.Temperature = 50 and $body.message.Weather.IsEnabled</li>\n    </ul>\n    </li>\n    <li>組み込み関数と組み合わせる <ul>\n        <li>length($body)。Weather.Location.State) = 2</li>\n        <li>lower($body。Weather.Location.State) = &#39;wa&#39;</li>\n    </ul>\n    </li>\n    <li>メッセージ ヘッダーとの組み合わせ <ul>\n        <li>$body。Weather.Temperature = 50 AND Status = &#39;Active&#39;</li>\n    </ul>\n    </li>\n</ul>\n\n<p>本文のIoT Hub基づいてメッセージをルーティングできるかどうかを確認するには、メッセージの本文の内容とエンコードを記述する特定のヘッダーを含む必要があります。 特に、メッセージ本文でルーティングを機能するには、メッセージに次の両方のヘッダーが必要です。</p>\n\n<ol>\n    <li>&quot;application/json のコンテンツ の種類&quot;</li>\n    <li>コンテンツ のエンコードは、次の 1 つと一致する必要があります。 <ul>\n        <li>&quot;utf-8&quot;</li>\n        <li>&quot;utf-16&quot;</li>\n        <li>&quot;utf-32&quot;</li>\n    </ul>\n    </li>\n</ol>\n\n<p>Azure IoT Device SDK を使用している場合は、メッセージ ヘッダーを必要なプロパティに設定する方法が非常に簡単です。 サード パーティのプロトコル ライブラリを使用している場合は、次の表を使用して、次の表を使用して、各プロトコルでヘッダーがどのようにマニフェストIoT Hubできます。</p>\n\n<table>\n    <tbody>\n        <tr>\n            <td>&nbsp;</td>\n            <td>AMQP</td>\n            <td>HTTP</td>\n            <td>MQTT</td>\n        </tr>\n        <tr>\n            <td>Content type</td>\n            <td>content-type</td>\n            <td>iothub-contenttype</td>\n            <td>$.ct</td>\n        </tr>\n        <tr>\n            <td>コンテンツのエンコード</td>\n            <td>content-encoding</td>\n            <td>iothub-contentencoding</td>\n            <td>$.ce</td>\n        </tr>\n    </tbody>\n</table>\n\n<p>HTTP では、バッチ処理されたメッセージを考慮するカスタム ヘッダーが必要です。今後&rsquo;数か月以内に、バッチ処理されていないメッセージの標準ヘッダーのサポートが追加される予定です。</p>\n\n<p>メッセージ本文に基づいてルーティングするために、メッセージ本文はIoT Hub形式の JSON である必要があります。 メッセージは、コンテンツの種類/コンテンツ エンコードが存在するかどうかに関係なく、メッセージ ヘッダーに基づいてルーティングできます。 コンテンツの種類とコンテンツ のエンコードは、メッセージIoT Hub基づいてルーティングする場合にのみ必要です。</p>\n\n<p>この機能の一部は、メッセージ本文に基づいてメッセージをルーティングする機能を要求するフィードバックが寄せらえ、機能を要求したすべてのユーザーに大きな感謝のメッセージを送信したいと思っています。 いつものように、引き Azure IoT続き User Voice フォーラムを通じてご提案を送信<a href=\"https://feedback.azure.com/forums/321918-azure-iot/\">するか</a>、Azure IoT <a href=\"https://www.yammer.com/azureadvisors/\">Advisors グループYammer参加してください</a>。</p>"
