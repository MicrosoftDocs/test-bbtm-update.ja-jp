### YamlMime:Yaml
ms.openlocfilehash: 56beb50c832e7072f72b7741ccb77aa5503d370f
ms.sourcegitcommit: d03bdc7fe5447adb6530886aab848b75fe8fa8ee
ms.translationtype: MT
ms.contentlocale: ja-JP
ms.lasthandoff: 03/11/2022
ms.locfileid: "139903756"
Slug: announcing-general-availability-of-ios-offline-sync-sdk
Title: iOS オフライン同期 SDK の一般提供の発表
Summary: ほとんどのモバイル アプリは、ネットワーク接続なしでは機能しません。 iOS で Mobile Servicesオフライン同期を使用し、ネットワークが機能しない場合でも動作する応答性と堅牢性の高いアプリを作成する方法について学習します。
Content: "エレベーターに踏み込んだからといって、モバイル アプリが突然動作を停止した場合に、それは気に入らないのでしょうか。また、行き方が不明なゾーンの場合でも、顧客データにすばやくアクセスする必要がある旅行営業担当者である可能性があります。 エンド ユーザーは、ネットワークが機能しない場合でも機能するアプリを望む。 残念ながら、多くのアプリでは、デバイスがオフラインの場合、機能が制限または機能なしになります。主に、同期動作を正しく実装するのが非常に困難です。 デバイスに何をキャッシュする必要がありますか?新しいデータをフェッチする必要がアプリでどのようにわかっているでしょうか。ユーザーがオフラインの間にデータが変更されたが、既にローカル編集を行っている場合は、どうなるでしょうか。\n\nMobile Services同期は、これらの問題を解決するように設計されています。これらの複雑さをすべて処理するクロスプラットフォーム クライアント SDK を使用します。 このMobile Servicesを使用すると、<a href=\"https://azure.microsoft.com/en-us/documentation/articles/mobile-services-ios-get-started-offline-data/\" target=\"_blank\">開発者は iOS</a>、<a href=\"https://azure.microsoft.com/blog/2014/08/07/offline-support-in-azure-mobile-services-android-sdk/\" target=\"_blank\">Android</a>、<a href=\"https://azure.microsoft.com/en-us/documentation/articles/mobile-services-xamarin-ios-get-started-offline-data\" target=\"_blank\">Xamarin</a>、およびアプリ間でネイティブ同期エクスペリエンス<a href=\"https://azure.microsoft.com/en-us/documentation/articles/mobile-services-windows-store-dotnet-get-started-offline-data\" target=\"_blank\">を</a>Windowsできます。\n\n<a href=\"https://go.microsoft.com/fwLink/p/?LinkID=266533\" target=\"_blank\">Mobile Services iOS 2.0 SDK</a> の一般提供を発表し、ネイティブ iOS 用のこれらの新しい同期機能が追加されます。 オフライン同期は、Windows、Xamarin iOS、Xamarin Android 用のマネージド クライアント SDK と、プレビュー Android SDK で既に使用できます。 この機能を使いやすくするために、Azure portalクイックスタートを更新しました。 Objective-C iOS クイックスタートは、Windows、Xamarin iOS、Xamarin Android 用のクイックスタートと共にオフライン対応になっています。\n\nオフライン同期には、次の多くの利点があります。\n<ul>\n    <li>サーバー データをデバイスにローカルでキャッシュすることにより、アプリケーションの応答性を向上させる。</li>\n    <li>一時的なネットワークの問題に対処できる堅牢なアプリを作成する</li>\n    <li>複数のデバイス間でデータを同期させ、同じレコードが 2 つのデバイスによって変更されたときに競合を検出する。</li>\n    <li>データの使用を減らす (特に測定接続の場合)</li>\n</ul>\nアプリがオフライン モードの場合でもユーザーはデータを作成および変更できますが、それらのデータはローカル ストアに保存されます。 アプリがオンラインに戻った場合、ローカルの変更をバックエンドの Mobile Servicesできます。 この機能には、クライアントとバックエンドの両方で同じレコードが変更された場合の競合検出のサポートも含まれています。 検出された競合は、サーバーまたはクライアントのどちらでも処理することができます。 オフライン同期は非常に軽量です。たとえば、バックエンド <em>データベース内</em> のすべてのモバイル クライアントの同期状態を格納する必要はないとします。 Azure Mobile Services を既に使用している場合は、次のチュートリアルに従ってアプリをオフライン対応にできます。\n<ul>\n    <li><a href=\"https://azure.microsoft.com/en-us/documentation/articles/mobile-services-ios-get-started-offline-data\">概要のオフライン データ同期を使用Mobile Services</a></li>\n    <li><a href=\"https://azure.microsoft.com/en-us/documentation/articles/mobile-services-ios-handling-conflicts-offline-data/\">オフライン データ同期との競合を処理する</a></li>\n</ul>\nアプリでコア データを有効にし、アプリ データ オブジェクトと SDK に必要なシステム テーブルの両方の <a href=\"https://azure.microsoft.com/en-us/documentation/articles/mobile-services-ios-get-started-offline-data/#review-core-data\">モデルを定義する必要があります</a>。 アプリの初期化ロジック (iOS クイック スタートの <strong>QSTodoService.init</strong> など) では、モバイル サービスのローカル ストアを作成し、同期コンテキストに関連付ける必要があります。\n<pre class=\"prettyprint\">// create a Mobile Services local store based on the app's Core Data model\nMSCoreDataStore *store = [[MSCoreDataStore alloc] initWithManagedObjectContext:context]; \n\n// associate store with sync context \nself.client.syncContext = \n    [[MSSyncContext alloc] initWithDelegate:nil\n                                 dataSource:store \n                                   callback:nil]; \n        \n// Create an MSSyncTable instance to allow us to work with the TodoItem table\nself.syncTable = [_client syncTableWithName:@\"TodoItem\"];</pre>\nアプリでは、すべての CRUD 操作にこの <strong>MSSyncTable</strong> インスタンス ( <strong>MSTable</strong> ではなく) を使用する必要があります。 読み取りはローカル ストレージからフェッチされ、すべての作成、更新、削除操作がキューに登録され、サーバーに送信されます。 これらのキューに入った変更を送信するには、 <strong>pushWithCompletion メソッドを使用</strong> します。 これは同期コンテキストのメソッドであり、すべての変更を順番に再生します。\n<pre class=\"prettyprint\">[self.client.syncContext pushWithCompletion:^(NSError *error) { ... } ]</pre>\nサーバーから新しい変更を取得するには、 <strong>pullWithQuery メソッドを使用</strong> します。\n<pre class=\"prettyprint\">[self.syncTable pullWithQuery:query \n                      queryId:@\"allTodoItems\" \n                   completion:^(NSError *error) { ... } ]\n</pre>\nプル操作を実行するときに同期テーブルに保留中の変更がある場合、SDK は最初にすべての変更をプッシュします。 増分同期を有効にするには、 <strong>queryID パラメーターを使用</strong> します。 クエリ ID は、プログラム内の各クエリに対して一意である必要がある説明文字列です。これは、SDK によって内部的に使用され、最後に変更されたタイムスタンプを最後のプル操作から格納します。 後続のプル操作では、このタイムスタンプより新しいレコードだけが取得されます。\n\n<strong>pullWithQuery メソッド</strong>を使用すると、デバイスに保存するデータの特定のサブセットを指定することもできます。 クイック スタートの例では、単純なデータ モデルであるすべての Todo 項目が取得されます。 しかし、Todo 項目の重要度を示すフィールドを追加したとします。 その後、アプリは適切なクエリを使用して、重要度の高い項目と通常の重要度の項目のみをプルできます。 ローカル ストアはコア データを使用しています。 <strong>NSF分けResultsController</strong> を使用して、キーと値の監視を使用してビュー コントローラーと統合できます。 iOS クイック スタートでは、テーブル ビューを Core Data マネージド オブジェクト コンテキストに接続することで、この例を示します。 iOS および他のプラットフォームでのオフライン同期の詳細については、次のリソースを参照してください。\n<ul>\n    <li>チュートリアル: 概要<a href=\"https://azure.microsoft.com/en-us/documentation/articles/mobile-services-ios-get-started-offline-data\">データ同期を</a>使用したデータのMobile Services、オフライン データ同期との競合<a href=\"https://azure.microsoft.com/en-us/documentation/articles/mobile-services-ios-handling-conflicts-offline-data/\">の処理</a></li>\n    <li><a href=\"https://channel9.msdn.com/Shows/Cloud+Cover/Episode-155-Offline-Storage-with-Donna-Malayeri\">オフライン同期での Cloud Cover のエピソード</a> (Windows、Xamarin、iOS を表示)</li>\n    <li><a href=\"https://chrisrisner.com/LensRocket-for-iOS-Source-Code-Released\">iOS サンプル アプリ – LensRocket</a></li>\n    <li><a href=\"https://azure.microsoft.com/en-us/documentation/videos/azure-mobile-services-offline-enabled-apps-with-donna-malayeri/\">オフライン同期での Azure Friday の</a>短いビデオ (Windows)</li>\n</ul>"
