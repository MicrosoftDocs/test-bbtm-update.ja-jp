### YamlMime:Yaml
ms.openlocfilehash: 412f14c671d58d7842b7f5b2d7913f226c0d1bea
ms.sourcegitcommit: d03bdc7fe5447adb6530886aab848b75fe8fa8ee
ms.translationtype: MT
ms.contentlocale: ja-JP
ms.lasthandoff: 03/11/2022
ms.locfileid: "139893659"
Slug: an-introduction-to-service-bus-topics
Title: トピックの概要Service Busトピック
Summary: '[この記事は AppFabric チームによって投稿されました。]Service Bus の 5 月の&rsquo; CTP では、reliable... を含むクラウドベースのメッセージ指向ミドルウェア テクノロジの新しいセットが追加されました。'
Content: "<p>[この記事は AppFabric チームによって投稿されました。]</p><p class=\"Publishwithline\">Service Bus の 5 月の CTP では、信頼性の<span style=\"color: black;\">&rsquo;高いメッセージ キューや永続的な発行/サブスクライブ メッセージングを含む、クラウドベースのメッセージ指向ミドルウェア テクノロジの新しいセットが追加されました。先週、ブログ<a href=\"https://blogs.msdn.com/b/appfabric/archive/2011/05/17/an-introduction-to-service-bus-queues.aspx\">記事「Service Bus キューの概要」</a>を投稿しました。この投稿では、その後に続き、トピックで提供される発行/サブスクライブ機能の概要Service Busします。ここでも、&rsquo;この記事のすべての機能については取り上しません。新しい機能を使い始めるのに十分な情報を提供したいと思います。詳細&rsquo;の一部を詳しくは、フォローアップ投稿をご覧ください。</span></p>  <p class=\"MsoNormal\"><span style=\"color: black;\"><br>キュー&rsquo;のブログ投稿で開始した小売シナリオを <a href=\"https://blogs.msdn.com/b/appfabric/archive/2011/05/17/an-introduction-to-service-bus-queues.aspx\">続行します</a>。 個々の </span>販売時点管理 (POS) ターミナルからの販売データは、在庫管理システムにルーティングする必要があります。このシステムでは、在庫を補充する必要がある場合に、そのデータを使用して判断します。 各 POS ターミナルは、次に示すように、在庫管理システムによって受信されるまで、DataCollectionQueue にメッセージを送信して売上データを報告します。</p>  <p class=\"MsoNormal\"><a href=\"\"><img src=\"https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/7853.t1.GIF\" border=\"0\"></a></p>  <p class=\"MsoNormal\">次に、&rsquo;このシナリオを進化させしましょう。 新しい要件がシステムに追加されました。ストア所有者は、ストアのパフォーマンスをリアルタイムで監視できる必要があります。 </p>  <p class=\"MsoNormal\"><br>この要件に対処するには、売上データ ストリームを &ldquo;タップ&rdquo; する必要があります。 POS ターミナルによって送信された各メッセージを以前と同様にインベントリ管理システムに送信する必要がありますが、各メッセージの別のコピーを使用して、ダッシュボード ビューをストア所有者に表示します。</p>  <p class=\"MsoNormal\"><br>このような状況では、各メッセージを複数のパーティで使用する必要がある場合は、トピックのService Bus必要です。 トピックは、発行/サブスクライブ パターンを提供します。このパターンでは、発行された各メッセージが、トピックに登録されている各サブスクリプションで使用できます。 これは、各メッセージが 1 つのコンシューマーによって使用されるキューと対照的です。 これは&rsquo;、2 つのモデルの主な違いです。 </p>  <p class=\"MsoNormal\"><br>メッセージはキュー&rsquo;に送信されるのとまったく同じ方法でトピックに送信されますが、メッセージはトピックから直接受信されるのではなく、サブスクリプションから受信されます。 トピック サブスクリプションは、トピックに送信されるメッセージのコピーを取得する仮想キューのように考えて使用できます。 メッセージは、キューから受信した場合とまったく同じ方法でサブスクリプションから受信されます。</p>  <p class=\"MsoNormal\"><br>そのため、シナリオに戻って最初に行う必要があるのは、トピックのキューを切り替えて、インベントリ管理システムで使用されるサブスクリプションを追加する方法です。 そのため、システムは次のように表示されます。</p>  <p class=\"MsoNormal\"><a href=\"\"><img src=\"https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/8546.t2.GIF\" border=\"0\"></a></p>  <p class=\"MsoNormal\">上記の構成は、前のキュー ベースの設計と同じ動作をします。 つまり、トピックに送信されたメッセージは、インベントリ管理システムが使用するインベントリ サブスクリプションにルーティングされます。</p>  <p class=\"MsoNormal\"><br>次に、管理ダッシュボードをサポートするには、次に示すように、トピックに 2 つ目のサブスクリプションを作成する必要があります。</p>  <p class=\"MsoNormal\"><a href=\"\"><img src=\"https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/6758.t3.GIF\" border=\"0\"></a></p>  <p class=\"MsoNormal\"><br>上記の構成では、POS ターミナルからの各メッセージがダッシュボードサブスクリプションとインベントリ サブスクリプションの両方で使用できます。</p>  <h2 class=\"WordSection1\"><br>コードについて</h2>  <p class=\"MsoNormal\">Service Bus アカウントにサインアップし、キューのブログ記事で名前空間を作成する方法について説明しました。<a href=\"https://blogs.msdn.com/b/appfabric/archive/2011/05/17/an-introduction-to-service-bus-queues.aspx\"></a>ここではもう一度説明しません。&rsquo; Service Bus 名前空間を使用するには、アプリケーションで AppFabric Service Bus DLL (つまり、Microsoft.ServiceBus.dll と Microsoft.ServiceBus.Messaging.dll) を参照する必要があります。 これらは SDK のダウンロードの一部として確認できます。</p>  <h3 class=\"WordSection1\"><br>トピックとサブスクリプションの作成</h3>  <p class=\"WordSection1\" style=\"margin: 2.15pt 0in 0pt;\">Service Bus メッセージング エンティティ (キューとトピック) の管理操作は、serviceBusNamespaceClient を介して実行されます。これは、Service Bus 名前空間のベース アドレスとユーザー資格情報を使用して構築されます。 ServiceBusNamespaceClient には、メッセージング エンティティを作成、列挙、および削除するメソッドが用意されています。 次のスニペットは、ServiceBusNamespaceClient を使用して DataCollectionTopic を作成する方法を示しています。</p>  <p class=\"WordSection1\" style=\"margin: 2.15pt 0in 0pt;\">&nbsp;</p>  <p class=\"MsoNormal\" style=\"margin-bottom: 0pt;\"><span style=\"font-family: consolas; color: black; font-size: 8pt;\">&nbsp;&nbsp;&nbsp; </span><span style=\"font-family: consolas; color: blue; font-size: 8pt;\">Uri</span><span style=\"font-family: consolas; color: black; font-size: 8pt;\"> </span><span style=\"font-family: consolas; color: #2b91af; font-size: 8pt;\">ServiceBusEnvironment</span><span style=\"font-family: consolas; font-size: 8pt;\">。CreateServiceUri(<span style=\"color: #a31515;\">\"sb\"</span>, <span style=\"color: #a31515;\">\"のブログ\"</span>, <span style=\"color: blue;\">文字列</span>。空);</span></p>  <p class=\"WordSection1\" style=\"margin: 2.15pt 0in 0pt;\"><span style=\"font-family: consolas; color: black; font-size: 8pt;\">&nbsp;&nbsp;&nbsp; </span><span style=\"font-family: consolas; color: blue; font-size: 8pt;\">string</span><span style=\"font-family: consolas; color: black; font-size: 8pt;\"> name = </span><span style=\"font-family: consolas; color: #a31515; font-size: 8pt;\">\"owner\"</span><span style=\"font-family: consolas; color: black; font-size: 8pt;\">;</span></p>  <p class=\"WordSection1\" style=\"margin: 2.15pt 0in 0pt;\"><span style=\"font-family: consolas; color: black; font-size: 8pt;\">&nbsp;&nbsp;&nbsp; </span><span style=\"font-family: consolas; color: blue; font-size: 8pt;\">string</span><span style=\"font-family: consolas; color: black; font-size: 8pt;\"> key = </span><span style=\"font-family: consolas; color: #a31515; font-size: 8pt;\">\"abcdefghijklmopqrstuvwxyz\"</span><span style=\"font-family: consolas; color: black; font-size: 8pt;\">;</span></p>  <p class=\"WordSection1\" style=\"margin: 2.15pt 0in 0pt;\"><span style=\"font-family: consolas; color: black; font-size: 8pt;\">&nbsp;&nbsp; </span></p>  <p class=\"WordSection1\" style=\"margin: 2.15pt 0in 0pt;\"><span style=\"font-family: consolas; color: black; font-size: 8pt;\">&nbsp;&nbsp;&nbsp; </span><span style=\"font-family: consolas; color: #2b91af; font-size: 8pt;\">ServiceBusNamespaceClient</span><span style=\"font-family: consolas; color: black; font-size: 8pt;\"> namespaceClient = </span><span style=\"font-family: consolas; color: blue; font-size: 8pt;\">new</span><span style=\"font-family: consolas; color: black; font-size: 8pt;\"> </span><span style=\"font-family: consolas; color: #2b91af; font-size: 8pt;\">ServiceBusNamespaceClient</span><span style=\"font-family: consolas; color: black; font-size: 8pt;\">(</span></p>  <p class=\"WordSection1\" style=\"margin: 2.15pt 0in 0pt;\"><span style=\"font-family: consolas; color: black; font-size: 8pt;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;baseAddress、</span><span style=\"font-family: consolas; color: #2b91af; font-size: 8pt;\">TransportClientCredentialBase</span><span style=\"font-family: consolas; color: black; font-size: 8pt;\">。CreateSharedSecretCredential(name, key) );</span></p>  <p class=\"WordSection1\" style=\"margin: 2.15pt 0in 0pt;\"><span style=\"font-family: consolas; color: black; font-size: 8pt;\">&nbsp;</span></p>  <div class=\"WordSection1\">  <pre style=\"background: white;\"><span style=\"font-family: consolas; color: black; font-size: 8pt;\">&nbsp;&nbsp;&nbsp; </span><span style=\"font-family: consolas; color: #2b91af; font-size: 8pt;\">Topic</span><span style=\"font-family: consolas; color: black; font-size: 8pt;\"> dataCollectionTopic = </span><span style=\"font-family: consolas; color: black; font-size: 8pt;\">namespaceClient.CreateTopic(</span><span style=\"font-family: consolas; color: #a31515; font-size: 8pt;\">\"DataCollectionTopic\"</span><span style=\"font-family: consolas; color: black; font-size: 8pt;\">);</span></pre>  </div>  <div class=\"WordSection1\">  <pre style=\"background: white;\"><span style=\"font-family: consolas; color: black; font-size: 8pt;\">&nbsp;</span></pre>  </div>  <p class=\"MsoNormal\">たとえば、トピックに送信されるメッセージに適用される既定の Time-to-Live を設定するために、トピックのプロパティを調整できる CreateTopic メソッドのオーバーロードがあります。 次に、インベントリ&rsquo;サブスクリプションとダッシュボード サブスクリプションを追加します。</p>  <div class=\"WordSection1\">  <pre style=\"background: white;\"><span style=\"font-family: consolas; color: black; font-size: 8pt;\">&nbsp;&nbsp;&nbsp; dataCollectionTopic.AddSubscription(</span><span style=\"font-family: consolas; color: #a31515; font-size: 8pt;\">\"Inventory\"</span><span style=\"font-family: consolas; color: black; font-size: 8pt;\">);</span></pre>  </div>  <div class=\"WordSection1\">  <pre style=\"background: white;\"><span style=\"font-family: consolas; color: black; font-size: 8pt;\">&nbsp;&nbsp;&nbsp; dataCollectionTopic.AddSubscription(</span><span style=\"font-family: consolas; color: #a31515; font-size: 8pt;\">\"Dashboard\"</span><span style=\"font-family: consolas; color: black; font-size: 8pt;\">);</span></pre>  </div>  <div class=\"WordSection1\">  <pre style=\"background: white;\"><span style=\"font-family: consolas; color: black; font-size: 8pt;\">&nbsp;</span></pre>  </div>  <h3 class=\"WordSection1\">トピックへのメッセージの送信</h3>  <p class=\"MsoNormal\">前に説明したように、アプリケーションはキューに送信するのと同じ方法でトピックにメッセージを送信します。キューのブログ記事を読んだ場合、以下のコードは非常に使い慣れたもの<a href=\"https://blogs.msdn.com/b/appfabric/archive/2011/05/17/an-introduction-to-service-bus-queues.aspx\">になります。</a> 違いは、アプリケーションが QueueClient ではなく TopicClient を作成する点です。</p>  <p class=\"MsoNormal\"><br>メッセージの送受信Service Busエンティティに対するランタイム操作の場合、アプリケーションはまず MessagingFactory を作成する必要があります。 ServiceBus 名前空間のベース アドレスとユーザー資格情報が必要です。 </p>  <p class=\"MsoNormal\" style=\"margin-bottom: 0pt;\"><span style=\"font-family: consolas; color: black; font-size: 8pt;\">&nbsp;&nbsp;&nbsp; </span><span style=\"font-family: consolas; color: blue; font-size: 8pt;\">Uri</span><span style=\"font-family: consolas; color: black; font-size: 8pt;\"> </span><span style=\"font-family: consolas; color: #2b91af; font-size: 8pt;\">ServiceBusEnvironment</span><span style=\"font-family: consolas; font-size: 8pt;\">。CreateServiceUri(<span style=\"color: #a31515;\">\"sb\"</span>, <span style=\"color: #a31515;\">\"のブログ\"</span>, <span style=\"color: blue;\">文字列</span>。空);</span></p>  <p class=\"WordSection1\" style=\"margin: 2.15pt 0in 0pt;\"><span style=\"font-family: consolas; color: black; font-size: 8pt;\">&nbsp;&nbsp;&nbsp; </span><span style=\"font-family: consolas; color: blue; font-size: 8pt;\">string</span><span style=\"font-family: consolas; color: black; font-size: 8pt;\"> name = </span><span style=\"font-family: consolas; color: #a31515; font-size: 8pt;\">\"owner\"</span><span style=\"font-family: consolas; color: black; font-size: 8pt;\">;</span></p>  <p class=\"WordSection1\" style=\"margin: 2.15pt 0in 0pt;\"><span style=\"font-family: consolas; color: black; font-size: 8pt;\">&nbsp;&nbsp;&nbsp; </span><span style=\"font-family: consolas; color: blue; font-size: 8pt;\">string</span><span style=\"font-family: consolas; color: black; font-size: 8pt;\"> key = </span><span style=\"font-family: consolas; color: #a31515; font-size: 8pt;\">\"abcdefghijklmopqrstuvwxyz\"</span><span style=\"font-family: consolas; color: black; font-size: 8pt;\">;</span></p>  <p class=\"WordSection1\" style=\"margin: 2.15pt 0in 0pt;\"><span style=\"font-family: consolas; color: #2b91af; font-size: 8pt;\">&nbsp;</span></p>  <p class=\"WordSection1\" style=\"margin: 2.15pt 0in 0pt;\"><span style=\"font-family: consolas; color: #2b91af; font-size: 8pt;\">&nbsp;&nbsp;&nbsp; MessagingFactory</span><span style=\"font-family: consolas; color: black; font-size: 8pt;\"> ファクトリ = </span><span style=\"font-family: consolas; color: #2b91af; font-size: 8pt;\">MessagingFactory</span><span style=\"font-family: consolas; color: black; font-size: 8pt;\">。Create(</span></p>  <p class=\"WordSection1\" style=\"margin: 2.15pt 0in 0pt;\"><span style=\"font-family: consolas; color: black; font-size: 8pt;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;baseAddress、</span><span style=\"font-family: consolas; color: #2b91af; font-size: 8pt;\">TransportClientCredentialBase</span><span style=\"font-family: consolas; color: black; font-size: 8pt;\">。CreateSharedSecretCredential(name, key) );</span></p>  <p class=\"WordSection1\" style=\"margin: 2.15pt 0in 0pt;\"><span style=\"font-size: 8pt;\">&nbsp;</span></p>  <p class=\"WordSection1\" style=\"margin: 2.15pt 0in 0pt;\">ファクトリから、関心のある特定のトピック (この例では DataCollectionTopic) に対して TopicClient が作成されます。</p>  <p class=\"WordSection1\" style=\"margin: 2.15pt 0in 0pt;\"><span style=\"font-family: consolas; color: #2b91af; font-size: 8pt;\">&nbsp;</span></p>  <p class=\"WordSection1\" style=\"margin: 2.15pt 0in 0pt;\"><span style=\"font-family: consolas; color: #2b91af; font-size: 8pt;\">&nbsp;&nbsp;&nbsp; TopicClient</span><span style=\"font-family: consolas; color: black; font-size: 8pt;\"> topicClient = factory。CreateTopicClient(</span><span style=\"font-family: consolas; color: #a31515; font-size: 8pt;\">\"DataCollectionTopic\"</span><span style=\"font-family: consolas; color: black; font-size: 8pt;\">);</span></p>  <p class=\"WordSection1\" style=\"margin: 2.15pt 0in 0pt;\"><span style=\"font-size: 8pt;\">&nbsp;</span></p>  <p class=\"WordSection1\" style=\"margin: 2.15pt 0in 0pt;\">MessageSender は、送信操作を実行するために TopicClient から作成されます。</p>  <p class=\"WordSection1\" style=\"margin: 2.15pt 0in 0pt;\"><span style=\"font-family: consolas; color: #2b91af; font-size: 8pt;\">&nbsp;</span></p>  <p class=\"WordSection1\" style=\"margin: 2.15pt 0in 0pt;\"><span style=\"font-family: consolas; color: #2b91af; font-size: 8pt;\">&nbsp;&nbsp;&nbsp; MessageSender</span><span style=\"font-family: consolas; color: black; font-size: 8pt;\"> ms = topicClient.CreateSender();</span></p>  <p class=\"WordSection1\" style=\"margin: 2.15pt 0in 0pt;\"><span style=\"font-family: consolas; color: black; font-size: 8pt;\">&nbsp;</span></p>  <p class=\"WordSection1\" style=\"margin: 2.15pt 0in 0pt;\">Service Bus トピック (およびキュー) との間で送信および受信されるメッセージは BrokeredMessage クラスのインスタンスであり、一連の標準プロパティ (Label や TimeToLive など)、アプリケーション のプロパティを保持するために使用されるディクショナリ、および任意のアプリケーション データの本体で構成されます。 アプリケーションは、シリアル化可能なオブジェクトを CreateMessage に渡して本文を設定できます (次の例では、POS ターミナルからの売上データを表す SalesData オブジェクトを渡します)。このオブジェクトは、DataContractSerializer を使用してオブジェクトをシリアル化します。 この方法に代わって、System.IO.Stream を使用できます。</p>  <p class=\"WordSection1\" style=\"margin: 2.15pt 0in 0pt;\"><span style=\"font-family: consolas; color: green; font-size: 8pt;\">&nbsp;</span></p>  <p class=\"WordSection1\" style=\"margin: 2.15pt 0in 0pt;\"><span style=\"font-family: consolas; color: #2b91af; font-size: 8pt;\">&nbsp;&nbsp;&nbsp; BrokeredMessage</span><span style=\"font-family: consolas; color: black; font-size: 8pt;\"> bm = </span><span style=\"font-family: consolas; color: #2b91af; font-size: 8pt;\">BrokeredMessage</span><span style=\"font-family: consolas; color: black; font-size: 8pt;\">。CreateMessage(salesData);</span></p>  <p class=\"WordSection1\" style=\"margin: 2.15pt 0in 0pt;\"><span style=\"font-family: consolas; color: black; font-size: 8pt;\">&nbsp;&nbsp;&nbsp; Bm。Label = </span><span style=\"font-family: consolas; color: #a31515; font-size: 8pt;\">\"SalesReport\"</span><span style=\"font-family: consolas; color: black; font-size: 8pt;\">;</span></p>  <p class=\"WordSection1\" style=\"margin: 2.15pt 0in 0pt;\"><span style=\"font-family: consolas; color: black; font-size: 8pt;\">&nbsp;&nbsp;&nbsp; Bm。Properties[</span><span style=\"font-family: consolas; color: #a31515; font-size: 8pt;\">\"StoreName\"</span><span style=\"font-family: consolas; color: black; font-size: 8pt;\">] = </span><span style=\"font-family: consolas; color: #a31515; font-size: 8pt;\">\"Redmond\"</span><span style=\"font-family: consolas; color: black; font-size: 8pt;\">;</span></p>  <p class=\"WordSection1\" style=\"margin: 2.15pt 0in 0pt;\"><span style=\"font-family: consolas; color: black; font-size: 8pt;\">&nbsp;&nbsp;&nbsp; Bm。Properties[</span><span style=\"font-family: consolas; color: #a31515; font-size: 8pt;\">\"MachineID\"</span><span style=\"font-family: consolas; color: black; font-size: 8pt;\">] = </span><span style=\"font-family: consolas; color: #a31515; font-size: 8pt;\">\"POS_1\"</span><span style=\"font-family: consolas; color: black; font-size: 8pt;\">;</span></p>  <p class=\"WordSection1\" style=\"margin: 2.15pt 0in 0pt;\"><span style=\"font-family: consolas; color: black; font-size: 8pt;\">&nbsp;</span></p>  <p class=\"WordSection1\" style=\"margin: 2.15pt 0in 0pt;\"><span style=\"font-family: consolas; color: black; font-size: 8pt;\">&nbsp;&nbsp;&nbsp; さん。Send(bm);</span></p>  <h3 class=\"WordSection1\"><br>サブスクリプションからのメッセージの受信</h3>  <p class=\"MsoNormal\">キューを使用する場合と同様に、メッセージは MessageReceiver を使用してサブスクリプションから受信されます。 違いは、MessageReceiver が QueueClient ではなく SubscriptionClient から作成される点です。 キューのブログ記事で説明した 2 つの異なる受信モード (ReceiveAndDelete と PeekLock) のサポートを含め、他のすべてが変 <a href=\"https://blogs.msdn.com/b/appfabric/archive/2011/05/17/an-introduction-to-service-bus-queues.aspx\">わりません</a>。</p>  <p class=\"MsoNormal\"><br>そのため、最初に SubscriptionClient を作成し、トピックの名前とサブスクリプションの名前をパラメーターとして渡します。 ここでは、インベントリ&rsquo; サブスクリプションを使用しています。</p>  <div class=\"WordSection1\">  <pre style=\"background: white;\"><span style=\"font-family: consolas; color: #2b91af; font-size: 8pt;\">&nbsp;&nbsp;&nbsp; SubscriptionClient</span><span style=\"font-family: consolas; color: black; font-size: 8pt;\"> subClient = factory.CreateSubscriptionClient(</span><span style=\"font-family: consolas; color: #a31515; font-size: 8pt;\">\"DataCollectionTopic\"</span><span style=\"font-family: consolas; color: black; font-size: 8pt;\">, </span><span style=\"font-family: consolas; color: #a31515; font-size: 8pt;\">\"Inventory\"</span><span style=\"font-family: consolas; color: black; font-size: 8pt;\">);</span></pre>  </div>  <div class=\"WordSection1\">  <pre style=\"background: white;\"><span style=\"font-family: consolas; color: black; font-size: 8pt;\">&nbsp;</span></pre>  </div>  <p class=\"MsoNormal\">次に、MessageReceiver を作成し、メッセージを受信します。</p>  <p class=\"WordSection1\" style=\"margin: 2.15pt 0in 0pt;\"><span style=\"font-family: consolas; color: black; font-size: 8pt;\">&nbsp;&nbsp;&nbsp; </span><span style=\"font-family: consolas; color: #2b91af; font-size: 8pt;\">MessageReceiver</span><span style=\"font-family: consolas; color: black; font-size: 8pt;\"> mr = subClient.CreateReceiver();</span></p>  <p class=\"WordSection1\" style=\"margin: 2.15pt 0in 0pt;\"><span style=\"font-family: consolas; color: black; font-size: 8pt;\">&nbsp;&nbsp;&nbsp; </span><span style=\"font-family: consolas; color: #2b91af; font-size: 8pt;\">BrokeredMessage</span><span style=\"font-family: consolas; color: black; font-size: 8pt;\"> receivedMessage = mr.Receive();</span></p>  <p class=\"WordSection1\" style=\"margin: 2.15pt 0in 0pt;\"><span style=\"font-family: consolas; color: black; font-size: 8pt;\">&nbsp;&nbsp;&nbsp; </span><span style=\"font-family: consolas; color: blue; font-size: 8pt;\">try</span></p>  <p class=\"WordSection1\" style=\"margin: 2.15pt 0in 0pt;\"><span style=\"font-family: consolas; color: black; font-size: 8pt;\">&nbsp;&nbsp;&nbsp; {</span></p>  <p class=\"WordSection1\" style=\"margin: 2.15pt 0in 0pt;\"><span style=\"font-family: consolas; color: black; font-size: 8pt;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ProcessMessage(receivedMessage);</span></p>  <p class=\"WordSection1\" style=\"margin: 2.15pt 0in 0pt;\"><span style=\"font-family: consolas; color: black; font-size: 8pt;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; receivedMessage.Complete();</span></p>  <p class=\"WordSection1\" style=\"margin: 2.15pt 0in 0pt;\"><span style=\"font-family: consolas; color: black; font-size: 8pt;\">&nbsp;&nbsp;&nbsp; }</span></p>  <p class=\"WordSection1\" style=\"margin: 2.15pt 0in 0pt;\"><span style=\"font-family: consolas; color: black; font-size: 8pt;\">&nbsp;&nbsp;&nbsp; </span><span style=\"font-family: consolas; color: blue; font-size: 8pt;\">catch</span><span style=\"font-family: consolas; color: black; font-size: 8pt;\"> (</span><span style=\"font-family: consolas; color: #2b91af; font-size: 8pt;\">例外</span><span style=\"font-family: consolas; color: black; font-size: 8pt;\"> e)</span></p>  <p class=\"WordSection1\" style=\"margin: 2.15pt 0in 0pt;\"><span style=\"font-family: consolas; color: black; font-size: 8pt;\">&nbsp;&nbsp;&nbsp; {</span></p>  <p class=\"WordSection1\" style=\"margin: 2.15pt 0in 0pt;\"><span style=\"font-family: consolas; color: black; font-size: 8pt;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; receivedMessage.Abandon();</span></p>  <p class=\"WordSection1\" style=\"margin: 2.15pt 0in 0pt;\"><span style=\"font-family: consolas; color: black; font-size: 8pt;\">&nbsp;&nbsp;&nbsp; }</span></p>  <h2 class=\"WordSection1\"><br>サブスクリプション フィルター</h2>  <p class=\"MsoNormal\">ここまで、トピックに&rsquo;送信されたメッセージはすべて、登録されているサブスクリプションすべてで使用できると述べています。 そこで使用できるキー &ldquo;フレーズ&rdquo;。 Service Bus のサブスクリプションには、トピックに送信されたすべてのメッセージが表示されますが、仮想サブスクリプション キューにコピーできるのは、これらのメッセージの一部のみです。 これは、サブスクリプション フィルターを使用して行われます。 &rsquo;サブスクリプションが作成されると、システム プロパティ (Label など) とアプリケーション プロパティ (上の例では StoreName など) の両方を操作できる SQL92 スタイル述語の形式でフィルター式を指定できます。</p>  <p class=\"MsoNormal\"><br>これを&rsquo;説明するために、シナリオを少し進化させしましょう。 2 つ目のストアは、小売シナリオに追加されます。 両方の店舗のすべての POS ターミナルの売上データは、一元化された在庫管理システムにルーティングする必要がありますが、ダッシュボード ツールを使用するストア マネージャーは、自分のストアのパフォーマンスにのみ関心があります。 これを実現するには、サブスクリプションのフィルター処理を使用できます。 POS ターミナルがメッセージをパブリッシュするときは、メッセージで StoreName アプリケーション プロパティを設定します。 &rsquo;ここでは、Redmond と Seattle という 2 つのストアがあります。Redmond ストアの POS ターミナルでは、Redmond の StoreName を使用して売上データ メッセージにスタンプを付け、シアトルのストア POS ターミナルでは StoreName を使用します。 Redmond ストアのストア マネージャーは、POS ターミナルからのデータのみを表示する必要があります。 システム&rsquo;の外観を次に示します。</p>  <p class=\"MsoNormal\"><a href=\"\"><img src=\"https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/4628.t4.GIF\" border=\"0\"></a></p>  <p class=\"MsoNormal\">このルーティングを設定するには、次&rsquo;のようにダッシュボード サブスクリプションを作成する方法を簡単に変更する必要があります。</p>  <div class=\"WordSection1\">  <pre style=\"background: white;\"><span style=\"font-family: consolas; color: #2b91af;\">&nbsp;&nbsp;&nbsp; </span><span style=\"font-family: consolas; color: black; font-size: 8pt;\">dataCollectionTopic.AddSubscription(</span><span style=\"font-family: consolas; color: #a31515; font-size: 8pt;\">\"Dashboard\"</span><span style=\"font-family: consolas; color: black; font-size: 8pt;\">, </span><span style=\"font-family: consolas; color: blue; font-size: 8pt;\">new</span><span style=\"font-family: consolas; color: black; font-size: 8pt;\">&nbsp;</span><span style=\"font-family: consolas; color: #2b91af; font-size: 8pt;\">SqlFilterExpression</span><span style=\"font-family: consolas; color: black; font-size: 8pt;\">(</span><span style=\"font-family: consolas; color: #a31515; font-size: 8pt;\">\"StoreName = 'Redmond'\"</span><span style=\"font-family: consolas; color: black; font-size: 8pt;\">);</span></pre>  </div>  <div class=\"WordSection1\">  <pre style=\"background: white;\"><span style=\"font-family: consolas; color: black; font-size: 8pt;\">&nbsp;</span></pre>  </div>  <p class=\"MsoNormal\">このサブスクリプション フィルターを設定すると、StoreName プロパティが Redmond に設定されたメッセージだけが、ダッシュボード サブスクリプションの仮想キューにコピーされます。</p>  <p class=\"MsoNormal\"><br>サブスクリプションのフィルター処理に関して、より重要な説明があります。 アプリケーションには、サブスクリプション&rsquo;&rsquo;ごとに複数のフィルター ルールを設定するオプションと、サブスクリプション仮想キューに渡されるメッセージのプロパティを変更する機能があります。 これらの&rsquo;高度なトピックについては、別のブログ記事で説明します。</p>  <h2 class=\"WordSection1\"><br>まとめ</h2>  <p class=\"MsoNormal\">この投稿では、新しい 5 月の CTP で導入されるトピックベースの発行/サブスクライブ機能を開始する方法を示Service Bus。</p>  <p class=\"MsoNormal\"><br>キュー&rsquo;の概要に関するブログ記事で説明したキューを使用する理由はすべて、トピック (つまり、<a href=\"https://blogs.msdn.com/b/appfabric/archive/2011/05/17/an-introduction-to-service-bus-queues.aspx\"></a></p>  <ul>  <li>  <div class=\"MsoNormal\">一時的な切り &ndash; 離しメッセージ プロデューサーとコンシューマーは、同時にオンラインである必要があります。</div>  </li>  <li>  <div class=\"MsoNormal\">負荷の負荷のレベル &ndash; のピークは、ピーク時の負荷ではなく、平均負荷に対して消費するアプリケーションをプロビジョニングできるように、トピックによってスムージングされます。</div>  </li>  <li>  <div class=\"MsoNormal\">キューと&ndash;&rsquo;同様に負荷分散を行う場合、競合する複数のコンシューマーが 1 つのサブスクリプションでリッスンし、各メッセージが 1 つのコンシューマーにのみ渡され、負荷分散が行える可能性があります。</div>  </li>  <li>  <div class=\"MsoNormal\">疎結合 &ndash; では&rsquo;、既存のエンドポイントに影響を与えることなくメッセージング ネットワークを進化させる可能性があります。新しいコンシューマーに対応するためにサブスクリプションを追加したり、トピックにフィルターを変更したりします。</div>  </li>  </ul>  <p class=\"MsoNormal\">ここでは&rsquo;実際に表面を引っ込んだだけで、今後&rsquo;の投稿でさらに詳しい情報を得る予定です。</p>  <p class=\"MsoNormal\"><br>最後に、CTP リリースの主な目標の 1 つは、サービスに関するフィードバックを得るという点を思い出してください。 メッセージング&rsquo;機能に関するご意見Service Busご意見をお聞かしいと思います。 特&rsquo;に、API に関するご意見を得る必要があります。 そのため、提案、書き込み、称賛、または質問がある場合は、 でお知らせください <a href=\"https://social.msdn.microsoft.com/Forums/en-US/appfabricctp/\">https://social.msdn.microsoft.com/Forums/en-US/appfabricctp/</a>。 フィードバックは、お客様や他のユーザーのサービスの改善に役立ちます。 </p>"
