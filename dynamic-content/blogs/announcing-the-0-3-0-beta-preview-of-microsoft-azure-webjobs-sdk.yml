### YamlMime:Yaml
ms.openlocfilehash: 968474dd39d0fcfbc8be87b2c6f95dd8f2691a14
ms.sourcegitcommit: d03bdc7fe5447adb6530886aab848b75fe8fa8ee
ms.translationtype: MT
ms.contentlocale: ja-JP
ms.lasthandoff: 03/11/2022
ms.locfileid: "139890899"
Slug: announcing-the-0-3-0-beta-preview-of-microsoft-azure-webjobs-sdk
Title: Microsoft Azure web ジョブ SDK の v0.3.0-ベータプレビューの発表
Summary: この web ジョブ SDK のプレビューでは、Service Bus およびその他多数の新機能のサポートが追加されています。
Content: "<a href=\"https://www.hanselman.com/blog/IntroducingWindowsAzureWebJobs.aspx\">ここで</a>は、Scott web ジョブによって導入された Microsoft Azure SDK の別のプレビューをリリースします。 前のプレビューの詳細については、こちらの <a href=\"https://blogs.msdn.com/b/webdev/archive/2014/03/27/announcing-0-2-0-alpha2-preview-of-windows-azure-webjobs-sdk.aspx\">投稿</a>をご覧ください。\n\nこのリリースには、alpha2 と同じ一般的な機能セットと、新機能が含まれています。\n<h3>このリリースのダウンロード</h3>\nweb ジョブ SDK は NuGet ギャラリーからダウンロードできます。 これらのパッケージは、次のように NuGet パッケージマネージャーコンソールを使用して NuGet ギャラリーでインストールまたは更新できます。\n<pre class=\"prettyprint\">Install-Package Microsoft.Azure.Jobs –Pre</pre>\nMicrosoft Azure Service Bus トリガーを使用する場合は、次のパッケージをインストールします。\n<pre class=\"prettyprint\">Install-Package Microsoft.Azure.Jobs.ServiceBus -Pre</pre>\nパッケージ名は alpha2 から変更されているため、alpha2 – beta からの更新に役立つリダイレクトパッケージがアップロードされました。\n<pre class=\"prettyprint\">Update-Package Microsoft.WindowsAzure.Jobs –Pre\nUpdate-Package Microsoft.WindowsAzure.Jobs.Host –Pre</pre>\n&nbsp;\n<h3>Web ジョブ SDK とは</h3>\nMicrosoft Azure web サイトの<a href=\"https://azure.microsoft.com/en-us/documentation/articles/web-sites-create-web-jobs/\">web ジョブ</a>機能により、web サイトでサービスやバックグラウンドタスクなどのプログラムを簡単に実行できるようになります。 <i>.exe</i>、 <i>.cmd</i>、 <i>.bat</i>ファイルなどの実行可能ファイルを web サイトにアップロードして実行できます。 これらは、トリガーまたは連続 Web ジョブとして実行できます。 Web ジョブ SDK を使用しない場合、バックグラウンドタスクを接続して実行するには、複雑なプログラミングが必要です。 SDK には、最小限のコードを記述して一般的なタスクを実行できるフレームワークが用意されています。\n\nweb ジョブ SDK には、Microsoft Azure Storage の blob、キュー、テーブル、Service Bus で動作するバインドとトリガーシステムがあります。 バインディングシステムを使用すると、Microsoft Azure Storage オブジェクトの読み取りまたは書き込みを行うコードを簡単に記述できます。 トリガーシステムは、キューまたは blob で新しいデータを受信するたびに、コード内の関数を呼び出します。\n<h4>Web ジョブ SDK のシナリオ</h4>\nここでは、Azure Web ジョブ SDK を使用してより簡単に処理できる標準的なシナリオをいくつか取り上げます。\n<ul>\n<ul>\n <li>\n<div><b>画像処理</b> または CPU を集中的に使用する作業。</div></li>\n <li>\n<div>電子メールの送信など、バックグラウンドスレッドで実行する実行 <b>時間の長いタスク</b> 。 これまでは、アプリがしばらくの間アイドル状態になった場合、IIS はアプリをリサイクルするため、ASP.NET でこれを行うことができませんでした。 Azure Websites の <a href=\"https://weblogs.asp.net/scottgu/archive/2014/01/16/windows-azure-staging-publishing-support-for-web-sites-monitoring-improvements-hyper-v-recovery-manager-ga-and-pci-compliance.aspx\">AlwaysOn</a> では、アプリがアイドル状態のときに web サイトがリサイクルされるのを防ぐことができます。 <a href=\"https://weblogs.asp.net/scottgu/archive/2014/01/16/windows-azure-staging-publishing-support-for-web-sites-monitoring-improvements-hyper-v-recovery-manager-ga-and-pci-compliance.aspx\">AlwaysOn</a> は、サイトがスリープ状態にならないことを保証します。つまり、Web ジョブと web ジョブ SDK を使用して、実行時間の長いタスクやサービスを実行できます。</div></li>\n <li>\n<div><b>キューの処理</b>。 Web フロントエンドがバックエンド サービスと通信する一般的な方法は、キューを使用することです。 これは、一般的なプロデューサー–コンシューマーパターンです。</div></li>\n <li>\n<div><b>RSS 集計</b>。 RSS フィードのリストを維持するサイトがある場合は、フィードからのすべての記事をバックグラウンド プロセスにプルすることができます。</div></li>\n <li>\n<div><b>ファイルのメンテナンス</b>(ログファイルの集計やクリーンアップなど)。</div></li>\n</ul>\n</ul>\n<h4>SDK の目標</h4>\n<ul>\n <li>バックグラウンド処理の作業を行うときに、Azure Storage の使用を容易にする方法を提供します。</li>\n <li>SDK を使用すると、アプリケーション内での Azure Storage の使用が簡単になります。 ストレージから読み取り/書き込みを行うコードを記述する必要はありません。</li>\n <li>プロバイダーは、開発者が診断やログ記録コードを記述することなく、豊富な診断機能と監視機能を提供します。</li>\n</ul>\n<h3>このプレビューの更新プログラム</h3>\n<h4>Microsoft Azure Service Bus のサポートを追加する</h4>\nWeb ジョブ SDK で Microsoft Azure Service Bus がサポートされるようになりました。 以前のプレビューでは、Azure キューで関数をトリガーすることができました。 Azure Service Bus のキューとトピックを使用できるようになりました。\n\nたとえば、次のコードは、web ジョブ SDK を使用して Service Bus キュー上の新しいメッセージに対して関数をトリガーし、メッセージを別の Service Bus キューに書き込む方法を示しています。これは、ダッシュボードでこれらの関数を監視して実行し、それらの機能を実行して、Azure キューの場合と同じように Service Bus します。\n\n\"AzureJobsServiceBus\" という名前の connectionString を指定すると、この接続先の接続が参照されます。 Service Bus のキューとトピックの使用方法については、<a href=\"https://aspnet.codeplex.com/SourceControl/latest#Samples/AzureWebJobs/ReadMe.txt\">サンプル</a>サイトを参照してください。\n<pre class=\"prettyprint\">class Program\n{\n    static void Main(string[] args)\n    {\n        JobHost host = new JobHost();\n        host.RunAndBlock();\n    }\n\n    public static void TriggerOnSBQueue(\n        [ServiceBusTrigger(\"inputqueue\")] string inputText,\n        [ServiceBus(\"outputqueue\")] out string outputText)\n    {\n        outputText = inputText;\n    }\n}</pre>\n&nbsp;\n<h4>トリガーとバインドの使用法をより明示的にしました</h4>\nSDK を使用すると、関数をトリガーし、メッセージを指定した型または CLR 型 (String、TextReader、TextWriter など) にバインドできます。 前のプレビューでは、関数パラメーターで使用されている属性にトリガーとバインドの使用法が指定されていました。 属性の使用に関するルールはあまり明確ではありませんでした。混乱を避けるために、属性の名前と使用法を変更して、トリガーとバインドをより明示的にしました。\n\n次に、高レベルの変更を示します。\n<ul>\n <li>\n<div>トリガーされた QueueInput が QueueTrigger になり、Queueinput が Queue になりました</div></li>\n</ul>\n<strong>以前は</strong>\n<pre class=\"prettyprint\">public static void OnQueue(\n    [QueueInput(\"input\")] string message, \n    [QueueOutput(\"output\")] out string newMessage)\n{     \n    newMessage = message;\n}</pre>\n<strong>行っ</strong>\n<pre class=\"prettyprint\">public static void OnQueue(\n    [QueueTrigger(\"input\")] string message, \n    [Queue(\"output\")] out string newMessage)\n{     \n    newMessage = message;\n}</pre>\n<ul>\n <li>\n<div>トリガーされた BlobInput は BlobTrigger になりましたが、BlobInput または Blobtrigger は Blob です</div></li>\n</ul>\n<strong>以前は</strong>\n<pre class=\"prettyprint\">public static void BlobToBlob(\n    [BlobInput(\"input/{name}\")] TextReader input, \n    [BlobOutput(\"output/{name}\")] out string output)\n{\n    output = input.ReadToEnd();\n}</pre>\n<strong>行っ</strong>\n<pre class=\"prettyprint\">public static void BlobToBlob(\n    [BlobTrigger(\"input/{name}\")] TextReader input, \n    [Blob(\"output/{name}\")] out string output)\n{\n    output = input.ReadToEnd();\n}</pre>\n<h4>ブランドの変更</h4>\nブランド化が<a href=\"https://azure.microsoft.com/blog/2014/03/25/upcoming-name-change-for-windows-azure/\">変更</a>された Microsoft Azure は、このブランドに合わせてパッケージ名、アセンブリ名、および名前空間を変更します。 アプリで必要な変更は次のとおりです。\n<table width=\"413\" border=\"1\" cellspacing=\"0\" cellpadding=\"2\">\n<tbody>\n<tr>\n<td valign=\"top\" width=\"234\"><b>変更前</b></td>\n<td valign=\"top\" width=\"177\"><b>変更後</b></td>\n</tr>\n<tr>\n<td valign=\"top\" width=\"234\">Windowsazure.servicebus します。</td>\n<td valign=\"top\" width=\"177\">Microsoft.Azure.Jobs</td>\n</tr>\n<tr>\n<td valign=\"top\" width=\"234\">Microsoft.WindowsAzure.Jobs</td>\n<td valign=\"top\" width=\"177\">Microsoft.Azure.Jobs.Core</td>\n</tr>\n</tbody>\n</table>\n<h4>強化された関数検出</h4>\nITypeLocator と INameResolver を追加して、Web ジョブ SDK が関数を検索する方法をカスタマイズできるようにしました。 これにより、次のようなシナリオが可能になります。\n<ul>\n <li>\n<div>QueueName が明示的ではない関数を定義できます。 構成ソースからキュー名を読み取り、実行時にこの値を指定できます。</div></li>\n <li>\n<div>関数の検出を特定のクラスまたはアセンブリに限定します。</div></li>\n <li>\n<div>インデックス作成時の動的関数: 実行時に関数シグネチャを定義できます。</div></li>\n</ul>\n<h4>キューメッセージのデキューカウントへのアクセス</h4>\nSDK を使用すると、Azure キューの使用が簡単になり、一般的な使用パターンのほとんどが対象になりますが、下位レベルのキューにアクセスできるようにする場合もあります。 SDK では、高度なシナリオで必要になる可能性のあるメッセージの一般的に使用されるいくつかのプロパティにアクセスできるようになりました。 たとえば、このサンプルでは、キューメッセージの dequeueCount にアクセスできます。 sdk では、このサポート以外に、Azure Storage sdk キューの種類にバインドすることができます。\n<pre class=\"prettyprint\">public static void PropertyBinding(\n    [QueueTrigger(\"inputqueue\")] string inputText,\n    int dequeueCount)\n{\n   // Do something with the dequeueCount            \n}</pre>\n<h4>キャンセルトークンのサポートを追加しました</h4>\n関数は関数で CancellationToken パラメーターを受け取ることができ、関数はホストからキャンセル要求を受け取ることができます。\n<h4>Web ジョブシャットダウン通知のサポートを追加しました</h4>\nWeb ジョブは、グレースフルシャットダウンのサポートを追加しました。 これにより、web ジョブが停止する前に、Web ジョブが関数の実行を終了できます。 この SDK では、Web ジョブがシャットダウンされたときに通知することで、Web ジョブでのこのグレースフルシャットダウンがサポートされています。 この情報は、CancellationToken を使用して関数にフローされます。 次の関数は、Web ジョブの停止時に取り消し要求を受け取る CancellationToken を受け取ります。\n<pre class=\"prettyprint\">public static void UseCancellationToken(\n    [QueueTrigger(\"inputqueue\")] string inputText,\n    TextWriter log,\n    CancellationToken token)\n{\n      // This is a long running function which can be cancelled  \n      while (!token.IsCancellationRequested)\n      {\n          Thread.Sleep(2000);\n          log.WriteLine(\"Not cancelled\");\n      }\n      log.WriteLine(\"cancelled\");\n}</pre>\n&nbsp;\n<h4>ホストでトリガーがサポートされるようになりました。() を呼び出します。</h4>\nこれで、ホストを通じて呼び出される関数にトリガーを設定できるようになりました。() を呼び出します。\n<pre class=\"prettyprint\">class Program\n{\n    static void Main(string[] args)\n    {\n        JobHost host = new JobHost();\n        host.Call(typeof(Program).GetMethod(\"TriggerOnQueue\"),\n            new { inputText=\"input\" });\n    }\n\n    public static void TriggerOnQueue(\n    [QueueTrigger(\"inputqueue\")] string inputText)\n    {\n        //Process Queue message\n    }\n}</pre>\n&nbsp;\n<h4>JobHost の構成</h4>\nAzure Storage と Service Bus アカウントの既定の connectionString 名を上書きする場合は、jobhostconfiguration を使用して実行できます。\n<pre class=\"prettyprint\">static void Main(string[] args)\n{\n    var _storageConn = ConfigurationManager\n        .ConnectionStrings[\"MyStorageConnection\"].ConnectionString;\n\n    var _servicesBusConn = ConfigurationManager\n        .ConnectionStrings[\"MyServiceBusConnection\"].ConnectionString;\n\n    JobHostConfiguration config = new JobHostConfiguration(_storageConn)\n        {\n            ServiceBusConnectionString = _servicesBusConn\n        };\n\n    JobHost host = new JobHost(config);\n    host.RunAndBlock();\n}</pre>\n&nbsp;\n<h4>Azure Storage の依存関係の更新</h4>\nweb ジョブ SDK は、 <a href=\"https://www.nuget.org/packages/WindowsAzure.Storage\">Azure Storage 4.0.1 パッケージ</a>に依存します。\n<h3>SDK の既存の機能</h3>\n次に示すのは、alpha2 でサポートされていて、このリリースで引き続きサポートされている機能セットです。\n<h4>Azure Storage</h4>\nSDK は、Azure Blob、キュー、およびテーブルと連携します。\n<h4>トリガー</h4>\n関数は、キューまたは Blob で新しい入力が検出されたときに実行されます。 次に例を示します。 次のコードでは、\"inputqueue\" という名前のキューに新しいメッセージが届いたときに、この関数がトリガーされます。 トリガーの詳細については、こちらの <a href=\"https://blogs.msdn.com/b/jmstall/archive/2014/01/28/trigger-bindings-and-route-parameters-in-azurejobs.aspx\">投稿</a>を参照してください。\n<pre class=\"prettyprint\">public static void ProcessQueue(\n    [QueueTrigger(\"inputqueue\")] string input)\n{\n    // Process the Queue message \n}</pre>\n&nbsp;\n<h3>バインド</h3>\nSDK では、 へのバインドがサポートされ、C# プリミティブ型と Azure ストレージ (BLOB、テーブル、キューなど) の間のモデル バインドが提供されます。 これにより、開発者は BLOB、テーブル、キューからの読み取り/書き込みを簡単に行えます。開発者は、Azure Storage からの読み取り/書き込みに関するコードについて学習する必要はありません。\n\n現在サポートされているバインドは、<b>Stream、TextReader/Writer、String です。 </b>カスタム型や他の型へのバインドのサポートは、Storage SDK から追加できます。\n\nデータ に対するバインドの動作の詳細についてはAzure Storage、<a href=\"https://blogs.msdn.com/b/jmstall/archive/2014/02/18/azure-storage-bindings-part-1-blobs.aspx\">キュー</a><b></b>、テーブルに関<a href=\"https://blogs.msdn.com/b/jmstall/archive/2014/02/18/azure-storage-bindings-part-2-queues.aspx\">するページを</a><b></b>参照<a href=\"https://blogs.msdn.com/b/jmstall/archive/2014/03/06/azure-storage-bindings-part-3-tables.aspx\">してください。</a>\n<h4>Hosting</h4>\nJobHost は、プログラムに含む関数を知る実行コンテナーです。 JobHost オブジェクト (Microsoft.Azure.Jobs に含まれています) は、バインド <a href=\"https://www.nuget.org/packages/Microsoft.Azure.Jobs\">を</a> 読み取り、トリガーをリッスンして、関数を呼び出します。 次の例では、JobHost のインスタンスを作成し、RunAndBlock() を呼び出します。これにより、JobHost は、このホストで定義されている関数でトリガーをリッスンします。\n<pre class=\"prettyprint\">static void Main(string[] args)\n{\n    JobHost host = new JobHost();\n    host.RunAndBlock();\n}</pre>\n&nbsp;\n<h4>Web ジョブを監視するダッシュボード。</h4>\nWebJobs (<b><i>任意の</i></b>言語および任意の種類で記述) が実行される場合は、リアルタイムで監視できます。 その状態 (実行中、停止、正常に完了)、最終実行時刻、および特定の実行のログを確認できます。 次のスクリーンショットは、Web サイトで実行されているすべての Web ジョブのビューを示しています。\n\n<img style=\"border: 0px;\" title=\"Azure WebJobs Beta\" alt=\"Azure WebJobs Beta\" src=\"https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/AllTypesOfWebJobs.png\" width=\"610\" height=\"308\" border=\"0\" />\n<h4>関数の実行の詳細</h4>\nこの \"ImageProcessing\" WebJob の特定の実行を監視している場合は、次のようなプログラム内の関数に関する呼び出しの詳細を表示できます。\n<ul>\n<ul>\n <li>\n<div>この関数のパラメーター。</div></li>\n <li>\n<div>関数の実行にかかった時間。</div></li>\n <li>\n<div>BLOB からの読み取りにかかった時間と、読み取り/書き込まれたバイト数。</div></li>\n</ul>\n</ul>\n<img style=\"border: 0px;\" title=\"Azure WebJobs Beta\" alt=\"Azure WebJobs Beta\" src=\"https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/new_details.png\" width=\"610\" height=\"478\" border=\"0\" />\n\nこの ImageProcessing WebJob のコードを次に示します。\n<pre class=\"prettyprint\">public class ImageProcessing\n{\n    static void Main(string[] args)\n    {\n        JobHost host = new JobHost();\n        host.RunAndBlock();\n    }\n\n    public static void Resize(\n        [BlobTrigger(@\"images-input/{name}\")] WebImage input,\n        [Blob(@\"images2-output/{name}\")] out WebImage output)\n    {\n        var width = 80;\n        var height = 80;\n        output = input.Resize(width, height);\n    }\n\n    public static void WaterMark(\n        [BlobTrigger(@\"images2-output/{name}\")] WebImage input,\n        [Blob(@\"image2-output/{name}\")] out WebImage output)\n    {\n        output = input.AddTextWatermark(\"WebJobs\", fontSize: 6);\n    }\n}\n\npublic class WebImageBinder : ICloudBlobStreamBinder&lt;WebImage&gt;\n{\n    public WebImage ReadFromStream(System.IO.Stream input)\n    {\n        return new WebImage(input);\n    }\n\n    public void WriteToStream(WebImage result, System.IO.Stream output)\n    {\n        var bytes = result.GetBytes();\n        output.Write(bytes, 0, bytes.Length);\n    }\n}</pre>\n&nbsp;\n<h4>再生を呼び出 &amp; す</h4>\n上の例では、何らかの理由で Resize 関数が失敗した場合、新しいイメージと Replay Resize 関数をアップロードできます。この関数は、実行チェーンをトリガーし、Watermark 関数も呼び出します。 これは、関数をまとめてチェーンするための複雑なグラフがある場合に、問題を診断してデバッグするのに役立ちます。 ダッシュボードから関数を実行することもできます。\n<h4>関数の因果関係</h4>\n上の例では、Resize 関数が BLOB に書き込むときに WaterMark 関数がトリガーされるのを知っています。 ダッシュボードには、関数間のこの因果関係が表示されます。 新しい入力が検出されるとトリガーされる多数の関数をチェーンしている場合は、この因果関係グラフを表示すると便利です。\n<h4>BLOB の検索</h4>\n[BLOB の検索] をクリックすると、その BLOB に対して何が起こったかについての情報を取得できます。 たとえば、ImageProcessing の場合、Resize 関数が実行されたため、BLOB が書き込まれます。 検索 BLOB の詳細については、この投稿を参照 <a href=\"https://blogs.msdn.com/b/jmstall/archive/2014/02/19/who-wrote-that-blob.aspx\">してください</a>。\n<h3>サンプル</h3>\nWebJobs SDK のサンプルについては、以下を参照してください。 <a href=\"https://aspnet.codeplex.com/SourceControl/latest#Samples/AzureWebJobs/ReadMe.txt\">https://aspnet.codeplex.com/SourceControl/latest#Samples/AzureWebJobs/ReadMe.txt</a>\n<ul>\n<ul>\n <li>\n<div>BLOB、テーブル、キュー、およびテーブルのトリガーとバインドを使用する方法に関するサンプルService Bus。</div></li>\n <li>\n<div>PhluffyShuffy というサンプルがあります。これは、顧客が Blob Storage から画像を処理する関数をトリガーする画像をアップロードできる画像処理 Web サイトです。</div></li>\n</ul>\n</ul>\n<h3>ドキュメント</h3>\n<ul>\n<ul>\n <li><a href=\"https://www.asp.net/aspnet/overview/developing-apps-with-windows-azure/getting-started-with-windows-azure-webjobs\">チュートリアル: はじめに SDK を使用Windows Azure WebJobsする</a></li>\n <li><a href=\"https://channel9.msdn.com/Shows/Web+Camps+TV/Making-Your-Jobs-Easier-With-Windows-Azure-WebJobs-SDK\">Channel 9 のビデオ「ジョブを SDK を使用してジョブを簡単Windows Azure WebJobsする</a></li>\n <li><a href=\"https://www.hanselman.com/blog/IntroducingWindowsAzureWebJobs.aspx\">Scott Hanselman による WebJobs と SDK の概要</a></li>\n <li>WebJobs を使用して構築され、<a href=\"https://twitter.com/bradygaster\">Brady Gaster によって ASP.NET Web サイト モニター</a></li>\n <li><a href=\"https://www.asp.net/aspnet/overview/developing-apps-with-windows-azure/azure-webjobs-recommended-resources\">Azure WebJobs - 推奨リソース </a></li>\n</ul>\n</ul>\n<h3>SDK を使用した WebJobs のデプロイ</h3>\nWebJobs ポータル ページを使用してプログラムをアップロードしない場合は、FTP、Git、または Web 配置。 詳細については、「WebJobs を使用して .NET コンソール アプリAzure WebJobsを Azure にデプロイする方法」および「Git をデプロイする方法」を参照してください。\n\nWebJobs を Web サイトと共にデプロイする場合は、次の拡張機能をVisual Studio<a href=\"https://visualstudiogallery.msdn.microsoft.com/f4824551-2660-4afa-aba1-1fcc1673c3d0\">してください</a>。\n<h3>0.2.0-alpha2 から 0.3.0-beta に移行する際の既知の問題</h3>\n<h4>新しい API に合わせて名前空間を更新する</h4>\n&nbsp;\n<table width=\"413\" border=\"1\" cellspacing=\"0\" cellpadding=\"2\">\n<tbody>\n<tr>\n<td valign=\"top\" width=\"234\"><b>変更前</b></td>\n<td valign=\"top\" width=\"177\"><b>変更後</b></td>\n</tr>\n<tr>\n<td valign=\"top\" width=\"234\">Microsoft.WindowsAzure.Jobs.Host</td>\n<td valign=\"top\" width=\"177\">Microsoft.Azure.Jobs</td>\n</tr>\n<tr>\n<td valign=\"top\" width=\"234\">Microsoft.WindowsAzure.Jobs</td>\n<td valign=\"top\" width=\"177\">Microsoft.Azure.Jobs.Core</td>\n</tr>\n</tbody>\n</table>\n<h4>connectionString 名を更新する</h4>\nwebJob の app.config または Microsoft Azure Web サイトの [タブの構成] で connectionStrings を設定する場合は、connectionString 名を 0.3.0-beta の名前と一致する名前に変更する必要があります\n<table width=\"401\" border=\"1\" cellspacing=\"0\" cellpadding=\"2\">\n<tbody>\n<tr>\n<td valign=\"top\" width=\"200\"><b>変更前</b></td>\n<td valign=\"top\" width=\"199\"><b>変更後</b></td>\n</tr>\n<tr>\n<td valign=\"top\" width=\"200\">AzureJobsData</td>\n<td valign=\"top\" width=\"199\">AzureJobsStorage</td>\n</tr>\n<tr>\n<td valign=\"top\" width=\"200\">AzureJobsRuntime</td>\n<td valign=\"top\" width=\"200\">AzureJobsDashboard</td>\n</tr>\n</tbody>\n</table>\n<h4>テーブルのバインド</h4>\nこのリリースでは、Azure Table Storage の IDictionaryTuple&lt;、Tuple&gt; バインドのサポートを削除しました。 CloudTableEntity を使用してテーブルにバインドできます。 次の例は、違いと、Azure テーブルにバインドする方法を示しています。 より完全な例については、サンプル サイトの <a href=\"https://aspnet.codeplex.com/SourceControl/latest#Samples/AzureWebJobs/BasicSamples/TableOperations/Program.cs\">表の使用方法に関するページを参照してください</a>。\n\n<strong>以前は</strong>\n<pre class=\"prettyprint\">public static void CountAndSplitInWords(\n    [QueueInput] string textInput, \n    [Table] IDictionary&lt;Tuple&lt;string, string&gt;, WordCount&gt; words) \n{ \n}</pre>\n<strong>後</strong>\n<pre class=\"prettyprint\">public static void CountAndSplitInWords(\n    [QueueTrigger(\"textInput\")] string textInput, \n    [Table(\"words\")] CloudTable wordsTable) \n{ \n}</pre>\n&nbsp;\n<h4>ログ記録</h4>\nログ情報を記述する場合は、Console.Write() を使用できます。 Web ジョブの詳細を表示すると、これらのログがダッシュボードに表示されます\n\n関数レベルのログ記録を実行する場合は、TextWriter を使用する必要があります。この場合は、Blob Storage に情報をログに記録します。 関数の実行の詳細が表示された場合、これらのログがダッシュボードに表示されます。\n<pre class=\"prettyprint\">public static void Logging(\n    [QueueTrigger(\"inputqueue\")] string inputText,\n    TextWriter log)\n{\n   log.WriteLine(inputText);\n}</pre>\n&nbsp;\n<h4>ダッシュボードは、0.3.0-beta でデプロイされた WebJobs でのみ機能します</h4>\nSDK の 0.2.0-alpha2 でデプロイされた WebJob がある場合、ダッシュボードにアクセスして Web ジョブのログを表示すると、\"ホストが実行されていない\" という警告が表示されます。 これは、このリリースの一環として、新しいバージョンのダッシュボードがすべての Azure Web サイトにデプロイされる場合に発生します。 新しいダッシュボードには、0.2.0-alpha2 と互換性がないプロトコルの変更があります。 このエラーを回避するには、0.3.0-beta パッケージを使用して Web ジョブを更新しNuGet WebJob を再デプロイしてください。\n<h3>フィードバックを送信し、ヘルプを得る</h3>\nWeb <a href=\"https://azure.microsoft.com/en-us/documentation/articles/web-sites-create-web-jobs/\">サイトの WebJobs</a> Microsoft Azure WebJobs SDK Microsoft Azureプレビュー中です。 フィードバックは、今後のバージョンに加えた変更で考慮されます。\n\nチュートリアルに直接関連しない質問がある場合は、<a href=\"https://azure.microsoft.com/en-us/support/forums/\">Azure</a> フォーラム、ASP.NET フォーラム、または StackOverflow.com に<a href=\"https://stackoverflow.com/\">投稿できます</a>。<a href=\"https://forums.asp.net/1247.aspx\"></a> Twitter <a href=\"https://twitter.com/search?q=AzureWebJobs\">#AzureWebJobs</a> を使用し、StackOverflow のタグ Azure-WebJobsSDKを使用します。"
