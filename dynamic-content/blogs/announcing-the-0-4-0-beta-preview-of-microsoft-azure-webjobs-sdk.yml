### YamlMime:Yaml
ms.openlocfilehash: 736d8f3d18a6f6764fa3a3fd8ebb5ccc1ee9a8ae
ms.sourcegitcommit: d03bdc7fe5447adb6530886aab848b75fe8fa8ee
ms.translationtype: MT
ms.contentlocale: ja-JP
ms.lasthandoff: 03/11/2022
ms.locfileid: "139890898"
Slug: announcing-the-0-4-0-beta-preview-of-microsoft-azure-webjobs-sdk
Title: Microsoft Azure web ジョブ SDK の 0.4.0-ベータプレビューの発表
Summary: この投稿では、Web ジョブ SDK の 0.4.0-ベータ版プレビューの新機能について取り上げています。
Content: "<a href=\"https://www.hanselman.com/blog/IntroducingWindowsAzureWebJobs.aspx\" target=\"_blank\">Scott マン selman によって導入</a>された Microsoft Azure web ジョブ SDK の別のプレビューをリリースしています。 前のプレビューの詳細については、こちらの <a href=\"https://azure.microsoft.com/blog/2014/06/18/announcing-the-0-3-0-beta-preview-of-microsoft-azure-webjobs-sdk/\" target=\"_blank\">anouncement</a>に関する記事をご覧ください。\n\nこのリリースには、v0.3.0 ベータと同じ一般的な機能セットと、新機能があります。\n<h2>このリリースのダウンロード</h2>\nweb ジョブ SDK は NuGet ギャラリーからダウンロードできます。 これらのパッケージは、次のように NuGet パッケージマネージャーコンソールを使用して NuGet ギャラリーでインストールまたは更新できます。\n<pre class=\"prettyprint\">Install-Package Microsoft.Azure.WebJobs –Pre</pre>\nMicrosoft Azure Service Bus トリガーを使用する場合は、次のパッケージをインストールします。\n<pre class=\"prettyprint\">Install-Package Microsoft.Azure.WebJobs.ServiceBus -Pre</pre>\nパッケージ名は v0.3.0 から変更されているため、リダイレクトパッケージがアップロードされました。これは、最新バージョンに更新するのに役立ちます。\n<pre class=\"prettyprint\">Update-Package Microsoft.Azure.Jobs.Core –Pre</pre>\n<pre class=\"prettyprint\">Update-Package Microsoft.Azure.Jobs –Pre</pre>\n<h2>Web ジョブ SDK とは</h2>\nMicrosoft Azure web サイトの<a href=\"https://azure.microsoft.com/en-us/documentation/articles/web-sites-create-web-jobs/\">web ジョブ</a>機能により、web サイトでサービスやバックグラウンドタスクなどのプログラムを簡単に実行できるようになります。 <i>.exe</i>、 <i>.cmd</i>、 <i>.bat</i>ファイルなどの実行可能ファイルを web サイトにアップロードして実行できます。 これらは、トリガーまたは連続 Web ジョブとして実行できます。 Web ジョブ SDK を使用しない場合、バックグラウンドタスクを接続して実行するには、複雑なプログラミングが必要です。 SDK には、最小限のコードを記述して一般的なタスクを実行できるフレームワークが用意されています。\n\nweb ジョブ SDK には、Microsoft Azure Storage の blob、キュー、テーブル、Service Bus で動作するバインドとトリガーシステムがあります。 バインディングシステムを使用すると、Microsoft Azure Storage オブジェクトの読み取りまたは書き込みを行うコードを簡単に記述できます。 トリガーシステムは、キューまたは blob で新しいデータを受信するたびに、コード内の関数を呼び出します。\n<h2>このプレビューの更新プログラム</h2>\n<h3><strong><em>非同期サポート</em></strong></h3>\n関数で async/await を使用すると、関数からタスクを返すことができます。\n\n1つの JobHost 内の個別の関数は並列で実行されます。 つまり、異なるキューでリッスンしている関数が2つある場合は、並列で実行されます。\n\n次のコードは、関数で async/await および return タスクを使用する方法を示しています。 この関数は、inputqueue という名前の Azure キューの新しいメッセージでトリガーされ、メッセージを Blob に書き込みます。\n<pre class=\"prettyprint\">class Program\n{\n    static void Main()\n    {\n        JobHost host = new JobHost();\n        host.RunAndBlock();\n    }\n   public async static Task HelloWorldFunctionAsync(\n   [QueueTrigger(\"inputqueue\")] string inputText,\n   [Blob(\"output/output.txt\")] TextWriter output)\n   {\n       await output.WriteAsync(inputText);\n   }\n}</pre>\n<span style=\"font-family: Trebuchet MS\">必要に応じて、関数の引数として CancellationToken を渡すことができます。例を挙げます。\"input\" という名前のコンテナーで新しい Blob が検出されると、次の関数がトリガーされます。CancellationToken to CopyToAsync 関数を渡すことができます。この関数は、SDK がファイル名と拡張子をバインドし、それらに簡単にアクセスできるようにする方法も示しています。</span>\n<pre class=\"prettyprint\">class HelloWorldAsyncCancellationToken\n{\n    static void Main()\n    {\n        JobHost host = new JobHost();\n        host.RunAndBlock();\n    }\n    public async static Task ProcessBlob(\n    [BlobTrigger(\"input/{name}.{extension}\")] Stream input,\n    string name, // The SDK binds the name of the File\n    string extension, // The SDK binds the extension of the File\n    [Blob(\"output/{name}.{extension}\", FileAccess.Write)] Stream output,\n    CancellationToken token)\n    {\n        await input.CopyToAsync(output, 4096, token);\n    }\n}</pre>\n関数は明示的に呼び出すことができます。 これは、Azure Scheduler を使用してスケジュールに従って Web ジョブを実行する場合、または関数を呼び出すだけの場合に便利です。 この方法を使用すると、診断に関する SDK の利点、実行時間の長い関数の取り消しなどが可能になります。\n<pre class=\"prettyprint\">class Program\n{\n    static void Main()\n    {   \n        JobHost host = new JobHost();\n        Task callTask = host.CallAsync(typeof(Program).GetMethod(\"ManualTrigger\"), \n                                      new { value = 20 });\n\n        Console.WriteLine(\"Waiting for async operation...\");\n        callTask.Wait();\n        Console.WriteLine(\"Task completed: \" + callTask.Status);\n    }\n\n    [NoAutomaticTrigger]\n    public static void ManualTrigger(\n    TextWriter log, int value, [Queue(\"outputqueue\")] out string message)\n    {\n        log.WriteLine(\"Function is invoked with value={0}\", value);\n        message = value.ToString();\n        log.WriteLine(\"Following message will be written on the Queue={0}\", message);\n    }\n}</pre>\n<h3><i>Azure キューでの有害メッセージの処理</i></h3>\n<a href=\"https://azure.microsoft.com/blog/2014/06/18/announcing-the-0-3-0-beta-preview-of-microsoft-azure-webjobs-sdk/\">V0.3.0</a>の SDK では、キューの DequeueCount プロパティにバインドするオプションが用意されています。このリリースでは、メッセージを有害キューに自動的に移動するためのサポートを追加しています。\n\n調査のためのログ記録など、アプリケーションコードで有害なメッセージを処理できるようになりました。 関数を QueueTrigger (\"queuename\") にバインドするだけです。\n\n次のコードでは、キューメッセージを処理します。 関数がキューにバインドされていて、関数の処理中に例外が発生した場合、SDK はメッセージを有害としてマークする前にメッセージを5回 (既定) 処理し、SDK がメッセージを別のキューに移動します。\n<pre class=\"prettyprint\">class ProcessPoisonMessages\n{\n    static void Main()\n    {\n        JobHost host = new JobHost();\n        host.RunAndBlock();\n     }\n     public async static Task ProcessQueue(\n     [QueueTrigger(\"inputqueue\")] string inputText,\n     [Blob(\"output/output.txt\")] TextWriter output)\n     {\n       await output.WriteAsync(inputText);\n     }\n     public static void ProcessPosionQueue(\n     [QueueTrigger(\"inputqueue-poison\")] string inputText)\n     {\n       //Process the poison message and log it or send a notification\n     }\n}</pre>\n<h3><i>Azure キューのポーリングロジックの改善</i></h3>\nこのリリースには、新しいポーリング戦略があります。 SDK は、ランダムな指数バックオフアルゴリズムを実装するようになり、アイドル状態のキューポーリングがストレージトランザクションのコストに与える影響を軽減するようになりました。\n\n&nbsp;\n<h3><strong>キューの高速パス通知</strong></h3>\n<ul>\n<ul>\n<ul>\n <li>V0.3.0 では、SDK は ~ 2 秒ごとにポーリングを行います。これは、アプリに20個の関数のチェーン (キューへの書き込み、別のキューへの書き込み、別の関数のトリガーなど) が発生した場合に、20個のキューメッセージを処理するために約40秒かかったことを意味します。 これらの変更により、これで最大8秒かかります。</li>\n</ul>\n</ul>\n</ul>\n&nbsp;\n<h3><strong>キューポーリングの構成オプション</strong></h3>\nSDK では、キューのポーリング動作を構成できるいくつかのノブが公開されています。\n<ul>\n<ul>\n<ul>\n <li><em>キューが空の場合の MaxPollingInterval は、メッセージを確認するまでの最長待機時間です。既定値は10min です。</em></li>\n <li><i>キューメッセージが有害キューに移動されたときの MaxDequeueCount。既定値は5です。</i></li>\n</ul>\n</ul>\n</ul>\n&nbsp;\n\n次のコードは、これらの設定を構成する方法を示しています。\n<pre class=\"prettyprint\">static void Main()\n{\n       JobHostConfiguration config = new JobHostConfiguration();\n       config.Queues.MaxDequeueCount = 3;\n       config.Queues.MaxPollingInterval = TimeSpan.FromMinutes(20); \n       JobHost host = new JobHost(config);\n       host.RunAndBlock();\n }</pre>\n&nbsp;\n<h3><i>パッケージ/名前空間の変更</i></h3>\n一般的な用語のジョブがあいまいにならないように、パッケージ名を変更しようとしています。これは、混乱を招く可能性があり、検索が困難な場合があります。\n\n<strong>これらの変更を組み込むには、既存のアプリを再コンパイルし、ConnectionStrings を変更する必要があります。</strong>\n<table border=\"0\" cellspacing=\"0\" cellpadding=\"0\">\n<tbody>\n<tr>\n<td valign=\"top\" width=\"497\"><b>Asset</b></td>\n<td valign=\"top\" width=\"420\"><b>変更前</b></td>\n<td valign=\"top\" width=\"484\"><b>変更後</b></td>\n</tr>\n<tr>\n<td valign=\"top\" width=\"497\"><b>パッケージ</b></td>\n<td valign=\"top\" width=\"420\">Microsoft.Azure.Jobs</td>\n<td valign=\"top\" width=\"484\">Microsoft. Azure。<strong>Web ジョブ</strong></td>\n</tr>\n<tr>\n<td valign=\"top\" width=\"497\"></td>\n<td valign=\"top\" width=\"420\">Microsoft.Azure.Jobs.Core</td>\n<td valign=\"top\" width=\"484\">Microsoft. Azure。<strong>Web ジョブ</strong>。Core</td>\n</tr>\n<tr>\n<td valign=\"top\" width=\"497\"></td>\n<td valign=\"top\" width=\"420\">Microsoft.Azure.Jobs.ServiceBus</td>\n<td valign=\"top\" width=\"484\">Microsoft. Azure。<strong>Web ジョブ</strong>。ServiceBus</td>\n</tr>\n<tr>\n<td valign=\"top\" width=\"497\"><b>名前空間</b></td>\n<td valign=\"top\" width=\"420\">Microsoft.Azure.Jobs</td>\n<td valign=\"top\" width=\"484\">Microsoft. Azure。<strong>Web ジョブ</strong></td>\n</tr>\n<tr>\n<td valign=\"top\" width=\"497\"><b>ConnectionString 名</b></td>\n<td valign=\"top\" width=\"420\">AzureJobsStorage</td>\n<td valign=\"top\" width=\"484\">Azure<strong>web ジョブ</strong>Storage</td>\n</tr>\n<tr>\n<td valign=\"top\" width=\"497\"></td>\n<td valign=\"top\" width=\"420\">AzureJobsDashboard</td>\n<td valign=\"top\" width=\"484\">Azure<strong>web ジョブ</strong>ダッシュボード</td>\n</tr>\n</tbody>\n</table>\n&nbsp;\n<h3><i>ダッシュボードのインデックス処理の高速化 </i></h3>\nWeb ジョブのすべての Web ジョブと機能の詳細を表示すると、ダッシュボードのパフォーマンスが向上します。\n<h3><i>ダッシュボードデータが最新ではないことを示す警告</i></h3>\nダッシュボードでは、ホストデータがバックグラウンドで処理されるようになりました。また、実行する作業が多い場合は警告が表示されるようになりました。\n<h3><i>ダッシュボードのインデックス作成エラー</i></h3>\n[バージョン情報] ページには、インデックス作成エラーがある場合はダッシュボードに表示されます。 これらは、ダッシュボードがログにインデックスを作成できなかった場合に便利です。このページをチェックして、エラーがあるかどうかを確認してください。\n<h3><strong><em>バグの修正</em></strong></h3>\nこのリリースには、多くのバグ修正が含まれています。 フォーラムと stackoverflow で報告されたバグに優先順位を付けました。\n\n&nbsp;\n<h2><strong>SDK の既存の機能</strong></h2>\nV0.3.0 でサポートされていた機能セットを次に示します。このリリースでは引き続きサポートされます。\n<h4><em><strong>Azure での使用</strong></em></h4>\nSDK は、Azure Blob、キュー、テーブル、および実行のためのトリガーとバインドを追加します。\n<h4><strong><em>トリガー</em></strong></h4>\n関数は、キューまたは Blob で新しい入力が検出されたときに実行されます。 トリガーの詳細については、こちらの <a href=\"https://blogs.msdn.com/b/jmstall/archive/2014/01/28/trigger-bindings-and-route-parameters-in-azurejobs.aspx\">投稿</a>を参照してください。\n<h4><em><strong>バインド</strong></em></h4>\nSDK はバインドをサポートしているため、C# のプリミティブ型と Azure storage (Blob、テーブル、キューなど) の間のモデルバインドが提供されます。 これにより、開発者は、Blob、テーブル、およびキューの読み取り/書き込みを簡単に行うことができます。これは、Azure Storage からの読み取り/書き込みのコードについて理解する必要がないためです。\n\n現在、次のバインドがサポートされています: <b>Stream、TextReader/Writer、および String。</b>Storage SDK からカスタム型およびその他の型にバインドするためのサポートを追加することもできます。 詳細については、以下のサンプルを参照してください。\n<h4><strong><em>Hosting</em></strong></h4>\nJobHost は、プログラム内でどのような機能が使用されているかを把握する実行コンテナーです。 JobHost オブジェクト ( <a href=\"https://www.nuget.org/packages/Microsoft.Azure.WebJobs\" target=\"_blank\">web ジョブ</a> に存在する) は、バインドを読み取り、トリガーをリッスンして、関数を呼び出します。 次の例では、JobHost のインスタンスを作成し、RunAndBlock () を呼び出します。これにより、JobHost は、このホストで定義されているすべての関数のトリガーをリッスンします。\n<pre class=\"prettyprint\">static void Main()\n{\n    JobHost host = new JobHost();\n    host.RunAndBlock();\n}</pre>\n<h4><strong><em>Web ジョブを監視するためのダッシュボード。</em></strong></h4>\nWeb ジョブ (任意<b><i>の言語で記述</i></b>された任意の種類の) を実行すると、リアルタイムで監視できます。 特定の実行の状態 (実行中、停止、完了)、最終実行時刻、ログを確認できます。 次のスクリーンショットは、Web サイトで実行されているすべての Web ジョブのビューを示しています。\n\n<img title=\"Azure WebJobs ベータ版\" alt=\"Azure WebJobs Beta\" src=\"https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/AllTypesOfWebJobs.png\" width=\"610\" height=\"308\" border=\"0\" />\n<h4><strong><em>関数の実行の詳細</em></strong></h4>\nこの \"ImageProcessing\" WebJob の特定の実行を監視している場合は、次のようなプログラム内の関数に関する呼び出しの詳細を表示できます。\n<ul>\n<ul>\n <li>この関数のパラメーター。</li>\n <li>関数の実行にかかった時間。</li>\n <li>BLOB からの読み取りにかかった時間と、読み取り/書き込まれたバイト数。</li>\n</ul>\n</ul>\nImageProcessing WebJob のコードを次に示します。 この Web ジョブでは、\n<pre class=\"prettyprint\">using Microsoft.Azure.WebJobs;\nusing System.IO;\nusing System.Threading;\nusing System.Threading.Tasks;\nusing System.Web.Helpers;\n\nnamespace ImageResizeAndWaterMark\n{\n    class ImageProcessingFunctions\n    {\n        public static void Resize(\n        [BlobTrigger(@\"images-input/{name}\")] WebImage input,\n        [Blob(@\"images2-output/{name}\")] out WebImage output)\n        {\n            var width = 80;\n            var height = 80;\n            output = input.Resize(width, height);\n        }\n        public static void WaterMark(\n        [BlobTrigger(@\"images2-output/{name}\")] WebImage input,\n        [Blob(@\"images2-newoutput/{name}\")] out WebImage output)\n        {\n            output = input.AddTextWatermark(\"WebJobs is now awesome!!!!\", fontSize: 6);\n        }\n    }\n    public class WebImageBinder : ICloudBlobStreamBinder&lt;WebImage&gt;\n    {  \n        public Task&lt;WebImage&gt; ReadFromStreamAsync(Stream input, CancellationToken cancellationToken)\n        {\n            return Task.FromResult(new WebImage(input));\n        }\n\n        public async Task WriteToStreamAsync(WebImage result, Stream output, CancellationToken cancellationToken)\n        {\n            var bytes = result.GetBytes();\n            await output.WriteAsync(bytes, 0, bytes.Length,cancellationToken);\n        }\n    }\n}</pre>\n<img title=\"Azure WebJobs Beta\" alt=\"Azure WebJobs Beta\" src=\"https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/new_details.png\" width=\"610\" height=\"478\" border=\"0\" />\n<h4><em><strong>再生を呼び出 &amp; す</strong></em></h4>\n上の例では、何らかの理由で Resize 関数が失敗した場合、新しいイメージと Replay Resize 関数をアップロードできます。この関数は、実行チェーンをトリガーし、Watermark 関数も呼び出します。 これは、関数をまとめてチェーンするための複雑なグラフがある場合に、問題を診断してデバッグするのに役立ちます。 ダッシュボードから関数を実行することもできます。\n<h4><strong><em>関数の因果関係</em></strong></h4>\n上の例では、Resize 関数が BLOB に書き込むときに WaterMark 関数がトリガーされるのを知っています。 ダッシュボードには、関数間のこの因果関係が表示されます。 新しい入力が検出されるとトリガーされる多数の関数をチェーンしている場合は、この因果関係グラフを表示すると便利です。\n<h4><strong><em>BLOB の検索</em></strong></h4>\n[BLOB の検索] をクリックすると、その BLOB に対して何が起こったかについての情報を取得できます。 たとえば、ImageProcessing の場合、Resize 関数が実行されたため、BLOB が書き込まれます。 検索 BLOB の詳細については、この投稿を参照 <a href=\"https://blogs.msdn.com/b/jmstall/archive/2014/02/19/who-wrote-that-blob.aspx\">してください</a>。\n<h2><strong>サンプル</strong></h2>\nWebJobs SDK のサンプルについては、以下を参照してください。 <a title=\"https://github.com/Azure/azure-webjobs-sdk-samples\" href=\"https://github.com/Azure/azure-webjobs-sdk-samples\">https://github.com/Azure/azure-webjobs-sdk-samples</a>\n<ul>\n<ul>\n <li>BLOB、テーブル、キュー、およびテーブルのトリガーとバインドを使用する方法に関するサンプルService Bus。</li>\n <li>PhluffyShuffy というサンプルがあります。これは、顧客が Blob Storage から画像を処理する関数をトリガーする画像をアップロードできる画像処理 Web サイトです。</li>\n</ul>\n</ul>\n<h2><strong>ドキュメント</strong></h2>\n<ul>\n<ul>\n <li><a href=\"https://www.asp.net/aspnet/overview/developing-apps-with-windows-azure/getting-started-with-windows-azure-webjobs\">チュートリアル: はじめに SDK を使用Windows Azure WebJobsする</a></li>\n <li><a href=\"https://channel9.msdn.com/Shows/Web+Camps+TV/Making-Your-Jobs-Easier-With-Windows-Azure-WebJobs-SDK\">Channel 9 のビデオ「ジョブを SDK を使用してジョブを簡単Windows Azure WebJobsする</a></li>\n <li><a href=\"https://www.hanselman.com/blog/IntroducingWindowsAzureWebJobs.aspx\">Scott Hanselman による WebJobs と SDK の概要</a></li>\n <li>WebJobs を使用して構築され、<a href=\"https://twitter.com/bradygaster\">Brady Gaster によって ASP.NET Web サイト モニター</a></li>\n <li><a href=\"https://www.asp.net/aspnet/overview/developing-apps-with-windows-azure/azure-webjobs-recommended-resources\">Azure WebJobs – 推奨されるリソース</a></li>\n <li><a href=\"https://channel9.msdn.com/Tags/azurefridaywebjobs\" target=\"_blank\">Azure Friday の WebJobs ビデオ シリーズ</a></li>\n</ul>\n</ul>\n<h2><strong>SDK を使用した WebJobs のデプロイ</strong></h2>\nVisual Studio 2013 Update3/ Azure SDK 2.4 で、Web ジョブを Azure Websites に発行する Visual Studio Tooling サポートが追加されました。詳細については、「Azure Websites <a name=\"how-to-deploy-azure-webjobs-to-azure-websites\"></a> に Azure WebJobs をデプロイする方法」を参照してください。<a href=\"https://azure.microsoft.com/en-us/documentation/articles/websites-dotnet-deploy-webjobs/\" target=\"_blank\"></a>\n<h2><strong>0.3.0-beta から <strong>0.4.0-beta</strong> に移行する際の既知の問題</strong></h2>\n<h3><em><strong>新しい API に合わせて名前空間を更新する</strong></em></h3>\n<b></b> Microsoft.Azure.Jobs.CoreAfter を Microsoft.WindowsAzure.Jobs する\n\n<strong>前に</strong><b></b>\n\nMicrosoft.WindowsAzure.WebJobs Microsoft.Azure.WebJobs.Core\n<h3><em><strong>connectionString 名を更新する</strong></em></h3>\nconnectionStrings を設定する場合、WebJob の app.config または Microsoft Azure Web サイトの [タブの構成] で、connectionString 名を次のように変更する必要があります。\n\n<b>変更前</b>\n\nAzureJobsRuntime AzureJobsDashboard\n\n<b>変更後</b>\n\nAzureWebJobsRuntime AzureWebJobsDashboard\n<h3><strong><em>ログ アカウントに connectionString を格納する</em></strong></h3>\n最新バージョンの SDK (<em>0.4.0-beta</em>) までは、AzureJobsRuntime ストレージ アカウントの接続文字列が AzureJobsDashboard ログに格納されました。 管理者ユーザーだけがログを表示し、同じユーザーが接続文字列を表示およびリセットできるので、これは大きな影響を与える問題ではないと思われますが、今後はこの方法を停止します。 次の月に、以前に格納された接続文字列を削除するためにダッシュボードを更新します。\n\nこれらを削除するには、AzureJobsDashboard connectionString で指定されたログを開きます。\n\n次の \"azure-jobs-host\"、\"azure-jobs-host-output\"、\"azure-jobs-host-archive\"、および \"azure-jobs-dashboard <strong><em>\" を</em></strong> 除き、名前が \"azure-jobs*\" の次の BLOB コンテナー名を削除します\n\n名前が \"AzureJobs*\" のテーブルを削除します\n\n\"azure-jobs*\" という名前のキューを削除します\n<h4><strong><em>ダッシュボードは、0.4.0-beta でデプロイされた WebJobs でのみ機能します</em></strong></h4>\n0.3.0 ベータ版の SDK を使用して WebJob をデプロイし、ダッシュボードにアクセスして Web ジョブのログを表示すると、\"ホストが実行されていない\" という警告が表示されます。 これは、このリリースの一環として、新しいバージョンのダッシュボードがすべての Azure Web サイトにデプロイされる場合に発生します。 新しいダッシュボードには、0.3.0-beta と互換性がないプロトコルの変更があります。 <strong>このエラーを回避するには、0.4.0-beta</strong> パッケージを使用して Web ジョブを更新しNuGet WebJob を再デプロイしてください。\n<h2><strong>フィードバックを送信し、ヘルプを得る</strong></h2>\nWeb <a href=\"https://azure.microsoft.com/en-us/documentation/articles/web-sites-create-web-jobs/\">サイトの WebJobs</a> Microsoft Azure WebJobs SDK Microsoft Azureプレビュー中です。 このエクスペリエンスを改善するためのフィードバックは、常に歓迎されます。\n\nチュートリアルに直接関連しない質問がある場合は、<a href=\"https://azure.microsoft.com/en-us/support/forums/\">Azure</a> フォーラム、ASP.NET フォーラム、または StackOverflow.com に<a href=\"https://stackoverflow.com/\">投稿できます</a>。<a href=\"https://forums.asp.net/1247.aspx\"></a> Twitter <a href=\"https://twitter.com/search?q=AzureWebJobs\">#AzureWebJobs</a> SDK を使用し、StackOverflow Azure-WebJobsSDKタグを使用します。"
