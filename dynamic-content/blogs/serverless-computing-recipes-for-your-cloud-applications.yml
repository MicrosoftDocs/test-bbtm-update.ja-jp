### YamlMime:Yaml
ms.openlocfilehash: 023d9c0b886cbb0530a524473e3c9e1a35dfdc1a
ms.sourcegitcommit: d03bdc7fe5447adb6530886aab848b75fe8fa8ee
ms.translationtype: MT
ms.contentlocale: ja-JP
ms.lasthandoff: 03/11/2022
ms.locfileid: "139892558"
Slug: serverless-computing-recipes-for-your-cloud-applications
Title: クラウドアプリケーションのサーバーレスコンピューティングのレシピ
Summary: Azure Functions のようなサーバーレスコンピューティングクラウドサービスを使用して実際のコードで実際に実行できることを詳しく調べる準備ができましたか。 その場合は、豊富なコード例と、サーバーレス Azure Functions を使用した一般的な問題の解決方法について説明している無料の Azure サーバーレスコンピューティングクックブックをダウンロードしてお読みください。
Content: >-
  <p>サーバーレスコンピューティングに関する誇大広告を聞き、その利点についてのさまざまなオンライン記事を読むことができ、業界 pundits は、その pathbreaking 性質を頻繁に説明する新しい形容詞を見つけます。 Azure Functions のようなサーバーレスコンピューティングクラウドサービスを使用して実際の<strong>コード</strong>で<strong>実際に実行</strong>できることを詳しく調べる準備ができましたか。 その場合は、 <a href="https://azure.microsoft.com/en-us/resources/azure-serverless-computing-cookbook/" target="_blank">Azure サーバーレスコンピューティング</a> の無料のクックブックをダウンロードして、「サーバーレス Azure Functions を使用して一般的な問題を解決する方法」を参照してください。</p>


  <p><a href="https://azure.microsoft.com/en-us/resources/azure-serverless-computing-cookbook/" target="_blank"><img src="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/8e549fd4-0062-4da0-bb50-a621f55fdf3e.png" style="margin-right: auto; margin-left: auto; float: none; display: block;"></a></p>


  <p><br>

  ただし、さらに多くの動機が必要な場合は、「」を参照してください。</p>


  <p>まず、基本的な方法から始めましょう。 サーバーレスコンピューティングでは次のことが可能です。</p>


  <ul>
   <li><strong>サーバーの完全な抽象化</strong>: コードを実行しているサーバーではなく、アプリケーションコードに重点を置いています。</li>
   <li><strong>イベント駆動型の即時スケーラビリティ</strong>: トラフィックの増加に合わせてインフラストラクチャをスケールアップすることを心配することはできません。</li>
   <li><strong>従量課金</strong>制: コードが実行されている時間とそれが使用するリソースについてのみ支払います</li>
  </ul>


  <p>ただし、開発者にとっては、これまでに注意する必要があることがたくさんあります。</p>


  <h2>クラウドの取り組みを小規模に始めることができます</h2>


  <p>&rsquo;アプリケーションポートフォリオ全体を一度に構築するこの新しい方法で、アプリケーションポートフォリオ全体を作成する必要はありません。 Azure Functions によって提供されるサービスとしての機能 (FaaS) モデルに関する優れた点は、既存のアプリの拡張機能として、または試す必要のあるネット新しいシナリオとして、少数の操作を実行できることです。自動化されたデータベースクリーンアップユーティリティ、ソーシャルメディア監視サービス、または必要なファイルアーカイブツールを構築し、サーバーレスが適切なモデルであるかどうかを確認します。 1つのアプローチ &rsquo; がうまくいかない場合は、この実験中に費やされた数セントを書き込んでから、最初からやり直す必要があります。 これにより、クラウドがさらにわかりやすくなります。</p>


  <h2>サーバーの台数が少なくても、コードが少なくなります。</h2>


  <p>コードがクラウドにある場合、データベース、Storage、メッセージング、IoT などの他の多くのクラウドサービスと対話する可能性があります。これらすべてのクラウドサービスとその Api や Sdk などを理解する必要があります。 Azure Functions には、コードがさまざまな Azure サービスを非常に簡単に使用できるようにする <strong>トリガー </strong>や <strong>バインド </strong>などの革新的な機能が用意されています。これにより、これらのサービスと対話するために必要なプラミングではなく、ビジネスロジックのみを含むようにコードを簡略化できます。 さらに、FaaS モデルは自然に小さな独立したマイクロサービスを構築するためのものであり、コードを再利用しやすくなります。</p>


  <h2>クラウドアプリケーションのスイス陸軍ナイフ</h2>


  <p>実験を完了し、サーバーレスの経済的で生産性に関する利点を確認しました。 これで、大規模なゲームを開始する準備ができました。サーバーレスアーキテクチャで解決できる問題の種類について考えています。 アプリケーションバックエンドの構築 (たとえば、web、モバイル、IoT など)、カスタム処理を必要とするリアルタイムのデータ処理パイプライン、IT および運用タスクの自動化、および他のサービスや SaaS アプリケーションとの統合などのアプリケーションバックエンドを構築することは、サーバーレスアーキテクチャが適している場合の優れた例です。 これらのシナリオでは、Azure Functions は、これらのシナリオに必要な他のサービスとの統合によって、特別なメリットをもたらします。</p>


  <h2>デスクトップコンピューターでのクラウドアプリケーションのデバッグ</h2>


  <p>開発者がクラウドに移行するときに、生産性のインピーダンスについて文句を聞いたことがあります。 デバッグする方法 展開に最適な方法 監視する方法 同様に続きます。 これは、Azure では当てはまりません。 Visual Studio のような世界クラスのツールを使用するか Visual Studio Code、コマンドラインエクスペリエンスを使用するかにかかわらず、従来のアプリケーションで使用するサーバーレスアプリケーションに対して同じ編集、ビルド、テスト、およびデバッグの利点を得ることができます。 これらはすべて、ローカルの開発用コンピューターでの実行中に取得します。 ブラウザーベースのポータルエクスペリエンス全体を通じて開発を行う場合は、それも Azure Functions 提供します。</p>


  <h2>次のレベルまでステップアップ</h2>


  <p>クラウドでサーバーレスアプリケーションを実行した後、継続的インテグレーション、継続的デプロイ、アプリケーション監視のための標準プラクティスを設定するにはどうすればよいでしょうか。 Azure Functions は、Visual Studio Team Services と GitHub のためのファーストクラスのサポートと、アプリケーションの運用とパフォーマンスを適切に処理できるように Azure アプリケーションインサイトとの組み込みの統合を提供します。 より深く理解し、状態管理や複雑なオーケストレーションを必要とする高度なクラウドシナリオを構築する準備ができたら、Durable Functions 機能を使用できます。これにより、複雑さを隠蔽しながら、これらの処理を実行するためのコードに適したメカニズムが提供されます。</p>


  <p>サーバーレスコンピューティングの可能性についてもう少し強化している場合は、無料の <a href="https://azure.microsoft.com/en-us/resources/azure-serverless-computing-cookbook/" target="_blank">Azure サーバーレスコンピューティングクックブック</a> をダウンロードしてお読みください。これらのすべてを自分で実行する方法をご確認ください。</p>
