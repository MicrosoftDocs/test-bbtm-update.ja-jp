### YamlMime:Yaml
ms.openlocfilehash: e6e5807492a82dbed4a9b6a00d3eef67d515d99b
ms.sourcegitcommit: d03bdc7fe5447adb6530886aab848b75fe8fa8ee
ms.translationtype: MT
ms.contentlocale: ja-JP
ms.lasthandoff: 03/11/2022
ms.locfileid: "139892964"
Slug: introduction-to-websockets-on-windows-azure-web-sites
Title: Azure Web サイトでの WebSockets Windowsの概要
Summary: Windows Azure Web サイトでは、最近 WebSocket プロトコルのサポートが追加されました。  .NET 開発者と開発者node.js、アプリケーションで WebSockets を有効にして使用できます。
Content: >-
  Azure Web サイトでは最近、WebSocket プロトコルのサポートが追加されました。.NET 開発者と開発者node.js、アプリケーションで WebSockets を有効にして使用できます。


  Web サイトの [構成] タブに、アプリケーションの WebSockets サポートを有効にする新しいオプションがあります。


  <a href="https://acom.azurecomcdn.net/80C57D/blogmedia/blogmedia/2014/02/7563.a.png-550x0.png"><img class="alignnone size-medium wp-image-134071" alt="7563.a.png-550x0" src="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/7563.a.png-550x0-346x369.png" width="346" height="369" /></a>


  WebSockets が Web サイトに対して有効になると、ASP.NET (v4.5 以上) と node.js 開発者は、それぞれのフレームワークのライブラリと API を使用して WebSockets を使用できます。

  <h4>ASP.NET SignalR チャットの例</h4>

  SignalR は、データ転送にライブ HTTP 接続を必要とするリアルタイム Web アプリを構築するオープン ソースの .NET ライブラリです。SignalR ライブラリの <a href="https://www.asp.net/signalr/overview/signalr-20" target="_blank">入門</a> 記事と詳細を含む優れたサイトがあります。


  SignalR は WebSockets をプロトコルとしてネイティブにサポートします。SignalR は、Azure Web サイト上で接続された Web アプリを実行Windows最適な選択肢です。たとえば、このサンプル チャット アプリケーションは、<a href="https://www.asp.net/signalr/overview/signalr-20/getting-started-with-signalr-20/tutorial-getting-started-with-signalr-20" target="_blank"></a>Azure Web サイトWindows実行できます。


  次のスクリーン ショットは、SignalR チャット サンプルの構造を示しています。


  <a href="https://acom.azurecomcdn.net/80C57D/blogmedia/blogmedia/2014/02/3683.B.jpg-400x0.jpg"><img class="alignnone size-medium wp-image-134061" alt="3683.B.jpg-400x0" src="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/3683.B.jpg-400x0-366x369.jpg" width="366" height="369" /></a>


  Windows Azure Web サイトで Web アプリケーションを作成し、アプリケーションの WebSockets を有効にし、SignalR チャット サンプルをアップロードした後、Windows Azure Web サイトで独自のミニチャット ルームを実行できます。


  <a href="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/7838.C.jpg-550x0.jpg"><img class="alignnone size-full wp-image-134051" alt="7838.C.jpg-550x0" src="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/7838.C.jpg-550x0.jpg" width="550" height="166" /></a>


  Fiddler からの生の HTTP トレース (下図) は、SignalR のクライアント側の部分によって送信される WebSockets プロトコル アップグレード要求が Web サーバーとの WebSockets 接続をネゴシエートする方法を示しています。

  <pre><span style="font-family: 'courier new', courier;">Request snippet:</span>

  <span style="font-family: 'courier new', courier;">GET <a href="https://sigr-chat-on-waws.xxxx.net/signalr/connect?transport=webSockets snip HTTP/1.1" target="_blank">https://sigr-chat-on-waws.xxxx.net/signalr/connect?transport=webSockets snip HTTP/1.1 </a></span>

  <span style="font-family: 'courier new', courier;">Origin: https://sigr-chat-on-waws.xxxx.net</span>

  <span style="font-family: 'courier new', courier;">Sec-WebSocket-Key: hv2icF/iR1gvF3h+WKBZIw==</span>

  <span style="font-family: 'courier new', courier;">Connection: Upgrade</span>

  <span style="font-family: 'courier new', courier;">Upgrade: Websocket</span>

  <span style="font-family: 'courier new', courier;">Sec-WebSocket-Version: 13</span>

  <span style="font-family: 'courier new', courier;">…</span>

  <span style="font-family: 'courier new', courier;">Response snippet:</span>

  <span style="font-family: 'courier new', courier;">HTTP/1.1 101 Switching Protocols</span>

  <span style="font-family: 'courier new', courier;">Upgrade: Websocket</span>

  <span style="font-family: 'courier new', courier;">Server: Microsoft-IIS/8.0</span>

  <span style="font-family: 'courier new', courier;">X-Content-Type-Options: nosniff</span>

  <span style="font-family: 'courier new', courier;">X-Powered-By: ASP.NET</span>

  <span style="font-family: 'courier new', courier;">Sec-WebSocket-Accept: Zb4I6w0esmTDHM2nSpndA+noIvc=</span>

  <span style="font-family: 'courier new', courier;">Connection: Upgrade</span>

  <span style="font-family: 'courier new', courier;">…</span></pre>

  SignalR を使用したリアルタイム Web アプリケーションの構築の詳細については、SignalR の概要 <a href="https://www.asp.net/signalr/overview/signalr-20/getting-started-with-signalr-20/introduction-to-signalr" target="_blank"></a> Web サイトで使用できる広範なチュートリアルを参照してください。

  <h4>ASP.NET エコーの例</h4>

  ASP.NET v4.5 以降、WebSockets .NET Frameworkサポートされています。開発者は通常、SignalR のような上位レベルのライブラリを使用して、WebSockets 接続の管理に関する低レベルの詳細を抽象化したいと思います。ただし、このセクションでは、このセクションでは、ASP.NET で低レベルの WebSockets サポートを使用する簡単な例を示します。


  ASP.NET Echo サンプル プロジェクトは、WebSocket でリッスンして応答するサーバー側の .ashx ハンドラーと、WebSocket 接続を確立してサーバーにテキストを送信する単純な HTML ページで構成されています。


  .ashx ハンドラーは、WebSockets 接続要求をリッスンします。


  <a href="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/3362.D.jpg-400x0.jpg"><img class="alignnone size-full wp-image-134041" alt="3362.D.jpg-400x0" src="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/3362.D.jpg-400x0.jpg" width="400" height="182" /></a>


  .ashx ハンドラーは、WebSockets 接続要求をリッスンします。


  <a href="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/3580.E.JPG-450x0.jpg"><img class="alignnone size-full wp-image-134031" alt="3580.E.JPG-450x0" src="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/3580.E.JPG-450x0.jpg" width="450" height="302" /></a>


  WebSocket 接続が確立されると、ハンドラーはテキストをブラウザーにエコーバックします。


  <a href="https://acom.azurecomcdn.net/80C57D/blogmedia/blogmedia/2014/02/6558.F.JPG-550x0.jpg"><img class="alignnone size-medium wp-image-134021" alt="6558.F.JPG-550x0" src="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/6558.F.JPG-550x0-415x369.jpg" width="415" height="369" /></a>


  対応する HTML ページは、ページの読み込み時に WebSocket 接続を確立します。ブラウザー ユーザーが WebSocket 接続の下にテキストを送信するたびに、ASP.NET が返されます。


  <a href="https://acom.azurecomcdn.net/80C57D/blogmedia/blogmedia/2014/02/1307.G.JPG-550x0.jpg"><img class="alignnone size-medium wp-image-134011" alt="1307.G.JPG-550x0" src="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/1307.G.JPG-550x0-376x369.jpg" width="376" height="369" /></a>


  次のスクリーンショットは、テキストがエコーされ、WebSockets 接続が閉じているブラウザー セッションを示しています。


  <a href="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/1727.H-.jpg-400x0.jpg"><img class="alignnone size-full wp-image-134001" alt="1727.H .jpg-400x0" src="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/1727.H-.jpg-400x0.jpg" width="400" height="254" /></a>

  <h4>Node.js基本的なチャットの例</h4>

  Node.js開発者は、socket.io ライブラリを使用して、実行時間の長い HTTP 接続を持つ Web ページを作成する方法に慣れ親しまれています。Socket.io ネットワーク プロトコルとして WebSockets (その他のオプション) がサポートされ、WebSockets が使用可能な場合はトランスポートとして使用するように構成できます。


  アプリケーションNode.jsモジュールを含め socket.io、コードでソケットを構成する必要があります。


  <a href="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/1385.J.JPG-350x0.jpg"><img class="alignnone size-full wp-image-133991" alt="1385.J.JPG-350x0" src="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/1385.J.JPG-350x0.jpg" width="350" height="200" /></a>


  次に示すサンプル コードは、クライアントがニックネーム (チャット ハンドルなど) で接続をリッスンし、現在接続しているすべてのクライアントにチャット メッセージをブロードキャストします。


  <a href="https://acom.azurecomcdn.net/80C57D/blogmedia/blogmedia/2014/02/5187.I.JPG-550x0.jpg"><img class="alignnone size-medium wp-image-133981" alt="5187.I.JPG-550x0" src="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/5187.I.JPG-550x0-512x369.jpg" width="512" height="369" /></a>


  WebSockets を使用するアプリケーションでは、次web.config調整node.js必要です。


  <a href="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/3404.L.JPG-250x0.jpg"><img class="alignnone size-full wp-image-133971" alt="3404.L.JPG-250x0" src="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/3404.L.JPG-250x0.jpg" width="250" height="34" /></a>


  このweb.configは、IIS WebSockets サポート モジュール (iiswsock.dll) をオフにします。これは、IIS WebSockets サポート モジュールがnode.js。Nodej.js IIS には、WebSockets の独自の低レベルの実装が含まれています。これは、IIS サポート モジュールを明示的にオフにする必要がある理由です。


  ただし、この投稿で前に示した UI の [構成ポータル] タブを使用して、WebSockets 機能を Web サイトで有効にする必要があります。


  サンプル アプリケーションを使用して 2 つのクライアントが接続し、メッセージをnode.jsすると、HTML 出力は次のように表示されます。


  <a href="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/1817.K-.jpg-300x0.jpg"><img class="alignnone size-full wp-image-133961" alt="1817.K .jpg-300x0" src="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/1817.K-.jpg-300x0.jpg" width="300" height="272" /></a>


  Fiddler からの生の HTTP トレース (下図) は、webSockets プロトコルアップグレード要求を示しています。この要求は、web サーバーとの WebSockets 接続をネゴシエートするために socket.io のクライアント側の部分によって送信されます。

  <pre><span style="font-family: 'courier new', courier;">Request snippet:</span>

  <span style="font-family: 'courier new', courier;">GET https://abc123.azurewebsites.net/socket.io/1/websocket/11757107011524818642 HTTP/1.1</span>

  <span style="font-family: 'courier new', courier;">Origin: https://abc123.azurewebsites.net</span>

  <span style="font-family: 'courier new', courier;">Sec-WebSocket-Key: rncnx5pFjLGDxytcDkRgZg==</span>

  <span style="font-family: 'courier new', courier;">Connection: Upgrade</span>

  <span style="font-family: 'courier new', courier;">Upgrade: Websocket</span>

  <span style="font-family: 'courier new', courier;">Sec-WebSocket-Version: 13</span>

  <span style="font-family: 'courier new', courier;">…</span>

  <span style="font-family: 'courier new', courier;">Response snippet:</span>

  <span style="font-family: 'courier new', courier;">HTTP/1.1 101 Switching Protocols</span>

  <span style="font-family: 'courier new', courier;">Upgrade: Websocket</span>

  <span style="font-family: 'courier new', courier;">Server: Microsoft-IIS/8.0</span>

  <span style="font-family: 'courier new', courier;">X-Powered-By: ASP.NET</span>

  <span style="font-family: 'courier new', courier;">Sec-WebSocket-Accept: jIxAr5XJsk8rxjUZkadPWL9ztWE=</span>

  <span style="font-family: 'courier new', courier;">Connection: Upgrade</span>

  <span style="font-family: 'courier new', courier;">…</span></pre>

  <h4>WebSockets の接続制限</h4>

  現在、Azure Web サイトでは、実行中の Web サイト インスタンスごとにサポートされている同時実行 WebSockets 接続の数に対してスロットルが実装されています。 各スケール モードで Web サイト インスタンスごとにサポートされている WebSockets 接続の数を次に示します。

  <ul>
   <li>無料: (5) Web サイト インスタンスあたりの同時接続数</li>
   <li>共有: (35) Web サイト インスタンスあたりの同時接続数</li>
   <li>基本: (350) Web サイト インスタンスあたりの同時接続数</li>
   <li>Standard: 制限なし</li>
  </ul>

  アプリケーションが許容される制限を超える WebSocket 接続を開こうとすると、Windows Azure Web サイトは 503 HTTP エラー状態コードを返します。


  注: "Web サイト インスタンス" という用語は、次を意味します。(2) インスタンスで実行するために Web サイトがスケーリングされている場合、(2) 実行中の Web サイト インスタンスとしてカウントされます。

  <h4>WebSockets に SSL を使用する必要がある場合があります。</h4>

  WebSockets を使用する場合は、開発者が念頭に置く必要がある 1 つの変わり目があります。WebSockets プロトコルは、使用が少ない特定の HTTP ヘッダー (特に <em>Upgrade</em> ヘッダー) に依存します。そのため、Web プロキシなどの中間ネットワーク デバイスがこれらのヘッダーを取り除くのは珍しくありません。 通常、結果は、WebSockets アプリケーションが機能しない理由、または WebSockets を選択しない理由を疑問に思う開発者に不満を感じ、代わりに効率の低い代替手段に戻っています。


  この問題を回避するコツは、SSL を介して WebSockets 接続を確立する方法です。 これを実現するには、次の 2 つの手順を実行します。

  <ul>
   <li>WebSockets <em>wss://</em> のプロトコル識別子を使用します。たとえば、<span style="font-family: 'courier new', courier;"> <em> </em>ws://mytestapp.azurewebsites.net (HTTP</span> 経由の WebSockets) に接続する代わりに、wss:// <span style="font-family: 'courier new', courier;"><strong><em></em></strong><em>mytestapp.azurewebsites.net </em></span>(HTTPS 経由の WebSockets) に接続します。</li>
   <li>(省略可能)含まれているページも SSL を使用して実行します。これは必ずしも必須とは限らないが、使用するクライアント側フレームワークによっては、WebSockets 接続の "SSL-ness" が、含まれている HTML ページに対して有効な SSL 設定から派生している可能性があります。</li>
  </ul>

  Windows Azure Web サイトでは、* の既定の SSL 証明書を使用して、無料サイトでも SSL がサポート<em>されます。<span style="font-family: 'courier new', courier;">azurewebsites.net</span></em><span style="font-family: 'courier new', courier;">。</span>  そのため、回避策を使用するために独自の SSL 証明書を構成する必要はありません。WebSockets エンドポイントの場合、 <span style="font-family: 'courier new', courier;"><em>azurewebsites.net SSL と</em></span> * を使用して に切り替 <em>えるだけでできます。<span style="font-family: 'courier new', courier;">azurewebsites.net</span></em> ワイルドカード SSL 証明書が自動的に使用されます。


  Web サイトのカスタム ドメインを登録し、サイトの SNI または IP ベースの SSL 証明書を構成する機能もあります。Azure Web サイト<a href="https://azure.microsoft.com/en-us/develop/net/common-tasks/custom-dns-web-site/" target="_blank">を使用したカスタム</a> ドメインと <a href="https://azure.microsoft.com/en-us/develop/net/common-tasks/enable-ssl-web-site/" target="_blank">SSL</a> 証明書Windowsの詳細については、Azure Windows Web サイトを参照してください。


  &nbsp;
