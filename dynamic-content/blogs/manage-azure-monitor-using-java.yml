### YamlMime:Yaml
ms.openlocfilehash: 1f24f7a80de41cfb2fac5ca6659cea1e79052acb
ms.sourcegitcommit: d03bdc7fe5447adb6530886aab848b75fe8fa8ee
ms.translationtype: MT
ms.contentlocale: ja-JP
ms.lasthandoff: 03/11/2022
ms.locfileid: "139903509"
Slug: manage-azure-monitor-using-java
Title: Java をAzure Monitor管理する
Summary: Azure Monitor、クラウドおよびオンプレミス環境からのテレメトリを収集、分析、および対応するためのエンドツーエンドの監視ソリューションを提供することで、アプリケーションの可用性とパフォーマンスを最大化します。
Content: "<p>Azure Monitor、クラウドおよびオンプレミス環境からのテレメトリを収集、分析、および対応するためのエンドツーエンドの監視ソリューションを提供することで、アプリケーションの可用性とパフォーマンスを最大化します。 このツールは、ご利用のアプリケーションがどのように実行されているかを把握するのに役立ちます。さらに、このツールにより、そのアプリケーションに影響している問題点およびアプリケーションが依存しているリソースを事前に明らかにしておくことができます。 現在、Azure Management Libraries for Java のバージョン 1.16 がリリースされました。 Java 用 Azure 管理ライブラリを <a href=\"https://docs.microsoft.com/en-us/azure/monitoring-and-diagnostics/monitoring-overview-metrics\" target=\"_blank\">Azure Monitor</a> プログラムで管理できます。具体的には、次の方法を実行できます。</p>\n\n<ul>\n    <li>診断ログの設定</li>\n    <li>Event Hub、Storage アカウント、Log Analytics にログとメトリックをストリーミングする</li>\n    <li>クエリ メトリック</li>\n    <li>メトリック アラートを設定する</li>\n    <li>クエリ アクティビティ ログ</li>\n    <li>アクティビティ ログ アラートを設定する</li>\n    <li>自動スケールの設定</li>\n    <li>Advanced Analytics を実行する</li>\n</ul>\n\n<p>すぐに使&rsquo;い込む準備ができたら、Azure Management Libraries for <a href=\"https://github.com/azure/azure-libraries-for-java\" target=\"_blank\">Java GitHubしてください</a>。</p>\n\n<h2>作業の開始</h2>\n\n<p>1.16 バージョンのライブラリを使用POM ファイル次の依存関係フラグメントを Maven ファイルに追加します。</p>\n\n<pre>\n&lt;dependency&gt;\n     &lt;groupId&gt;com.microsoft.azure&lt;/groupId&gt;\n     &lt;artifactId&gt;azure&lt;/artifactId&gt;\n     &lt;version&gt;1.16.0&lt;/version&gt;\n&lt;/dependency&gt;</pre>\n\n<h2>Event Hub を介して Azure サービス ログとメトリックをストリーミングする</h2>\n\n<p><a href=\"https://docs.microsoft.com/en-us/azure/monitoring-and-diagnostics/monitoring-overview-of-diagnostic-logs\" target=\"_blank\">Azure 診断ログ</a> &ndash; イベント ハブを作成し、サービス ログとメトリックをイベント ハブにストリーミングすることで、マネージド Azure &ndash; サービスとリソースのサービスログとアプリ ログを、Elastic Stack、Splunk、Grafana などの任意のサードパーティのログおよびテレメトリ システムにほぼリアルタイムで <a href=\"https://docs.microsoft.com/en-us/azure/monitoring-and-diagnostics/monitoring-stream-diagnostic-logs-to-event-hubs\" target=\"_blank\">ストリーミング</a>できます。</p>\n\n<pre>\nDiagnosticSetting ds = azure.diagnosticSettings()\n     .define(&quot;DiaEventHub&quot;)\n     .withResource(docDb.id())\n     .withEventHub(eventHubAuthRule.id(), &quot;MyEventHub&quot;)\n     .withLog(&quot;DataPlaneRequests&quot;, 0)\n     .withLog(&quot;MongoRequests&quot;, 0)\n     .withMetric(&quot;AllMetrics&quot;, Period.minutes(5), 0)\n     .create();</pre>\n\n<p>完全なサンプル コードについては、以下 <a href=\"https://github.com/Azure-Samples/eventhub-java-manage-event-hub-events\" target=\"_blank\">を参照してください</a>。</p>\n\n<h2>クエリ メトリック</h2>\n\n<p>Azure <a href=\"https://docs.microsoft.com/en-us/azure/monitoring-and-diagnostics/monitoring-overview-metrics\" target=\"_blank\">リソースによって</a> 出力されるメトリックを通じて、Azure Monitor を使用すると、Azure で実行されている Azure サービスとアプリケーションのパフォーマンスと正常性を可視化できます。 Java コードを使用して、任意の Azure リソースのメトリックに対してクエリを実行できます。次に例を示します。</p>\n\n<pre>\n// Get metric definitions for storage account\nfor (MetricDefinition metricDefinition : azure.metricDefinitions().listByResource(storageAccount.id())) {\n     // Find metric definition for Transactions\n        if (metricDefinition.name().localizedValue().equalsIgnoreCase(&quot;transactions&quot;)) {\n             // Query metric records\n             MetricCollection metricCollection = metricDefinition.defineQuery()\n                  .startingFrom(recordDateTime.minusDays(7))\n                  .endsBefore(recordDateTime)\n                  .withAggregation(&quot;Average&quot;)\n                  .withInterval(Period.minutes(5))\n                  .withOdataFilter\n                    (&quot;apiName eq &#39;PutBlob&#39; and responseType eq &#39;Success&#39; and geoType eq &#39;Primary&#39;&quot;)\n                  .execute();\n                   &hellip;</pre>\n\n<p>完全なサンプル コードについては、以下 <a href=\"https://github.com/Azure-Samples/monitor-java-query-metrics-activitylogs\" target=\"_blank\">を参照してください</a>。</p>\n\n<h2>クエリ アクティビティ ログ</h2>\n\n<p><a href=\"https://docs.microsoft.com/en-us/azure/monitoring-and-diagnostics/monitoring-overview-activity-logs\" target=\"_blank\">Azure アクティビティ ログ</a> は、Azure で発生するサブスクリプション レベルのイベントに関する分析情報を提供するサブスクリプション ログです。 これらのイベントには、運用データからサービス正常性更新Azure Resource Managerデータの範囲が含まれます。 アクティビティ ログを使用すると、サブスクリプション内のリソースに適用された変更のユーザー、いつ、どのような変更を行ったかを判断できます。</p>\n\n<p>前の例と同じ期間のアクティビティ ログに対してクエリを実行できます。</p>\n\n<pre>\n// Query activity logs\nPagedList&lt;EventData&gt; logs = azure.activityLogs().defineQuery()\n     .startingFrom(recordDateTime.minusDays(7))\n     .endsBefore(recordDateTime)\n     .withAllPropertiesInResponse()\n     .filterByResource(storageAccount.id())\n     .execute();\n \nfor (EventData event : logs) {\n     ...\n     System.out.println(&quot;\\tCaller: &quot; + event.caller());\n     System.out.println(&quot;\\tCorrelationId: &quot; + event.correlationId());\n     System.out.println(&quot;\\tSubscriptionId: &quot; + event.subscriptionId());\n}</pre>\n\n<p>完全なサンプル コードについては、以下 <a href=\"https://github.com/Azure-Samples/monitor-java-query-metrics-activitylogs\" target=\"_blank\">を参照してください</a>。</p>\n\n<h2>メトリック アラートの設定</h2>\n\n<p>アクション <a href=\"https://docs.microsoft.com/en-us/azure/monitoring-and-diagnostics/monitoring-action-groups\" target=\"_blank\">グループは</a> 、ユーザーが定義できる通知設定のコレクションです。 通知は、電話番号の呼び出し、SMS メッセージの送信、電子メールの送信、Web フックの呼び出し、ITSM ツールへのデータの送信、Azure でのロジック アプリの呼び出し、Azure アプリへのプッシュ通知の送信を構成できます。</p>\n\n<p>Java コードを使用して、メトリック アラート条件がトリガーされると通知を受け取るアクション グループを作成できます。</p>\n\n<pre>\nActionGroup ag = azure.actionGroups().define(&quot;criticalPerformanceActionGroup&quot;)\n     .withExistingResourceGroup(rgName)\n     .defineReceiver(&quot;tierOne&quot;)\n         .withPushNotification(&quot;ops_on_duty@performancemonitoring.com&quot;)\n         .withEmail(&quot;ops_on_duty@performancemonitoring.com&quot;)\n         .withSms(&quot;1&quot;, &quot;4255655665&quot;)\n         .withVoice(&quot;1&quot;, &quot;2062066050&quot;)\n         .withWebhook(&quot;https://www.weeneedmorepower.performancemonitoring.com&quot;)\n     .attach()\n     .defineReceiver(&quot;tierTwo&quot;)\n          .withEmail(&quot;ceo@performancemonitoring.com&quot;)\n          .attach()\n     .create();</pre>\n\n<p>次に、通知をトリガーするメトリック アラートを作成します。 たとえば、次の方法で Web アプリのパフォーマンスに重大な変更がある場合に通知をトリガーするメトリック アラートを作成Azure App Service。</p>\n\n<pre>\nMetricAlert ma = azure.alertRules().metricAlerts().define(&quot;Critical performance alert&quot;)\n     .withExistingResourceGroup(rgName)\n     .withTargetResource(servicePlan.id())\n     .withPeriod(Period.minutes(5))\n     .withFrequency(Period.minutes(1))\n     .withAlertDetails(3,\n          &quot;Single Resource with Multiple Criteria, Multiple Dimensions and Wildcard&quot;)\n     .withActionGroups(ag.id())\n     .defineAlertCriteria(&quot;Metric1&quot;)\n         .withMetricName(&quot;CPUPercentage&quot;, &quot;Microsoft.Web/serverfarms&quot;)\n         .withCondition(MetricAlertRuleCondition.GREATER_THAN,\n              MetricAlertRuleTimeAggregation.TOTAL, 80)\n         .withDimension(&quot;Instance&quot;, &quot;*&quot;)\n         .attach()\n    \n     .create();</pre>\n\n<p>完全なサンプル コードについては、以下 <a href=\"https://github.com/Azure-Samples/monitor-java-metric-alerts-on-critical-performance\" target=\"_blank\">を参照してください</a>。</p>\n\n<h2>アクティビティ ログ アラートの設定</h2>\n\n<p>メトリック アラートと同様に、アクティビティ ログ アラートを使用して、サブスクリプションで重要なイベントまたはアクティビティが発生した場合に通知を監査 <a href=\"https://aka.ms/activitylogalertdoc\" target=\"_blank\">して受信できます</a>。 アクティビティ ログ アラートを作成し、通知するアクション グループを指定できます。</p>\n\n<p>たとえば、Java コードを使用して、潜在的なセキュリティ侵害に対するアクティビティ ログ アラートを設定し、ユーザーに通知を送信できます。</p>\n\n<pre>\nActivityLogAlert ala = azure.alertRules().activityLogAlerts().define(&quot;Potential security breach alert&quot;)\n     .withExistingResourceGroup(rgName)\n     .withTargetSubscription(azure.subscriptionId())\n     .withDescription(&quot;Security StorageAccounts ListAccountKeys trigger&quot;)\n     .withRuleEnabled()\n     .withActionGroups(ag.id())\n     // fire an alert when all conditions below are true\n     .withEqualsCondition(&quot;category&quot;, &quot;Security&quot;)\n     .withEqualsCondition(&quot;resourceId&quot;, storageAccount.id())\n     .withEqualsCondition(&quot;operationName&quot;, &quot;Microsoft.Storage/storageAccounts/listkeys/action&quot;)\n     .create();</pre>\n\n<p>完全なサンプル コードについては、以下 <a href=\"https://github.com/Azure-Samples/monitor-java-activitylog-alerts-on-security-breach-or-risk\" target=\"_blank\">を参照してください</a>。</p>\n\n<h2>自動スケーリングを設定する</h2>\n\n<p><a href=\"https://docs.microsoft.com/en-us/azure/monitoring-and-diagnostics/monitoring-overview-autoscale\" target=\"_blank\">自動スケーリング</a> を使用すると、アプリケーションの負荷を処理するために適切な量のリソースを実行できます。 これにより、idling であるインスタンスを削除することで、負荷の増加を処理するインスタンスを追加し、お金を節約できます。 自動スケールアウトルールとスケールイン ルールの構成は、define() メソッド チェーンと create() メソッド チェーンを使用して定義できます。</p>\n\n<p>たとえば、Java コードを使用すると、Web アプリが受信した HTTP 要求の数など、定義済みの条件に基づいてインスタンスをスケールアウトまたはスケールアウトする自動スケールを設定App Service。</p>\n\n<pre>\nAutoscaleSetting scaleSettings = azure.autoscaleSettings().define(autoscaleSettingsName)\n     .withRegion(Region.US_SOUTH_CENTRAL)\n     .withExistingResourceGroup(rgName)\n     .withTargetResource(webapp.appServicePlanId())\n     // define default profile\n     .defineAutoscaleProfile(&quot;Default profile&quot;)\n          .withFixedInstanceCount(1)\n          .attach()\n     // defining Monday to Friday profile\n     .defineAutoscaleProfile(&quot;Monday to Friday&quot;)\n          .withMetricBasedScale(1, 2, 1)\n          // create a scale-out rule\n          .defineScaleRule()\n               ...\n               .attach()\n          // create a scale-in rule\n          .defineScaleRule()\n               ...        \n               .attach()\n          // create schedule for auto scale\n          .withRecurrentSchedule(&quot;Pacific Standard Time&quot;, &quot;09:00&quot;,\n               DayOfWeek.MONDAY, DayOfWeek.TUESDAY, DayOfWeek.WEDNESDAY,\n               DayOfWeek.THURSDAY, DayOfWeek.FRIDAY)\n          .attach()\n          // define end time for the &quot;Monday to Friday&quot; profile specified above\n          ...\n     .create();</pre>\n\n<p>完全なサンプル コードについては、以下 <a href=\"https://github.com/Azure-Samples/monitor-java-autoscale-based-on-performance\" target=\"_blank\">を参照してください</a>。</p>\n\n<h2>Java を使用してAzure Monitorを今すぐ管理してみてください</h2>\n\n<p>それをテストし、マネージド Azure サービスとリソースからログとメトリックをストリーミングし、アラートを設定し、負荷を高め、これらのテレメトリ データがパフォーマンスと根本原因分析のトラブルシューティングにどのように役立つかを自分で確認します。 (以下の電子メールまたはコメント <a href=\"mailto:java@microsoft.com\" target=\"_blank\">を使用して) ご</a> 意見をお聞かわせください。</p>\n\n<p>この他のサンプルは、GitHub<a href=\"https://github.com/azure/azure-libraries-for-java\" target=\"_blank\">できます</a>。</p>\n\n<h2>その他の技術情報</h2>\n\n<ul>\n    <li><a href=\"https://docs.microsoft.com/en-us/java/azure/\" target=\"_blank\">Java 開発者向けの Azure</a></li>\n    <li><a href=\"https://docs.microsoft.com/en-us/azure/monitoring-and-diagnostics/monitoring-activity-log-alerts-new-experience\" target=\"_blank\">Azure Monitor</a></li>\n    <li><a href=\"https://azure.microsoft.com/en-us/develop/java/\" target=\"_blank\">Azure 上の Java</a></li>\n</ul>"
