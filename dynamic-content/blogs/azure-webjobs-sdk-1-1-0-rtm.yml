### YamlMime:Yaml
ms.openlocfilehash: f45ec04520175dfc3726588ff90101840091ecc9
ms.sourcegitcommit: d03bdc7fe5447adb6530886aab848b75fe8fa8ee
ms.translationtype: MT
ms.contentlocale: ja-JP
ms.lasthandoff: 03/11/2022
ms.locfileid: "139896142"
Slug: azure-webjobs-sdk-1-1-0-rtm
Title: Azure WebJobs SDK 1.1.0 RTM
Summary: このリリースでは、SDK の新しい機能拡張モデルが開きます。これにより、カスタム トリガーとバインダー (ファイル イベントや定期的なスケジュールなどに基づいて関数をトリガーする) を記述できます。
Content: >-
  <p>新しい機能が含まれていますAzure WebJobs SDK の新しい RTM リリースを公開しました。 このリリースでは、SDK の新しい機能拡張モデルが開きます。これにより、カスタム トリガーとバインダー (ファイル イベントや定期的なスケジュールなどに基づいて関数をトリガーする) を記述できます。これで、Azure キュー、BLOB、Service Bus、ファイル、タイマー、WebHooks GitHub、Slack、Slack、Slack、IFTTT などでトリガーできる関数を含む 1 つの Web ジョブを使用できるので、WebJobs &ndash; の開発と管理が簡単になります。 また、関数が失敗した場合に通知を送信できるアラートを設定することもできます。 また&rsquo;、多数の新機能が追加され、フィードバックに基づいて多くのバグ修正が行われた。</p>


  <h1>このリリースの機能</h1>


  <p>このリリースには、SDK の新しい機能拡張モデルに関する多くの機能が含まれています。これにより、顧客のトリガーとバインダーを記述できるだけでなく、既存の機能セットに対するコア機能強化も行えます。 このリリースの主な機能の一部を次に示します。</p>


  <h3>独自のトリガーとバインダーを記述する拡張可能なモデル</h3>


  <p>SDK の最初のリリースでは、Azure Queues、BLOB、および Service Bus からのイベントに基づいて関数をトリガーする方法に重点が置かService Bus。 SDK のリリース以降、開発者が、ファイル イベント、スケジュール ベースのトリガー、SQL サーバーからのイベントに基づいて関数をトリガーするなどのトリガーを追加する必要があるという多くのフィードバックを受け取っています。 新しい機能拡張モデルを使用すると、拡張機能の作成者は新しいトリガーとバインダーを記述できます。これらの拡張機能は、アプリケーション内の他のユーザーが使用できます。</p>


  <p><a href="https://github.com/JasonHaley/Redis.WebJobs.Extensions">Redis.WebJob.Extensions</a> は <a href="https://twitter.com/haleyjason">Jason Haley</a> によってビルドされるプロジェクトです。これにより、ユーザーは Redis のイベントに基づいて関数をトリガーできます。</p>


  <p>新しい拡張 <a href="https://github.com/Azure/azure-webjobs-sdk-extensions">モデルを示</a> す拡張機能を含む新しいオープン ソース のレポポを作成しました。 機能 <a href="https://github.com/Azure/azure-webjobs-sdk-extensions/wiki/Binding-Extensions-Overview">拡張</a> モデルのアーキテクチャについては、この詳細なガイドに従ってください。 独自のトリガーまたはバインダーを記述するために使用できるサンプルがあります。</p>


  <h3>新しいトリガー、バインダー、属性</h3>


  <p>このリリースには、SDK が関数をトリガーするための多くの新しい方法が含まれています。 関数をトリガーする新しい方法は次のとおりです。</p>


  <ul>
   <li>TimerTrigger を使用してスケジュールに基づく</li>
   <li>FileTrigger を使用したファイル ベースのイベント</li>
   <li>Singleton 属性を使用して、特定の関数の 1 つのインスタンスのみを特定の時点で複数のホストで実行します</li>
   <li>Timeout 属性を使用して、関数のタイムアウトまたは指定した時間後の実行を許可する</li>
   <li>新しい SendGrid バインドを使用して関数の完了時に電子メールを送信する</li>
   <li>ErrorTrigger を使用して、一部のエラーしきい値に基づいて関数をトリガーします (過去 1 時間に 10 件を超えるエラーがある場合はアラートを発生します)。</li>
   <li>WebHookTrigger を使用して汎用 WebHook イベントに基づいて関数をトリガーする (<em>プレビュー</em>)</li>
  </ul>


  <p>次のコード スニペットは、これらすべてのイベントでトリガーできる関数を含む WebJob を示しています。 ご覧のように、これらすべての関数が異なるイベントでトリガーされる 1 つの Web ジョブを実行できます。 また、パラメーター バインド、ルートマッチングなど、SDK の既存のすべての機能を利用することもできます。</p>


  <pre class="prettyprint">
      public class Functions
      {
          public static void ProcessTimer([TimerTrigger(&quot;*/15 * * * * *&quot;, RunOnStartup = true)]
          TimerInfo info, [Queue(&quot;queue&quot;)] out string message)
          {
              message = info.FormatNextOccurrences(1);
          }

          public static void ProcessQueueMessage([QueueTrigger(&quot;queue&quot;)] string message,
          TextWriter log)
          {
              log.WriteLine(message);
          }

          public static void ProcessFileAndUploadToBlob(
              [FileTrigger(@&quot;import\{name}&quot;, &quot;*.*&quot;, autoDelete: true)] Stream file,
              [Blob(@&quot;processed/{name}&quot;, FileAccess.Write)] Stream output,
              string name,
              TextWriter log)
          {
              output = file;
              file.Close();
              log.WriteLine(string.Format(&quot;Processed input file &#39;{0}&#39;!&quot;, name));
          }

          [Singleton]
          public static void ProcessWebHookA([WebHookTrigger] string body, TextWriter log)
          {
              log.WriteLine(string.Format(&quot;WebHookA invoked! Body: {0}&quot;, body));
          }

          public static void ProcessGitHubWebHook([WebHookTrigger] string body, TextWriter log)
          {
              dynamic issueEvent = JObject.Parse(body);
              log.WriteLine(string.Format(&quot;GitHub WebHook invoked! (&#39;{0}&#39;, &#39;{1}&#39;)&quot;,
                  issueEvent.issue.title, issueEvent.action));
          }

          public static void ErrorMonitor(
          [ErrorTrigger(&quot;00:01:00&quot;, 1)] TraceFilter filter, TextWriter log,
          [SendGrid(
              To = &quot;admin@emailaddress.com&quot;,
              Subject = &quot;Error!&quot;)]
           SendGridMessage message)
          {
              // log last 5 detailed errors to the Dashboard
              log.WriteLine(filter.GetDetailedMessage(5));
              message.Text = filter.GetDetailedMessage(1);
          }
      }</pre>

  <h1>Core SDK の新機能</h1>


  <p>機能拡張モデルを開き、トリガーとバインダーを追加する以外に、Core SDK に多くの機能も追加しました。 これらの多くはコミュニティからの機能要求なので、このリリースでこれらの質問を完了する必要があります。</p>


  <ul>
   <li><strong>キュー処理の制御の詳細</strong>: ユーザーは、より多くの制御を持つ (JobHostQueuesConfiguration)。<strong>NewBatchThreshold</strong>) を使用して、キューから削除されるキュー メッセージの数のコンカレンシー設定を確認します。 ユーザーは、独自の <strong>QueueProcessor</strong> をプラグインして、Queue メッセージの処理方法をカスタマイズすることもできます。</li>
   <li><strong>拡張可能なトレースとログ</strong>記録: このリリースでは、独自のロガーをプラグインできるよう、機能拡張ポイントを提供しました。
   <ul>
    <li><a href="https://github.com/Azure/azure-webjobs-sdk-samples/blob/master/BasicSamples/MiscOperations/Program.cs#L54">サンプル</a></li>
   </ul>
   </li>
   <li><strong>エラー監視システム</strong>: この機能を使用すると、ホストまたは関数でエラーを監視できます。 また、アラートを生成し、電子メールやテキスト、または IFTTT などの他のシステムをプラグイン経由で通知を送信することもできます。
   <ul>
    <li><a href="https://github.com/Azure/azure-webjobs-sdk-extensions/wiki/Error-Monitoring">サンプル</a></li>
   </ul>
   </li>
   <li><strong>複数のストレージ アカウントのサポート</strong>: WebJob 関数で複数のストレージ アカウントを使用できます。 これにより、あるストレージ アカウントから BLOB を読み取り、別のストレージ アカウントにアーカイブするなどのシナリオを実行できます。
   <ul>
    <li><a href="https://github.com/Azure/azure-webjobs-sdk/blob/master/test/Microsoft.Azure.WebJobs.Host.EndToEndTests/MultipleStorageAccountsEndToEndTests.cs#L131">サンプル</a></li>
   </ul>
   </li>
   <li><strong>関数</strong>のタイムアウトの指定を許可する: ユーザー フィードバック (&ldquo;継続的 Web ジョブの固定と <a href="https://github.com/Azure/azure-webjobs-sdk/issues/590">QueueTriggers</a>&rdquo; の防止) に基づいて、タイムアウトの有効期限が切れたときに関数が宣言によって関数の取り消しを要求できる Timeout 属性を追加しました。 これは JobHost レベルで設定できます。
   <ul>
    <li><a href="https://github.com/Azure/azure-webjobs-sdk-samples/blob/master/BasicSamples/MiscOperations/Functions.cs#L125">サンプル</a></li>
   </ul>
   </li>
   <li><strong>関数を動的に有効または無効にする: </strong>これにより、関数がトリガーされるのを無効にし、アプリ設定または環境名である可能性がある構成スイッチによって制御できます。
   <ul>
    <li><a href="https://github.com/Azure/azure-webjobs-sdk-samples/blob/master/BasicSamples/MiscOperations/Functions.cs#L104">サンプル</a></li>
   </ul>
   </li>
   <li>BLOB の <strong>CloudBlobDirectory バインド</strong> を追加しました。</li>
   <li><strong>BLOB の IEnumerable バインダー: </strong>BLOB のコレクション (IEnumerable、IEnumerable、CloudBlobContainer など) にバインドできます。<strong></strong>
   <ul>
    <li><a href="https://github.com/Azure/azure-webjobs-sdk/blob/master/test/Microsoft.Azure.WebJobs.Host.EndToEndTests/BlobBindingEndToEndTests.cs#L155">サンプル</a></li>
   </ul>
   </li>
   <li><strong>WebJobs SDK で使用される Azure Storage SDK</strong> クライアントを制御/カスタマイズする: CloudQueueClient/CloudBlobClient/CloudTableClient などに高度なオプションを指定/設定するための JobHostConfiguration.StorageClientFactory を追加しました。</li>
  </ul>


  <h1>ServiceBus の機能強化</h1>


  <p>機能拡張モデルを開く一環として、ServiceBus トリガーとバインダーをこの新しい拡張システムに基づくものに移動しました。 ServiceBus を使用し、このバージョンの SDK に更新する場合は、ServiceBus トリガーとバインダーを次のように登録する必要があります。</p>


  <p>Service Bus接続文字列のオーバーライドが ServiceBusConfiguration によって提供されます。 次のサンプルを参照 <a href="https://github.com/Azure/azure-webjobs-sdk-samples/blob/master/BasicSamples/ServiceBus/Program.cs">してください</a>。</p>


  <pre>

  public class Program

  {
     public static void Main()
     {
        JobHostConfiguration config = new JobHostConfiguration();
        config.UseServiceBus();
        JobHost host = new JobHost(config);
        host.RunAndBlock();
     }
  }</pre>


  <h3>次のような機能が強化されました。</h3>


  <ul>
   <li>ServiceBusConfiguration を使用したメッセージ処理の詳細なカスタマイズを許可します。<strong>MessagingProvider</strong></li>
   <li>MessagingProvider では、ServiceBus MessagingFactory と NamespaceManager のカスタマイズがサポートされます</li>
   <li>新しい <strong>MessageProcessor 戦略</strong> パターンを使用すると、キュー/トピックごとにプロセッサを指定できます</li>
   <li>既定でメッセージ <strong>処理コンカレン</strong> シーをサポートします (以前はコンカレンシーが実行されていませんでした)</li>
   <li>ServiceBusConfiguration.MessageOptions を使用した <strong>OnMessageOptions</strong> の簡単なカスタマイズ</li>
   <li>ServiceBusTriggerAttribute/ServiceBusAttribute で <strong>AccessRights</strong> を指定できます (管理権限を持たない可能性があるシナリオの場合) <ul>
    <li><a href="https://github.com/Azure/azure-webjobs-sdk-samples/blob/master/BasicSamples/ServiceBus/Functions.cs#L71">サンプル</a></li>
   </ul>
   </li>
  </ul>


  <h1>監視用のダッシュボード</h1>


  <p>ダッシュボードを引き続き使用して、さまざまなイベントに基づいてトリガーされた関数を監視できます。 リアルタイム監視、リアルタイム I/O、関数の再生、関数の中止など、以前と同じ利点があります。次の図は、この特定の Web ジョブのダッシュボードの [関数] ビューを示しています。</p>


  <p><img alt="AzureWebJobs" border="0" height="229" src="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/2d251b0a-2046-4d6b-a58e-959e05a3f7c7.png" style="border-left-width: 0px; border-right-width: 0px; background-image: none; border-bottom-width: 0px; padding-top: 0px; padding-left: 0px; display: inline; padding-right: 0px; border-top-width: 0px" title="AzureWebJobs" width="606"></p>


  <h1>このリリースをダウンロードする</h1>


  <p>NuGet ギャラリーから WebJobs SDK をダウンロードし、次のように NuGet パッケージ マネージャー コンソールを使用して、NuGet ギャラリーからこれらのパッケージをインストールできます。</p>


  <ul>
   <li>Install-Package <a href="https://www.nuget.org/packages/Microsoft.Azure.WebJobs/">Microsoft.Azure.WebJobs</a></li>
  </ul>


  <p>次のパッケージを使用するMicrosoft Azure Service Bus、次のパッケージをインストールします。</p>


  <ul>
   <li>Install-Package <a href="https://www.nuget.org/packages/Microsoft.Azure.WebJobs.ServiceBus/">Microsoft.Azure.WebJobs.ServiceBus</a></li>
  </ul>


  <p>新しい拡張モデル上に構築された新しいトリガー (タイマー、ファイルなど) とバインダーを含む新しいパッケージがあります。</p>


  <ul>
   <li>Install-Package <a href="https://www.nuget.org/packages/Microsoft.Azure.WebJobs.Extensions/">Microsoft.Azure.WebJobs.Extensions</a></li>
  </ul>


  <p><a href="https://sendgrid.com/">SendGrid</a> サービスを使用して電子メールを送信できる新しいパッケージがあります。 これを使用すると、関数の失敗などのさまざまなエラーに対して電子メール通知を送信できます。</p>


  <ul>
   <li>Install-Package <a href="https://www.nuget.org/packages/Microsoft.Azure.WebJobs.Extensions.SendGrid/">Microsoft.Azure.WebJobs.Extensions.SendGrid</a></li>
  </ul>


  <p>これは、SDK が WebHook イベントに基づいて関数をトリガーできる新しいパッケージです。 現在、このパッケージはプレビュー中です。</p>


  <ul>
   <li>Install-Package <a href="https://www.nuget.org/packages/Microsoft.Azure.WebJobs.Extensions.WebHooks/">Microsoft.Azure.WebJobs.Extensions.WebHooks</a></li>
  </ul>


  <h2>オープン ソース</h2>


  <p>SDK、機能拡張システム、および関連リポジトリのソース コードは、次の場所で使用できます。</p>


  <ul>
   <li><a href="https://github.com/Azure/azure-webjobs-sdk/">Azure WebJobs SDK</a></li>
   <li><a href="https://github.com/Azure/azure-webjobs-sdk-extensions">Azure WebJobs SDK 拡張機能</a></li>
   <li><a href="https://github.com/Azure/azure-webjobs-sdk-samples/">Azure WebJobs SDK サンプル</a></li>
  </ul>


  <p>フィードバックの問題を開き、修正する問題の PR&rsquo; を送信してください。</p>


  <h2>サンプル</h2>


  <ul>
   <li>BLOB、テーブル、キュー、タイマー、ファイル、WebHook、Service Bus などのためのトリガーとバインダーを使用する方法に関するサンプルを確認できます。&nbsp;</li>
   <li><b>PhluffyShuffy</b> は、顧客が BLOB ストレージから画像を処理する関数をトリガーする画像をアップロードできる画像処理 Web サイトです。</li>
   <li><b>PhluffyLogs</b> は、WebJob がアプリによって生成されたログ ファイルを解析し、ログ ファイルをアーカイブする例です。</li>
  </ul>


  <h2>ドキュメント</h2>


  <ul>
   <li><a href="https://github.com/Azure/azure-webjobs-sdk-extensions/wiki/Binding-Extensions-Overview">新しいトリガーとバインダーを作成する際のガイドライン</a></li>
   <li><a href="https://channel9.msdn.com/Shows/Cloud+Cover/Episode-183-Azure-WebJobs-Update-with-Pranav-Rastogi">Azure WebJobs Av Rastogi を使用した更新</a></li>
   <li><a href="https://channel9.msdn.com/Shows/Web+Camps+TV/Making-Your-Jobs-Easier-With-Windows-Azure-WebJobs-SDK">Channel 9 のビデオ「ジョブを SDK を使用してジョブを簡単Windows Azure WebJobsする</a></li>
   <li><a href="https://www.hanselman.com/blog/IntroducingWindowsAzureWebJobs.aspx">Scott Hanselman による WebJobs と SDK の概要</a></li>
   <li><a href="https://www.asp.net/aspnet/overview/developing-apps-with-windows-azure/azure-webjobs-recommended-resources">&ndash; Azure WebJobs推奨リソース</a></li>
   <li><a href="https://channel9.msdn.com/Tags/azurefridaywebjobs">Azure Friday の WebJobs ビデオ シリーズ</a></li>
   <li>Magnus Martensson によるビデオ シリーズ</li>
   <li><a href="https://www.asp.net/aspnet/overview/developing-apps-with-windows-azure/getting-started-with-windows-azure-webjobs">チュートリアル: WebJobs SDK のMicrosoft Azureする</a></li>
  </ul>


  <h1>フィードバックを送信し、ヘルプを得る</h1>


  <p>ご質問がある場合は、<a href="https://azure.microsoft.com/en-us/support/forums/">Azure</a> フォーラム、<a href="https://forums.asp.net/1247.aspx">ASP.NET</a> フォーラム、または <a href="https://stackoverflow.com/">StackOverflow.com (タグ</a>名 #Azure-WebJobsSDK) で質問してください。</p>


  <h1>まとめ</h1>


  <p>SDK のこのリリースでは、トリガーとバインダーの全く新しい世界が開き、拡張機能の作成者は、選択した任意のイベントの種類のトリガーを作成できます。 たとえば、ファイル イベント、タイマー/Cron スケジュール イベント、SQL イベント、Redis pub/sub イベントなどです (以下の詳細なドキュメントとサンプルへのリンクを参照してください)。 トリガーは、選択したイベント ソース &ndash; を監視するトリガーを作成できる Azure イベントにのみバインドされなくなりました。 トリガーに基づくアプリの開発と管理がはるかに簡単になります。 コミュニティによって新しいトリガーとバインダーが作成され、機能拡張モデルに関するフィードバックを受け取るのを楽しみにしています。</p>


  <p>ありがとう！</p>


  <p><em>Azure WebJobs チーム</em><br>

  Twitter で最新の更新プログラムを探し、 <a href="https://twitter.com/search?q=AzureWebJobs">#AzureWebJobs を使用してください</a>。</p>
