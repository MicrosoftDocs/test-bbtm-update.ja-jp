### YamlMime:Yaml
ms.openlocfilehash: ded9d8993b485288ce1e33da8566724badb45a89
ms.sourcegitcommit: d03bdc7fe5447adb6530886aab848b75fe8fa8ee
ms.translationtype: MT
ms.contentlocale: ja-JP
ms.lasthandoff: 03/11/2022
ms.locfileid: "139892703"
Slug: scaling-microsoft-kaizala-on-azure
Title: Azure での Microsoft Kaizala のスケーリング
Summary: >+
  Microsoft Kaizala は、モバイル専用ユーザー向けの安全な作業管理およびモバイルメッセージングアプリです。 現在、私たちは、自宅からの作業に関連する使用量の増加に起因するエンタープライズグレードの生産性向上アプリの管理とスケーリングについて、私たちの学習を共有しています。

Content: >-
  <p aria-level="1" paraeid="{a0c48b0b-30e3-4ded-96ce-285339384be2}{197}" paraid="694240638" role="heading">この投稿は、 <i>Anubhav Mehendru</i><em>、グループエンジニアリングマネージャー、Kaizala</em> <em>によって共同作成されました</em>。</p>


  <p paraeid="{a0c48b0b-30e3-4ded-96ce-285339384be2}{225}" paraid="673204634">モバイル専用ワーカーは、作業を完了するために、シンプルで安全な作業管理とモバイルメッセージングアプリ &mdash; の<a href="https://www.microsoft.com/en-us/microsoft-365/business/microsoft-kaizala" target="_blank">Microsoft Kaizala</a> &mdash; に依存しています。 covid-19 は世界中の自宅からの多くの人たちを強制的に使用することを強制しているため、Kaizala 使用量は、事前 covid-19 から3倍の範囲を超えています。 これは製品の成長に適していますが、お客様からの保証が99.99% に達した場合でも、サービスの規模と使用量が増加することを保証するために、エンジニアリングチームのプレッシャーが高まっています。</p>


  <p>現在、 &rsquo; エンタープライズグレードのセキュリティで保護された生産性アプリとその背後にあるバックエンドサービスの管理とスケーリングについて、いくつかの学習を共有しています。</p>


  <h2>Kaizala の基礎</h2>


  <p>Kaizala は、主にモバイル専用のユーザーを対象とした生産性向上ツールであり、コアクラウドプラットフォームとして Microsoft Azure されたマイクロサービスアーキテクチャに基づいています。 ワークロードは<a href="https://azure.microsoft.com/en-us/services/cloud-services/" target="_blank">azure Cloud Services</a>で実行され、 <a href="https://azure.microsoft.com/en-us/services/sql-database/" target="_blank">azure SQL DB</a>と<a href="https://azure.microsoft.com/en-us/services/storage/blobs/" target="_blank">Azure Blob Storage</a>プライマリストレージに使用されます。 <a href="https://azure.microsoft.com/en-us/services/cache/" target="_blank">azure cache for Redis</a>を使用してキャッシュを処理し、 <a href="https://azure.microsoft.com/en-us/services/service-bus/" target="_blank">azure Service Bus</a>と<a href="https://azure.microsoft.com/en-us/services/notification-hubs/" target="_blank">azure Notification Hub</a>はイベントの非同期処理を管理します。 ユーザー認証には、 <a href="https://azure.microsoft.com/en-us/services/active-directory/" target="_blank">Azure Active Directory (Azure AD)</a>が使用されます。 <a href="https://azure.microsoft.com/en-us/services/data-explorer/" target="_blank">Azure データエクスプローラー</a>と<a href="https://azure.microsoft.com/en-us/services/monitor/" target="_blank">azure Monitoring</a> for Data Analytics を使用します。 <a href="https://docs.microsoft.com/en-us/azure/devops/pipelines/get-started/what-is-azure-pipelines?view=azure-devops" target="_blank">Azure Pipelines</a>は、1週間に複数回更新を迅速に展開できる安全な自動展開に使用されます。</p>


  <p>安全なデプロイプロセスに従って、顧客への影響を最小限に抑え、新しい機能と最適化を段階的にリリースし、公開とロールバックの機能に対するフルコントロールを実現しています。</p>


  <p>さらに、一連のユーザー/グループまたはテナントに新しい機能が公開されるなど、すべての構成を制御できる集中管理された構成管理システムを使用します。 Msg 処理率、受信処理、ユーザー分類、優先処理、低速ダウンな非コア機能などをきめ細かく制御します。これにより、ユーザーセットに対して新しい機能と最適化のプロトタイプを迅速に作成できます。</p>


  <h2>主要回復性戦略</h2>


  <p>マイクロソフトでは、主に次の復元戦略を採用しています。</p>


  <h3>API レート制限</h3>


  <p>既存のサービスを誤用から保護するには、複数のクライアントからの着信呼び出しを安全な制限内で制御する必要があります。 お客様の操作に対する待機時間の影響を最小限にすると、メモリ内キャッシュに基づいてリミッター率を完全に取り入れています。</p>


  <h3>最適化されたキャッシュ</h3>


  <p>最適なユーザーエクスペリエンスを提供するために、汎用メモリ内キャッシュインフラストラクチャを作成しました。このインフラストラクチャでは、複数のコンピューティングノードが Azure Redis PubSub を使用して状態の変更を迅速に同期することができます。 これを使用すると、多数の外部 API 呼び出しが回避され、SQL の負荷が実質的に減少しました。</p>


  <h3>重要な操作の優先順位を設定する</h3>


  <p>顧客のトラフィックが多いためにサービスの過負荷が発生した場合は、メッセージなどの非コア操作に対するメッセージングなどの重要な顧客の操作に優先順位を付けます。</p>


  <h3>コアコンポーネントの分離</h3>


  <p>メッセージングをサポートするコアシステムコンポーネントは、コアメッセージング操作に影響を与えないように、他の非コア部分から完全に分離されるようになりました。 分離は、独立したコンピューティングノードなどのすべてのリソースレベルで実行されます。また、イベント処理用に個別の service bus を使用し、非コア操作用に完全に独立したストレージを使用します。</p>


  <h3>ノード間通信の削減</h3>


  <p>メッセージ処理システムでは、ノード間の依存関係の原因となったノード間の通信のシナリオを大幅に減らし、メッセージ処理全体を低速化するようにしました。</p>


  <h3>制御されたサービスのロールアウト</h3>


  <p>ロールアウトプロセスにいくつかの変更を加えました。これにより、新しい機能のロールアウトを制御し、顧客への悪影響を最小限に抑えることができます。 デプロイは、ダウンタイムが発生しないようにするために、顧客の負荷が最小限になるように、早い朝のスロットに移動しました。</p>


  <h3>監視とテレメトリ</h3>


  <p>特定の監視ダッシュボードを設定して、重要なパラメーター (CPU 消費、スレッド数、ガベージコレクション (GC) 率、受信メッセージの割合、未処理のメッセージ、ロックの競合率、接続されているクライアントなど) を監視するサービスの正常性の概要をすばやく確認します。</p>


  <h3>GC 速度</h3>


  <p>お客様の操作中に GC の待機時間の影響を最小限に抑えるために、web およびワーカーインスタンスのニーズに応じて、クラウドサービスで発生している Gen2 GC の割合を制御するオプションがありました。</p>


  <h3>ノードのパーティション分割</h3>


  <p>ユーザーは、一貫性のあるハッシュメカニズムを使用して所有権を分配するために、複数のノードにまたがってパーティション分割する必要があります。 このマスターの所有権は、必要なユーザー&#39;の情報だけが特定のノードのメモリ内キャッシュに格納されるようにするのに役立ちます。</p>


  <h3>アクティブなパッシブユーザー</h3>


  <p>大規模なグループのメッセージング操作では、多くのユーザーがアクティブでないときに、常にアプリを使用しているユーザーがいます。 ここでは、アクティブユーザーのメッセージ配信に優先順位を付けて、最後のバケットアクティブユーザーがメッセージを高速に受信するようにします。</p>


  <h3>シリアル化の最適化</h3>


  <p>既定の JSON シリアル化は、入力出力操作が非常に頻繁に発生し、貴重な CPU サイクルを書き込む場合に、コストが高くなります。 ProtoBuf は、大規模なデータ構造に対する操作を最適化するために利用された高速なバイナリシリアル化プロトコルを提供します。</p>


  <h3>コンピューティングのスケーリング</h3>


  <p>私たちは、内部の複数のテスト環境とスケール環境でコンピューティングの使用量を再評価し、ニーズに応じて最適化し、販売された商品のコスト (COGS) を最適化するためにコンピューティングノード SKU を注意深く減らしました。 Azure リージョンのほとんどのトラフィックは当日に発生しますが、冗長なデータクリーンアップ、キャッシュクリーンアップ、GC、データベースの再インデックス作成、コンプライアンスジョブなど、大量のタスクを実行するために利用される夜間には最小限の負荷がかかります。</p>


  <h3>ストレージのスケーリング</h3>


  <p>スケールを大きくすると、バックエンドサービスでの確認の負荷が大きくなり、大量のストレージを消費していました。 重要な操作には非常に一貫性のあるデータが必要ですが、重要でない操作の要件は低くなります。 この受信確認は高可用性 SQL ストレージに移行しました。これにより、SQL ストレージの10分の1にコストがかかります。</p>


  <p>バックグラウンド操作のクエリは、SQL ストレージの全体的なピーク負荷を減らすために遅延しています。 重要ではない特定の操作は、最終的な整合性モデルに対して厳密に一貫性が保たれるように移行され、ピーク時の記憶域の負荷がフラット化されるため、追加のユーザーのための容量が増えます。</p>


  <h2>今後のプラン</h2>


  <p>covid-19 の状況は引き続き続きますが、複数のお客様からの Kaizala 導入について、加速するペースが期待されています。 メッセージングの負荷の増加と顧客の使用量の増加に対応するために、次のような新しい機能強化と最適化に取り組んでいます。</p>


  <ul>
      <li>アプリケーションをアクティブに使用しているユーザーが、バックエンドシステムが過負荷になっている場合でも、グループメッセージを直接プルできるようにする代替のメッセージングフローの開発。 アクティブユーザーに対するメッセージ配信は、パッシブユーザーに優先されます。</li>
      <li>データエンティティの分散型メモリ内キャッシュを積極的に使用して、ユーザーの迅速な応答と代替設計により、古いデータを最小限に抑えながら、キャッシュの同期を維持します。</li>
      <li>現在の仮想マシン (VM) ベースのモデルからコンテナーベースのデプロイモデルに移行して、機敏性を高め、運用コストを削減します。</li>
      <li>1つの接続でバッチ化されたデータフラッシュをサポートする大規模なコンシューマーグループに対する大規模な書き込み操作によって拡張できる、代替のストレージメカニズムについて確認します。</li>
      <li>データセンターの停止によるダウンタイムを最小化し、目標復旧時間 (RTO) と目標復旧時点 (RPO) を最小限に抑えるために、アクティブ/アクティブサービス構成に関するアイデアを積極的に調査します。</li>
      <li>いくつかの非コア機能をパッシブなスケールユニットに移行することに関するアイデアを調べて、そこでスタンバイコンピューティング/ストレージリソースを利用します。</li>
      <li>Azure Cloud services の動的スケーリング機能を評価します。これにより、ユーザーロードがピーク時の負荷の5分未満になる夜間時間中にコンピューティングノードの数を自動的に減らすことができます。</li>
  </ul>
