### YamlMime:Yaml
ms.openlocfilehash: 83af371cd21ff24a38e0ba80894db1d26c34f9e6
ms.sourcegitcommit: d03bdc7fe5447adb6530886aab848b75fe8fa8ee
ms.translationtype: MT
ms.contentlocale: ja-JP
ms.lasthandoff: 03/11/2022
ms.locfileid: "139890752"
Slug: improving-your-io-performance
Title: I/o パフォーマンスの向上
Summary: '[この記事は SQL Azure チームによって提供されました。]DBA は、オンプレミスの SQL Server インストールの i/o パフォーマンスを向上させるために、大量の作業を行ってきました。 通常、ストレージを調整する必要があります...'
Content: '<p>[この記事は SQL Azure チームによって提供されました。]</p><p>DBA は、オンプレミスの SQL Server インストールの i/o パフォーマンスを向上させるために、大量の作業を行ってきました。 通常、ストレージシステムの調整、RAID アレイ間でのデータベースの分散、または<b>tempdb</b>が使用しているファイルの数の拡張を行います。これらは、SQL Server DBA の一般的な手法です。 ただし、SQL Azure の場合のように、記憶域サブシステムを使用していないときに i/o パフォーマンスを向上させるにはどうすればよいでしょうか。 クエリで i/o を使用し、クエリを改善する方法に注目します。 このブログの投稿では、大量の i/o を使用するクエリを検出する方法と、SQL Azure で i/o のパフォーマンスを向上させる方法について説明します。</p>  <h2>過剰な i/o 使用率の検出</h2>  <p>SQL Azure では、SQL Server と同じように、クエリのパフォーマンスを向上させるために i/o がボトルネックになります。 変更を加える前に、問題が発生しているクエリを検出できるようにする必要があります。 </p>  <p>この transact-sql SQL は、最も低速な上位25のクエリを返します。</p>  <pre class="csharpcode"><span class="kwrd">SELECT</span> <span class="kwrd">TOP</span> 25      q.[text],      (total_logical_reads/execution_count) <span class="kwrd">AS</span> avg_logical_reads,       (total_logical_writes/execution_count) <span class="kwrd">AS</span> avg_logical_writes,       (total_physical_reads/execution_count) <span class="kwrd">AS</span> avg_phys_reads,        Execution_count  <span class="kwrd">FROM</span> sys.dm_exec_query_stats         <span class="kwrd">cross</span> apply sys.dm_exec_sql_text(plan_handle) <span class="kwrd">AS</span> q   <span class="kwrd">ORDER</span> <span class="kwrd">BY</span>   (total_logical_reads + total_logical_writes) <span class="kwrd">DESC</span></pre>      <p>出力は次のようになります。</p>    <p><a href=""><img style="border-right-width: 0px; display: inline; border-top-width: 0px; border-bottom-width: 0px; border-left-width: 0px" title="clip_image001" border="0" alt="clip_image001" src="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/3443.clip_5F00_image001_5F00_thumb_5F00_2650F9F1.png" width="785" height="203"></a></p>    <p>上記のステートメントで ORDER BY 句を変更して、書き込みに対して最も時間のかかるクエリだけを取得したり、読み取りに最も時間がかかったりすることができます。</p>    <h2>クエリの変更</h2>    <p>SQL Azure は、データセンター、サーバー、ストレージの処理、ストレージのパフォーマンスの最適化という Microsoft の仕事です。 記憶域サブシステムの観点から i/o を高速にすることはできません。 ただし、ストレージに対する読み取りと書き込みの量を減らすことができる場合は、クエリのパフォーマンスを向上させることができます。</p>    <h3>大量のデータを読み取っています</h3>    <p>I/o を多用する方法の1つは、使用しないデータを読み取ることです。 この例を次に示します。</p>    <pre class="csharpcode"><span class="kwrd">SELECT</span> * <span class="kwrd">FROM</span> [<span class="kwrd">Table</span>]</pre>      <p>このクエリでは、[テーブル] のすべての列とすべての行が読み取られます。 これを改善する方法を次に示します。</p>    <ul>    <li>WHERE 句を使用して、シナリオに必要な行数だけになるように行の数を減らします。 </li>      <li>テーブルから必要な列に明示的に名前を付けると、その列のすべてが少なくなる可能性があります。 </li>  </ul>    <h3>カバリングインデックスの作成</h3>    <p>クエリごとに返される列の数を減らしたら、読み取り i/o が最も多いクエリに対して、クラスター化されていないインデックスの作成に集中できます。 対象となるインデックスは、インデックスの一部としてクエリ内のすべての列を含むインデックスです。これには WHERE 句の列が含まれます。 1つのクエリには複数の対象インデックスが含まれている場合があります。これは、クエリが多数のテーブルを結合し、それぞれが対象となるインデックスを持つ可能性があるためです。 インデックスに使用する列を特定するには、インデックスの SQL Azure の実行プランを調べます。 詳細については、MSDN の記事「 <a href="https://msdn.microsoft.com/en-us/library/aa964133(SQL.90).aspx">SQL Server の最適化</a>」を参照してください。</p>    <p>クラスター化されていないインデックス (カバリングインデックスを作成するときに行うこと) は、書き込みのパフォーマンスを低下させます。 これは、挿入または更新時に、インデックスを更新する必要があるためです。 そのため、対象となるインデックスの作成と、データベースへの読み取りと書き込みの比率とのバランスを取る必要があります。 書き込みの割合が少ないデータベースは、カバーされたインデックスのパフォーマンスを向上させることができます。</p>    <h2>まとめ</h2>    <p>また、クエリを変更して、i/o の使用量を減らし、クエリのパフォーマンスを向上させる方法についても触れています。 経験則として、MSDN に掲載されているオンプレミスの SQL Server インストールのクエリ最適化の手法は、SQL Azure に対して機能します。 私が行おうとしているのは、クエリの i/o 使用率が高く、クエリの最適化に集中している場合、Microsoft は SQL Azure の背後でストレージサブシステムを最適化する優れたジョブを実行しているということです。 </p>    <p>質問、懸念事項、コメントがありますか。 これらを下に投稿してください。</p>'
