### YamlMime:Yaml
ms.openlocfilehash: 9a101e82b2b21ee9f736e067179bbcc74f54a83f
ms.sourcegitcommit: d03bdc7fe5447adb6530886aab848b75fe8fa8ee
ms.translationtype: MT
ms.contentlocale: ja-JP
ms.lasthandoff: 03/11/2022
ms.locfileid: "139889277"
Slug: azure-documentdb-javascript-as-modern-day-t-sql
Title: 'Azure DocumentDB: JavaScript as Modern Day T-SQL'
Summary: Azure DocumentDB のビジョンをさらに一歩進め、JavaScript 言語統合クエリ API を JavaScript サーバー側 SDK に導入します。
Content: "<p><a href=\"https://www.documentdb.com\">Azure DocumentDB&#39;データベース</a> エンジンは、JSON と JavaScript のファースト クラスのサポートを提供するために、最初から完全に設計されています。 JavaScript 開発者は、エンティティ マッパー、スキーマ、コード生成ツール、型装飾、その他のテープテープを扱わずにアプリケーションを構築できます。 データベース エンジン内の JSON と JavaScript に対する深いコミットメントは、次の方法で示されています。 &nbsp;</p>\n\n<ol>\n <li><a href=\"https://www.vldb.org/pvldb/vol8/p1668-shukla.pdf\">スキーマに依存しないインデックス</a>作成: DocumentDB では、一貫性のあるクエリをサポートするために、開発者がスキーマまたはセカンダリ インデックスを指定する必要があります。 データベース エンジンは、すべての JSON ドキュメント内のすべてのプロパティのインデックスを自動的に作成し、同時に高速書き込みの持続ボリュームを取り込む設計です。 これは、進化し続ける最新のアプリケーションとデータベースの間の摩擦を取り除く上で重要な手順です。</li>\n <li><a href=\"https://channel9.msdn.com/Shows/Data-Exposed/DataExposedQueryingDocumentDB\">SQL JavaScript</a> 型システム内をルートとするクエリ言語: DocumentDB&#39;の SQL クエリ言語は、JavaScript&#39;型システムに基づいて作成されます。 これにより、JavaScript アプリケーションと DocumentDB の間の型システムの不一致が削除されるだけでなく、SQL クエリ内から JavaScript で完全に記述されたユーザー定義関数 (UDF) のシームレスな呼び出しも可能になります。</li>\n <li><a href=\"https://azure.microsoft.com/blog/2015/04/23/boost-your-applications-performance-with-server-side-javascript-in-azure-documentdb/\">JavaScript 言語統合</a>トランザクション: JavaScript に対する賭けの一環として、開発者は JavaScript で記述されたストアド プロシージャとトリガーを DocumentDB コレクションに登録できます。 これらのストアド プロシージャ/トリガーは、アンビエント データベース トランザクション内のデータベース エンジン内でサンドボックス化された方法で実行されます。 ストアド プロシージャ (またはトリガー) は、複数のドキュメントをトランザクションで更新できます。 データベース トランザクションは、ストアド プロシージャ (またはトリガー) が正常に完了するとコミットされます。JavaScript &quot;throw&quot; キーワードが実行されると、データベース トランザクションは中止されます。</li>\n <li><a href=\"https://azure.microsoft.com/en-us/documentation/articles/documentdb-programming/\">JavaScript 言語</a>統合クエリ&#39;: 現在、JavaScript 言語統合クエリ API を JavaScript サーバー側 SDK に導入することで、このビジョンをさらに一歩進めていけたらと思います。</li>\n</ol>\n\n<p>&nbsp; <img alt=\"\" src=\"https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/081915_0131_AzureDocume1.png\"></p>\n\n<h2>&nbsp;</h2>\n\n<h2>JavaScript 言語統合クエリ: NoSQL SQLの選択肢はありません</h2>\n\n<p>&nbsp;</p>\n\n<div>\n<table border=\"0\" style=\"background: rgb(231, 230, 230); border-collapse: collapse;\">\n <tbody valign=\"top\">\n  <tr>\n   <td><em>&quot;DocumentDB&#39;の fluent JS クエリを使用すると、&#39;&#39;が ES5&#39;の配列組み込みまたは <a href=\"https://lodash.com/\">Lodash</a> や <a href=\"https://underscorejs.org/\">アンダー</a>スコアのような JS ライブラリを使用したユーザーに簡単に理解できる JS チェーン構文を使用できます。&quot;</em>\n\n   <div style=\"text-align: right;\">John-David Da、 lodash の作成者</div>\n   </td>\n  </tr>\n </tbody>\n</table>\n</div>\n\n<p>&nbsp; コレクション内の次の 2 つの JSON ドキュメント (およびそれらのツリー表現) について考えてください。 &nbsp;</p>\n\n<div>\n<table border=\"0\" style=\"border-collapse: collapse;\">\n <colgroup>\n  <col style=\"width: 50%;\">\n  <col style=\"width: 50%;\">\n </colgroup>\n <tbody valign=\"top\">\n  <tr>\n   <td>\n   <pre class=\"prettyprint language-js\">\n{ &quot;locations&quot;: [ \n    {\n      &quot;country&quot;: &quot;Germany&quot;,\n      &quot;city&quot;: &quot;Berlin&quot; \n    },\n    {\n      &quot;country&quot;: &quot;France&quot;,    \n      &quot;city&quot;: &quot;Paris&quot;\n    }\n  ],  \n  &quot;headquarter&quot;: &quot;Belgium&quot;, \n  &quot;exports&quot;: [ \n    { &quot;city&quot;: &quot;Moscow&quot; }, \n    { &quot;city&quot;: &quot;Athens&quot; }\n  ]\n}\n</pre>\n   </td>\n   <td><img alt=\"\" src=\"https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/081915_0131_AzureDocume2.png\"></td>\n  </tr>\n  <tr>\n   <td>\n   <pre class=\"prettyprint language-js\">\n{ &quot;locations&quot;: [\n    {\n      &quot;country&quot;: &quot;Germany&quot;,    \n      &quot;city&quot;: &quot;Bonn&quot;, \n      &quot;revenue&quot;: 200\n    }\n  ], \n  &quot;headquarter&quot;: &quot;Italy&quot;,      \n  &quot;exports&quot;: [\n    {\n      &quot;city&quot;:&quot;Berlin&quot;,\n      &quot;dealers&quot;: [\n        {&quot;name&quot;: &quot;Hans&quot;}\n      ]\n    },\n    { &quot;city&quot;: &quot;Athens&quot; }\n  ]\n}\n</pre>\n   </td>\n   <td><img alt=\"\" src=\"https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/081915_0131_AzureDocume3.png\"></td>\n  </tr>\n </tbody>\n</table>\n</div>\n\n<p>&nbsp;以前は、&quot;&quot;&quot;本社を含むドキュメントからのすべてのエクスポートに対してクエリを実行できるストアド プロシージャを&quot;&quot;実行する必要があります。&quot; &nbsp;</p>\n\n<pre class=\"prettyprint language-js\">\nfunction() {\n  var filterQuery = &#39;SELECT * from companies c where c.headquarter = &quot;Belgium&quot;&#39;;\n  var isAccepted = __.queryDocuments(__.getSelfLink(), filterQuery,\n    function(err, docs, options) {\n      if (err) throw new Error(err.number + err.message);\n      __.response.setBody(docs);\n    });\n  if (!isAccepted) __.response.setBody(&#39;Query timed out&#39;);\n}\n</pre>\n\n<p>&nbsp; 実行すると、ストアド プロシージャは、エクスポートを含む応答ドキュメントを返します。 &nbsp;</p>\n\n<div>\n<table border=\"0\" style=\"border-collapse: collapse;\">\n <colgroup>\n  <col style=\"width: 50%;\">\n  <col style=\"width: 50%;\">\n </colgroup>\n <tbody valign=\"top\">\n  <tr>\n   <td>\n   <pre class=\"prettyprint language-js\">\n{ \n  &quot;results&quot;: [\n    {\n      &quot;locations&quot;: [\n        {\n          &quot;country&quot;: &quot;Germany&quot;,\n          &quot;city&quot;: &quot;Berlin&quot; \n        },\n        {\n          &quot;country&quot;: &quot;France&quot;,\n          &quot;city&quot;: &quot;Paris&quot; \n        }\n      ],           \n      &quot;headquarter&quot;:&quot;Belgium&quot;, \n      &quot;exports&quot;: [\n        { &quot;city&quot;: &quot;Moscow&quot; },\n        { &quot;city&quot;: &quot;Athens&quot; } \n      ]\n    }\n  ]\n} \n</pre>\n   </td>\n   <td><img alt=\"\" src=\"https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/081915_0131_AzureDocume4.png\"></td>\n  </tr>\n </tbody>\n</table>\n</div>\n\n<p>&nbsp;ストアド プロシージャから発行されたクエリは、まだ型指定が不十分なクエリSQL。 現在、&#39;統合クエリのお知らせにより、JavaScript でクエリを記述SQLする必要がなくなりました。 これを、以下の新しい言語統合クエリと対照的にしてください。 &nbsp;</p>\n\n<pre class=\"prettyprint language-js\">\nfunction() {\n  var resp = __.filter(function(company) {\n    return company.headquarter == &#39;Belgium&#39;;\n  });\n  if (!resp.isAccepted) __.response.setBody(&#39;Query timed out&#39;);\n}\n</pre>\n\n<p>&nbsp; クールは&#39;ですか?</p>\n\n<h2>SQL JavaScript クエリ API チート シートへのアクセス</h2>\n\n<p>次の表は、DocumentDB を使用した同等のクエリと&#39;のSQL JavaScript クエリ API を示しています。&nbsp;</p>\n\n<div>\n<table border=\"1\" width=\"100%\">\n <colgroup>\n  <col span=\"1\" style=\"width: 50%;\">\n  <col span=\"1\" style=\"width: 50%;\">\n </colgroup>\n <tbody>\n  <tr>\n   <th>DocumentDB SQL</th>\n   <th>JavaScript 言語統合クエリ</th>\n  </tr>\n  <tr>\n   <td>\n   <pre class=\"prettyprint language-js\">\n__.queryDocuments(__.getSelfLink(),\n      &quot;SELECT * &quot; +\n      &quot;FROM docs &quot; +\n      &quot;WHERE ARRAY_CONTAINS(docs.Tags, 123)&quot;\n    ,\n    function(err, docs, options) {\n      __.response.setBody(docs);\n    });\n</pre>\n   </td>\n   <td>\n   <pre class=\"prettyprint language-js\">\n__.filter(function(x) {\n    return x.Tags &amp;&amp; x.Tags.indexOf(123) &gt; -1;\n});\n</pre>\n   </td>\n  </tr>\n  <tr>\n   <td>\n   <pre class=\"prettyprint language-js\">\n__.queryDocuments(__.getSelfLink(),\n      &quot;SELECT docs.id, docs.message AS msg &quot; +\n      &quot;FROM docs &quot; +\n      &quot;WHERE docs.id=&#39;X998_Y998&#39;&quot;\n    ,\n    function(err, docs, options) {\n      __.response.setBody(docs);\n    });\n</pre>\n   </td>\n   <td>\n   <pre class=\"prettyprint language-js\">\n__.chain()\n    .filter(function(doc) {\n        return doc.id === &quot;X998_Y998&quot;;\n    })\n    .map(function(doc) {\n        return {\n            id: doc.id,\n            msg: doc.message\n        };\n    })\n    .value();\n</pre>\n   </td>\n  </tr>\n  <tr>\n   <td>\n   <pre class=\"prettyprint language-js\">\n__.queryDocuments(__.getSelfLink(),\n      &quot;SELECT VALUE tag &quot; +\n      &quot;FROM docs &quot; +\n      &quot;JOIN tag IN docs.Tags &quot; +\n      &quot;ORDER BY docs._ts&quot;\n    ,\n    function(err, docs, options) {\n      __.response.setBody(docs);\n    });\n</pre>\n   </td>\n   <td>\n   <pre class=\"prettyprint language-js\">\n__.chain()\n    .filter(function(doc) {\n        return doc.Tags &amp;&amp; Array.isArray(doc.Tags);\n    })\n    .sortBy(function(doc) {\n    return doc._ts;\n    })\n    .pluck(&quot;Tags&quot;)\n    .flatten()\n    .value()\n</pre>\n   </td>\n  </tr>\n </tbody>\n</table>\n</div>\n\n<p>&nbsp; DocumentDB サーバー側 JavaScript SDK の使用を開始するには、 <a href=\"https://azure.microsoft.com/en-us/services/documentdb/\">DocumentDB</a> にサインアップし、こちらからドキュメントを <a href=\"https://azure.microsoft.com/en-us/documentation/articles/documentdb-programming/\">確認してください。</a> サポートが必要な場合は、 <a href=\"https://stackoverflow.com/questions/tagged/azure-documentdb\">Stack Overflow</a>、 <a href=\"https://social.msdn.microsoft.com/forums/azure/en-US/home?forum=AzureDocumentDB\">Azure DocumentDB MSDN Developer Forums</a> に連絡するか、DocumentDB エンジニアリング チームとの 1 対 1 のチャットをスケジュールしてください。 DocumentDB の最新のニュースと機能については、 <a href=\"https://twitter.com/intent/follow?region=follow_link&amp;screen_name=DocumentDB&amp;tw_p=followbutton\">Twitter</a>をフォローしてください。</p>"
