### YamlMime:Yaml
ms.openlocfilehash: 7604e915f4da16e5a5d44bba9fd04b526a6d8487
ms.sourcegitcommit: d03bdc7fe5447adb6530886aab848b75fe8fa8ee
ms.translationtype: MT
ms.contentlocale: ja-JP
ms.lasthandoff: 03/11/2022
ms.locfileid: "139895614"
Slug: azure-resource-manager-2-5-for-visual-studio
Title: Visual Studio 用の Azure リソースグループ
Summary: Azure Resource Manager を使用すると、アプリケーションを構成するリソースを宣言によって記述する再利用可能なデプロイテンプレートを作成できます。
Content: >-
  &nbsp;

  <h3>以前は Azure Resource Manager ツールのプレビューと呼ばれていました</h3>

  <a href="https://azure.microsoft.com/en-us/downloads/">AZURE SDK 2.7 for .net</a>   の Azure Resource Manager ツールを使用すると、次のことが可能になります。

  <ul>
   <li>Azure ギャラリーテンプレートを使用してアプリケーションを作成します。</li>
   <li>JSON アウトラインとエディターを使用して、web サイト、データベース、仮想マシンなどのリソースをプロビジョニングするために Azure Resource Manager デプロイテンプレートを作成および編集します。</li>
   <li>開発、ステージング、運用など、さまざまな環境のデプロイをカスタマイズするために Azure Resource Manager デプロイテンプレートとパラメーターファイルを作成および編集します。</li>
   <li>リソースグループを作成し、それらにテンプレートをデプロイして、リソースの作成を簡略化します。</li>
  </ul>

  Azure Resource Manager を使用すると、Azure web サイトや SQL Azure データベースなど、アプリケーションを構成するリソースを宣言によって記述する再利用可能なデプロイテンプレートを作成できます。 これにより、開発、テスト、および運用のために複雑な環境を作成するプロセスが、反復可能な方法で簡単になります。 また、 <a href="https://portal.azure.com/">Azure プレビューポータル</a>からアプリケーションを構成するリソースを管理および監視するための統一された方法も提供します。


  Azure ギャラリーテンプレートを使用してアプリケーションを作成し、JSON テンプレートを使用して Azure リソースを定義および管理することができます。 これにより、Azure でアプリケーションの開発やテストを行うために必要な環境を簡単に設定できるようになります。 Azure ギャラリーとの Visual Studio 統合と、Azure Resource Manager デプロイテンプレートを作成および編集する機能という2つの重要な機能があります。


  このツールの使用を開始するには、シナリオを確認します。 まず、クラウドデプロイプロジェクトに基づいて web サイトを作成します。次に、プロジェクトの作成時にソリューションに追加される成果物について説明します。 次に、アプリケーションに必要な Azure リソースグループとリソースを作成してデプロイします。このアプリケーションには、アプリケーションの発行が含まれます。


  このツールは、 <a href="https://azure.microsoft.com/en-us/downloads/">Azure SDK 2.7 for .net</a>で使用できます [download for <a href="https://go.microsoft.com/fwlink/?linkid=518003&amp;clcid=0x409">vs 2015</a>  |  <a href="https://go.microsoft.com/fwlink/p/?linkid=323510&amp;clcid=0x409">vs 2013</a>

  <h2>Azure リソースグループプロジェクトを作成する</h2>

  このチュートリアルでは、web サイトをリソースグループにデプロイする方法について説明します。 まだ ASP.NET 4.5.2 web サイトがない場合は、[ファイル- &gt; Project を選択し、[Visual C#]/[Visual Basic- &gt; クラウド- &gt; ASP.NET Web アプリケーション] を選択して、今すぐ作成します。


  Azure Resource Manager ツールを使用すると、Azure ギャラリーテンプレートを使用して Visual Studio アプリケーションを作成できるようになりました。 既に説明したように、クラウドデプロイプロジェクトテンプレートを表示するには、Azure SDK 2.7 をインストールする必要があります。 これらのテンプレートを見つけるには、[ファイル- &gt; 新規 Project] を選択します。 [テンプレート- &gt; Visual C#/Visual Basic- &gt; クラウド- &gt; "Azure リソースグループ"] を選択します。


  &nbsp;


  <a href="https://acom.azurecomcdn.net/80C57D/blogmedia/blogmedia/2014/11/26/NewProjectDlg.png"><img class="alignnone size-medium wp-image-324081" src="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/NewProjectDlg-533x369.png" alt="NewProjectDlg" width="533" height="369" /></a>


  Project クラウドデプロイを作成すると、使用可能なテンプレートの一覧が表示されます。 いくつかの一般的な Azure ギャラリーテンプレートが用意されています。


  <a href="https://acom.azurecomcdn.net/80C57D/blogmedia/blogmedia/2014/11/26/SelectTemplate.png"><img class="alignnone size-medium wp-image-324091" src="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/SelectTemplate-492x369.png" alt="SelectTemplate" width="492" height="369" /></a>


  テンプレートには、web アプリ、SQL データベース、仮想マシン (Windows と Linux の両方) を作成する機能が含まれています。 空のテンプレートは、JSON アウトラインとエディター、または独自のカスタムエディターを使用して、テンプレートを一から構築する開発者が使用できます。


  このチュートリアルでは、[ <strong>Web アプリ + SQL</strong> ] テンプレートを選択します。 このテンプレートは、sql server を作成するための Azure リソースグループプロジェクトを作成し、web サイトを作成しますが、web サイトパッケージはデプロイしません。 以前のバージョン (クラウドデプロイプロジェクト) では、web サイトプロジェクトが配置プロジェクトに含まれていました。 これは、配置プロジェクトを既存の web プロジェクトに簡単に追加できるようにするために削除されました。 では、標準の ASP .NET web アプリケーションプロジェクトをソリューションに追加してみましょう。配置プロジェクトがこれを処理するため、[クラウドでホストする] オプションをオンにする必要はありません。


  Web アプリケーションプロジェクトをソリューションに追加したら、web アプリケーションプロジェクト参照を配置プロジェクト参照に追加します。


  <a href="https://acom.azurecomcdn.net/80C57D/blogmedia/blogmedia/2014/11/26/AddReference.png"><img class="alignnone size-medium wp-image-324111" src="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/AddReference-538x369.png" alt="AddReference" width="538" height="369" /></a>


  参照を追加すると、バックグラウンドでいくつかのことが行われます。これにより、配置プロジェクトは、リンクされている web プロジェクトを認識し、web プロジェクトが web 配置パッケージ (package.zip) をビルドできるようになります。 このパッケージの場所は、後で展開パラメーターに必要です。


  Web サイト自体をデプロイするために必要な JSON を追加してみましょう。 Web Deploy リソースを追加するには、webwebの Qldatabase. json ファイルを開きます。 これを行う最も簡単な方法は、[JSON アウトライン] ツールウィンドウで Web サイトリソースを右クリックし、[新しいリソースの追加] を選択する方法です。 Web サイトリソースを選択すると、適切な JSON が強調表示されていることに注意してください。


  &nbsp;

  <h2><a href="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/JsonOutlineEditor.png"><img class="alignnone size-full wp-image-324141" src="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/JsonOutlineEditor.png" alt="JsonOutlineEditor" width="855" height="708" /></a></h2>

  [新しいリソースの追加] を選択すると、[リソースの追加] ダイアログボックスが表示されます。このダイアログには、この記事で前に示したものと同じリソーステンプレートの一部だけでなく、カスタマイズを可能にする他のリソーススニペットも表示されます。 今回は、Web Apps の Web 配置を選択します。 デプロイする web アプリを選択する必要があることに注意してください。 これは、Azure リソースグループプロジェクト (この場合は Web サイト) によって作成される web サイトです。


  <a href="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/AddWebDeployJSON.png"><img class="alignnone size-full wp-image-324121" src="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/AddWebDeployJSON.png" alt="AddWebDeployJSON" width="800" height="600" /></a>

  <h2>クラウドアプリソリューション</h2>

  配置プロジェクトには、リソースを Azure にデプロイするために使用できる、デプロイテンプレートファイル (<strong>website</strong>)、テンプレートパラメーター定義 (<strong>website</strong>)、および PowerShell スクリプト (<strong>Publish-AzureResourceGroup.ps1</strong>) が含まれています。「」を参照してください。


  <img style="padding-top: 0px; padding-left: 0px; padding-right: 0px; border: 0px;" title="拡張された" src="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/SolnExpExpanded.png" alt="SolnExpExpanded" width="360" height="285" border="0" />


  ソリューション内のこれらの各アーティファクトについて見ていきましょう。参照セクションでは、リソースグループプロジェクトに追加した MyWebsite プロジェクトへの参照を取得しています。 これは、Msdeploy.exe 拡張をより簡単に使用するために必要です。


  <strong>Deploy-AzureResourceGroup.ps1</strong>は、デプロイに使用される主要なスクリプトです。 デプロイアーティファクトのアップロードと、Azure でリソースをプロビジョニングするための New-AzureResourceGroup の呼び出しを処理します。 Visual Studio IDE の [新しい展開] メニューでは、展開にこのスクリプトを使用し、ユーザーが展開をカスタマイズできるようにします。


  <strong>Webresources Qldatabase. json</strong>ファイルは、リソースが定義されているデプロイテンプレートファイルです。 このファイルには、後でプロビジョニングする予定のすべてのリソースが含まれています。 ご想像のとおり、web サイトと SQL テンプレートを選択したので、このファイルには、web サイトと SQL Azure データベースの作成に必要な定義と、web サイトパッケージのデプロイに必要な定義が含まれています。 これについては後で詳しく説明します。


  <strong>Webに</strong>は、デプロイテンプレートファイルで必要な既定以外のパラメーターの値が含まれています。 たとえば、web サイトの名前はパラメーターであり、その値はこのファイルで使用されます。

  <h2>Azure リソースを作成する–ダイアログを使用する</h2>

  リソースとリソースグループを Azure にデプロイするには、いくつかの方法があります。 最も簡単な方法は、デプロイ Project を右クリックし、[デプロイ]、[新しい配置] の順に選択することです。


  <a href="https://acom.azurecomcdn.net/80C57D/blogmedia/blogmedia/2014/11/14/2014-11-13_13h08_13.png"><img style="padding-top: 0px; padding-left: 0px; padding-right: 0px; border: 0px;" title="2014-11-13_13h08_13" src="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/2014-11-13_13h08_13_thumb.png" alt="2014-11-13_13h08_13" width="484" height="88" border="0" /></a>


  使用するアカウントとサブスクリプションを選択します。


  &nbsp;


  <a href="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/DeploytoRG.png"><img class="alignnone size-full wp-image-324151" src="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/DeploytoRG.png" alt="DeploytoRG" width="500" height="428" /></a>


  ここでは、web アプリケーションに必要なすべてのリソースの論理グループを含む Azure リソースグループを作成する必要があります。 これを行うには、[リソースグループ] コンボボックスをクリックし、[新規作成] を選択します。


  <img style="padding-top: 0px; padding-left: 0px; padding-right: 0px; border: 0px;" title="CreateNewRG" src="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/CreateNewRG.png" alt="CreateNewRG" width="480" height="378" border="0" />


  Azure リソースグループに任意の名前を付けます (ソリューション名 "MyAzureCloudApp" に基づく既定値を使用しています)。また、場所を指定します。 準備ができたら [作成] ボタンをクリックすると、Azure リソースグループが自動的にプロビジョニングされます (ただし、リソースはまだありません)。


  デプロイテンプレート (<strong>WebSiteDeploySQL</strong>)、テンプレートパラメーターファイル (<strong>WebSiteDeploySQL</strong>)、およびストレージアカウントを選択していることを確認します (前の手順を実行しています)。 ストレージアカウントをまだ持っていない場合は、続行する前に <a href="https://azure.microsoft.com/en-us/documentation/articles/storage-create-storage-account/" target="_blank">ストレージアカウントを作成</a> する必要があります。


  次に、[パラメーターの編集] ボタンをクリックします。 ここで説明したように、web サイト名、web ホスティングプラン名、web サイトの場所を定義します。


  &nbsp;


  <a href="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/EditParameters.png"><img class="alignnone size-full wp-image-324161" src="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/EditParameters.png" alt="EditParameters" width="400" height="478" /></a>


  赤い感嘆符は、追加する必要がある必須パラメーターです。 各パラメーターに関する情報を含む表を以下に示します。

  <table border="1" cellspacing="0" cellpadding="0">

  <tbody>

  <tr>

  <td valign="top" width="312">siteName</td>

  <td valign="top" width="312">このパラメーターは、web サイトの名前です。</td>

  </tr>

  <tr>

  <td valign="top" width="312">hostingPlanName</td>

  <td valign="top" width="312">これは、 <a href="https://azure.microsoft.com/en-us/documentation/articles/web-sites-web-hosting-plan-overview/">Web ホスティングプラン</a> の名前です。 ホスティングプランは、複数の web サイト間で共有できる機能と容量の設定を表します。</td>

  </tr>

  <tr>

  <td valign="top" width="312">siteLocation</td>

  <td valign="top" width="312">Web サイトが存在するリージョン。 "米国西部"、"米国中部"、または有効な web サイト <a href="https://azure.microsoft.com/en-us/regions/#services">リージョン</a>のいずれかになります。</td>

  </tr>

  <tr>

  <td valign="top" width="312">sku</td>

  <td valign="top" width="312">既定値は "Free" で、 <a href="https://azure.microsoft.com/blog/2014/04/21/azure-web-sites-new-basic-pricing-tier/">web サイトの価格レベル</a> です (他のオプションは [共有]、[基本]、[標準] です)。</td>

  </tr>

  <tr>

  <td valign="top" width="312">workerSize</td>

  <td valign="top" width="312">既定値は0です。 この設定は、web サイトを実行する仮想マシンのサイズを表すために使用されます (0 = small、1 = medium、および 2 = large)。 この例では、"Free" の sku サイズを選択しているため、workerSize の効果はありません。 これを適用するには、sku のサイズを Basic または Standard にする必要があります。その後、適切な workerSize を選択する必要があります。</td>

  </tr>

  <tr>

  <td valign="top" width="312">serverName</td>

  <td valign="top" width="312">Azure SQL Server の名前。</td>

  </tr>

  <tr>

  <td valign="top" width="312">serverLocation</td>

  <td valign="top" width="312">Azure SQL Server の場所。</td>

  </tr>

  <tr>

  <td valign="top" width="312">administratorLogin</td>

  <td valign="top" width="312">SQL サーバーの管理者名。</td>

  </tr>

  <tr>

  <td valign="top" width="312">administratorLoginPassword</td>

  <td valign="top" width="312">管理者のパスワード。</td>

  </tr>

  <tr>

  <td valign="top" width="312">databaseName</td>

  <td valign="top" width="312">サーバーで作成されたデータベースの名前。</td>

  </tr>

  <tr>

  <td valign="top" width="312">照合順序 (collation)</td>

  <td valign="top" width="312"><a href="https://msdn.microsoft.com/en-us/library/azure/ee336245.aspx">SQL Server 照合順序のサポート</a></td>

  </tr>

  <tr>

  <td valign="top" width="312">edition</td>

  <td valign="top" width="312"><a href="https://msdn.microsoft.com/en-us/library/azure/dn741340.aspx">Azure SQL Database サービス レベル</a></td>

  </tr>

  <tr>

  <td valign="top" width="312">maxSizeBytes</td>

  <td valign="top" width="312"><a href="https://msdn.microsoft.com/en-us/library/azure/ee336245.aspx">データベース サイズの制限</a></td>

  </tr>

  <tr>

  <td valign="top" width="312">requestedServiceObjectiveId</td>

  <td valign="top" width="312"><a href="https://msdn.microsoft.com/en-US/library/azure/dn505701">エディションのパフォーマンス レベル</a></td>

  </tr>

  <tr>

  <td valign="top" width="312">webSitePackage</td>

  <td valign="top" width="312">展開パッケージの名前と親フォルダー</td>

  </tr>

  <tr>

  <td valign="top" width="312">_artifactsLocation</td>

  <td valign="top" width="312">Web 配置パッケージの自動生成された場所。 この_artifactsLocationは、WebSitePackage のコピー先の [リソース グループへのデプロイ] ダイアログに入力された Azure Storage 内のフォルダーです。</td>

  </tr>

  <tr>

  <td valign="top" width="312">_artifactsLocationSASToken</td>

  <td valign="top" width="312">自動生成されたセキュリティ キー。</td>

  </tr>

  </tbody>

  </table>

  [パスワードの保存] チェック ボックスをオンにすると、パスワードは JSON ファイルに格納されますが、プレーンテキストとして格納されます。そのため、このオプションを使用して、より詳細に説明する必要があります。


  これらのパラメーターを入力したら、[デプロイ] ボタン<strong></strong>をクリックするか、この例のようにパラメーターを編集した場合は 、[保存] をクリックしてから [デプロイ] を選択すると、リソース グループとリソースが Azure にデプロイされます。 この場合、Azure リソース グループ内にカスタム Web アプリケーションを含む Web サイトをデプロイしました (新しく拡張された <a href="https://portal.azure.com/" target="_blank">Azure Portal で確認してください</a>)。


  <img style="padding-top: 0px; padding-left: 0px; padding-right: 0px; border: 0px;" title="AzurePortal" src="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/AzurePortal.png" alt="AzurePortal" width="447" height="480" border="0" />

  リソースをデプロイすると、次のように <strong>WebSiteDeploySQL.param.dev.json</strong> ファイルにパラメーター値が書き戻されたのが表示されます。


  <img style="padding-top: 0px; padding-left: 0px; padding-right: 0px; border: 0px;" title="ParamDevFull" src="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/ParamDevFull.png" alt="ParamDevFull" width="288" height="480" border="0" />


  変更が保持される JSON ファイルを保存します。 リソース グループをデプロイしていない場合、またはパラメーターを編集していない場合、 <strong>WebSiteDeploySQL.param.dev.json</strong> のパラメーター値には "null" が設定されます。


  <img style="padding-top: 0px; padding-left: 0px; padding-right: 0px; border: 0px;" title="ParamDevEmpty" src="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/ParamDevEmpty.png" alt="ParamDevEmpty" width="319" height="480" border="0" />

  デプロイの出力は、Azure プロビジョニング ウィンドウに送信されます。


  <img style="padding-top: 0px; padding-left: 0px; padding-right: 0px; border: 0px;" title="DeployOutputWindow" src="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/DeployOutputWindow.png" alt="DeployOutputWindow" width="480" height="408" border="0" />


  発行したので、Azure リソース グループを作成して Azure リソースをデプロイする別の方法を見てみしましょう。

  <h2>Azure リソースをデプロイする - PowerShell を使用する</h2>

  Azure でリソース グループを作成する 2 つ目の方法は、デプロイ プロジェクト (Publish-AzureResourceGroup.ps1) の一部として提供される PowerShell<strong> スクリプトを実行する方法です </strong>。 このスクリプトでは、<a href="https://azure.microsoft.com/en-us/documentation/articles/powershell-azure-resource-manager/" target="_blank">最新のAzure PowerShell</a> (少なくともバージョン 0.8.3 以降) が利用されます。


  このスクリプトでは、<a href="https://msdn.microsoft.com/en-us/library/dn654594.aspx" target="_blank">Azure PowerShell</a> コマンドレットを使用して、Azure リソース グループが存在しない場合 (スクリプトの –Name パラメーターで指定されます) を作成します。 このスクリプトは、 <strong>WebSiteDeploySQL.json</strong> ファイルと WebSiteDeploySQL.param.dev.json ファイルを Azure Resource Manager サービスに渡し、デプロイする必要がある Azure リソースを正確に把握します。


  実行する前に、<strong>WebsiteDeploySQL.param.dev.json</strong> ファイルに、Web サイトの正しい名前、ホスティング プラン、Web サイトの場所、および SQL パラメーターが含まれている必要があります。 変更を保存してください。


  以下に、Web サイト名を "mattsAwesomeSite" に変更しました。 Web サイト名も変更する必要があります。 これを行って、新しい Web サイトが作成されるのを確認しました。


  <img style="padding-top: 0px; padding-left: 0px; padding-right: 0px; border: 0px;" title="ParamDevFull" src="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/ParamDevFull.png" alt="ParamDevFull" width="288" height="480" border="0" />


  ここで何かを見せび出す場合は、<strong>Publish-AzureResourceGroup.ps1</strong> ファイルをダブルクリックして Visual Studio のドキュメント ウィンドウに表示します (まだ表示されていない場合は、PowerShell スクリプトの色分け表示を追加しました)。 その後、新しいファイルを右クリックし<strong> Publish-AzureResourceGroup.ps1PowerShell </strong> ISE のプログラムから開く選択します。


  <img style="padding-top: 0px; padding-left: 0px; padding-right: 0px; border: 0px;" title="OpenPSISE" src="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/OpenPSISE.png" alt="OpenPSISE" width="480" height="58" border="0" />


  これにより、PowerShell ISE が起動します。 この時点で PowerShell スクリプトを実行できます。 ただし、エラーの発生を確認するために、いくつかのことを確認してください。

  <ul>
   <li>インストール済み<a href="https://go.microsoft.com/?linkid=9811175" target="_blank">Azure PowerShell</a> (少なくともバージョン 0.8.3)?
  <ul>
   <li>Web Platform Installer を <a href="https://www.microsoft.com/web/downloads/platform.aspx" target="_blank">使用してインストールできます</a>。[Microsoft Azure PowerShell] を選択します。</li>
  </ul>

  </li>

  </ul>

  <img style="padding-top: 0px; padding-left: 0px; padding-right: 0px; border: 0px;" title="WPIPowerShell" src="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/WPIPowerShell.png" alt="WPIPowerShell" width="480" height="29" border="0" />

  <ul>
   <li>以前に PowerShell を使ったことがあまりない場合は、おそらく、PowerShell スクリプトの実行を許可する実行ポリシーを設定する必要があります。 これを行うには、PowerShell ISE から "<a href="https://technet.microsoft.com/en-us/library/ee176961.aspx" target="_blank">Set-ExecutionPolicy RemoteSigned</a>" を実行して、 のようなリモート署名されたスクリプトの実行を許可する必要があります (注: このコマンドを管理者として実行する必要があります)。 ポリシー設定を変更するダイアログが表示されます。</li>
   <li>Azure アカウントを現在の PowerShell セッションにログインAzure PowerShellコマンド "<a href="https://msdn.microsoft.com/en-us/library/dn495128.aspx" target="_blank">Add-AzureAccount</a>" を実行してください。 ダイアログが表示され、Azure 資格情報を入力するように求めるメッセージが表示されます。</li>
  </ul>

  次に、PowerShell スクリプトを実行します: "&gt; .\Deploy-AzureResourceGroup.ps1 -ResourceGroupLocation '米国西部' -TemplateFile ..\Templates\WebSiteSQLDatabase.json -TemplateParametersFile ..\Templates\WebSiteSQLDatabase.param.dev.json -StorageAccountName myStorageAccount -UploadArtifacts true" ストレージの場所とリソース グループの場所 (任意の有効なリージョン ) を求めるメッセージが表示されます ("米国西部" を選択しました)。


  数秒後に、PowerShell スクリプトが完了します。 スクリプトには優れた詳細出力も用意されています。そのため、作成されたリソースと、発生したエラー (ある場合) を明確に確認できます。


  スクリプトが完了すると、Azure リソース グループと指定した Azure リソースが (前の例と同様に) 作成され、 <a href="https://portal.azure.com/" target="_blank">Azure Portal</a> で表示できます。

  <h2>まとめ</h2>

  これで、Azure リソース グループのリソース グループを紹介Project。 Azure ギャラリー テンプレートに基づいて、Visual Studioプロジェクトを作成する方法について説明しました。ツールを使用して Azure リソース グループとリソースを定義してデプロイする方法。 Azure リソース グループは、実際には、アプリケーションをホストするために必要な環境を設定するための最適な方法です。
