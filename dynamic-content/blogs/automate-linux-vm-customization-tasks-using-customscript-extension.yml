### YamlMime:Yaml
ms.openlocfilehash: b0e7e5b7b34d49bb3a3e5688edb7fbb3feecc5b4
ms.sourcegitcommit: d03bdc7fe5447adb6530886aab848b75fe8fa8ee
ms.translationtype: MT
ms.contentlocale: ja-JP
ms.lasthandoff: 03/11/2022
ms.locfileid: "139893239"
Slug: automate-linux-vm-customization-tasks-using-customscript-extension
Title: Automate Linux VM Customization Tasks Using CustomScript Extension (Linux VM カスタム タスクをカスタム スクリプト拡張機能を使って自動化する)
Summary: この投稿では、CustomScript 拡張機能によって実行される定義済みのスクリプトを使用して Linux VM をカスタマイズする方法について説明します。
Content: "<p><a href=\"https://azure.microsoft.com/blog/2014/04/24/automating-vm-customization-tasks-using-custom-script-extension/\"><span style=\"font-size: small;\">Windows</span></a> 拡張機能ブログ<a href=\"https://azure.microsoft.com/blog/2014/04/21/custom-data-and-cloud-init-on-windows-azure/\"><span style=\"font-size: small;\"></span></a>の <span style=\"font-size: small;\">Windows VM の CustomScript </span> 拡張機能に既に慣れている場合があります。良いニュースは、拡張機能は <span style=\"font-size: small;\">Linux VM </span> でも利用できます。<span style=\"font-size: small;\">Cloud-init </span> は前のブログでも紹介されています。これにより、プロビジョニング時間中にスクリプトまたはメタデータを <span style=\"font-size: small;\"> Azure Linux VM に挿入できます。CustomScript 拡張機能は、VM をカスタマイズするためのさらに多くの機能を提供し、Azure でサポートされている任意の Linux VM 上で実行できます。</span></p>\n\n<h2><span style=\"font-size: x-large;\">CustomScript で何ができますか? </span></h2>\n\n<p><span style=\"font-size: small;\">Azure で Linux VM を作成した後、VM にワークロード (Web サーバー、データベースなど) をデプロイする必要がある場合があります。理想的には、これは一連のスクリプトを使用して実行できます。 </span></p>\n\n<ul>\n <li><span style=\"font-size: small;\">CustomScript 拡張機能では、指定&rsquo;&rsquo;した場所から、入力したパラメーターを使用して、これらのスクリプトを自動的にダウンロードして実行できます。</span></li>\n <li><span style=\"font-size: small;\">CustomScript 拡張機能は、対応するスクリプト インタープリターが VM にインストールされている限り、Linux 用の任意のスクリプト言語 (Python、Linux シェル スクリプトなど) で記述されたスクリプトをサポートします。 </span></li>\n <li><span style=\"font-size: small;\">CustomScript 拡張機能は、プロビジョニング後いつでもインストールして構成できます。 </span></li>\n <li><span style=\"font-size: small;\">CustomScript 拡張機能は、Azure PowerShell コマンドレット&nbsp;</span>、<a href=\"https://azure.microsoft.com/en-us/documentation/articles/xplat-cli/\"><span style=\"font-size: small;\">xPlat</span></a> スクリプト、<span style=\"font-size: small;\">または Azure 管理ポータル を使用してデプロイできます。&nbsp; </span></li>\n</ul>\n\n<p><strong>2015 年 2 月の更新プログラムは、元のブログ投稿以降に追加された新機能です。</strong><br />\n1. xPlat スクリプトを使用したデプロイ<br />\n2. Azure 管理ポータルを使用したデプロイ<br />\n3. サポート インライン コマンド<br />\n4. ポータルまたは Get Deployment コマンドレットの結果として、最後の 4 KB 出力 (stdout、stderr)&nbsp; &ldquo;を表示&rdquo; します</p>\n\n<p><strong>UpdatesinDecember&nbsp;&nbsp; 2015 では<font size=\"2\">、前回の更新以降に追加された新機能</font>を次に示します。</strong><br />\n1. カスタム Azure Resource Managerをサポートしています。Azure Resource Manager model で Linux 用 CustomScript 拡張機能を実行するサンプル Powershell および CLI スクリプトについては、github リリース ドキュメント (<a href=\"https://github.com/Azure/azure-linux-extensions/blob/master/CustomScript/README.md\"><u><font color=\"#0066cc\">https://github.com/Azure/azure-linux-extensions/blob/master/CustomScript/README.md</font></u></a>) を参照してください。<br />\n2. Linux 1.4 &quot;の CustomScript Extention がリリースされ、保護された構成セクションで commandToExecute&quot; パラメーターにデータを渡す機能がサポートされています。これにより、機密データの保護が強化されます。 詳細については、() を参照してください<a href=\"https://github.com/Azure/azure-linux-extensions/blob/master/CustomScript/README.md\"><u><font color=\"#0066cc\">https://github.com/Azure/azure-linux-extensions/blob/master/CustomScript/README.md</font></u></a>。</p>\n\n<p>&nbsp;</p>\n\n<h2><span style=\"font-size: large;\"><span style=\"font-size: x-large;\">前提条件</span> </span></h2>\n\n<ul>\n <li><span style=\"font-size: small;\">Microsoft Azure Linux エージェント バージョン 2.0.6 以降。ほとんどの Azure VM Linux ギャラリー イメージにはバージョン 2.0.6 が含まれています。<b>waagent -version を実行して、</b>VM にインストールされているバージョンを確認できます。VM で 2.0.6 </span> より前のバージョンが実行されている場合は、次の手順に<a href=\"https://github.com/Azure/WALinuxAgent\"><span style=\"font-size: small;\">従って</span></a><span style=\"font-size: small;\">更新できます。 </span></li>\n <li><a href=\"https://azure.microsoft.com/en-us/downloads/\"><span style=\"font-size: small;\">Azure PowerShell</span></a><span style=\"font-size: small;\">シナリオ用</span><a href=\"https://azure.microsoft.com/en-us/documentation/articles/xplat-cli/\"><span style=\"font-size: small;\">のクロスプラットフォーム CLI</span></a><span style=\"font-size: small;\"> を使用します。 </span></li>\n <li><span style=\"font-size: small;\">スクリプトを使用して拡張機能をデプロイする場合は、実行するスクリプトを準備し、Azure Storage BLOB または Github&nbsp; の場所にアップロードしてください&nbsp;。アプリケーションを使用して&nbsp;デプロイする場合Azure portal、&nbsp;スクリプトをローカル コンピューターに保存できます。</span></li>\n</ul>\n\n<h2><span style=\"font-size: large;\"><span style=\"font-size: x-large;\">スクリプトを使用して CustomScript 拡張機能を</span><span style=\"font-size: x-large;\"> デプロイする</span></span></h2>\n\n<p><span style=\"font-size: small;\"><span style=\"font-size: small;\">展開&nbsp;スクリプトを使用した&nbsp; CustomScript 拡張機能を使用すると、複数のマシンで自動化する&nbsp;柔軟性が提供されます。&nbsp;&nbsp;There</span> は、スクリプトの&nbsp;場所の&nbsp; 2 つのオプションです。Azure Storage または GitHub。また、クロスプラットフォーム CLI <a href=\"https://azure.microsoft.com/en-us/downloads/\">Azure PowerShell</a><span style=\"font-size: small;\">&nbsp;を使用</span><a href=\"https://azure.microsoft.com/en-us/documentation/articles/xplat-cli/\"><span style=\"font-size: small;\">して実行することもできます</span></a>。&nbsp;さらに、インライン &quot;モード&quot;もサポートされています。</span></p>\n\n<p><span style=\"font-size: medium;\"><strong>Azure Storage BLOB に格納されているスクリプトの実行 </strong></span></p>\n\n<ol>\n <li><span style=\"font-size: small;\">ユーザーはスクリプトを書き込み、Azure BLOB の場所にアップロードします。 </span></li>\n <li><span style=\"font-size: small;\">プロビジョニング中またはプロビジョニング後に VM に拡張機能を追加します。 </span></li>\n <li><span style=\"font-size: small;\">スクリプトの Azure BLOB の場所と省略可能なパラメーターを入力します。 </span></li>\n <li><span style=\"font-size: small;\">VM 内で、拡張機能によってスクリプトがダウンロードされます。 </span></li>\n <li><span style=\"font-size: small;\">拡張機能は、ユーザー指定のパラメーターを使用してスクリプトを起動します。 </span></li>\n</ol>\n\n<p><span style=\"font-size: small;\"><strong><span style=\"text-decoration: underline;\">Power Shell のサンプル:</span></strong></span></p>\n\n<pre class=\"prettyprint\">\n#Sample PowerShell Script to run a Linux Shell script stored in Azure blob\n#Enter the VM name, Service name, Azure storage account name and key\n$vm = Get-AzureVM -ServiceName &quot;MyService&quot; -Name &quot;MyVM&quot;\n$PrivateConfiguration = &#39;{&quot;storageAccountName&quot;: &quot;MyAccount&quot;,&quot;storageAccountKey&quot;:&quot;Mykey&quot;}&#39; \n#Specify the Location of the script from Azure blob, and command to execute\n$PublicConfiguration = &#39;{&quot;fileUris&quot;:[&quot;https://MyAccount.blob.core.windows.net/vhds/MyShellScript.sh&quot;], &quot;commandToExecute&quot;: &quot;sh MyShellScript.sh&quot; }&#39; \n \n#Deploy the extension to the VM, always use the latest version by specify version &ldquo;1.*&rdquo;\n$ExtensionName = &#39;CustomScriptForLinux&#39;  \n$Publisher = &#39;Microsoft.OSTCExtensions&#39;  \n$Version = &#39;1.*&#39; \nSet-AzureVMExtension -ExtensionName $ExtensionName -VM  $vm -Publisher $Publisher -Version $Version -PrivateConfiguration $PrivateConfiguration -PublicConfiguration $PublicConfiguration  | Update-AzureVM</pre>\n\n<p><span style=\"font-size: small;\"><strong><span style=\"text-decoration: underline;\">Xplat サンプル:</span></strong></span></p>\n\n<pre class=\"prettyprint\">\n#Sample xPlat Script \nnode bin/azure vm extension set MyVM CustomScriptForLinux Microsoft.OSTCExtensions  1.2 -i &#39;{&quot;fileUris&quot;:[&quot;https://MyAccount.blob.core.windows.net/vhds/MyShellScript.sh&quot;], &quot;commandToExecute&quot;: &quot; sh MyShellScript.sh &quot; }&#39; -t &#39;{&quot;storageAccountName&quot;:&quot;MyAccount &quot;,&quot;storageAccountKey&quot;:&quot; Mykey&quot;}&#39;  \n</pre>\n\n<p><span style=\"font-size: medium;\"><strong>GitHub に格納されているスクリプトのGitHub </strong></span></p>\n\n<ol>\n <li><span style=\"font-size: small;\">ユーザーはスクリプトを書き込み、スクリプトを GitHub。</span></li>\n <li><span style=\"font-size: small;\">プロビジョニング中またはプロビジョニング後に VM に拡張機能を追加します。 </span></li>\n <li><span style=\"font-size: small;\">スクリプトのGitHubと省略可能なパラメーターを入力します。</span></li>\n <li><span style=\"font-size: small;\">VM 内では、拡張機能によってスクリプトがダウンロードされます。 </span></li>\n <li><span style=\"font-size: small;\">拡張機能は、ユーザー指定のパラメーターを使用してスクリプトを起動します。 </span></li>\n</ol>\n\n<p><span style=\"font-size: small;\"><strong><span style=\"text-decoration: underline;\">PowerShell サンプル:</span></strong></span></p>\n\n<pre class=\"prettyprint\">\n#Identify the VM\n$vm = Get-AzureVM -ServiceName &lsquo;MyServiceName&rsquo; -Name &lsquo;MyVMName&rsquo;\n#Specify the Location of the script and the command to execute\n$PublicConfiguration = &#39;{&quot;fileUris&quot;:[&quot;https://github.com/MyProject/Archive/MyPythonScript.py&quot;], &quot;commandToExecute&quot;: &quot;python MyPythonScript.py&quot; }&#39; \n\n#Deploy the extension to the VM, pick up the latest version of the extension\n$ExtensionName = &#39;CustomScriptForLinux&#39;  \n$Publisher = &#39;Microsoft.OSTCExtensions&#39;  \n$Version = &#39;1.*&#39; \nSet-AzureVMExtension -ExtensionName $ExtensionName -VM  $vm -Publisher $Publisher -Version $Version -PublicConfiguration $PublicConfiguration  | Update-AzureVM</pre>\n\n<p><span style=\"font-size: small;\"><strong><span style=\"text-decoration: underline;\">Xplat サンプル:</span></strong></span></p>\n\n<pre class=\"prettyprint\">\n#Sample xPlat Script \nnode bin/azure vm extension set MyVM CustomScriptForLinux Microsoft.OSTCExtensions  1.2 -i &#39;{&quot;fileUris&quot;:[&quot; https://github.com/MyProject/Archive/MyPythonScript.py &quot;], &quot;commandToExecute&quot;: &quot; python MyPythonScript.py &quot; }&#39; \n</pre>\n\n<p><b><span style=\"font-size: medium;\">インライン スクリプトの実行</span> </b></p>\n\n<p><span style=\"font-size: small;\">スクリプトの&nbsp;&nbsp;&nbsp;&nbsp;&lt;代わりに単にコマンドを実行するだけの場合は、別のスクリプトを記述する必要&#39;いらない場合は、CommandToExecute&gt; パラメーターを使用して、デプロイ スクリプトにインラインでコマンドをコピーする必要があります。PowerShell スクリプトの例を次に示します。</span></p>\n\n<pre class=\"prettyprint\">\n#Sample PowerShell Script\n#Sample script to run a Python script inline\n#Enter the VM name and Service name\n$vm = Get-AzureVM -ServiceName &quot;MyService&quot; -Name &quot;MyVM&quot;\n#Specify the command to execute\n$PublicConfiguration = &#39;{&quot;commandToExecute&quot;: &quot; python -c \\&quot;print &quot;hello,azure!&quot;\\&quot;&quot;}&#39; \n\n#Deploy the extension to the VM\n$ExtensionName = &#39;CustomScriptForLinux&#39;  \n$Publisher = &#39;Microsoft.OSTCExtensions&#39;  \n$Version = &#39;1.*&#39; \nSet-AzureVMExtension -ExtensionName $ExtensionName -VM  $vm -Publisher $Publisher -Version $Version -PublicConfiguration $PublicConfiguration  | Update-AzureVM\n</pre>\n\n<p><span style=\"font-family: Calibri; font-size: x-large;\">Azure Portal を使用して CustomScript 拡張機能をデプロイする</span></p>\n\n<p>このシナリオでは、ユーザーは CustomScript 拡張機能をデプロイするスクリプトを記述する必要はありません。ユーザーは、ローカル デスクトップまたはノート PC にスクリプトを格納し、ポータルを使用してスクリプトを Azure にアップロードできます。 ポータルによって拡張機能ハンドラーが開始されます。</p>\n\n<p>1.ポータルにログインし、拡張機能&quot;を実行する仮想マシンを見つけて、[設定] をクリック&nbsp;&quot;&quot;&nbsp;して、[拡張機能] セクションを選択&quot;します。</p>\n\n<p>2. [拡張機能] ページが表示されます。 [追加]&nbsp; &ldquo;ボタンを&ldquo; クリックします。</p>\n\n<p>3.[&nbsp;拡張機能]&nbsp; ボックスの一覧から CustomScript 拡張機能&ldquo;&rdquo;を選択し、ページの下部にある [作成] ボタンをクリックします。</p>\n\n<p>4. これで、CustomScript 拡張機能ページがポップアップ表示され、ユーザーは 1 の 2 つのパラメーターを入力できます。 スクリプト 2 へのパス。 スクリプトのパラメーター</p>\n\n<p>5.&nbsp;&ldquo;&rdquo;ローカル コンピューターから実行するスクリプトを参照し、必要に応じてスクリプトのパラメーターを入力し、[作成] をクリックします。拡張機能が VM にデプロイされ、スクリプが開始されます。</p>\n\n<p>ポータルを使用したデプロイには、次の要件があります。1.1&nbsp; つのスクリプトのみをアップロードできます。 複数のスクリプトをアップロードして実行する場合は、上記のスクリプト アプローチを使用する必要があります。 2. UI には &ldquo;Command to Execute パラメーター&rdquo;はないので、スクリプトの先頭にインタープリターを指定する必要があります。 &nbsp;&quot; #!/usr/bin/env python など&quot;です。</p>\n\n<h2>&nbsp;</h2>\n\n<h2>結果のクエリを実行する</h2>\n\n<ul>\n <li><a name=\"OLE_LINK5\"></a><a name=\"OLE_LINK4\"></a><span style=\"color: rgb(0, 0, 0); font-size: small;\">CustomScript 拡張機能は、拡張機能のデプロイ直後&rsquo;にユーザー スクリプトを開始します。 </span></li>\n <li><span style=\"color: rgb(0, 0, 0);\"><span style=\"font-size: small;\">実行結果は、Get-Deployment または Get-Deployment Azure PowerShellコマンドレットGet-AzureVMを使用して取得できます。xPlat スクリプトを使用して状態を確認</span><a href=\"https://azure.microsoft.com/en-us/documentation/articles/xplat-cli/\"><span style=\"font-size: small;\">し、[</span></a>状態<span style=\"font-size: small;\">] Azure portal&ldquo;確認&rdquo;することもできます。これには、last4K&nbsp; 標準出力、ユーザー スクリプトからの標準エラー&nbsp;が&rsquo;含まれます。</span></span></li>\n <li><span style=\"font-size: small;\"><span style=\"color: rgb(0, 0, 0);\">CustomScript 拡張機能のログ ファイル&rsquo;は、/var/log/azure/Microsoft.OSTCExtensions で確認できます。CustomScriptForLinux/1.0/extension.log。&nbsp;</span><span style=\"color: rgb(0, 0, 0);\">ユーザー スクリプトの標準出力&rsquo;もこのログ ファイルにキャプチャされます。 </span></span></li>\n</ul>\n\n<p>&nbsp;</p>\n\n<h2>その他のメモ</h2>\n\n<ul>\n <li>複数のスクリプトがある場合は、依存スクリプトを呼び出すエントリ ポイント スクリプトを作成し、エントリ ポイント スクリプト、依存スクリプト、その他の依存バイナリをスクリプトの場所 <span style=\"font-size: small;\"><span style=\"font-size: small;\">(Azure Storage BLOB または GitHub) にアップロードできます。&nbsp;&nbsp; </span></span><span style=\"font-family: Calibri;\">&ldquo;fileUris&rdquo; : [&ldquo;ScriptFileUri1&rdquo;, ScriptFileUri2&rdquo;, &ldquo;ScriptFileUri3&quot;] という形式を使用して、複数のファイルがアップロードされます&quot;。</span></li>\n</ul>\n\n<ul>\n <li><span style=\"font-size: small;\">拡張機能は、VM の作成後の 1 回のオフ タスク用に設計されています。同じ構成で拡張機能が 2 回目に呼び出された場合、指定したスクリプトは実行されません。ただし、CustomScript 拡張機能を複数回実行する必要がある場合は、異なる構成で実行できます。例えば： </span></li>\n</ul>\n\n<ol>\n <li><span style=\"font-size: small;\">スクリプトの名前を変更します。 </span></li>\n <li><span style=\"font-size: small;\">[PublicConfiguration] パラメーターとしてタイムスタンプを追加するには、次のコードを使用します。</span>\n <pre class=\"prettyprint\">\n#Generate the current timestamp, add to the configuration, this ensures the configuration is different every time the CustomScript extension runs\n$TimeStamp = (Get-Date).Ticks\n$PublicConfiguration =&#39;{&quot;fileUris&quot;:[&quot;MyAccount.blob.core.windows.net/vhds/MyShellScript.sh&quot;], &quot;commandToExecute&quot;: &quot;sh MyShellScript.sh&quot;, &quot;timestamp&quot;: &quot;&#39; + $TimeStamp + &#39;&quot;}&#39;</pre>\n </li>\n</ol>\n\n<p><span style=\"font-size: x-large;\">既知の問題</span></p>\n\n<p>Linux VM で PowerShell &ldquo;コマンド Set-AzureVMExtension&rdquo; を実行すると、次のエラーが発生する可能性があります。IaaS VM&quot; アクセス拡張機能を設定する前に、VM オブジェクトでゲスト エージェントのプロビジョニングを有効にする必要があります&quot;。 これは、新しいポータルを使用している場合は発生します。 根本原因: ポータルを使用してイメージを作成する場合、VM&nbsp; 上のゲスト エージェントの値が常に True に設定されているとは限 &ldquo;されません&rdquo;。 Vm が PowerShell を使用して作成されている場合、この問題は表示されません。 解決方法: ProvisionGuestAgent &ldquo;を True&rdquo; に設定するには、次の PowerShell コマンドを追加します。$vm = Get-AzureVM -ServiceName &#39;MyServiceName&#39; -Name &#39;MyVMName&#39; $vm.GetInstance() です。ProvisionGuestAgent = $true</p>"
