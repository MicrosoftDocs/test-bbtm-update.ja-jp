### YamlMime:Yaml
ms.openlocfilehash: c331990e450a028b5bdd41fd77840bfecb0b6c89
ms.sourcegitcommit: d03bdc7fe5447adb6530886aab848b75fe8fa8ee
ms.translationtype: MT
ms.contentlocale: ja-JP
ms.lasthandoff: 03/11/2022
ms.locfileid: "139894174"
Slug: adoption-program-insights-sending-emails-from-windows-azure-part-1-of-2
Title: '導入プログラムインサイト: Windows Azure から電子メールを送信しています (パート 1/2)'
Summary: 導入プログラムインサイトシリーズでは、お客様がソリューションをデプロイする際に役立つ Azure のテクニカル導入プログラム Windows に関する Microsoft のサービスコンサルタントのエクスペリエンスについて説明します。
Content: '<p><i>導入プログラムインサイトシリーズでは、お客様が<a target="_blank" href="https://azure.microsoft.com/">Windows azure</a> platform にソリューションをデプロイする際に役立つ、Windows azure テクニカル導入プログラムに関連する Microsoft サービスコンサルタントのエクスペリエンスについて説明します。この投稿は、パトリック執事 Monterde および Tom Hollander によって公開されています。</i></p>  <p>カスタム開発アプリケーションの多くは、登録プロセスの一部であるかどうか、重要なイベントが発生したときにユーザーに通知する方法など、電子メールを送信する必要があります。 &nbsp;.NET 開発者の場合は、これ &nbsp; を実現するために、system.web 名前空間のクラスを使用したことがあります。ただし、これらのクラスでは、メッセージを送信するために SMTP 電子メールサーバーへのアクセスが必要ですが、Azure では現在このような機能を提供していません Windows。 &nbsp;ただし、すべては失われません。 &nbsp;この2部構成のシリーズでは、Windows Azure platform にデプロイされたアプリケーションに対して電子メール機能を有効にするためのパターンについて説明します。</p>  <ol>  <li>カスタムのオンプレミスの電子メール転送サービスを使用する: この記事で説明するこのパターンでは、オンプレミスの電子メールサーバーを使用して、Windows Azure で実行されているアプリケーションの代わりに電子メールを送信します。  これを実現するには、azure storage キューと blob Windows を使用する分散非同期モデルを使用してカスタムサービスを作成し、Windows azure で生成された電子メールをオンプレミスの電子メールサーバーに配信します。</li>  <li>電子メールサーバーの Web サービス api を使用する: &nbsp; パート2で説明されているこのパターンでは、Microsoft Exchange によって提供される Web サービス api を使用して、Windows Azure から電子メールを直接送信します。 このパターンは、同様の web サービスインターフェイスを提供する他のメッセージング製品にも適用できます。 </li>  <li>サードパーティの SMTP サービスを使用する: このパターンは、上田マルクスのブログ投稿 EmailTheInternet.com で説明されています。 Windows Azure &nbsp; では、 <a target="_blank" href="https://sendgrid.com/">sendgrid</a>や<a target="_blank" href="https://authsmtp.com/">authsmtp</a>などの<sup>サードパーティの</sup>電子メールサービスを利用して電子メールを中継します。 この記事で説明されているソリューションでは、さらに一歩進んで、ポート25で SMTP トラフィックをリッスンして Windows Azure アプリケーションから電子メールを受信する方法についても説明します。</li>  </ol>  <p><b>パターン 1: &nbsp; オンプレミスのカスタム電子メール転送サービスを使用する</b></p>  <p>このパターンでは、既存のオンプレミスの電子メールサーバーを利用して、Windows Azure アプリケーションの代わりに電子メールを送信します。  これは、Windows Azure Storage キューと blob を使用して、Windows Azure で生成された電子メールをオンプレミスの電子メールサーバーに配信する、オンプレミスのカスタム電子メール転送サービスを作成することによって実現されます。 &nbsp;このパターンは、次の2つの主要セクションに分かれています。&nbsp; </p>  <ol>  <li>電子メールの作業項目の準備と送信: これは、電子メールを生成する Windows Azure Web/Worker ロールの実装です。 電子メールオブジェクトをシリアル化し、Windows Azure Storage に電子メールの作業項目を作成します。</li>  <li>電子メール作業項目の受信と送信: これは、Azure storage Windows から電子メール作業項目を取得し、電子メールオブジェクトを逆シリアル化して電子メールサーバーに送信する電子メール転送サービスの実装です。</li>  </ol>  <p>Azure Windows からオンプレミスの電子メールサーバーへの電子メールの配信については、"作業項目" の概念を定義します。 作業項目は、次の要素で構成される論理コンテナーです。</p>  <ul class="unIndentedList">  </ul>  <ol>  <li> 1つのキュー項目: キュー項目には、電子メールメッセージが格納されている Blob の参照 (URI) が格納されます。 また、必要に応じて最大 8 kb のメタデータを保持できます。 </li>  <li> 1つの Blob 項目: Blob 項目には、シリアル化された電子メールオブジェクトが含まれます。 Blob のサイズは最大 1 TB であるため、電子メールオブジェクトは複数の大きな添付ファイルを保持できます。 </li>  </ol>  <ul class="unIndentedList">  </ul>  <p>次の図は、パターンのワークフローを示しています。 </p>  <p><img src="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/7115.EmailWAPart1SS.png" border="0"></p>  <p>これは、Windows Azure でホストされているアプリケーションが電子メールメッセージを送信する必要がある場合に発生します。</p>  <ol>  <li>ワーカー/web ロールによって電子メールメッセージが生成されます。 この電子メールメッセージは、Send-mailmessage インスタンスの形式で表示されます。 このメールオブジェクトには、任意の数の添付ファイルを含めることができます。 </li>  <li>電子メールオブジェクトがシリアル化され、blob に格納されます。 次に、blob の URL をキュー項目に追加します。 キュー項目と blob の組み合わせが電子メールの作業項目になります。 キューと Blob 項目の両方のメタデータを使用して、追加情報を格納できます。</li>  <li>オンプレミスでは、電子メール転送サービスが常にメールのキューを監視します。 キュー項目を取得できるのは、その時点で32項目の割合です。 電子メールフォワーダーサービスは、まずキュー項目を取得し、次に Blob の URI を抽出して、シリアル化された電子メールを取得します。</li>  <li>逆シリアル化されると、電子メールフォワーダーサービスは、オンプレミスの電子メールサーバー情報を使用して電子メールを送信します。 &nbsp; 電子メールを配信すると、キューおよび blob ストレージから作業項目が削除されます。 </li>  <li>オンプレミスの電子メールサーバーは、電子メールを受信します。 これはオンプレミスのアプリケーションであるため、認証と承認は簡単に行う必要があります。</li>  <li>電子メールサーバーから適切なユーザーに電子メールが送信されます。</li>  </ol>  <p>このパターンをわかりやすく説明するために、電子メールフォワーダーサービスの実装の例と、それを使用する Windows Azure アプリケーションを .zip ファイルとして以下にダウンロードできます。 &nbsp;このコードサンプルには、次のプロジェクトが含まれています。 </p>  <ul class="unIndentedList">  </ul>  <ul>  <li>  電子メールフォワーダーサービス: オンプレミスの電子メールフォワーダーサービスの実装。 単純なデモンストレーションを目的として、Windows フォームアプリケーションとして実装されます。ただし、実際の展開では、これを Windows サービスに実装します。 サンプルサービスをテストするには、app.config ファイルを編集して、オンプレミスの SMTP サーバーの詳細を含めます。</li>  <li>  エンティティ: 電子メールメッセージのシリアル化機能と、Windows Azure storage から電子メールの作業項目を追加および削除する操作が含まれているクラスライブラリ。 このプロジェクトは、電子メールフォワーダーサービスと Web/ワーカーロールの両方で使用されます。 </li>  <li>  電子メールジェネレーター Web ロール: 電子メールを送信できる単純な Web ロールの実装。 ロールには、送信する電子メールの詳細を入力できる web ユーザーインターフェイスが用意されています。</li>  <li>  Email Generator Worker Role: 電子メールを送信できる単純な worker ロールの実装。 ロールは、ロールの app.config ファイルで見つかった詳細を使用して、10秒ごとに電子メールメッセージを生成して送信します。</li>  </ul>  <p><b>アーキテクチャに関する考慮事項</b></p>  <p>ソリューションのアーキテクチャの影響を理解しておくことが重要です。 カスタム電子メール転送サービスの考慮事項には、次のようなものがあります。</p>  <ul class="unIndentedList">  <li>  コスト: Blob とキューのデータストレージ、およびオンプレミスサービスへのデータフローによって、ソリューション全体の追加コストが発生します。 コスト全体の影響は、個々のソリューションの電子メールボリュームによって異なります。このパターンを実装する前に考慮しておく必要があります。 シリアル化された電子メールオブジェクトのサイズを小さくするには、圧縮を使用することをお勧めします。 帯域幅のコストを最小限に抑えるには、blob とキューに使用される Windows Azure Storage アカウントが、電子メールを送信する web/worker ロールと同じアフィニティグループに配置されている必要があります。</li>  <li>  パフォーマンス: パフォーマンスに関する次の2つの主要な観測があります。</li>  </ul>  <blockquote><ol>  <li>サイズの大きい電子メールの添付ファイルを含むシリアル化された電子メールオブジェクトを使用すると、パフォーマンスに影響が生じる可能性があります </li>  <li>このパターンの非同期の性質により、電子メールフォワーダーサービスは、作業項目の Windows Azure Storage キューを定期的に確認します。   これにより、電子メールサーバーに電子メールが送信されるまでの遅延が発生しました。 これは、慎重に調査し、個々のニーズに応じて設定する必要があります。</li>  </ol></blockquote>  <ul class="unIndentedList">  <li>  管理: このサービスは監視する必要があります。 の実装には、ログ記録と監視の機能を追加することをお勧めします。 </li>  <li>  信頼性: 適切な再試行メカニズム ( <a target="_blank" href="https://blogs.msdn.com/b/windowsazurestorage/archive/2010/05/10/windows-azure-storage-abstractions-and-their-scalability-targets.aspx">指数バックオフ</a>を含む) は、すべての接続エラーに対処するために、電子メールフォワーダーサービスに実装する必要があります。&nbsp;</li>  </ul>  <p>第2部は、今週後半に投稿されます。</p>  <p><iframe src="https://www.facebook.com/plugins/like.php?href=;layout=box_count&amp;show_faces=false&amp;width=300&amp;action=like&amp;font=segoe+ui&amp;colorscheme=light&amp;height=50" style="overflow: hidden; width: 300px; height: 50px;" frameborder="0" scrolling="no"></iframe><br><a data-url="" data-count="horizontal" data-via="Windowsazure" href="https://twitter.com/share" class="twitter-share-button">ツイート</a>  <script src="https://platform.twitter.com/widgets.js" type="text/javascript"></script>  </p>'
