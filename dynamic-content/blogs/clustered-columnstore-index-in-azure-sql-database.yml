### YamlMime:Yaml
ms.openlocfilehash: 6ded5c5f56c9f88a7aa3d0a3faf3129c87be1490
ms.sourcegitcommit: d03bdc7fe5447adb6530886aab848b75fe8fa8ee
ms.translationtype: MT
ms.contentlocale: ja-JP
ms.lasthandoff: 03/11/2022
ms.locfileid: "139910883"
Slug: clustered-columnstore-index-in-azure-sql-database
Title: Azure SQL Database のクラスター化列ストアインデックス
Summary: 列ストアインデックスは、Azure SQL データベースで分析クエリを実行するために推奨されるテクノロジです。 すべてのプレミアムデータベースに対して In-Memory テクノロジを使用 &nbsp; している場合は、一般公開されています。
Content: >-
  <p>列ストアインデックスは、Azure SQL データベースで分析クエリを実行するために推奨されるテクノロジです。 すべてのプレミアムデータベースに対して In-Memory テクノロジを使用している場合は、<a href="https://azure.microsoft.com/en-us/blog/azure-sql-database-in-memory-performance/">一般</a>公開されています。 <a href="https://azure.microsoft.com/en-us/blog/in-memory-oltp-in-azure-sql-database/">インメモリ OLTP</a>と同様に、列ストアインデックステクノロジは premium データベースで利用できます。</p>


  <p>列ストアテクノロジは、次の2つの種類で使用できます。データマート analytics ワークロードおよび非クラスター化列ストアインデックス (NCCI) のクラスター化列ストアインデックス (CCI) を使用して、運用 (OLTP) ワークロードに対して分析クエリを実行します。 列ストアインデックスの2つのフレーバーの違いについては、 <a href="https://blogs.msdn.microsoft.com/sqlserverstorageengine/2016/07/18/columnstore-index-differences-between-clusterednonclustered-columnstore-index/">NCCI VS CCI</a> を参照してください。 列ストアインデックスを使用すると、分析クエリのパフォーマンスが100倍に向上しますが、ストレージフットプリントが大幅に減少します。 実現されるデータ圧縮は、スキーマとデータによって異なりますが、圧縮がない行ストアと比較した場合、平均で10倍のデータ圧縮が発生します。 このブログでは、CCI を使用した分析ワークロードに焦点を当てていますが、今後のブログで NCCI を取り上げています。</p>


  <p>クラスター化列ストアインデックスは、Azure SQL データベースのすべての premium エディションで使用できます。 ただし、Standard および Basic の価格レベルではまだ利用できません。 Azure SQL データベースでこのテクノロジを使用すると、ストレージコストを削減し、低レベルの premium レベルでのクエリパフォーマンスをさらに向上させることができます。</p>


  <p>次の表は、クラスター化列ストアインデックスと P15 の両方を使用して、複数テーブルの結合を実行する一般的な分析クエリを示しています。</p>


  <p><strong>クエリパフォーマンス:</strong> ここで重要な点は、クラスター化列ストアインデックスでは、サンプルクエリの実行速度が、P15 で実行されている同じクエリと比較して、チューニングのない行ストアを使用した場合と同じです。 &nbsp; これにより、ワークロードの要件を満たすために必要なコストを大幅に削減できます。</p>


  <table border="1" cellpadding="2" cellspacing="0" width="999">
   <tbody>
    <tr>
     <td valign="top" width="210"><b>価格レベル</b></td>
     <td valign="top" width="265"><b>行ストアを使用する </b></td>
     <td valign="top" width="260"><b>列ストアを使用する</b></td>
     <td valign="top" width="262"><b>パフォーマンスの向上</b></td>
    </tr>
    <tr>
     <td valign="top" width="209">P1</td>
     <td valign="top" width="264">30.6 秒</td>
     <td valign="top" width="261">4.2 秒</td>
     <td valign="top" width="263">14x</td>
    </tr>
    <tr>
     <td valign="top" width="208">P15</td>
     <td valign="top" width="264">19.5 秒</td>
     <td valign="top" width="262">0.319 秒</td>
     <td valign="top" width="264">60x</td>
    </tr>
   </tbody>
  </table>


  <p><strong>Storage サイズ:</strong>次に示すページまたは圧縮されていないテーブルと比較した列ストアによるストレージの節約。 Azure Db にはストレージのコストは既に含まれていますが、下位のストレージでは下位レベルを選択できます。 これはテストデータが生成されるため、圧縮は顧客のワークロードに対して得られるものよりも小さくなることに注意してください。</p>


  <table border="1" cellpadding="2" cellspacing="0" width="1685">
   <tbody>
    <tr>
     <td valign="top" width="377"><strong>行数</strong></td>
     <td valign="top" width="432"><strong>行ストアのサイズ (MB)</strong></td>
     <td valign="top" width="438"><strong>サイズ列ストア (MB)</strong></td>
     <td valign="top" width="436"><strong>普通預金</strong></td>
    </tr>
    <tr>
     <td valign="top" width="377">3626191</td>
     <td valign="top" width="432">212 (ページの圧縮)</td>
     <td valign="top" width="438">120</td>
     <td valign="top" width="436">1.8x</td>
    </tr>
    <tr>
     <td valign="top" width="377">3626191</td>
     <td valign="top" width="432">756 (圧縮なし)</td>
     <td valign="top" width="438">120 MB</td>
     <td valign="top" width="436">6.2 x</td>
    </tr>
   </tbody>
  </table>


  <p>列ストアインデックステクノロジの最も良い部分は、アプリケーションを変更する必要がないことです。 必要な作業は、テーブルの列ストアインデックスを使用して既存のインデックスを作成または置換することだけです。</p>


  <h2>列ストアインデックスのしくみ</h2>


  <p>前に説明したように、列ストアは、次に示すように、列としてテーブルにデータを格納するインデックスにすぎません。 クエリは、変更を必要としないテーブルに引き続きアクセスできます。</p>


  <p><a href="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/15e271b1-9944-4894-be37-0d4b1bbbfe90.png"><img alt="chart 1" border="0" height="268" src="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/73d0f49d-2cf4-424e-9570-050824cc2dda.png" style="border-left-width: 0px; border-right-width: 0px; background-image: none; border-bottom-width: 0px; padding-top: 0px; padding-left: 0px; display: inline; padding-right: 0px; border-top-width: 0px" title="グラフ1" width="793"></a></p>


  <p>列ストアインデックスは、次の3つの重要な要因により、データの圧縮とクエリのパフォーマンスを大幅に向上させる</p>


  <ul>
   <li><strong>IO と Storage の削減:</strong>データは個別の列として格納されるため、すべての値が同じドメイン (データ型) から描画され、多くの場合、値が繰り返しまたは類似しているため、非常に効果的に圧縮されます。 圧縮はデータ分布に依存しますが、一般的に見られる圧縮は約10倍です。 これは、データベースの IO フットプリントが大幅に削減されるため、ストレージを減らすことができるため、重要です。</li>
   <li><strong>フェッチが必要なのは、参照されている列のみです。</strong> ほとんどの分析クエリは、少数の列のセットだけをフェッチ/処理します。 一般的な <a href="https://en.wikipedia.org/wiki/Star_schema">スタースキーマ</a> &nbsp; を検討している場合、ファクトテーブルは最も多くの行が含まれ、多数の列が含まれています。 列ストアストレージでは、クエリで参照されている列の数に関係なく、完全な行をフェッチする必要がある行ストアとは異なり SQL Server、参照されている列のみをフェッチする必要があります。行ストアは、クエリで参照される たとえば、100列のファクトテーブルと、このテーブルにアクセスする分析クエリは、5つの列のみを参照しているとします。 参照されている列のみをフェッチすることにより、すべての列が同じストレージを使用することを前提として、IO を95% 削減できる可能性があります。 これは、列ストアによって提供される10倍のデータ圧縮の上にあることに注意してください。</li>
   <li><strong>効率的なデータ処理:</strong> SQL Server には、クエリのパフォーマンスに最大100倍のスピードを提供する、列ストアデータ用の業界最高レベルのクエリエンジンがあります。 詳細については、「 <a href="https://blogs.msdn.microsoft.com/sqlserverstorageengine/2016/03/14/columnstore-index-how-does-sql-server-delivers-industry-leading-performance-for-analytic-queries/">Analytics クエリの高速化</a>」を参照してください。</li>
  </ul>


  <h2>クラスター化列ストアインデックスを作成操作方法には</h2>


  <p>クラスター化列ストアインデックスの作成は、他のインデックスの作成と似ています。 たとえば、次のように通常の行ストアテーブルを作成できます。</p>


  <pre>

  CREATE TABLE ACCOUNT (
      ACCOUNTKEY                INT NOT NULL,
      ACCOUNTDESCRIPTION        NVARCHAR (50),
      ACCOUNTTYPE               NVARCHAR (50),
      ACCOUNTCODEALTERNATEKEY   INT)</pre>

  <p>上の表に挿入されたすべての行は、行ストア形式で格納されます。 ここで、&#39;列ストア&#39; にデータを格納するようにこのテーブルを変換する場合は、次の SQL ステートメントを実行するだけです。</p>


  <pre>

  CREATE CLUSTERED COLUMNSTORE index ACCOUNT_CI on ACCOUNT</pre>


  <p>行ストアテーブルにクラスター化された BTREE インデックスがある場合は、次の SQL ステートメントを実行できます。</p>


  <pre>

  CREATE CLUSTERED COLUMNSTORE index ACCOUNT_CI on ACCOUNT WITH (DROP_EXISTING = ON)</pre>


  <h2>クラスター化列ストアインデックスを使用するタイミングと場所</h2>


  <p>クラスター化列ストアインデックスは、主に分析ワークロードを対象としています。 次の表は、このテクノロジで正常に展開された一般的なシナリオを示しています。</p>


  <table border="1" cellpadding="2" cellspacing="0" width="996">
   <tbody>
    <tr>
     <td valign="top" width="321"><strong>列ストアオプション</strong></td>
     <td valign="top" width="356"><strong>[ワークロード]</strong></td>
     <td valign="top" width="317"><strong>圧縮</strong></td>
    </tr>
    <tr>
     <td valign="top" width="319">CCI (クラスター化列ストアインデックス)</td>
     <td valign="top" width="361">
     <ul>
      <li><strong>スタースキーマまたはスノーフレークスキーマを使用した従来の DW ワークロード:</strong> 通常は、ファクトテーブルに対して CCI を有効にしますが、行ストアのディメンションテーブルはページの圧縮で保持します。<br>
  その他の考慮事項: 100万行の大きなディメンションテーブル &gt; の場合は CCI を検討してください</li>
      <li><strong>ほとんどのワークロードを挿入:</strong> IOT (モノのインターネット) などの多くのワークロードでは、更新/削除を最小限に抑えて大量のデータを挿入します。 これらのワークロードは、膨大なデータ圧縮や、分析クエリの高速化に役立ちます。</li>
     </ul>
     </td>
     <td valign="top" width="315">
     <p>平均で10倍</p>
     </td>
    </tr>
    <tr>
     <td valign="top" width="317">CCI/NCI (1 つ以上の非クラスター化インデックスを含む)</td>
     <td valign="top" width="366">
     <ul>
      <li>CCI で説明したものと似ていますが、等値述語または短い範囲クエリを使用したクエリの数 (a) PK/FK 実施 (b) が必要です。 NCIs では、NCIs を使用して効率的に検索できる行のフルテーブルスキャン (c) の更新/削除を回避することで、クエリのパフォーマンスを向上させることができます。</li>
     </ul>
     </td>
     <td valign="top" width="319">
     <p>平均で10倍、NCIs の追加ストレージ</p>
     </td>
    </tr>
   </tbody>
  </table>


  <h2>開始するためのリソース</h2>


  <p>詳細については、次を参照してください。</p>


  <ul>
   <li><a href="https://docs.microsoft.com/en-us/azure/sql-database/sql-database-in-memory">列ストアインデックスのサンプルワークロード</a></li>
   <li><a href="https://blogs.msdn.microsoft.com/sqlserverstorageengine/2016/10/04/columnstore-index-in-memory-analytics-i-e-columnstore-index-videos-from-ignite-2016/">列ストアインデックスの運用環境のデプロイの例</a></li>
   <li><a href="https://blogs.msdn.microsoft.com/sqlserverstorageengine/tag/columnstore-index/">列ストアインデックスに SQL Server Team&#39;s ブログ</a></li>
   <li><a href="https://msdn.microsoft.com/library/gg492088.aspx">列ストアインデックスに関する MSDN ドキュメント</a></li>
  </ul>
