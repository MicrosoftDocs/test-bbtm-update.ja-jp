### YamlMime:Yaml
ms.openlocfilehash: 4f2c3b822825abd105eae3944b94dce1cd72bad2
ms.sourcegitcommit: d03bdc7fe5447adb6530886aab848b75fe8fa8ee
ms.translationtype: MT
ms.contentlocale: ja-JP
ms.lasthandoff: 03/11/2022
ms.locfileid: "139896684"
Slug: mesosphere-dcos-azure-docker-vmware-and-everything-between-architecture-and-ci-cd-flow
Title: Mesosphere DCOS、Azure、Docker、VMware のほか、–アーキテクチャと CI/CD の間のすべてのものを Flow
Summary: これらの日に、任意のコンテナー、DevOps、オートメーションなどに関連するディスカッションに参加しようとしています。 ロールの一部は、Azure でコンテナープラットフォームとオーケストレーションツールを設計する方法について、お客様を参照することです。 でも、Mesosphere DC/OS、Azure Container Service、Azure Container Registry、Docker、VMware vSphere に関連するソリューションの設計などを行う機会がある場合はどうなるでしょうか。
Content: >-
  <p>これらの日に、任意のコンテナー、DevOps、オートメーションなどに関連するディスカッションに参加しようとしています。 ロールの一部は、Azure でコンテナープラットフォームとオーケストレーションツールを設計する方法について、お客様を参照することです。 でも、Mesosphere DC/OS、Azure Container Service、Azure Container Registry、Docker、VMware vSphere に関連するソリューションの設計などを行う機会がある場合はどうなるでしょうか。 検索してみましょう &rsquo;&hellip;</p>


  <p>この最初のマルチパートブログ投稿シリーズでは、その背後にある動機、要件と制約、アーキテクチャ、およびコース &ldquo; の開始方法 &rdquo; &ndash; &rsquo; について説明します。</p>


  <h2>動機、要件 &amp; の制約</h2>


  <p>この1つ &ndash; の目的は、Docker コンテナーを見て、複数のアプリケーションを統合することです。</p>


  <p>多くの詳細については説明しませんが、DevOps チームが運用環境を vsphere の上にデプロイし、Azure の開発/QA/統合環境にデプロイすると &rsquo; いう大きな制約 &ndash; が1つありました。 これが制約になるのはなぜですか。 すぐに確認できます。</p>


  <p>要件については、次のようなものがあります。</p>


  <ul>
   <li>DC/OS での Azure Container Service の使用</li>
   <li>Docker イメージを同じプライベートコンテナーレジストリに格納します。これは、すべてのパーティ &ndash; の開発/QA/統合/製品によって使用されます。</li>
   <li>すべてのスタックにわたって統合されたコンテナーのオーケストレーションプラットフォーム</li>
  </ul>


  <p>2番目の制約の部分に戻ります。これは、運用環境が Azure &rsquo; の一部であった場合、vSphere に関して何もする必要がなく、すべてが純粋 &ldquo; な cloudish &rdquo; でした。</p>


  <h2>運用 CI/CD Flow への開発</h2>


  <p>次に示す継続的インテグレーションとデプロイフローは次のようになります。</p>


  <ul>
   <li>開発者は、自分のワークステーションにローカルに配置されたコンテナーに対してコーディングを行います。</li>
   <li>次に、統合対応 &rdquo; の docker イメージをプライベートコンテナーレジストリにプッシュ &ldquo; します。</li>
   <li>統合チームは、Azure にデプロイされた DC/OS クラスターにイメージをプルして、追加の統合とテストの作業を行います。 完了すると、新しい &ldquo; 運用準備完了 &rdquo; イメージがコンテナーレジストリにプッシュされます。</li>
   <li>実稼働準備完了 &rdquo; コンテナーは、 &ldquo; vsphere にデプロイされた DC/OS 運用クラスターにプルされています。</li>
  </ul>


  <p><a href="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/07d65214-848d-4884-ad0d-87281b11de25.jpg"><img alt="01" border="0" height="464" src="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/929bb693-1c49-4af8-a868-b3c8f17f25ce.jpg" style="border: 0px currentColor; border-image: none; padding-top: 0px; padding-right: 0px; padding-left: 0px; margin-right: auto; margin-left: auto; float: none; display: block; background-image: none;" title="1" width="825"></a></p>


  <h2>アーキテクチャ</h2>


  <p>前に説明したプロセスに対応するインフラストラクチャの論理設計を以下に示します。 ここでは、このシリーズの Visual Studio Team Services (VSTS) や Team Foundation Server (TFS) には触れないことに注意してください。ここでは、インフラストラクチャについて詳しく説明します。</p>


  <p><a href="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/4c8658d0-8bc5-43e1-92ec-3c2acbf0eb8d.png"><img alt="02" border="0" height="457" src="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/7d6df60f-3365-4d34-b92c-9e88b6deaee3.png" style="border: 0px currentColor; border-image: none; padding-top: 0px; padding-right: 0px; padding-left: 0px; margin-right: auto; margin-left: auto; float: none; display: block; background-image: none;" title="+" width="825"></a></p>


  <p>このシリーズの次のブログ記事では、vSphere の上に DC/OS 1.9 をデプロイする方法について説明します。 私は、このような展開に必要な構成、警告、および手順について知識を共有することを目的としています。</p>
