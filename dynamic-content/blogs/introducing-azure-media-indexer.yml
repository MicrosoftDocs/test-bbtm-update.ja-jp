### YamlMime:Yaml
ms.openlocfilehash: c439e57924c54cf1e4fc0b1d2c07f347814f30c1
ms.sourcegitcommit: d03bdc7fe5447adb6530886aab848b75fe8fa8ee
ms.translationtype: MT
ms.contentlocale: ja-JP
ms.lasthandoff: 03/11/2022
ms.locfileid: "139903536"
Slug: introducing-azure-media-indexer
Title: 'Introducing: Azure Media Indexer (Azure Media Indexer の紹介)'
Summary: Azure Media Indexer は、Microsoft Research の音声認識テクノロジを使用して、オーディオファイルやビデオファイルから意味のあるメタデータを抽出します。  このブログ投稿は、インデクサーを使用して Azure Media Services でジョブを実行する方法を説明するシリーズの最初のものです。
Content: "<h2>はじめに</h2>\n\n<p><i>Cisco VNI の予測</i>では、インターネットビデオが急激 &ndash; に増加しています。これは、すべてのコンシューマーインターネットトラフィックの70% が2014のビデオコンテンツになることを想定しています。これは2018によって79% になります。 世界中で見られるインターネットトラフィックの大部分は既に構成されています。ビデオコンテンツは World Wide Web を引き継ぎ、この増加によってコンテンツの検出に関する問題が発生します。 インターネットはテキストベースのドキュメントを中心に設計されています。そのため、web 全体でテキストの検索と検出を行うためのインフラストラクチャが完成しています。 一方、ビデオファイルはネイティブ &ldquo; には検索 &rdquo; できません。通常、複雑な分類システムを必要とします。これは主に、大量の <i>手動タグ付き</i> メタデータによって機能します。 しかし、このような意味のあるメタデータを自動的に抽出する方法がある場合はどうでしょうか。 Azure Media Indexer は、Microsoft Research の自然言語処理 (NLP) テクノロジを活用して、キーワードファイル (XML)、一連のクローズドキャプションファイル (サーミ/TTML)、および強力なバイナリインデックスファイル (AIB) の形式でエンドユーザーにこの意味のあるメタデータを自動的に公開することで、メディアファイルとコンテンツを検索可能にするメディアプロセッサです。 マルチメディアの拡大により、聴覚に障害が発生したユーザーへのビデオコンテンツのアクセシビリティに焦点を合わせています。 この状態は、クローズドキャプショントラックを作成するために、すべてのビデオが高コストで手動で書き起こしされることを示しています。 Azure Media Indexer &rsquo; s 音声認識エンジンは、入力メディアファイル内のすべての英語の単語に対して、時間に合わせた字幕トラックを自動的に作成します。 これにより、困難なという手作業のプロセスが自動化されたジョブに変換されます。 Azure Media Indexer の出力ファイルを SQL Server や Apache Lucene/のような検索エンジンと組み合わせて使用することで、開発者はフルテキスト検索エクスペリエンスを作成できます。 その後、ユーザーは単にテキストクエリを使用してコンテンツライブラリを検索し、結果ページを返すことができるようになります。このページでは、発音という単語が含まれているタイムスタンプを探すことができます。 &nbsp; このメタデータとビデオの緊密な統合により、大規模なコンテンツライブラリの検索と目的の結果の差を減らす高品質のシナリオが可能になります。 &nbsp; この検索レイヤーの実装については、このブログ記事では説明しませんが、Azure Media Indexer を使用してメディアファイルの検索ポータルを作成する方法については、Azure ブログで今後予定されている投稿を参照してください。 &nbsp;</p>\n\n<h2>最初の資産のインデックスを作成する</h2>\n\n<p>Azure Media Indexer では、ユーザーはローカルファイルシステムまたは Azure Media Services から、さまざまな種類のファイルに対してインデックス作成ジョブを実行できます。 最初の Azure Media Indexer ジョブでは、まずローカルディスクからファイルを作成し、Azure Media Services にアップロードして、Azure クラウドで処理します。 このチュートリアルでは、 &rsquo; この<a href=\"https://channel9.msdn.com/Blogs/Windows-Phone/Integrative-Mom-and-Windows-Phone-App-Studio\">サンプル Channel9 ビデオ</a>を使用します。 &nbsp;MP4 ファイルをコンピューターに保存し、名前を Index.mp4 に変更します。 &nbsp;&rsquo;このチュートリアルでは、ターゲットのビデオファイルが次のパスにあることを想定しています。 &ldquo; C:\\Users \\& lt; &lt;ユーザー名 &gt; &gt;\\Videos\\Index.mp4&rdquo; 。 完成したサンプルプロジェクトはここからダウンロードできます。</p>\n\n<blockquote><strong>注:</strong>このチュートリアルでは、既に<a href=\"https://azure.microsoft.com/en-us/documentation/articles/media-services-create-account/\">Azure Media Services アカウント</a>を持っていることを前提としています。</blockquote>\n\n<h3>Project の設定</h3>\n\n<p>まず、Visual Studio 2013 で Project 新しい C# コンソールアプリケーションを作成します ([ファイル &gt; ] [新規 &gt; ] Project または Ctrl + Shift + N)。 &nbsp; <a href=\"https://acom.azurecomcdn.net/80C57D/blogmedia/blogmedia/2014/08/1-1.png\"><img alt=\"Creating a project\" border=\"0\" height=\"646\" src=\"https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/1-1_thumb.png\" style=\"border-width: 0px; padding-top: 0px; padding-right: 0px; padding-left: 0px; margin-right: auto; margin-left: auto; float: none;\" title=\"1-1 \" width=\"933\"> </a> &nbsp; 次に、ソリューションエクスプローラーで projects References フォルダーを右クリックし、[NuGet パッケージ &rdquo; の管理] をクリック &ldquo; して NuGet を使用して Azure Media Services SDK をインストールします。 検索ボックスに「media services &rdquo; 」と入力 &ldquo; し、Windows Azure Media Services .net SDK &rdquo; をインストール &ldquo; します。 &nbsp; <a href=\"https://acom.azurecomcdn.net/80C57D/blogmedia/blogmedia/2014/08/1-2.png\"><img alt=\"Installing SDK via NuGet\" border=\"0\" height=\"760\" src=\"https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/1-2_thumb.png\" style=\"border-width: 0px; padding-top: 0px; padding-right: 0px; padding-left: 0px; margin-right: auto; margin-left: auto; float: none;\" title=\"1-2 \" width=\"1009\"> </a> &nbsp; 最後に、次に示すように、 <span style=\"font-family: Consolas;\">App.config</span>ファイルを開き、 <span style=\"font-family: consolas;\">appSettings</span>セクションを追加します。 必ず、適切なキーと値のペアに Azure Media Services 資格情報を入力してください。</p>\n\n<blockquote><strong>&nbsp;<span style=\"color: rgb(255, 0, 0);\">注: この最初のリリース以降、タスク構成スキーマが変更されています。 &nbsp;詳細については、</span> Azure Media Indexer 1.2 \"> Azure Media Indexer v1.0 の <a href=\"https://aka.ms/indexerblog4\" title=\" リリースノートを参照してください。</a></strong></blockquote>\n\n<p style=\"padding-left: 30px;\"><span style=\"line-height: 1.5;\">&nbsp;</span></p>\n\n<pre class=\"prettyprint\">\n&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;\n&lt;configuration&gt;\n    &lt;startup&gt; \n        &lt;supportedRuntime version=&quot;v4.0&quot; sku=&quot;.NETFramework,Version=v4.5&quot; /&gt;\n    &lt;/startup&gt;\n\n  &lt;!-- YOUR SETTINGS GO HERE --&gt;--&gt;\n  &lt;appSettings&gt;\n    &lt;add key=&quot;accountName&quot; value=&quot;&lt;&lt;YOUR_ACCT_NAME&gt;&gt;&quot;/&gt;\n    &lt;add key=&quot;accountKey&quot; value=&quot;&lt;&lt;YOUR_ACCT_KEY&gt;&gt;&quot;/&gt;\n  &lt;/appSettings&gt;\n  &lt;!-- REPLACE &lt;&lt;YOUR_ACCT_NAME&gt;&gt; AND &lt;&lt;YOUR_ACCT_KEY&gt;&gt; &ndash; --&gt;\n\n&lt;/configuration&gt;</pre>\n\n<h3>&nbsp;</h3>\n\n<h3>アセットの作成</h3>\n\n<p><a href=\"https://msdn.microsoft.com/en-us/library/azure/hh974277.aspx\">アセット</a>は、メディアファイルの Azure Media Services コンテナーです。 アセットには、メディアファイル自体と、プレビューのためにストリーミングファイルやサムネイルファイルのマニフェストファイルなどのその他の必要なファイルが含まれています。 この場合は、.NET SDK を使用してビデオファイルを保持するアセットファイルを作成します。 <a href=\"https://manage.windowsazure.com\">Azure 管理ポータル</a>を使用して資産をアップロードすることもできます。 メディア処理ジョブは入力資産を取得し、指定された出力資産に結果を保存します。 まず、いくつかの依存関係をインポートし、<span style=\"font-family: consolas;\">プログラム .cs</span>で便利な定数を宣言する必要があります。 &nbsp;</p>\n\n<pre class=\"prettyprint\">\nusing System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Threading.Tasks;\n\nusing Microsoft.WindowsAzure.MediaServices.Client;\nusing System.Configuration;\nusing System.IO;\nusing System.Threading;\n\nnamespace MyFirstIndexingJob\n{\n    class Program\n    {\n\n        private static CloudMediaContext _context = null;\n        private const string _mediaProcessorName = &quot;Azure Media Indexer&quot;;\n        private const string _configurationFile = &quot;&lt;&lt;PLACEHOLDER&gt;&gt;&quot;;\n        private static readonly string _accountName =\n            ConfigurationManager.AppSettings[&quot;accountName&quot;];\n        private static readonly string _accountKey =\n            ConfigurationManager.AppSettings[&quot;accountKey&quot;];</pre>\n\n<p>&nbsp;Media Services クラウドへのプログラムによる接続を確立するには、 <a href=\"https://msdn.microsoft.com/en-us/library/jj129571.aspx\">CloudMediaContext</a>オブジェクトをインスタンス化する必要があります。 これにより、最初に新しい資産を作成してから、アセット内の AssetFile としてファイルをアップロードすることで、ファイルをアップロードできます。 最初に、Main 関数に次の行を追加し、ビデオを検索する場所と出力ファイルを配置する場所を指定します。</p>\n\n<blockquote>注: このサンプルプロジェクトと同じパスを使用する場合は、username &gt; &gt; をローカルの Windows ユーザー名に置き換え &lt; &lt; ます。<span style=\"color: rgb(255, 0, 0);\">&nbsp;</span></blockquote>\n\n<p><span style=\"color: rgb(255, 0, 0);\">&nbsp;</span></p>\n\n<pre class=\"prettyprint\">\nstatic void Main(string[] args)\n{\n    _context = new CloudMediaContext(_accountName, _accountKey);\n    var inputFile = @&ldquo;C:\\Users\\&lt;&lt;USERNAME&gt;&gt;\\Videos\\Index.mp4&rdquo;;\n    var outputFolder = @&ldquo;C:\\Users\\&lt;&lt;USERNAME&gt;&gt;\\Desktop&rdquo;;\n    RunIndexingJob(inputFile, outputFolder, _configurationFile);\n}</pre>\n\n<p>&nbsp; Then, you can begin your RunIndexingJob function, and add the first few lines: <!-- HTML generated using hilite.me --> &nbsp;</p>\n\n<pre class=\"prettyprint\">\nstatic bool RunIndexingJob(string inputFilePath, string outputFolder, string configurationFile = &ldquo;&rdquo;)\n{\n    IAsset asset = _context.Assets.Create(&ldquo;Indexer_Asset&rdquo;, AssetCreationOptions.None); \n    var assetFile = asset.AssetFiles.Create(Path.GetFileName(inputFilePath));\n    assetFile.Upload(inputFilePath);\n}</pre>\n\n<p>&nbsp; &nbsp;</p>\n\n<h3>インデックス作成ジョブの送信</h3>\n\n<p>現在のファイルを資産として Azure Media Services クラウドに置いて、次の手順では、Azure Content Indexer メディアプロセッサへの参照を取得し、ジョブ自体を作成します。 Media Services のジョブは、処理操作 (エンコード、パッケージングなど) の詳細を指定する1つ以上のタスクで構成されます。 タスクは、タスクに関する詳細を指定するタスク構成ファイルを必要に応じて取得します。 この例では、次に説明するいくつかの便利なメタデータを含むdefault.config&rdquo; という &ldquo; オプションの構成ファイルを使用して、新しい資産にインデックス作成タスクを作成します。 &nbsp;</p>\n\n<h4>タスクの構成</h4>\n\n<blockquote><strong>&nbsp;<span style=\"color: rgb(255, 0, 0);\">注: この最初のリリース以降、タスク構成スキーマが変更されています。 &nbsp;詳細については、</span> Azure Media Indexer 1.2 \"> Azure Media Indexer v1.0 の <a href=\"https://aka.ms/indexerblog4\" title=\" リリースノートを参照してください。</a></strong></blockquote>\n\n<p>Azure Content Indexer 用のタスク構成ファイルは、キーと値のペアを含む XML ファイルです。これにより、音声認識の精度が向上します。 このリリースの Azure Media Indexer では、構成の詳細で入力メディアファイルのタイトルと説明を記述することができます。これにより、アダプティブ自然言語処理エンジンは、特定の主題に基づいてボキャブラリを補強することができます。 &nbsp;たとえば、Geico に関するビデオがある場合、この用語をタスクの構成ファイルに含めると便利な場合があります。 &nbsp;これにより、目的の適切な名詞 &ldquo; geico &rdquo; の代わりに、guy の &ldquo; コロケーション &rdquo; の可能性が減少します。 &nbsp;さらに、たとえば hypertension &rdquo; という用語 &ldquo; を含むタイトルがある場合、エンジンは、言語モデルをさらに拡張できる関連ドキュメントをインターネットで検索します。 これにより、またはティック &rdquo; のような &ldquo; ものとして判読できないように解釈されると、出力ファイルの精度が大幅に向上するという意味で、aneurism &rdquo; という言葉 &ldquo; が使用される可能性が低くなります。</p>\n\n<blockquote>注: 最適な結果を得るには、 <span style=\"font-family: Consolas;\">タイトル</span> と <span style=\"font-family: Consolas;\">説明</span> のキーに4-5 の文を使用します。</blockquote>\n\n<p>新しい構成ファイルを作成するには、Project を右クリックし、[新しい項目の追加 &gt; ] をクリックして、[XML ファイル] を選択します。 &nbsp;新しいファイルに次のテキストを貼り付け、default.config&rdquo; として &ldquo; 保存します。 &nbsp;この場合は、Channel9 web サイトの情報を使用して、構成ファイルにオプション &ldquo; のタイトル &rdquo; と &ldquo; 説明 &rdquo; のキーを追加して、精度を高めることができます。&nbsp;</p>\n\n<pre class=\"prettyprint\">\n&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;\n&lt;configuration version=&quot;2.0&quot;&gt; \n  &lt;input&gt;\n    &lt;!-- [Optional] Metadata of the input media file(s) --&gt;\n    &lt;!-- Format: &lt;metadata key=&quot;...&quot; value=&quot;...&quot; /&gt; --&gt;\n    &lt;metadata key=&quot;title&quot; value=&quot;Integrative Mom and Windows Phone App Studio&quot; /&gt;\n    &lt;metadata key=&quot;description&quot; value=&quot;Holly Shore discusses her experience building her own app for Integrative Mom using Windows Phone App Studio, a free, web-based app builder that can help many small business owners like Holly get up and running quickly to extend their reach with a Windows Phone app.&quot; /&gt;\n  &lt;/input&gt;  \n  &lt;settings&gt;\n  &lt;/settings&gt;  \n&lt;/configuration&gt;</pre>\n\n<h4>&nbsp;</h4>\n\n<p>必ず、プログラムの .cs ファイルの先頭に戻って、プレースホルダー &rdquo; &gt; &gt; _configurationFile 文字列を新しい default.config ファイルのパスに変更 &ldquo; &lt; &lt; してください。 &nbsp;</p>\n\n<blockquote><span style=\"color: rgb(79, 129, 189);\"><strong>ヒント</strong></span>: エディターにファイルをドラッグアンドドロップすると、ソリューションエクスプローラーから [ファイルの絶対パスを簡単に貼り付けることができます。</blockquote>\n\n<p>&nbsp;</p>\n\n<h4>ジョブの作成</h4>\n\n<p>構成ファイルが配置された状態で、 <span style=\"font-family: consolas;\">RunIndexingJob</span> メソッドの操作を続行し、そのコンポーネントのタスクと共にジョブ自体の作成を開始します。 &nbsp;</p>\n\n<pre class=\"prettyprint\">\n    IMediaProcessor indexer = GetLatestMediaProcessorByName(_mediaProcessorName);\n    IJob job = _context.Jobs.Create(&quot;My Indexing Job&quot;);\n    string configuration = &quot;&quot;;\n    if (!String.IsNullOrEmpty(configurationFile))\n    {\n        configuration = File.ReadAllText(configurationFile);\n    }\n    ITask task = job.Tasks.AddNew(&quot;Indexing task&quot;,\n             indexer,\n             configuration,\n             TaskOptions.None);\n\n    // Specify the input asset to be indexed.\n    task.InputAssets.Add(asset);\n\n    // Add an output asset to contain the results of the job.\n    task.OutputAssets.AddNew(&quot;Indexed video&quot;, AssetCreationOptions.None);</pre>\n\n<p>&nbsp; 次に、ファイルの一番下にある便利なヘルパーメソッドを定義して、特定のメディアプロセッサの最新バージョンを取得します。 &nbsp;</p>\n\n<pre class=\"prettyprint\">\nprivate static IMediaProcessor GetLatestMediaProcessorByName(string mediaProcessorName)\n{\n    var processor = _context.MediaProcessors\n       .Where(p =&gt; p.Name == mediaProcessorName)\n       .ToList()\n       .OrderBy(p =&gt; new Version(p.Version))\n       .LastOrDefault();\n\n    if (processor == null)\n        throw new ArgumentException(string.Format(&quot;Unknown media processor&quot;, mediaProcessorName));\n\n    return processor;\n}</pre>\n\n<p>&nbsp; このジョブを送信する準備はできていますが、最初に、 <a href=\"https://msdn.microsoft.com/en-us/library/edzehd2t.aspx\">EventHandler</a> のインスタンスをジョブにアタッチして、その進行状況をリアルタイムで追跡できるようにすると便利です。 &nbsp;</p>\n\n<pre class=\"prettyprint\">\n    job.StateChanged += new EventHandler&lt;JobStateChangedEventArgs&gt;(StateChanged);\n    job.Submit();\n    // Check job execution and wait for job to finish. \n    Task progressPrintTask = new Task(() =&gt;\n    {\n        IJob jobQuery = null;\n        do\n        {\n            var progressContext = new CloudMediaContext(_accountName, \n       _accountKey);\n            jobQuery = progressContext.Jobs.Where(j =&gt; j.Id == job.Id).First();\n            Console.WriteLine(string.Format(&quot;{0}\\t{1}\\t{2}&quot;, \n         DateTime.Now, \n         jobQuery.State, \n         jobQuery.Tasks[0].Progress));\n            Thread.Sleep(10000);\n        }\n        while (jobQuery.State != JobState.Finished &amp;&amp;\n               jobQuery.State != JobState.Error &amp;&amp;\n               jobQuery.State != JobState.Canceled);\n     });\n     progressPrintTask.Start();\n\n    // Check job execution and wait for job to finish. \n    Task progressJobTask = job.GetExecutionProgressTask(CancellationToken.None);\n    progressJobTask.Wait();\n\n    // If job state is Error, the event handling \n    // method for job progress should log errors.  Here you check \n    // for error state and exit if needed.\n    if (job.State == JobState.Error)\n    {\n        Console.WriteLine(&quot;Exiting method due to job error.&quot;);\n        return false;\n    }\n\n    // Download the job outputs.\n&nbsp;   DownloadAsset(job.OutputMediaAssets.First(), outputFolder);\n    return true;\n}\n\n// helper function: event handler for Job State\nstatic void StateChanged(object sender, JobStateChangedEventArgs e)\n{\n    Console.WriteLine(&quot;Job state changed event:&quot;);\n    Console.WriteLine(&quot;  Previous state: &quot; + e.PreviousState);\n    Console.WriteLine(&quot;  Current state: &quot; + e.CurrentState);\n    switch (e.CurrentState)\n    {\n        case JobState.Finished:\n            Console.WriteLine();\n            Console.WriteLine(&quot;Job finished. Please wait for local tasks/downloads&quot;);\n            break;\n        case JobState.Canceling:\n        case JobState.Queued:\n        case JobState.Scheduled:\n        case JobState.Processing:\n            Console.WriteLine(&quot;Please wait...\\n&quot;);\n            break;\n        case JobState.Canceled:\n            Console.WriteLine(&quot;Job is canceled.\\n&quot;);\n            break;\n        case JobState.Error:\n            Console.WriteLine(&quot;Job failed.\\n&quot;);\n            break;\n        default:\n            break;\n    }\n}\n\n// helper method to download the output assets\nstatic void DownloadAsset(IAsset asset, string outputDirectory)\n{\n    foreach (IAssetFile file in asset.AssetFiles)\n    {\n        file.Download(Path.Combine(outputDirectory, file.Name));\n    }\n}</pre>\n\n<h4>&nbsp;</h4>\n\n<p>&nbsp;</p>\n\n<h4>出力</h4>\n\n<p>すべてのインデックスファイルに4つの出力があります。</p>\n\n<ol>\n <li>サーミ形式のクローズドキャプションファイル</li>\n <li>タイムテキストマークアップ言語 (TTML) 形式のクローズドキャプションファイル</li>\n <li>キーワードファイル (XML)</li>\n <li>SQL サーバーで使用するオーディオインデックス作成 blob ファイル (aib)</li>\n</ol>\n\n<p>この投稿では、これらのファイルをすべてローカルフォルダーにダウンロードしただけです。 今後のブログ投稿では、これらのさまざまな出力の特定の使用シナリオについて説明します。 大まかに言えば、サーミファイルと TTML ファイルには、ビデオのタイムスタンプと共に話される単語に関する構造化データが含まれており、ビデオのラフドラフトキャプションとして使用できます。 キーワードファイルには、入力ビデオを信頼レベルと共に形成するアルゴリズムのキーワードが含まれています。 AIB ファイルには、サーミ語ファイルと TTML ファイルと同じデータを記述するバイナリデータ構造が含まれています。また、議事録が100% 自信を持っていない単語に対する単語の代替候補もあります。 これにより、豊富な検索機能が有効になり、出力の精度が大幅に向上します。 aib ファイルを使用するには、Azure Media Indexer SQL アドオンを持つ SQL Server インスタンスが必要です。 に関するご質問やご意見 <a href=\"mailto:indexer@microsoft.com\">indexer@microsoft.com</a> をお &nbsp; 寄せください。 このシナリオの詳細については、Azure Media Indexer に関するこのブログシリーズの <a href=\"https://aka.ms/indexerblog2\">パート 2</a> を参照してください。 &nbsp;</p>\n\n<h4>その他の情報</h4>\n\n<ul>\n <li>このブログ投稿は Azure Media Indexer を導入するように設計されていますが、すべての使用シナリオについては説明していません。 たとえば、マニフェストファイルを使用してジョブを送信し、複数のファイルのインデックス作成をサポートすることができます。</li>\n <li>インデクサーは、速度ではなく精度に最適化するシナリオ、および約 3 x (入力時間) を使用する場合に最適です。 これは、ほぼリアルタイムの結果を必要とするシナリオには最適ではありません。</li>\n <li>完成したサンプルプロジェクトはここからダウンロードできます。</li>\n <li>最小ジョブ期間は5分です。短いジョブは切り上げられ、それに応じて課金されます。</li>\n <li>&nbsp; <a href=\"https://www.flickr.com/photos/miguelangelrt/\" title=\" Miguel 天使 Riañ o Trujillo の photostream \"> Miguel 天使 Ria &ntilde; o Trujillo </a> &nbsp; に移動する (元の写真は全色で表示) <div id=\"yui_3_16_0_1_1412712522172_1490\">&nbsp;</div>\n\n <div id=\"yui_3_16_0_1_1412712522172_776\">&nbsp;</div>\n </li>\n</ul>"
