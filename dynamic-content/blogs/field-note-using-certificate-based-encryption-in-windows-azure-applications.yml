### YamlMime:Yaml
ms.openlocfilehash: f7f9986657339ae85afd7c1eaa3b4290a0f15fe7
ms.sourcegitcommit: d03bdc7fe5447adb6530886aab848b75fe8fa8ee
ms.translationtype: MT
ms.contentlocale: ja-JP
ms.lasthandoff: 03/11/2022
ms.locfileid: "139909255"
Slug: field-note-using-certificate-based-encryption-in-windows-azure-applications
Title: 'フィールドメモ: Windows Azure アプリケーションでの Certificate-Based 暗号化の使用'
Summary: これは、Windows Azure コミュニティから実際 &rdquo; の技術情報を共有 &ldquo; することに重点を置いた一連の記事の最初のものです。 &nbsp;この記事は Walter Myers III によって作成されました,...
Content: '<p><i>これは、Windows Azure コミュニティから実際 &rdquo; の技術情報を共有 &ldquo; することに重点を置いた一連の記事の最初のものです。 &nbsp;この記事は</i>、 <a target="_blank" href="https://blogs.msdn.com/b/walterm/"><i>Walter</i></a><i>、プリンシパルコンサルタント、Microsoft コンサルティングサービス</i>によって執筆されました。</p>  <h2>問題</h2>  <p>データの暗号化と復号化に対称キースキームを使用するように開発者が選択した<a target="_blank" href="https://azure.microsoft.com/">Windows Azure</a>関連のさまざまな投稿を見てきました。 重要なシナリオは、開発者が暗号化されたデータを SQL Azure に格納する必要がある場合です。これは、ユーザーに提示するために Windows Azure アプリケーションで復号化されます。 &nbsp;もう1つのデータ同期シナリオでは、オンプレミスのデータを SQL Azure のデータと同期し、データを暗号化して Windows Azure にオフプレミスで保存する必要があります。</p>  <p>開発者は Windows azure storage に暗号化キーを blob として格納することがあります。これは、Windows azure storage を参照するストレージキーが安全である限り、セキュリティで保護されます。ただし、開発者は対称キーにアクセスできる必要があり、オンプレミスの対称キーが知らないうちに危険にさらされる場合があるので、 また、Windows Azure アプリケーションが侵害された場合、キーも侵害される可能性があります。 この記事では、Windows Azure アプリケーションのデータの証明書ベースの暗号化/暗号化解除を行うためのモデルとコードを提供します。</p>  <h2>ソリューション</h2>  <p>まず、背景を提供しましょう。 証明書ベースの (非対称キー) アプローチでは、秘密キーを保護するために、考慮事項 &rdquo; の分離に従う &ldquo; ことをお勧めします。 したがって、azure 管理ポータル Windows にアップロードされる秘密キーを持つ証明書は、azure アプリケーションを Windows するために使用するサービス証明書として使用されます (Windows azure アプリケーションで使用できるサービス証明書は、対応するホステッドサービスにアップロードする必要があります)。 開発者は、アプリケーションの展開時に開発用コンピューターで使用する場合にのみ、公開キーを使用して提供されます。 開発ファブリックでテストする場合、開発者は、IIS7 を使用して自己証明で作成した証明書を使用する必要があります。 デプロイ時には、暗号化/暗号化解除コードの拇印を Windows Azure にアップロードされたサービス証明書のサムプリントに置き換えるだけでなく、サービス証明書の公開キーをアプリケーションと共にデプロイすることもできます。</p>  <p>開発者は、アプリケーションと共に公開キーをデプロイする必要があります。これにより、Azure Windows ロールインスタンスを起動するときに、アップロードされたサービス証明書を使用してサービス定義内のサムプリントが照合され、ロールインスタンスに秘密キーがデプロイされます。 秘密キーは、意図的に .pfx 形式にエクスポートできないため &rsquo; 、RDC 接続を介してロールインスタンスに秘密キーを取得することはできません。</p>  <h2>ソリューションの実装</h2>  <p>少し理論的に進めてきたので、このチュートリアルでは、具体的にの概念を見ていきましょう &rsquo; 。 このソリューションでは、証明書の管理に Visual Studio 提供の機能が使用されていることに注意してください。</p>  <p>&rsquo;まだお持ちでない場合は、公開キー証明書を個人用証明書ストアにインストールしてください。 現在のユーザーストアではなくローカルコンピューターを使用するため、コードは Azure によって証明書がデプロイされる場所と一致する Windows ます。 証明書 &rsquo; を表示するには、現在のユーザーストアに移動するため、certmgr.exe を起動するだけでよいことに注意してください。 mmc.exe を起動して、ファイルを選択する必要があります |次のスナップショットに示すように、[スナップ &hellip; インの追加と削除] メニュー項目を追加し、[証明書] スナップインを追加して、[コンピューターアカウント] を選択し、ローカルコンピューターの証明書を表示します。</p>  <p>&nbsp;<img src="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/6355.FieldNotes1.png" alt="" border="0" height="312" width="381"></p>  <p>証明書コンソールは次のようになります。</p>  <p><img src="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/3225.FieldNote2.png" alt="" border="0" height="276" width="383">&nbsp;</p>  <p>次に、アプリケーションをデプロイする前に Visual Studio 2010 でどのように表示されるかを見てみましょう &rsquo; 。その後、Windows Azure ロールインスタンスで証明書コンソールがどのように検索されるかを見ていきます。 次に示すのは、web ロールの [プロパティ] ページを選択し、[証明書] タブを選択したスクリーンショットです。上のスクリーンショットで強調表示されている証明書を追加し、その名前を EncryptDecrypt に変更しました。 ストアの場所は LocalMachine であり、ストアの名前は "My" であることに注意してください。</p>  <p><img src="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/7457.FieldNote3.png" alt="" border="0" height="300" width="386"></p>  <p>ここで証明書を追加すると、.csdef ファイルにアクセスできるようになります。これは次のようになります。 Serviceconfiguration.cscfg ファイルには、拇印と共にエントリも表示されます。</p>  <p><img src="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/2185.FieldNote4.png" alt="" border="0" height="302" width="388"></p>  <p>アプリケーションをデプロイした後、任意のインスタンスに対してリモートデスクトップ接続 (RDC) を確立できます (アプリケーションを発行したときに RDC が構成されていることを前提としています)。 &nbsp; 上記と同じ方法で mmc.exe を起動し、ローカルコンピューターと現在のユーザーの両方の証明書スナップインを追加します。 &nbsp; RDC ウィンドウは次のようになります。</p>  <p><img src="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/7367.FieldNote5.png" alt="" border="0" height="321" width="391"></p>  <p>証明書がローカルコンピューターの個人用証明書ストアにインストールされていますが、現在のユーザーの個人用ストアにはインストールされていないことに注意してください。 これは、ホステッドサービスにサービス証明書をアップロードし、Azure Windows 証明書ストアに証明書をインストールする原因となったロールの証明書を構成することの組み合わせでした。 証明書を右クリックしてエクスポートを試行すると、次に示すように、秘密キーがエクスポート可能ではないことがわかります。これは、次に示すようになります。</p>  <p><img src="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/0383.FieldNote6.png" alt="" border="0" height="308" width="394"></p>  <p>では、データの暗号化/暗号化解除に使用する証明書がどのように処理されるかについて説明します。 次に、この処理を実行する暗号化/復号化のルーチンを見てみましょう &rsquo; 。</p>  <p>パブリック静的クラス X509CertificateHelper</p>  <p>{</p>  <p>public static X509Certificate2 LoadCertificate (StoreName storeName, StoreLocation</p>  <p>storeLocation、文字列の拇印)</p>  <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {</p>  <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 次のコードでは、キーストアから証明書を取得します。</p>  <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; X509Store store = new X509Store (storeName, storeLocation);</p>  <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ソース.開く (OpenFlags. ReadOnly);</p>  <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; X509Certificate2Collection certCollection =</p>  <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ソース.証明書。 Find (X509FindType) (FindByThumbprint、</p>  <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 拇印、false)、</p>  <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; X509Certificate2Enumerator enumerator = certCollection. GetEnumerator ();</p>  <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; X509Certificate2 cert = null;</p>  <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; while (列挙子)。MoveNext ())</p>  <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {</p>  <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; cert = 列挙子。範囲</p>  <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</p>  <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; cert を返します。</p>  <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</p>  <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public static byte [] Encrypt (byte [] plainData、bool は、</p>  <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; X509Certificate2 証明書)</p>  <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {</p>  <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if (plainData = = null)</p>  <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {</p>  <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; new System.argumentnullexception ("plainData") をスローします。</p>  <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</p>  <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if (certificate = = null)</p>  <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {</p>  <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 新しい System.argumentnullexception ("certificate") をスローします。</p>  <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</p>  <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; using (RSACryptoServiceProvider provider = new RSACryptoServiceProvider ())</p>  <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {</p>  <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; provider.FromXmlString (GetPublicKey (certificate));</p>  <p>暗号化には公開キーを使用します。</p>  <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; プロバイダーを返します。暗号化 (plainData、クリーンアップ);</p>  <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</p>  <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</p>  <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public static byte [] の暗号化解除 (byte [] encryptedData、ブール値</p>  <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; X509Certificate2 証明書)</p>  <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {</p>  <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if (encryptedData = = null)</p>  <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {</p>  <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; new System.argumentnullexception ("encryptedData") をスローします。</p>  <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</p>  <p>&nbsp;</p>  <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if (certificate = = null)</p>  <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {</p>  <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 新しい System.argumentnullexception ("certificate") をスローします。</p>  <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</p>  <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; using (RSACryptoServiceProvider provider = (RSACryptoServiceProvider)</p>  <p>証明.PrivateKey</p>  <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {</p>  <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 秘密キーを使用して暗号化を解除します。</p>  <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;プロバイダーを返します。暗号化解除 (encryptedData)、</p>  <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</p>  <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</p>  <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public static string GetPublicKey (X509Certificate2 certificate)</p>  <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {</p>  <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if (certificate = = null)</p>  <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {</p>  <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 新しい System.argumentnullexception ("certificate") をスローします。</p>  <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</p>  <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 証明書を返します。ToXmlString (false);</p>  <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</p>  <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public static string GetXmlKeyPair (証明書)</p>  <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {</p>  <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if (certificate = = null)</p>  <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {</p>  <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 新しい System.argumentnullexception ("certificate") をスローします。</p>  <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</p>  <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (! certificate.HasPrivateKey)</p>  <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {</p>  <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 新しい ArgumentException をスローします ("証明書に PK がありません")。</p>  <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</p>  <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; さも</p>  <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {</p>  <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 証明書を返します。PrivateKey ToXmlString (true);</p>  <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</p>  <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</p>  <p>}</p>  <p>上記の暗号化と復号化のルーチンでは、暗号化の公開キーを取得する必要がありますが、復号化のための秘密キーを取得する必要があることに注意してください。 公開キー基盤 (PKI) を使用すると、公開キーを持つユーザーが暗号化を実行できますが、暗号化された文字列を復号化する特権を持つのは秘密キーを持っているユーザーだけであるため、これは理にかなっています。 重要な違いは、キーを取得したときに、暗号化のルーチンに記載されているように公開キーを xml にエクスポートできるという点です。ただし、証明書は、前に学習した Windows Azure でエクスポートできない秘密キーを使用してデプロイされるため、暗号化解除ルーチンの xml にエクスポートすること &rsquo; はできません。</p>  <p>次に、前の「X509 encrypt/暗号化解除ヘルパークラスを使用して文字列を暗号化し、文字列の暗号化を解除するために記述したコードを見てみましょう &rsquo; 。</p>  <p>string myText = "Encrypt me";</p>  <p>X509Certificate2 certificate = X509CertificateHelper (</p>  <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; StoreName.My、</p>  <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; StoreLocation、</p>  <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; "D3E6F7F969546ED620A255794CAB31D8C07E9F31");</p>  <p>if (certificate = = null)</p>  <p>{</p>  <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 応答。書き込み ("Certificate is null");</p>  <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 返し</p>  <p>}</p>  <p>byte [] エンコードされた = UTF8Encoding (myText)</p>  <p>byte [] encrypted;</p>  <p>byte [] の暗号化が解除されています。</p>  <p>試す</p>  <p>{</p>  <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; encrypted = X509CertificateHelper (エンコード済み、true、証明書);</p>  <p>}</p>  <p>catch (例外 ee)</p>  <p>{</p>  <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 応答。書き込み ("暗号化に失敗しました。エラー:" + ee.Message + " &lt; br &gt; ");</p>  <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 返し</p>  <p>}</p>  <p>試す</p>  <p>{</p>  <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 暗号化解除 = X509CertificateHelper (暗号化、true、証明書);</p>  <p>}</p>  <p>catch (例外 ed)</p>  <p>{</p>  <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 応答。書き込み ("復号化に失敗しました。エラー:" + ed.Message + " &lt; br &gt; ");</p>  <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 返し</p>  <p>}</p>  <p>上記のコードでは、ローカルコンピューター上の個人用ストアを使用して、証明書を読み込みました。 自分の X509 encrypt/encrypt クラスの LoadCertificate メソッドの最後のパラメーターには、ロールのプロパティページの [証明書] タブで指定したサムプリントが保持されます。 演習として、Serviceconfiguration.cscfg ファイルからこの文字列を取得するコードを記述することができます。</p>  <p>参照: &nbsp; <a target="_blank" href=""></a></p>'
