### YamlMime:Yaml
ms.openlocfilehash: 6e2801e2f999a4dc46c82d83bee70bab66255050
ms.sourcegitcommit: d03bdc7fe5447adb6530886aab848b75fe8fa8ee
ms.translationtype: MT
ms.contentlocale: ja-JP
ms.lasthandoff: 03/11/2022
ms.locfileid: "139892007"
Slug: sync-sql-data-in-large-scale-using-azure-sql-data-sync
Title: データSQLを使用して大規模に同期Azure SQL データ同期
Summary: 'Azure SQL データ同期を使用すると、ユーザーは Azure SQL データベースと SQL Serverデータベース間で一方向または双方向にデータを同期できます。 '
Content: >-
  <p>Azure SQL データ同期を使用すると、ユーザーは Azure SQL データベースと SQL Serverデータベース間で一方向または双方向にデータを同期できます。 この機能は、2012 年に初めて導入されました。 その時には、Azure で&#39;大規模なデータベースをホストする必要が生じなかったのです。 データ同期サービスを構築するときに、1 つの同期グループに最大 30 のデータベース (オンプレミスの SQL Server データベースが 5 つ)、同期グループ内の任意のデータベースに最大 500 のテーブルを含む、いくつかのサイズ制限が適用されました。</p>


  <p>現在、データベースには 200 万を超える Azure SQL、最大データベース サイズは 4 TB です。 ただし、データ同期のこれらの制限はまだ存在します。 これは主に、データの同期がデータ操作のサイズである理由です。 アーキテクチャの変更がない場合、&rsquo;大規模に同期するときにサービスが高負荷を維持できる保証は保証されません。 この領域では、いくつかの機能強化に取り組み中です。 これらの制限の一部は、今後発生または削除される予定です。 この記事では、データ同期を使用して多数のデータベースとテーブル間でデータを同期する方法について説明します。これには、いくつかのベスト プラクティスや、データベースとテーブルの制限を一時的に回避する方法が含まれます。</p>


  <h2>多数のデータベース間でデータを同期する</h2>


  <p>大企業と ISV は、データ同期を使用して、中央のマスター データベースから多くのクライアント データベースにデータを分散します。 一部のお客様は、トポロジ全体に数百または数千のクライアント データベースを持っています。 ユーザーが多数のデータベース間で同期を試みようとすると、次のいずれかの問題が発生する可能性があります。</p>


  <ol>
   <li>同期グループの制限ごとに 30 データベースにヒットします。</li>
   <li>同期グループあたりの 5 つのオンプレミス SQL Serverデータベースの制限にヒットします。</li>
   <li>すべてのメンバー データベースがハブ データベースと同期されるので&rsquo;、ハブ データベースで実行されているワークロードにはパフォーマンスに大きな影響があります。</li>
  </ol>


  <p>同期グループの制限ごとに 30 のデータベースまたは 5 つのオンプレミス データベースを回避するには、複数レベルの同期アーキテクチャを使用してください。 マスター データベースを複数のメンバー データベースと同期する同期グループを作成できます。 また、これらのメンバー データベースは、サブ同期グループのハブ データベースになり、データを他のクライアント データベースと同期できます。 ビジネスとコストの要件に応じて、中間レイヤーのデータベースをクライアント データベースまたは専用の転送者として使用できます。</p>


  <p><a href="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/Master-Sync-Group.jpg"><img alt="" class="size-full wp-image-21685 aligncenter" height="305" src="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/Master-Sync-Group.jpg" width="690"></a></p>


  <p>この複数レベルの同期アーキテクチャ&rsquo;には、同期グループごとに 30 のデータベースの制限が適用されない場合でも、次の利点があります。</p>


  <ul>
   <li>特定の属性 (&hellip;場所、ブランド) に基づいてクライアントをグループ化し、異なる同期スキーマと同期頻度を使用できます。</li>
   <li>ビジネスが成長している場合は、クライアントを簡単に追加できます。</li>
   <li>転送者 (中間レイヤーのメンバー データベース) は、マスター データベースからの同期オーバーヘッドを共有できます。</li>
  </ul>


  <p>この複数レベルの同期トポロジをシステムで動作させるには、1 つの同期グループ内のクライアント データベースの数とシステム全体のレベルの数のバランスを取る必要があります。 1 つの同期グループ内のデータベースが多いほど、ハブ データベースの全体的なパフォーマンスに大きな影響が生まれます。 システム内のレベルが多くなると、データの変更がすべてのクライアントにブロードキャストされるのにかかる時間が長くなります。</p>


  <p>システムにメンバー データベースを追加する場合は、ハブ データベースのリソース使用状況を詳細に監視する必要があります。 リソース使用率が一貫して高い場合は、データベースを上位の SLO にアップグレードする方法を検討してください。 ハブ データベースは Azure SQLデータベースSQL、ダウンタイムなしで簡単にアップグレードできます。</p>


  <h2>多数のテーブルを持つデータベース間でデータを同期する</h2>


  <p>現在、データ同期では、500 個未満のテーブルを持つデータベース間でのみ同期できます。 この制限を回避するには、異なるデータベース ユーザーを使用して複数の同期グループを作成します。 たとえば、2 つのデータベースを 900 テーブルと同期したいとします。 まず、同期スキーマの読み込み先のデータベースで 2 人の異なるユーザーを定義する必要があります。 各ユーザーは、データベース内の 450 (または 500 未満の任意の数) のテーブルのみを表示できます。 同期のセットアップには ALTER DATABASE 権限が必要です。この権限は、すべてのテーブルに対する CONTROL&rsquo; 権限を意味します。そのため、GRANT を使用する代わりに、特定のユーザーに表示したくないテーブルに対する権限を明示的に拒否する必要があります。 同期の初期化に必要な正確な特権は、ベスト プラクティス ガイダンス <a href="https://docs.microsoft.com/en-us/azure/sql-database/sql-database-best-practices-data-sync">で確認できます</a>。 その後、ユーザーごとに 1 つの 2 つの同期グループを作成できます。 各同期グループは、これら 2 つのデータベース間で 450 テーブルを同期します。 各ユーザーには 500 未満のテーブルしか表示できないので、スキーマを読み込み、同期グループを作成できます。 同期グループを作成して初期化した後は、ベスト プラクティスのガイダンス<a href="https://docs.microsoft.com/en-us/azure/sql-database/sql-database-best-practices-data-sync"></a>に従って、ユーザーのアクセス許可を更新し、進行中の同期の最小特権を持っている必要があります。</p>


  <p><img alt="" class="size-full wp-image-21695 aligncenter" height="333" src="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/Data-sync.jpg" width="695"></p>


  <h2>同期の初期化を最適化する</h2>


  <p>同期グループが作成された後、同期を初めてトリガーすると、すべての追跡テーブルとストアド プロシージャが作成され、ソースデータベースからターゲット データベースにすべてのデータが読み込まれます。 最初のデータ読み込みは、データサイズの操作です。 大規模なデータベース間の同期を初期化するには、適切に設定されていない場合、数時間または数日かかる場合があります。 初期化のパフォーマンスを最適化するためのヒントを次に示します。</p>


  <ol>
   <li>データ同期では、ターゲット テーブルが空の場合、一括挿入を使用してターゲット テーブルが初期化されます。 ソース データベースとターゲット データベース内のデータが同一である場合 (&rsquo;データ同期ではわかりません)、両方の側にデータがある場合、データ同期では行バイ行の比較と挿入が実行されます。 大きなテーブルでは、非常に遅くなる可能性があります。 最適な初期化パフォーマンスを得るために、データ同期を設定する前に、1 つのデータベースにデータを統合し、他のデータベースを空のままにすることをお勧めします。</li>
   <li>現在、データ同期ローカル エージェントは 32 ビット アプリケーションです。 最大 4 GB の RAM のみを使用できます。 大規模なデータベースを初期化しようとしている場合、特に複数の同期グループを同時に初期化しようとするときに、メモリが使い切る可能性があります。 この問題が発生した場合は、最初にテーブルの一部を同期グループに追加し、それらのテーブルでを初期化してから、テーブルを追加することをお勧めします。 すべてのテーブルが同期グループに追加されるまで、この手順を繰り返します。</li>
   <li>初期化中、ローカル エージェントはデータベースからデータを読み込み、システムの一時フォルダーに一時ファイルとして格納します。 大規模なデータベース間で同期グループを初期化する場合は、同期を開始する前に、一時フォルダーに十分な領域が必要です。TEMP 環境変数と TMP 環境変数を設定することで、一時フォルダーを別のドライブに変更できます。 環境変数を更新した後、同期サービスを再起動する必要があります。 また、同期グループにテーブルを追加して一括で初期化することもできます。 各バッチ間で一時フォルダーがクリーンアップされます。</li>
   <li>オンプレミスのデータベースから Azure DB にデータSQL Server初期化する場合は、初期化の前に Azure DB を一時的にアップグレードできます。 初期化が完了したら、データベースを元の SLO にダウングレードできます。 追加コストは最小です。 ターゲット データベースが VM でSQL Serverされている場合は、VM にリソースを追加すると、同じ操作が実行されます。</li>
  </ol>


  <h2>同期初期化のパフォーマンスの実験</h2>


  <p>単純な実験の結果を次に示します。 同期グループを作成して、Azure VM 内の SQL Server データベースから Azure データベースにデータを同期SQLしました。 VM とSQLデータベースは同じ Azure リージョン内にあるので、ネットワーク待機時間の影響は無視できます。 1 つのテーブルと 11 列、約 2.1M 行が同期されています。 合計データ サイズは 49.1 GB です。 ソースとターゲットのデータベース構成が異なる 3 つの実行を行いました。</p>


  <p>最初の実行では、ターゲット データベースは S2 (50 DTU) で、ソース データベースは D4S_V3 VM (4 vCPU、16 GB RAM) で実行されています。 temp フォルダーにデータを抽出するには 50 分、一時フォルダーからターゲット データベースにデータを読み込むには 471 分かかる。</p>


  <p>2 回目の実行では、ターゲット データベースを S6 (400 DTU) に、Azure VM を D8S_V3 (8 vCPU、32 GB RAM) にアップグレードしました。 読み込み時間が 98 分に短縮されました。 この実行では、データの抽出に驚くほど長い時間がかかった。 実行時に&rsquo;ローカル リソースの使用状況を&rsquo;キャプチャしなかったので、回帰について説明できない。 ディスク I/O の問題である可能性があります。 しかし、ターゲット データベースを S6 にアップグレードすると、初期化時間の合計が 521 分から 267 分に短縮されました。</p>


  <p>3 回目の実行では、ターゲット データベースを S12 (3000 DTU) にアップグレードし、ローカル SSD を一時フォルダーとして使用しました。 データ抽出時間が 39 分に短縮され、データの読み込み時間が 56 分に、初期化時間の合計が 95 分に短縮されました。1 つ目の構成よりも 5.5 時間速く、コーヒーを飲むのに余分なコストがかかります。</p>


  <h3>まとめ</h3>


  <ol>
   <li>ターゲット データベース (Azure DB) を上位 SLO にアップグレードすると、管理可能な追加コストで初期化時間を大幅に短縮できます。</li>
   <li>データ抽出は&rsquo; I/O バインド操作であり、32 ビットのローカル エージェントは最大 4 GB の RAM しか使用できませんので、ソース データベースをアップグレードしてもあまり役立たされません。</li>
   <li>アタッチされた SSD を一時フォルダーとして使用すると、データ抽出のパフォーマンスに役立ちます。 ただし、ROI はターゲット データベースのアップグレードほど高くはない。 また、一時ファイルが SSD ディスクに収まるかも考慮する必要があります。</li>
  </ol>


  <table width="1290">
   <tbody>
    <tr>
     <td width="106"><strong>計</strong></td>
     <td width="106"><strong>ターゲット データベース SLO (Azure DB)</strong></td>
     <td width="106"><strong>ソース データベース SLO (VM)</strong></td>
     <td width="106"><strong>合計初期化時間</strong></td>
     <td width="106"><strong>データ抽出時間</strong></td>
     <td width="106"><strong>データ読み込み時間</strong></td>
    </tr>
    <tr>
     <td width="106">1</td>
     <td width="106">S2</td>
     <td width="106">D4S_V3</td>
     <td width="106">521分</td>
     <td width="106">50分</td>
     <td width="106">471分</td>
    </tr>
    <tr>
     <td width="106">2</td>
     <td width="106">S6</td>
     <td width="106">D8S_V3</td>
     <td width="106">267分</td>
     <td width="106">* 169 分</td>
     <td width="106">98分</td>
    </tr>
    <tr>
     <td width="106">3</td>
     <td width="106">S12</td>
     <td width="106">D8S_V3、アタッチされた SSD</td>
     <td width="106">95分</td>
     <td width="106">39分</td>
     <td width="106">56分</td>
    </tr>
   </tbody>
  </table>


  <p>この記事では、多数のデータベースと多数のテーブルを持つデータベースの間で Azure SQL データ同期サービスを使用してデータを同期する方法について、ベストプラクティスをいくつか紹介しました。 データ同期の詳細については、 <a href="https://docs.microsoft.com/en-us/azure/sql-database/sql-database-sync-data">オンラインドキュメント</a>を参照してください。 データ同期のベストプラクティスについ<a href="https://docs.microsoft.com/en-us/azure/sql-database/sql-database-sync-data">ては、「Azure SQL データ同期のベストプラクティス</a>」を参照してください。</p>
