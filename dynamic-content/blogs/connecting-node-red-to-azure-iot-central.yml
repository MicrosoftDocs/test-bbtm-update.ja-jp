### YamlMime:Yaml
ms.openlocfilehash: 1fb8ad92b436fda312e5c33b628884cf24ee40ad
ms.sourcegitcommit: d03bdc7fe5447adb6530886aab848b75fe8fa8ee
ms.translationtype: MT
ms.contentlocale: ja-JP
ms.lasthandoff: 03/11/2022
ms.locfileid: "139894839"
Slug: connecting-node-red-to-azure-iot-central
Title: ノードの接続-赤から Azure IoT 中部
Summary: 今日は、Raspberry Pi とレッドを使用して、気温/湿度センサーを中央 Azure IoT に簡単に接続する方法について説明します。
Content: >-
  <p>今日は、Raspberry Pi とレッドを使用して、気温/湿度センサーを中央 Azure IoT に簡単に接続する方法について説明します。</p>


  <p>ご存じのように、Raspberry Pi は小型の単一ボードコンピューターです。 低コストで、低電力の性質により、IoT プロジェクトに自然に適合します。 ノード-赤は、IoT 向けに設計された、フローベースのドラッグアンドドロップのプログラミングツールです。 これにより、web ブラウザーで堅牢なオートメーションフローを作成し、IoT プロジェクトの開発を簡略化できます。</p>


  <p>私の例では、 &rsquo; Raspberry pi 3 モデル B と単純な DHT22 温度と湿度センサーを使用していますが、pi の他のモデルでも動作します。 センサーの種類が異なる場合は、次のガイドを使用して使用することができます。これは、センサーにノードと赤を接続することができるからです。</p>


  <h2>Azure IoT 中部の構成</h2>


  <ol>
   <li>アプリを作成する。</li>
   <li>新しいデバイス テンプレートの作成。
   <ul>
    <li>Temp (temp)</li>
    <li>湿度 (湿度)</li>
   </ul>
   </li>
   <li>実際のデバイスを作成し、DPS 接続情報を取得します。</li>
   <li><a href="https://github.com/Azure/dps-keygen" target="_blank">Ssh-keygen</a>を使用してデバイスをプロビジョニングし、デバイス接続文字列を取得します。
   <ul>
    <li>結果として得られる接続文字列の3つの部分を特定し、後で使用できるように保存します。</li>
   </ul>
   </li>
  </ol>


  <h2>DHT22 センサーの接続</h2>


  <p>DHT22 センサーからデータを取得するには、そのデータを pi に接続する必要があります。 DHT22 は、通常、3つのピンが分割されていますが、そのうちのいくつかは4つあります。 4つのがある場合は、データシートを調べて、どのピンが電圧であるか (+、VCC または VDD として表示される可能性があります)、データ (または信号)、およびグラウンドを確認します。</p>


  <p>Pi の電源をオフにした状態で、次のようにジャンパー回線を使用して DHT22 に接続します。</p>


  <p><a href="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/9ab3a4a0-6f00-4072-88b9-794a38bed6c0.png"><img alt="Use jumper wires to connect your DHT22" border="0" height="256" src="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/a2fc8f9d-9125-42e5-9faf-905fed14a68c.png" style="margin: 0px auto; border: 0px currentcolor; border-image: none; float: none; display: block; background-image: none;" title="ジャンパー回線を使用して DHT22 に接続する" width="595"></a></p>


  <p>注: 電源ジャンパー (赤) は 3.3 V に、データジャンパー (黄) は GPIO4 に、グラウンドジャンパー (黒) は地上に出るはずです。 ボードによっては異なるため、接続を再確認してください。</p>


  <h4>必要なソフトウェアのインストール</h4>


  <p>まず、 <a href="https://www.raspberrypi.org/documentation/installation/installing-images/README.md" target="_blank">ガイド</a>を使用して Raspbian Lite をインストールしました。 次に、 <a href="https://nodered.org/docs/hardware/raspberrypi" target="_blank">Node-RED をインストール</a>しました。 この時点で、ブラウザーを開き、にアクセス <a href=""></a> して、ノード赤のインターフェイスを表示できるようになります。 次に、<a href="https://flows.nodered.org/node/node-red-contrib-azure-iot-hub" target="_blank">ノード-赤の Azure IoT Hub ノードをインストール</a>します。 これを行う最も簡単な方法は、[パレットの管理] コマンドを使用して、ノード赤のインターフェイスを使用することです。</p>


  <p><a href="https://flows.nodered.org/node/node-red-contrib-dht-sensor" target="_blank">DHT22 ノードをインストール</a> します。 残念ながら、このノードには低レベルのハードウェア要件があるため、[パレットの管理] コマンドを使用してインストールすることはでき &rsquo; ません。 上記のリンクを使用して、指示に従ってください。</p>


  <h2>フローの構成</h2>


  <p>これで、pi 上でノード赤が稼働状態になり、 &rsquo; フローを作成する準備が整いました。 既定では、ノード赤には Flow 1 &rdquo; という &ldquo; フローが既に存在しますが、キャンバスの上にある<strong>(+)</strong>アイコンを選択して新しいフローを簡単に作成することができます。</p>


  <h3>挿入ノードでフローを開始しています</h3>


  <p>このフローに追加する最初のノードは入力ノードです。 この例では、任意の JSON ドキュメントをフローに挿入するだけの <b>挿入</b> ノードを使用します。 パレットの [入力] セクションで、左側のパレットからキャンバスにノードをドラッグします。 次に、ダブルクリックして構成ウィンドウを開きます。 ノードのプロパティを次のように設定します。</p>


  <p><a href="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/4b3428ec-6d72-4480-b4ad-370a39d74ea2.png"><img alt="Starting the flow with the inject node" border="0" height="460" src="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/d9dd2418-9879-4058-9ee2-cdeab7146e1b.png" style="margin: 0px auto; border: 0px currentcolor; border-image: none; float: none; display: block; background-image: none;" title="挿入ノードでフローを開始しています" width="448"></a></p>


  <p>このノードは、ペイロードがタイムスタンプに設定されている JSON オブジェクトを単に挿入します。 &rsquo;この値については特に注意してください。 これは、フローを開始する単純な方法にすぎません。</p>


  <h3>DHT22 からデータを取得する</h3>


  <p>ノード赤のパレットで、 <b>rpi dht22 </b>ノードを見つけてキャンバスにドラッグします。 それをダブルクリックして構成ウィンドウを開き、次のようにノードのプロパティを設定します。</p>


  <p><a href="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/e020214a-99f4-4565-b8a4-00068aaa5b08.png"><img alt="The rpi dht22 node configuration window" border="0" height="439" src="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/8a0fb6d0-e922-42d7-b89a-c2cae4e314e1.png" style="margin: 0px auto; border: 0px currentcolor; border-image: none; float: none; display: block; background-image: none;" title="Rpi dht22 ノード構成ウィンドウ" width="457"></a></p>


  <p>小さなハンドルを<b>rpi dht22</b>ノードにドラッグして、ノードを<b>挿入</b>します。 Connect</p>


  <h3>メッセージの再フォーマット</h3>


  <p>DHT22<b> </b>ノード &rsquo; によって生成された JSON メッセージは Azure IoT に送信するために正しく書式設定されていないため、修正する必要があります。 この操作を行うには、[ <b>変更</b> ] ノードを使用します。これを行うには、パレットからキャンバスにドラッグし、DHT22 ノードに接続します。 それをダブルクリックして構成ウィンドウを開き、次のようにノードのプロパティを設定します。</p>


  <p><a href="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/47ea1db5-c4c1-4468-91b0-5d2cb32567e6.png"><img alt="How to edit the change node" border="0" height="406" src="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/467424cd-bc79-4c11-9f75-514e41a63ea5.png" style="margin: 0px auto; border: 0px currentcolor; border-image: none; float: none; display: block; background-image: none;" title="変更ノードを編集する方法" width="432"></a></p>


  <p>このノードの機能部分では、JSON ドキュメントのクエリ言語と変換言語である JSONata を使用します。 [ <b>対象</b> ] セレクターで jsonata の種類を選択したら、 <b>[ &hellip; ] </b>ボタンを選択してエディターを開き、次のように入力します。</p>


  <p><a href="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/194f33a4-40c0-4377-88cc-0a8e7ea992a9.png"><img alt="Expression editor" border="0" height="436" src="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/5a29d0cd-39db-424b-a509-d024a955ee97.png" style="margin: 0px auto; border: 0px currentcolor; border-image: none; float: none; display: block; background-image: none;" title="式エディター" width="417"></a></p>


  <p>ここでは、入力 JSON メッセージから温度と湿度の値を抽出し、結果として得られる JSON メッセージのデータ要素内に配置します。 &rsquo;また、デバイスの接続文字列から受け取ったデバイス ID と共有アクセスキーも追加し直しています。</p>


  <h3>Azure IoT 中部へのデータの送信</h3>


  <p>JSON メッセージの準備が &rsquo; できたので、パレットで [ <b>Azure IoT Hub] ノード</b>を見つけてキャンバスにドラッグします。 ここでも、ダブルクリックして構成ウィンドウを開き、次に示すようにプロパティを設定します。</p>


  <p><a href="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/aa3b5383-e944-4edf-8bfe-5b79867b9c8e.png"><img alt="Azure IoT Hub node" border="0" height="249" src="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/f221ad22-3b56-45ef-9966-2b6301efd801.png" style="margin: 0px auto; border: 0px currentcolor; border-image: none; float: none; display: block; background-image: none;" title="Azure IoT Hub ノード" width="449"></a></p>


  <h3>メッセージとデバッグの確認</h3>


  <p>フローに追加する最後のノードは <b>デバッグ</b> ノードであり、これは単に、ノード赤のデバッグパネルに与えられたメッセージを出力します。 フローの最後 (Azure IoT ハブの後) に Connect し、名前を「hub Response」に &ldquo; 設定します。&rdquo;</p>


  <p>&rsquo;フローの任意の時点で JSON メッセージを確認したい場合は、任意の場所に<b>デバッグ</b>ノードを追加できます。 ノードの右側にある小さなボックスを選択して、デバッグノードの出力を有効または無効にすることができます。</p>


  <h3>フロー</h3>


  <p>フローは次のようになります。 このフローの開発中に追加の<b>デバッグ</b>ノードをいくつか追加しまし &rsquo; たが、ハブ応答ノードのみが有効になっていることがわかります。</p>


  <p><a href="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/3a484c5a-08a6-416f-8705-cdf552be2e41.png"><img alt="The flow" border="0" height="304" src="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/cbc4537d-c6b3-482c-bc1a-df2fabf33dc5.png" style="margin: 0px auto; border: 0px currentcolor; border-image: none; float: none; display: block; background-image: none;" title="フロー" width="1039"></a></p>


  <p>フローを実行するには、ワークスペースからフローをデプロイする必要があります。 これを行うには、ノード赤の画面の右上にある赤い [ <strong>デプロイ</strong> ] ボタンを選択します。 次に、 <strong>各分</strong> のノードの左側にある小さなボックスを選択するだけで、開始します。 このノードは1分ごとに実行されるように構成されているため、フローを無効にするか再デプロイすることによって停止するまで、Azure IoT 中部にメッセージを送信し続けます。</p>


  <p>IoT Central アプリに戻ると、1分以内にデータが表示されるようになります。</p>


  <p><a href="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/b039b57b-636e-47d7-bdc0-b0abd753c90a.png"><img alt="IoT Central App" border="0" height="632" src="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/69d42621-2d8b-4597-ac82-d50bdb1593dd.png" style="margin: 0px auto; border: 0px currentcolor; border-image: none; float: none; display: block; background-image: none;" title="IoT Central アプリ" width="1171"></a></p>


  <p>ご覧のように、ノードを Azure IoT Central に接続するのは非常に簡単です。 これは、コードを記述しなくても、さまざまなセンサーとメッセージペイロードをすばやくプロトタイプおよび実験するための優れた方法です。 また、この方法を使用して、ほぼすべてのものを Azure IoT Central に簡単に接続できるように、ゲートウェイやプロトコルトランスレーターを作成することもできます。</p>


  <h2>付録: Flow ソース</h2>


  <p>自分でビルドするのではなく、全体をコピーして貼り付ける場合は、次の JSON を Node-RED にインポートし、デバイスの接続文字列から3つの値を更新するだけです (上記の手順を参照してください)。</p>


  <pre>

  [{&quot;id&quot;:&quot;9e47273a.f12738&quot;, &quot;type&quot;:&quot;tab&quot;, &quot;label&quot;:&quot;DHT22-IoTC&quot;, &quot;disabled&quot;:false, &quot;info&quot;:&quot;&quot;}, {&quot;id&quot;:&quot;b3d8f5b6.a243b8&quot;, &quot;type&quot;:&quot;debug&quot;, &quot;z&quot;:&quot;9e47273a.f12738&quot;, &quot;name&quot;:&quot;Hub Response&quot;, &quot;active&quot;:true, &quot;tosidebar&quot;:true, &quot;console&quot;:false, &quot;tostatus&quot;:false, &quot;complete&quot;:&quot;true&quot;, &quot;x&quot;:740, &quot;y&quot;:340, &quot;wires&quot;:[]}, {&quot;id&quot;:&quot;117b0c09.6b3a04&quot;, &quot;type&quot;:&quot;azureiothub&quot;, &quot;z&quot;:&quot;9e47273a.f12738&quot;, &quot;name&quot;:&quot;Azure IoT Hub&quot;, &quot;protocol&quot;:&quot;mqtt&quot;, &quot;x&quot;:520, &quot;y&quot;:340, &quot;wires&quot;:[[&quot;b3d8f5b6.a243b8&quot;]]}, {&quot;id&quot;:&quot;ee333823.1d33a8&quot;, &quot;type&quot;:&quot;inject&quot;, &quot;z&quot;:&quot;9e47273a.f12738&quot;, &quot;name&quot;:&quot;&quot;, &quot;topic&quot;:&quot;&quot;, &quot;payload&quot;:&quot;&quot;, &quot;payloadType&quot;:&quot;date&quot;, &quot;repeat&quot;:&quot;60&quot;, &quot;crontab&quot;:&quot;&quot;, &quot;once&quot;:false, &quot;onceDelay&quot;:&quot;&quot;, &quot;x&quot;:210, &quot;y&quot;:120, &quot;wires&quot;:[[&quot;38f14b0d.96eb14&quot;]]}, {&quot;id&quot;:&quot;38f14b0d.96eb14&quot;, &quot;type&quot;:&quot;rpi-dht22&quot;, &quot;z&quot;:&quot;9e47273a.f12738&quot;, &quot;name&quot;:&quot;&quot;, &quot;topic&quot;:&quot;rpi-dht22&quot;, &quot;dht&quot;:22, &quot;pintype&quot;:&quot;0&quot;, &quot;pin&quot;:4, &quot;x&quot;:400, &quot;y&quot;:120, &quot;wires&quot;:[[&quot;f0bfed44.e988b&quot;]]}, {&quot;id&quot;:&quot;f0bfed44.e988b&quot;, &quot;type&quot;:&quot;change&quot;, &quot;z&quot;:&quot;9e47273a.f12738&quot;, &quot;name&quot;:&quot;&quot;, &quot;rules&quot;:[{&quot;t&quot;:&quot;set&quot;, &quot;p&quot;:&quot;payload&quot;, &quot;pt&quot;:&quot;msg&quot;, &quot;to&quot;:&quot;{\t \&quot;deviceId\&quot;:\&quot;{YOUR DEVICE ID} \&quot;, \t \&quot;key\&quot;:\&quot;{YOUR KEY}\&quot;, \t \&quot;protocol\&quot;:\&quot;mqtt\&quot;, \t \&quot;data\&quot;: {\t \&quot;temp\&quot;: $number(payload), \t \&quot;humidity\&quot;: $number(humidity)\t \t }\t\t}&quot;, &quot;tot&quot;:&quot;jsonata&quot;}], &quot;action&quot;:&quot;&quot;, &quot;property&quot;:&quot;&quot;, &quot;from&quot;:&quot;&quot;, &quot;to&quot;:&quot;&quot;, &quot;reg&quot;:false, &quot;x&quot;:280, &quot;y&quot;:340, &quot;wires&quot;:[[&quot;117b0c09.6b3a04&quot;, &quot;db5b70be.81e2a&quot;]]}, {&quot;id&quot;:&quot;db5b70be.81e2a&quot;, &quot;type&quot;:&quot;debug&quot;, &quot;z&quot;:&quot;9e47273a.f12738&quot;, &quot;name&quot;:&quot;Payload&quot;, &quot;active&quot;:true, &quot;tosidebar&quot;:true, &quot;console&quot;:false, &quot;tostatus&quot;:false, &quot;complete&quot;:&quot;payload&quot;, &quot;x&quot;:500, &quot;y&quot;:420, &quot;wires&quot;:[]}]</pre>
