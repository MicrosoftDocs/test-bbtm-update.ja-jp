### YamlMime:Yaml
ms.openlocfilehash: c4194042247aa3820e98a5994fe349c77d5920ec
ms.sourcegitcommit: d03bdc7fe5447adb6530886aab848b75fe8fa8ee
ms.translationtype: MT
ms.contentlocale: ja-JP
ms.lasthandoff: 03/11/2022
ms.locfileid: "139894229"
Slug: visual-studio-team-services-july-2017-digest
Title: 2017 年 7 月のVisual Studio Team Servicesのダイジェスト
Summary: この投稿シリーズは、Visual Studio Team Services の最新の更新プログラムとニュースを提供し、Azure ユーザーが 3 週間ごとにリリースされる新機能を最新の状態に保つ優れた方法です。 Visual Studio Team Servicesは、Azure DevOps効率的な継続的インテグレーションとリリース パイプラインを作成するための最適なツールを提供します。
Content: >-
  <p>この投稿シリーズは<a href="https://visualstudio.com/team-services/?utm_source=AzureCOM&amp;utm_medium=Blog&amp;utm_campaign=Oct2016Digest">、Visual Studio Team Services</a> の最新の更新プログラムとニュースを提供し、Azure ユーザーが 3 週間ごとにリリースされる新機能を最新の状態に保つ優れた方法です。 Visual Studio Team Servicesは、Azure DevOps効率的な継続的インテグレーションとリリース パイプラインを作成するための最適なツールを提供します。</p>


  <p>この月の更新では&rsquo;、他の誰かが考えたことを超えて Git をスケーリングすることで、まず業界から始まります。 Git でのより多くの機能強化について説明した&rsquo;後、パブリック プレビューで、新しい組み込み Wiki を入手しました。 ビルド、リリース、パッケージ管理、作業項目の追跡も改善されています。 新&rsquo;しい機能が多くあるので、詳細&rsquo;を見てみしましょう。</p>


  <h2>世界&rsquo;最大の Git リポジトリは VSTS 上です。3.5M ファイルと 300 GB!</h2>


  <p>Microsoft では、One Engineering System (1ES<a href="https://blogs.msdn.microsoft.com/bharry/2017/02/03/scaling-git-and-some-back-story/"></a>) と呼ばれるエンジニアリング システムを最新化するための大きな取り組みの一環として、数年前に Windows コード ベースを Git に移行するという、思い切った目標を設定しました。 リポジトリを仮想化して Git をスケーリングする最善の方法と判断する前に、サブモジュールを含むいくつかの異なるアプローチを試しました。 この年の初め、Windows チームが vs Team Services でホストされている単一の Git リポジトリに Windows コード ベース全体を移動した場合の目標を達成しました。 約 <a href="https://blogs.msdn.microsoft.com/bharry/2017/05/24/the-largest-git-repo-on-the-planet/">4,000</a> 人のエンジニアが OS&rdquo; と呼ばれる 1 つの Git &ldquo;リポジトリで作業している場合、Windows は数十年で初めて 1 つのバージョン管理リポジトリにいます。 これを実現するために、<a href="https://www.visualstudio.com/learn/git-at-scale/">Git Virtual File System</a> (GVFS)&rsquo; を作成しました。これは、誰でも VSTS で使用できるよう、オープン ソース プロジェクトとしてリリースされました。<a href="https://github.com/Microsoft/gvfs"></a></p>


  <p>開発の規模Windowsは非常にすばらしいです。 いくつかの&rsquo;数値を見てみしましょう。</p>


  <ul>
   <li>このリポジトリの履歴には、過去 4 か月間に 250,000 を超える到達可能な Git コミットがあります。</li>
   <li>1 日あたり 8,421 プッシュ (平均)</li>
   <li>2,500 pull requests、1 日あたり 6,600 人のレビュー担当者 (平均)</li>
   <li>4,352 のアクティブなトピック ブランチ</li>
   <li>1 日あたり 1,760 の公式ビルド</li>
  </ul>


  <p><img alt="checkin activity" height="309" src="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/Activity1.png" title="" width="511"></p>


  <p>GVFS&rsquo; の <a href="https://blogs.msdn.microsoft.com/bharry/2017/07/06/perf-results-on-scaling-git-on-vsts-with-gvfs/">最初のリリースから</a> パフォーマンスが大幅に向上しました。 その一方で、&rsquo;Git でもパフォーマンスとスケールの改善が行われ、 <a href="https://blogs.msdn.microsoft.com/devops/2017/05/30/optimizing-git-beyond-gvfs/">Git</a> プロジェクトに貢献しています。 VSTS 上の任意のアカウントで GVFS を使用できます。そのため、お試 <a href="https://github.com/Microsoft/gvfs">しください</a>。</p>


  <p>Git について&rsquo;説明したの&rsquo;&rsquo;で、エクスペリエンスで行われた改善点を見てみしましょう。</p>


  <h2>折りたたみ可能な pull request のコメント</h2>


  <p>コードのレビューは&rsquo;、pull request エクスペリエンスの重要な部分です。そのため、レビュー担当者がコードに集中しやすくするために新機能が追加されました。 コード レビュー担当者は、新しいコードを初めてレビューするときに、簡単にコメントを非表示にして邪魔にならないようにできます。</p>


  <p><img alt="Hide comments" src="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/06_22_30.png"></p>


  <p>コメントを非表示にすると、ツリー ビューに表示されなくなり、ファイル ビューのコメント スレッドが折りたたまれます。</p>


  <p><img alt="Collapsed comment" src="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/06_22_31.png"></p>


  <p>折りたたまれたコメントは、余白のアイコンをクリックして簡単に展開でき、もう一度クリックすると再び折りたたむことができます。 ツールヒントを使うと、スレッド全体を表示することなく、コメントを簡単に見ることができます。</p>


  <p><img alt="Collapsed tooltip" src="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/06_22_32.png"></p>


  <h2>提案を含む pull request を承認する際のワークフローの改善</h2>


  <p>pull <strong><a href="https://www.visualstudio.com/en-us/docs/git/pull-requests#complete-automatically">requests</a></strong>&rsquo; でオートコンプリート オプションを使用すると、生産性を向上させることができますが、コード レビュー担当者とのアクティブなディスカッションを短くする必要はありません。 このようなディスカッションをさらに促進するため、<strong>承認と提案</strong>の投票では、pull request にオート コンプリートが設定されているというメッセージが表示されるようになりました。 ユーザーは、フィードバックを読むことができるようにオート コンプリートをキャンセルすることも、オート コンプリートを設定したままにして、すべてのポリシーが満たされた時点で pull request が自動的に完了されるようにすることもできます。</p>


  <p><img alt="auto complete prompt" src="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/06_22_11.png" title=""></p>


  <h2>コードのツリー ビューをフィルター処理する</h2>


  <p>これで、ファイル&rsquo;にアクセスするためにコミットが変更された可能性があるすべてのファイルをスクロールする必要がなさいました。 コミット詳細、pull requests、シェルブセットの詳細、変更セットの詳細の各ページのツリー ビューで、ファイルとフォルダーのフィルター処理がサポートされるようになりました。 これはスマート フィルターであり、フォルダー名でフィルター処理するとフォルダーの子ファイルが表示され、ファイル名でフィルター処理するとファイルの折りたたまれたツリー ビューでファイル階層が表示されます。</p>


  <p>コミット ツリーでファイルまたはフォルダー フィルターを検索します。</p>


  <p><img alt="find a file filter" src="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/06_22_13.png"></p>


  <h2>Git タグ</h2>


  <p>VSTS Web UI の Git タグ エクスペリエンスは、急速に進化し続けています。 表示の機能強化に加えて、タグのセキュリティを削除、フィルター処理、および設定することもできます。</p>


  <h3>タグを表示</h3>


  <p>リポジトリ上のすべてのタグは、[タグ] ページで <strong>確認</strong> できます。 すべてのタグを&rsquo;リリースとして管理する場合、ユーザーはタグ ページにアクセスして、すべての製品リリースの鳥の目のビューを取得できます。</p>


  <p><img alt="view tags on tags page" src="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/06_22_15.png"></p>


  <p>ここでは、軽量タグと注釈付きタグを簡単に区別できます。注釈付きタグには関連するコミットと共にタガーと作成日が表示されるのに対し、軽量タグにはコミット情報のみが表示されます。</p>


  <h3>タグを削除する</h3>


  <p>場合によっては、リモート レポからタグを削除する必要があります。 タグ名を間違えたり、正しくないコミットにタグを付けたりした場合が想定されます。 Web UI からタグを削除するには、[タグ] ページでタグのコンテキスト メニューをクリックし<strong></strong>、[タグの削除] <strong>を選択します</strong>。</p>


  <p><img alt="delete tags" src="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/06_22_16.png"></p>


  <h3>タグのフィルター処理</h3>


  <p>タグの数は時間と一緒に大幅に増加する可能性があります。 一部のリポジトリには、階層内にタグが作成されている場合があります。この場合、タグの検索が困難になる可能性があります。</p>


  <p>探していたタグがタグ ページで見つからない場合は、[タグ] ページの上部にあるフィルターを使用して、タグ名を検索できます。</p>


  <p><img alt="filtering tags" src="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/06_22_17.png"></p>


  <h3>タグのセキュリティ</h3>


  <p>このバージョンでは、リポジトリのユーザーにきめ細かいアクセス許可を付与してタグを管理できます。 タグを削除したり、タグを管理したりするためのアクセス許可をユーザーに付与できます。</p>


  <p><img alt="tags security" src="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/06_22_18.png"></p>


  <h2>パブリック プレビューでの新しい Wiki エクスペリエンス</h2>


  <p>しばらくの間、組&rsquo;み込みの Wiki が必要でした。 各&rsquo;プロジェクトに独自の Wiki が追加されたのでお知らせします。 チーム メンバーや他のユーザーがプロジェクトを理解し、使用し、貢献するのに役立ちます。 詳細については、お知らせの <a href="https://blogs.msdn.microsoft.com/devops/2017/07/06/33855/">ブログ記事で確認し、</a> ドキュメントを確認 <a href="https://www.visualstudio.com/en-us/docs/collaborate/add-edit-wiki">してください</a>。あ、もう 1 つ。 絵文字が <a href="https://www.visualstudio.com/en-us/docs/reference/markdown-guidance#emoji">完全にサポートされている</a>ので、楽しそうにしてください。</p>


  <p><a href="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/7d2691da-d92c-4690-b28a-4b7a6bc47149.png"><img alt="project wiki" border="0" height="653" src="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/8b92bfa2-a247-4d06-b3fb-2bc473e33933.png" style="border: 0px currentColor; border-image: none; padding-top: 0px; padding-right: 0px; padding-left: 0px; display: inline; background-image: none;" title="イメージ" width="985"></a></p>


  <h2>最新の機能を使用したVisual Studio</h2>


  <p>さまざまな&rsquo;バージョンのサービスを処理するモデルを変更Visual Studio。 アーキテクチャ、ストレージ、パフォーマンス&rsquo;の制限により、ホストされている 1 台のビルド マシンに複数のバージョンの Visual Studioが提供されなくなりました。 これらの変更の履歴と根拠の詳細については、「VS Hosted Pools のVisual Studio Team Services<a href="https://github.com/Microsoft/vsts-tasks/blob/master/docs/vshostedpools.md">を参照してください</a>。</p>


  <p>このリリースでは、次&rsquo;の変更が表示されます。</p>


  <ul>
   <li>
   <p>ビルド定義を作成するときにキューを明示的に選択する必要があります (既定値はありません)。</p>
   </li>
   <li>
   <p>簡単にするために、既定のキューを&rsquo; [プロセス] セクションの [<strong></strong>タスク] タブに<strong>移動</strong>します。</p>
   </li>
  </ul>


  <p><img alt="default build queue on tasks tab" src="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/06_22_default-build-queue-on-tasks-tab-required.png" style="margin: 0px 0px 0px 60px;"></p>


  <ul>
   <li>[<a href="https://www.visualstudio.com/docs/build/steps/build/visual-studio-build">ビルドVisual StudioタスクMSBuild</a><a href="https://www.visualstudio.com/docs/build/steps/build/msbuild">、version</a> 引数の <strong>[</strong>最新] 設定が既定で設定されています。</li>
  </ul>


  <p>近日公開予定、さらに&rsquo;多くの変更が表示されます。 たとえば、次のホストされたプール (および対応するキュー) は次のようになります。</p>


  <ul>
   <li>
   <p>ホストされている VS2017</p>
   </li>
   <li>
   <p>ホストされている VS2015</p>
   </li>
   <li>
   <p>Hosted Deprecated (旧ホステッド プール&ldquo;&rdquo;)</p>
   </li>
   <li>
   <p>ホステッド Linux プレビュー</p>
   </li>
  </ul>


  <h2>Chef: コードとしてのインフラストラクチャ</h2>


  <p>Chef は、Visual Studio Team Services Marketplace で使用できます。 Chef &ldquo;に&rsquo;慣れ親しくない場合は、インフラストラクチャをコードに変換できる滑らかなカスタム開発キットを備えるインフラストラクチャ自動化プラットフォームが提供されます。&rdquo;つまり、コードとして記述<em>&ldquo;されたインフラストラクチャは、柔軟性、バージョン管理可能、人間が読み取り可能、テスト可能です。&rdquo; </em><a href="https://blog.chef.io/2017/05/10/integrate-chef-into-your-build-and-release-pipelines-with-microsoft-visual-studio-team-services/">Chef チームは、このリリースに関する</a>独自の広範なブログ投稿を作成しました。この記事も参照してください。</p>


  <p><a href="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/cheftasks.png"><img alt="chef tasks" border="0" height="530" src="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/cheftasks.png" style="border: 0px currentColor; border-image: none; padding-top: 0px; padding-right: 0px; padding-left: 0px; background-image: none;" title="" width="810"></a></p>


  <p>Chef 拡張機能では、Chef Automate を構成するための 6 &amp; つの新しいビルド リリース タスクが追加されます。</p>


  <p>この拡張機能のタスクは、Chef Automate プラットフォームと対話するときに実行する一般的なアクティビティ <a href="https://www.chef.io/automate/">を自動化</a> します。 セットアップと構成の詳細については、GitHub の開始ガイドを参照<a href="https://github.com/chef-partners/vsts-chef/wiki/Getting-Started"></a>してください。 通常、ビルド プロセスの一部として使用される拡張機能に含まれるタスクは次のとおりです。</p>


  <ul>
   <li><strong>cookbook のバージョン番号</strong>を更新する: アップロードする前に、現在のビルド番号を取得し、そのバージョンで Chef クックブックのバージョンを設定できます。</li>
   <li><strong>アップロード Chef サーバー</strong>への移動: 自分のレポポからクックブックを含むパスを指定し、Chef サーバーにアップロードし、それらを指定している場合は、すべての前提条件を指定できます。</li>
  </ul>


  <p>通常、リリース プロセスの一部として使用されるタスクは次のとおりです。</p>


  <ul>
   <li><strong>Chef 環境に変数を追加</strong>する: このタスクを使用すると、環境の VSTS Release Management 変数のセットを、指定された Chef 環境にコピーできます。</li>
   <li><strong>環境へのクックブックのバージョンの</strong>リリース: この&lsquo;&rsquo;タスクでは、特定の環境で Chef クックブックのバージョン ピンを指定できます。 リリース パイプラインでこのタスクを使用して、&lsquo;&rsquo;その環境にクックブックをリリースできます。</li>
   <li><strong>InSpec の実行</strong>: デプロイ グループ内のマシンで InSpec を実行します。</li>
   <li><strong>Chef クライアントの実行</strong>: デプロイ グループ内のマシンで Chef クライアントを実行します。</li>
  </ul>


  <p>Team Services 拡張機能エコシステムに Chef が参加して満足しています。そのため、インフラストラクチャを次のレベルに引き上て、一連の情報を提供してください。</p>


  <h2>ソース ブランチに基づいて環境へのリリースを制御する</h2>


  <p>新しいリリースが作成されたら (通常は、ソースのビルドが成功した後)、配置を自動的にトリガーするように、リリース定義を構成できます。 ただし、任意のビルドが成功したときではなく、ソースの特定のブランチからのビルドのみを配置したいことがあります。</p>


  <p>たとえば、開発およびテスト環境にはすべてのビルドを配置しますが、運用環境には特定のビルドのみを配置するような場合です。 以前は、そのためには、2 つのリリース パイプラインを維持する必要がありました (開発およびテスト環境用に 1 つと、運用環境用に 1 つ)。</p>


  <p>Release Management では、環境ごとの成果物フィルターの使用がサポートされるようになりました。 つまり、ビルドの成功や新しいリリースの作成など、配置トリガーの条件が満たされたときに、各環境に配置されるリリースを指定できます。 環境の <strong>[配置条件]</strong> ダイアログの <strong>[トリガー]</strong> セクションで、その環境への新しい配置をトリガーするビルドのソース ブランチとタグなど、成果物の条件を選びます。</p>


  <p><img alt="deployment conditions" src="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/06_01_14.png"></p>


  <p>さらに、[<strong>リリース概要</strong>] ページには、開始 &rdquo; されていないすべて &ldquo; の展開がその状態である理由を示すポップアップヒントが含まれており、デプロイの開始方法やタイミングを提案します。</p>


  <p><img alt="pop up tip" src="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/06_01_15.png"></p>


  <h2>成果物ソースとしての Git リポジトリのリリース トリガー</h2>


  <p>Release Management は、同じアカウント内の任意のチーム プロジェクトのリリース定義にリンクされている Git リポジトリの継続的配置トリガーの構成をサポートするようになりました。 これにより、新しいコミットがリポジトリに対して行われたときに自動的にリリースをトリガーできます。 また、コミットがリリースをトリガーする Git リポジトリ内のブランチを指定することもできます。 これは、GitHub と Team Foundation Git リポジトリを成果物ソースとしてリリース定義にリンクし、ビルドから生成されない Node.js や PHP などのアプリケーションに対してリリースを自動的にトリガーできることも意味します。</p>


  <p><img alt="release triggers" src="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/06_01_16.png"></p>


  <h2>自動化されたテストのオンデマンド トリガー</h2>


  <p><strong>テストハブで</strong>、テスト計画とテストスイートからの自動テストケースのトリガーがサポートされるようになりました。 <strong>テスト</strong>ハブからの自動テストの実行は、<strong>リリース環境</strong>でスケジュールされた方法でテストを実行するのと同じように設定できます。 [ <strong>テスト計画から自動テストを実行</strong> ] テンプレートを使用してリリース定義に環境を設定し、それをテスト計画に関連付けて自動テストを実行する必要があります。 <strong>テスト</strong>ハブから環境を設定し、自動テストを実行する方法の詳細な手順については、<a href="https://www.visualstudio.com/en-us/docs/test/continuous-testing/run-automated-tests-from-test-hub">ドキュメント</a>を参照してください。</p>


  <p><img alt="test trigger" src="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/06_01_11.jpg"></p>


  <h2>Apple 証明書のようなファイルを安全に保存する</h2>


  <p>ビルドとリリースの機能に汎用的な<a href="https://www.visualstudio.com/en-us/docs/build/concepts/library/secure-files">セキュリティで保護</a>されたファイルライブラリを追加しまし &rsquo; た。 セキュリティで保護されたファイル ライブラリを使うと、署名証明書、Apple Provisioning Profiles、Android Keystore ファイル、SSH キーなどのファイルを、ソース リポジトリにコミットすることなくサーバーに格納できます。</p>


  <p><img alt="secure files library" src="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/06_01_18.png" title=""></p>


  <p>セキュリティで保護されたファイルの内容は暗号化され、タスクから参照することにより、ビルド プロセスまたはリリース プロセスの間にのみ使うことができます。 セキュリティで保護されたファイルは、セキュリティの設定に基づいて、チーム プロジェクトの複数のビルド定義およびリリース定義で使用できます。 セキュリティで保護されたファイルは、ライブラリ セキュリティ モデルに従います。</p>


  <p>&rsquo;この新機能を利用する Apple タスクもいくつか追加されました。</p>


  <ul>
   <li>
   <p><a href="https://www.visualstudio.com/en-us/docs/build/steps/utility/install-apple-certificate">ユーティリティ: Apple 証明書のインストール</a></p>
   </li>
   <li>
   <p><a href="https://www.visualstudio.com/en-us/docs/build/steps/utility/install-apple-provisioning-profile">ユーティリティ: Apple プロビジョニング プロファイルのインストール</a></p>
   </li>
  </ul>


  <h2>Azure Key Vault からのシークレットを変数として使用する</h2>


  <p>また、変数グループを Key Vault シークレットにリンクすることにより、Azure Key Vault との統合のためのファーストクラスのサポートが追加されました。 これは、VSTS では何も変更せずに Azure Key Vault 内のシークレット値を完全に管理できることを意味します (たとえば、リリースに影響を与えることなく、Azure Key Vault のパスワードや証明書をローテーションできます)。</p>


  <p>[ <strong>変数グループ</strong> ] ページでこの機能を有効にするには、トグルボタンを使用し <strong>て、Azure key vault のシークレットを変数としてリンク</strong>します。 コンテナーの詳細を構成した後、[ <strong>+ 追加</strong> ] を選択し、この変数グループにマップされる資格情報コンテナーから特定のシークレットを選択します。</p>


  <p><img alt="link to secret in Azure Key Vault" src="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/06_22_29.png" title=""></p>


  <p>Azure Key Vault にマップされた変数グループを作成したら、「 <a href="https://www.visualstudio.com/en-us/docs/build/concepts/library/variable-groups">変数グループ</a>」で説明されているように、リリース定義にリンクできます。</p>


  <p>値ではなく変数グループ変数にマップされているシークレット名だけであることに &rsquo; 注意してください。 各シークレットの実際の値 (最新バージョン) は、リリース時に使用されます。</p>


  <h2>パッケージビルドタスクの更新</h2>


  <p><strong>NuGet</strong>、 <strong>npm</strong>、 <strong>Maven</strong>、 <strong>dotnet</strong>のビルドタスクを包括的に更新しました。これ &rsquo; には、 <a href="https://github.com/microsoft/vsts-tasks">GitHub の vsts-tasks リポジトリ</a>に記録された問題の大部分に対する修正が含まれます。</p>


  <h3>新しい統合 NuGet タスク</h3>


  <p><strong>NuGet Restore</strong>、 <strong>NuGet パッケージャー</strong>、および<strong>NuGet の Publisher</strong>タスクを統合された<strong>NuGet</strong>ビルドタスクに結合して、ビルドタスクライブラリの残りの部分と適切に連携させまし &rsquo; た。新しいタスクでは、既定で NuGet 4.0.0 が使用されます。 &rsquo;そのため、古いタスクを非推奨にしました。時間があれば、新しい NuGet タスクに移行することをお勧めします。 この変更は、結合されたタスクを使用してのみアクセスできるようにするという、以下 &rsquo; に説明する改善点の波と一致します。</p>


  <p>この作業の一環として、新しい<strong>NuGet ツールインストーラー</strong>タスクもリリースされまし &rsquo; た。このタスクでは、パスで利用可能な NuGet のバージョンを制御し、新しい NuGet タスクで使用します。 したがって、新しいバージョンの NuGet を使うには、ビルドの先頭に <strong>NuGet Tool インストーラー</strong> タスクを追加するだけで済みます。</p>


  <p><img alt="NuGet restore task" src="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/06_22_07.png" title=""></p>


  <h3>npm ビルド タスクの更新</h3>


  <p>&rsquo;Windows、Linux、または Mac 上で npm プロジェクトをビルドし直すかどうかによって、新しい<strong>npm</strong>ビルドタスクが対応します。 また、<strong>npm install</strong> と <strong>npm publish</strong> の両方を簡単に行うことができるように、タスクの編成を変更しました。 <strong>インストール</strong>と<strong>発行</strong>については、プロジェクト &rsquo; に記載されているレジストリの資格情報を<a href="https://www.visualstudio.com/en-us/docs/build/concepts/library/service-endpoints">サービスエンドポイント</a>に安全に格納できるように、資格情報の取得を簡略化しました。 もう1つの方法として、VSTS フィードを使用する &rsquo; 場合は、フィードを選択できるピッカーが用意されているので、ビルドエージェントによって使用される必要な資格情報で npmrc が生成されます。</p>


  <h5>アカウント/コレクションの外部の作業</h5>


  <p>&rsquo;vsts アカウントの外部でフィードを使用した方が、別の vsts アカウントまたは TFS サーバーにフィードを<strong>Package Management</strong>したかどうか &rsquo; 、または NuGet の Package Management ではないフィード (たとえば、.org/npmjs、artifactory、MyGet など) を簡単に操作できるようになりました。 NuGet と npm の専用の<strong>サービスエンドポイント</strong>の &nbsp; 種類を使用すると、正しい資格情報を入力して、パッケージのダウンロードやパッケージのプッシュ操作でビルドタスクをシームレスに機能させることができます。</p>


  <p><img alt="feed selection" src="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/06_22_08.png" title=""></p>


  <h3>Maven と dotnet で認証済みフィードがサポートされるようになりました</h3>


  <p><strong>NuGet</strong>と<strong>npm</strong>とは異なり、 <strong>Maven</strong>と<strong>dotnet</strong>のビルドタスクは、以前は認証されたフィードでは動作していませんでした。 前に説明したのと同じことをすべて (フィードピッカー、アカウントの機能強化の外側で)、 <strong>dotnet</strong>タスクに追加しまし &rsquo; た。 同様に、Maven タスクでは、現在のビルドと同じ VSTS アカウントまたは TFS コレクション内の認証されたフィードがサポートされるようになりました。 フィードを pom.xml に追加するだけで、Maven ステップによって資格情報が自動的に追加されます (完了時にクリーンアップされます)。 これにより、 <strong>Package Management</strong>でサポートされているすべてのパッケージの種類の VSTS/TFS および外部フィード/リポジトリ &nbsp; を簡単に操作 &nbsp; できるようになります。</p>


  <p><img alt="dotnet restore task" src="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/06_22_10.png" title=""></p>


  <h2>モバイル作業項目フォームの一般提供</h2>


  <p>Visual Studio Team Services での作業項目のモバイルエクスペリエンスは、現在プレビュー段階にありません。 作業項目に対して最適化されたルックアンドフィールを含む完全なエンドツーエンドのエクスペリエンスを備えています。また、自分に割り当てられている項目、フォローしている &rsquo; 項目、または自分の電話から最近アクセスまたは編集した項目を簡単に操作することができます。</p>


  <p><img alt="mobile wit" src="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/06_01_01.png">&nbsp;<img alt="mobile wit fields" src="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/06_01_02.png" style="margin: 0px 0px 0px 30px;"></p>


  <h2>月の内線番号: 製品計画</h2>


  <p>全体像を伝達することで、すべてのユーザーをチームの目標に合わせることができます ここで、 <a href="https://www.productplan.com/">Productplan</a> のパートナーが <a href="https://marketplace.visualstudio.com/items?itemName=productplan.productplan">VSTS Marketplace</a>にロードマップソリューションを提供したことをお知らせします。</p>


  <p><img alt="product plan roadmap" height="367" src="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/productplan.png" title="" width="606"></p>


  <p>ProductPlan を使用すると、製品戦略を簡単に計画して伝えることができます。 30日間の <a href="https://www.productplan.com/lp">無料試用版</a>の使用を開始します。</p>


  <ul>
   <li>バー、マイルストーン、コンテナー、およびレーンを簡単にドラッグアンドドロップして、美しいロードマップを数分で構築できます。</li>
   <li>プランを即座に更新します。</li>
   <li>個人、チーム全体、または会社 &ndash; 全体と安全に共有できます。 簡単に印刷して PDF、画像、またはスプレッドシートにエクスポートできます。</li>
   <li>計画ボードを使用して、客観的にイニシアチブにスコアを付けます。</li>
   <li>駐車機会がある中央の場所で将来の営業案件をキャプチャします。</li>
   <li>[レーンとコンテナー] を展開して、共有する詳細の量を調整します。</li>
   <li>製品ポートフォリオ全体を一目で把握するために、マスタープランに複数のロードマップを表示します。</li>
  </ul>


  <p><img alt="drag and drop in product plan" height="280" src="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/features-get-started-quickly-animation.gif" title="" width="816"></p>


  <p>Sprintly のリリースについては、さらに多くのことがあり &rsquo; ます。 すべての機能の一覧については、 <a href="https://www.visualstudio.com/en-us/articles/news/2017/jun-01-team-services">6 月1日</a> および <a href="https://www.visualstudio.com/en-us/articles/news/2017/jun-22-team-services">6 月 22</a> 日のお知らせをご覧ください。 VSTS の最新の計画と開発については、必ず<a href="https://blogs.msdn.microsoft.com/devops/">DevOps のブログ</a>を購読してください。</p>


  <p>コーディングをお楽しみください!</p>
