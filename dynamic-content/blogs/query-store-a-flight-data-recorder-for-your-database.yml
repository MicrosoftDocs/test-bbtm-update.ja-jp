### YamlMime:Yaml
ms.openlocfilehash: 4b4c5f1e2aa8aca5fbe57e53a0ce854d833ff9b6
ms.sourcegitcommit: d03bdc7fe5447adb6530886aab848b75fe8fa8ee
ms.translationtype: MT
ms.contentlocale: ja-JP
ms.lasthandoff: 03/11/2022
ms.locfileid: "139889066"
Slug: query-store-a-flight-data-recorder-for-your-database
Title: 'クエリストア: データベースのフライトデータレコーダー'
Summary: この投稿は、クエリストアを使用してクエリパフォーマンス分析を開始する際に役立ちます。
Content: "クエリストアは SQL Server 2016 の新機能であり、Azure SQL Database V12 の最新バージョンのプレビューで使用できるようになりました。 クエリパフォーマンスのトラブルシューティングに役立つように設計されています。\n\nデータベースのサイズが大きくなるにつれて、パフォーマンスが低下することはあまりありません。 クエリプランに含まれるすべての変更を確認する機能がないと、回帰が発生する理由と、今後その問題を回避するためにできることを解明するのは困難です。 トラブルシューティングには、貴重に生産性が向上するまで数時間から数日かかる場合があります。\n\n航空機のフライトデータレコーダーと同様に、クエリストアは、すべてのクエリに関する詳細な履歴情報を収集して提示し、問題の診断と解決にかかる時間を短縮することで、パフォーマンスのフォレンジックを大幅に簡素化します。\n\n収集したデータは時間ウィンドウで区切られます。これにより、時間の経過に伴うクエリパフォーマンスの変化を観察できます。 クエリで異なるプランが生成される場合は、クエリストアを使用してプランの変更を分析し、パフォーマンスの低下の可能性を特定し、クエリプロセッサに対してクエリに特定のプランを使用させることもできます。\n\nクエリストアは SQL、Transact-sql を使用してアクセスできます。 収集したデータを分析して機能を管理するには、SQL Server Management Studio または SQL Server Data Tools をインストールする必要があります。\n\n特にクエリストア向けに設計された新しいユーザーインターフェイスが付属しているため、 <strong> <a href=\"https://www.microsoft.com/en-us/evalcenter/evaluate-sql-server-2016?i=1\" target=\"_blank\">SQL Server 2016 Management Studio Community Technology Preview 2</a>を</strong>使用することを<strong>強くお勧め</strong>し<strong>ます。</strong>\n\nクエリパフォーマンス分析のためにクエリストアの使用を開始する方法を見てみましょう。\n<h2>手順 1: データベースのクエリストアを有効にする</h2>\nクエリストアはデータベーススコープの機能であるため、監視するデータベースに対して最初に有効にする必要があります。 この機能を有効にすると、収集したデータがデータベースのストレージ領域内に格納さクエリストアます。 SQL Database に対して機能を有効にするには、Azure SQL Server インスタンスに接続し、 <strong>master</strong>データベースに接続している間に次のスクリプトを実行します。\n<pre class=\"prettyprint\">ALTER DATABASE &lt;database_name&gt; SET QUERY_STORE = ON;</pre>\nまたは、SSMS 2016 CTP2 を実行した場合は、ユーザーインターフェイスからこの機能を有効にすることができます。 ターゲットデータベースを右クリックし、[プロパティ]/[クエリストア] タブをクリックします。\n\n<a href=\"https://acom.azurecomcdn.net/80C57D/blogmedia/blogmedia/2015/06/01/Query-Store-Properties.png\"><img style=\"float: none; margin-left: auto; display: block; margin-right: auto;\" title=\"SSMS からのクエリストアの有効化\" src=\"https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/Query-Store-Properties_thumb.png\" alt=\"Query Store: flight data recorder for your database\" width=\"480\" height=\"397\" /></a>\n\n要件に合わせて調整するために、次のオプションの既定値を変更することができます。\n<ul>\n <li><strong>最大サイズ (MB</strong> ) –クエリストアがデータベース内で取るデータ領域の制限。 ワークロードによって多数の異なるクエリまたはプランが生成される場合や、クエリ履歴を長期間保持する必要がある場合は、既定値 (<strong>100 MB</strong>) では不十分な場合があります。 ディスクサイズが制限を超えたときに、クエリストアが \"読み取り専用\" モードに切り替わるのを防ぐために、現在の領域の使用状況を追跡し、構成値を増加させます。</li>\n <li><strong>統計の収集間隔</strong>: ランタイムデータの粒度のレベルを定義します (既定値は <strong>1 時間</strong>)。 粒度の細かい値が必要な場合は、小さい値を使用することを検討してください。ただし、クエリストアデータのサイズに直接影響を与えることに注意してください。</li>\n</ul>\nその他のオプションの詳細については、 <a href=\"https://aka.ms/querystore\">MSDN ドキュメント</a> でクエリストアを参照してください。\n<h2>手順 2: ワークロードを実行し、データ分析を実行する</h2>\nこの手順では、クエリストアを使用して、ワークロードで最もリソースを消費するクエリを簡単に識別する方法について説明します。\n\nSSMS 2016 CTP2 を実行する場合は、オブジェクトエクスプローラーの [データベース] ノードの下にある<strong>クエリストア</strong>サブフォルダーにある [<strong>リソースを消費するクエリ</strong>] をダブルクリックします。 これにより、システムで最も負荷の高いクエリに関する詳細情報を含む新しいウィンドウが開きます。\n\n<a href=\"https://acom.azurecomcdn.net/80C57D/blogmedia/blogmedia/2015/06/01/QDS-Top-Resource-Consuming-Qrys-Compact.png\"><img style=\"float: none; margin-left: auto; display: block; margin-right: auto;\" title=\"リソースを消費する上位のリソース\" src=\"https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/QDS-Top-Resource-Consuming-Qrys-Compact_thumb.png\" alt=\"Query Store: A flight data recorder for your database\" width=\"610\" height=\"328\" /></a>\n\nユーザー インターフェイスは、次の 3 つのウィンドウに分かれています。上位リソース消費クエリを表すヒストグラム (左側)、選択したクエリで使用されたプランの概要 (右側)、および選択したプランの視覚化されたクエリ プラン (下部)。 分析するクエリの数と関心のある期間を制御するには、 <strong>[構成]</strong> ボタンをクリックします。 異なるリソース消費ディメンション (期間、CPU、メモリ、IO、実行回数) とベースライン (平均、最小、最大、合計、標準偏差) も選択できます。\n\nクエリのヒントには、クエリテキスト、クエリ id (内部 id)、平均時間、実行回数、およびさまざまなプランの数に関する詳細が表示されます。 右側のプランの概要を見て実行履歴を分析し、別のプランとそれらのランタイム統計を確認します。 下のペインを使用すると、さまざまなプラン図形を調べたり、視覚的に並べて表示したりできます ([ <strong>比較</strong> ] ボタンを使用します)。\n\n<strong>transact-sql SQL 分析</strong>\n\n2016 CTP2 より前の SQL Server Management Studio を実行する場合は、SQL transact-sql スクリプトを使用して、リソースを消費する最も多くのクエリを特定できます。 <span style=\"line-height: 1.5;\">クエリストアは、分析用に次のビューを公開します。</span>\n<table>\n<tbody>\n<tr>\n<td width=\"274\"><strong>表示</strong></td>\n<td width=\"350\"><strong>説明</strong></td>\n</tr>\n<tr>\n<td width=\"274\"><strong>sys.query_store_query_text </strong></td>\n<td width=\"350\">キャプチャされたクエリテキストに関する情報です。</td>\n</tr>\n<tr>\n<td width=\"274\"><strong>sys.query_context_settings</strong></td>\n<td width=\"350\">セマンティクスに影響を与えるコンテキスト設定のさまざまなランタイム組み合わせ (プラン図形に影響する SET オプション、言語 ID、...)</td>\n</tr>\n<tr>\n<td width=\"274\"><strong>sys.query_store_query</strong></td>\n<td width=\"350\">クエリテキストとコンテキスト設定の一意の組み合わせ</td>\n</tr>\n<tr>\n<td width=\"274\"><strong>sys.query_store_plan</strong></td>\n<td width=\"350\">システムでクエリを実行するためにが使用 SQL Server プランに関する情報。</td>\n</tr>\n<tr>\n<td width=\"274\"><strong>sys.query_store_runtime_stats_interval</strong></td>\n<td width=\"350\">クエリストアで作成された集計間隔 (時間単位)。</td>\n</tr>\n<tr>\n<td width=\"274\"><strong>sys.query_store_runtime_stats</strong></td>\n<td width=\"350\">実行されたクエリプランの実行時の統計。間隔ごとに集計されます。</td>\n</tr>\n</tbody>\n</table>\n次のスクリプトを実行して、 <em>最後の実行時間内の合計実行時間に基づいて25個のクエリ</em>を取得します。\n<pre class=\"prettyprint\">WITH AggregatedDurationLastHour\nAS\n(\n   SELECT q.query_id, SUM(count_executions * avg_duration) AS total_duration,\n   COUNT (distinct p.plan_id) AS number_of_plans\n   FROM sys.query_store_query_text AS qt JOIN sys.query_store_query AS q \n   ON qt.query_text_id = q.query_text_id\n   JOIN sys.query_store_plan AS p ON q.query_id = p.query_id\n   JOIN sys.query_store_runtime_stats AS rs ON rs.plan_id = p.plan_id\n   JOIN sys.query_store_runtime_stats_interval AS rsi \n   ON rsi.runtime_stats_interval_id = rs.runtime_stats_interval_id\n   WHERE rsi.start_time &gt;= DATEADD(hour, -1, GETUTCDATE()) \n   AND rs.execution_type_desc = 'Regular'\n   GROUP BY q.query_id\n)\n,OrderedDuration\nAS\n(\n   SELECT query_id, total_duration, number_of_plans, \n   ROW_NUMBER () OVER (ORDER BY total_duration DESC, query_id) AS RN\n   FROM AggregatedDurationLastHour\n)\nSELECT qt.query_sql_text, object_name(q.object_id) AS containing_object,\ntotal_duration AS total_duration_microseconds, number_of_plans,\nCONVERT(xml, p.query_plan) AS query_plan_xml, p.is_forced_plan, p.last_compile_start_time,q.last_execution_time\nFROM OrderedDuration od JOIN sys.query_store_query AS q ON q.query_id  = od.query_id\nJOIN sys.query_store_query_text qt ON q.query_text_id = qt.query_text_id\nJOIN sys.query_store_plan p ON q.query_id = p.query_id\nWHERE OD.RN &lt;=25 ORDER BY total_duration DESC</pre>\n次の図に示すように、クエリはデータセットを返します。 この結果を直接または入力として使用して、transact-sql SQL スクリプトに基づく詳細な分析を行うことができます。 その他の例については、MSDN の<a href=\"https://aka.ms/querystore\">クエリストア</a>を参照してください。\n\n<a href=\"https://acom.azurecomcdn.net/80C57D/blogmedia/blogmedia/2015/06/01/top-25-Query-Results.png\"><img style=\"float: none; margin-left: auto; display: block; margin-right: auto;\" title=\"リソースを消費する上位25のクエリ\" src=\"https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/top-25-Query-Results_thumb.png\" alt=\"Query Store: A flight data recorder for your database\" width=\"610\" height=\"135\" /></a>\n<h2>手順 3: 低下したクエリのパフォーマンスを修正する</h2>\n異なるプランと可変のパフォーマンスで実行されているクエリがワークロードに含まれている場合は、クエリストアを使用して、今後の実行で最適なプランを常に使用するように SQL Server に強制することができます。 次の図は、これらのクエリの1つで実行履歴がどのように表示されるかを示しています (<strong>query_id</strong> と <strong>plan_id</strong> は、すべての収集されたクエリとプランにクエリストアによって割り当てられた永続的な内部識別子です)。\n\n<a href=\"https://acom.azurecomcdn.net/80C57D/blogmedia/blogmedia/2015/06/01/Plan-History-Compact.-png.png\"><img style=\"float: none; margin-left: auto; display: block; margin-right: auto;\" title=\"選択したクエリの実行履歴\" src=\"https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/Plan-History-Compact.-png_thumb.png\" alt=\"Query Store: A flight data recorder for your database\" width=\"610\" height=\"261\" /></a>\n\nクエリ1の [プランの概要] ペインには、クエリに2つのプランがあり、プラン id が1の実行が期間の観点からはるかに優れていることがわかります。 SQL Server が常にそのプランを使用するようにするには、[plan id = 1] が選択されている場合は、[<strong>プランの強制</strong>] ボタンをクリックします。 強制されたプランがチェックマーク付きで表示されるようになりました。プランの概要は、後続の実行で使用されていることを示しています。\n\n<a href=\"https://acom.azurecomcdn.net/80C57D/blogmedia/blogmedia/2015/06/01/Plan-forcing-compact.png\"><img style=\"float: none; margin-left: auto; display: block; margin-right: auto;\" title=\"プランの強制後の実行履歴\" src=\"https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/Plan-forcing-compact_thumb.png\" alt=\"Query Store: A flight data recorder for your database\" width=\"610\" height=\"379\" /></a>\n\n<strong>SQL によるプラン適用</strong>\n\n2016 CTP2 より前の SQL Server Management Studio を実行すると、クエリストアビューに直接クエリを実行することで、プランの回帰によるクエリを識別できます。 上記のスクリプトは、複数のプランを持つクエリを返すように若干変更されています。また、比較のために、すべての測定間隔に対するプランごとの平均時間も含まれています。\n<pre class=\"prettyprint\">WITH AggregatedDurationLastHour\nAS\n(\n   SELECT q.query_id, SUM(count_executions * avg_duration) AS total_duration,\n   COUNT (distinct p.plan_id) AS number_of_plans\n   FROM sys.query_store_query_text AS qt JOIN sys.query_store_query AS q \n   ON qt.query_text_id = q.query_text_id\n   JOIN sys.query_store_plan AS p ON q.query_id = p.query_id\n   JOIN sys.query_store_runtime_stats AS rs ON rs.plan_id = p.plan_id\n   JOIN sys.query_store_runtime_stats_interval AS rsi \n   ON rsi.runtime_stats_interval_id = rs.runtime_stats_interval_id\n   WHERE rsi.start_time &gt;= DATEADD(hour, -1, GETUTCDATE()) \n   AND rs.execution_type_desc = 'Regular'\n   GROUP BY q.query_id\n)\n,OrderedDuration\nAS\n(\n   SELECT query_id, total_duration, number_of_plans, \n   ROW_NUMBER () OVER (ORDER BY total_duration DESC, query_id) AS RN\n   FROM AggregatedDurationLastHour\n)\nSELECT qt.query_sql_text, object_name(q.object_id) AS containing_object, q.query_id,\np.plan_id,rsi.start_time as interval_start, rs.avg_duration,\nCONVERT(xml, p.query_plan) AS query_plan_xml\nFROM OrderedDuration od JOIN sys.query_store_query AS q ON q.query_id  = od.query_id\nJOIN sys.query_store_query_text AS qt ON q.query_text_id = qt.query_text_id\nJOIN sys.query_store_plan AS p ON q.query_id = p.query_id\nJOIN sys.query_store_runtime_stats AS rs ON rs.plan_id = p.plan_id\nJOIN sys.query_store_runtime_stats_interval AS rsi ON rsi.runtime_stats_interval_id = rs.runtime_stats_interval_id\nWHERE rsi.start_time &gt;= DATEADD(hour, -1, GETUTCDATE())\nAND OD.RN &lt;=25 AND number_of_plans &gt; 1\nORDER BY total_duration DESC, query_id, rsi.runtime_stats_interval_id, p.plan_id</pre>\n取得したデータセットの一部を次に示します。\n\n<a href=\"https://acom.azurecomcdn.net/80C57D/blogmedia/blogmedia/2015/06/01/Multiple-Plans-Query-Results.png\"><img style=\"float: none; margin-left: auto; display: block; margin-right: auto;\" title=\"複数のプランでリソースを消費する上位のクエリのクエリ結果\" src=\"https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/Multiple-Plans-Query-Results_thumb.png\" alt=\"Query Store: A flight data recorder for your database\" width=\"610\" height=\"135\" /></a>\n\nデータセットから、パフォーマンスが異なる2つのプランを使用してクエリ id = 1 が実行されたことを確認できます (さらに、結果グリッドの <strong>query_plan_xml</strong> 列をクリックすると、その違いを視覚的に調べることができます)。 Plan id = 1 (緑色の四角形) のプランでは、<em>測定間隔ごとに</em>、プラン id = 2 (赤い四角形) よりも平均的な 2-3 ( <strong>avg_duration</strong>) のパフォーマンスが向上しています。\n\nそのため、クエリ id = 1 に対してプラン id = 1 を強制することが必要になる場合があります。\n<pre class=\"prettyprint\">EXEC sys.sp_query_store_force_plan @query_id = 1, @plan_id = 1;</pre>\n<h2>次の手順</h2>\nクエリストアの詳細については、オンラインプレビューの <a href=\"https://aka.ms/querystore\">ドキュメント</a> と <a href=\"https://channel9.msdn.com/Shows/Data-Exposed/Query-Store-in-SQL-Server-2016\" target=\"_blank\">Channel 9 の説明</a>を参照してください。\n\nご質問やご意見を投稿してください。今後の機能向上にご協力ください。"
