### YamlMime:Yaml
ms.openlocfilehash: f0b8962028afd6b5a44d80738f7d53a51b526d0c
ms.sourcegitcommit: d03bdc7fe5447adb6530886aab848b75fe8fa8ee
ms.translationtype: MT
ms.contentlocale: ja-JP
ms.lasthandoff: 03/11/2022
ms.locfileid: "139896494"
Slug: considering-azure-functions-for-a-serverless-data-streaming-scenario
Title: サーバーレスデータストリーミングシナリオの Azure Functions を検討する
Summary: 最近、銀行の顧客に配信される不正検出ソリューションに関するブログを公開しました。 ソリューションでは、サーバーレスアーキテクチャを使用して、テレメトリデータのストリーミングパイプラインをリアルタイムで完全に処理する必要がありました。 このブログでは、評価プロセスと Microsoft Azure 関数の使用に関する決定について説明します。
Content: >-
  <p>このブログ投稿 &ldquo; では、単一の Azure 関数 &rdquo; を利用する<a href="https://azure.microsoft.com/en-us/blog/a-fast-serverless-big-data-pipeline-powered-by-a-single-azure-function/?WT.mc_id=streamfunction-acomblog-kbaroni" target="_blank">高速なサーバーレスのビッグデータパイプライン</a>について説明しました。詐欺検出ソリューションを銀行の顧客に提供しました。 このソリューションでは、サーバーレスアーキテクチャを使用して、テレメトリデータのストリーミングパイプラインをリアルタイムで完全に処理する必要がありました。 このブログ投稿では、評価プロセスと Microsoft Azure 関数の使用に関する決定について説明します。</p>


  <h2>シナリオ</h2>


  <p>大きな銀行では、モバイルバンキングチャネルを介して送信された不正なトランザクションを検出するソリューションを構築したいと考えていました。 このソリューションは、大量のリアルタイムデータがクラウドサービスに取り込まれた、一連のデータ変換と抽出アクティビティが発生する一般的なビッグデータパイプラインパターンに基づいて構築されています。 この結果、 <a href="https://docs.microsoft.com/en-us/azure/machine-learning/team-data-science-process/create-features?WT.mc_id=streamfunction-acomblog-kbaroni" target="_blank">機能マトリックス</a> が作成され、高度な分析が使用されます。 銀行の場合、パイプラインは非常に高速でスケーラブルである必要があり、各トランザクションのエンドツーエンドの評価を2秒未満で完了できます。</p>


  <p>パイプラインの要件は次のとおりです。</p>


  <ul>
   <li>スケーラブルで、取り込まれたイベントアクティビティの急増に対応します。 最大400万のイベントと800万と1日に1回のトランザクション。</li>
   <li>イベントは、それぞれが 2 ~ 5 つの個別の銀行取引を含む、複雑な JSON ファイルとして取り込まれたされました。 各 JSON ファイルを解析し、個別のトランザクションの抽出、処理、および不正行為の評価を行う必要がありました。</li>
   <li>イベントとトランザクションは、重複が処理されないことを保証するために処理する必要がありました。 この要件の理由は、各トランザクションから行動データが抽出され、顧客とアカウントのプロファイルが作成されるためです。 イベントが連続して処理されなかった場合は、プロファイルを作成するために使用される計算と集計が無効になり、機械学習モデルの精度に影響します。</li>
   <li>参照データと、動的な参照を実行する機能は、パイプライン処理で重要なコンポーネントとなっていました。 このシナリオでは、参照データはその日の任意の時点で更新される可能性があります。</li>
   <li>ARM テンプレートを使用してデプロイできるアーキテクチャ。 CI/CD および DevOps プロセスとの統合が簡単になります。 テンプレートアーキテクチャでは、不正検出パイプラインアーキテクチャ全体を簡単に再デプロイして、テストを容易にしたり、銀行 &rsquo; の詐欺検出機能をインターネットバンキングなどの追加の銀行口座に迅速に拡張したりできます。</li>
  </ul>


  <p>これらの要件を満たすために、 <a href="https://azure.microsoft.com/services/functions/?WT.mc_id=streamfunction-acomblog-kbaroni" target="_blank">Azure Functions</a> を評価しています。これは、リアルタイム、ビッグデータストリーミング、および次の機能に対する適合性が原因です。</p>


  <ul>
   <li>簡単な構成とセットアップ</li>
   <li>リアルタイムの大規模なイベント処理を処理するように設計されています。</li>
   <li>Event Hubs、Azure SQL Database (SQL Database)、Azure Machine Learning、およびその他の管理されたサービスとすぐに統合</li>
  </ul>


  <h2>どのようにしたのでしょうか。</h2>


  <p>このような状況に適しているかどうかを判断するために役立つテクノロジを紹介します。 ソリューションへの2つの側面では、詳細な検証が必要でした。 1つのメッセージをエンドツーエンドで処理するのにどれくらいの時間がかかりますか。 また、複数の同時実行メッセージをエンドツーエンドで処理できるかどうかを確認できます。</p>


  <p>このワークフローでは、次に示すように、1つの Azure 関数によって使用される Event Hubs の1つのインスタンスへのデータストリーミングを開始します。</p>


  <p><a href="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/0c4b40f0-c992-470d-b32d-f59764fc8c0f.png"><img alt="Azure Function and Event Hub data streaming workflow chart" border="0" height="331" src="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/634cbe55-48cc-4a09-9ee3-f6b750e2f322.png" style="border: 0px currentcolor; border-image: none; margin-right: auto; margin-left: auto; float: none; display: block; background-image: none;" title="Azure の関数とイベントハブのデータストリーミングのワークフローグラフ" width="1022"></a></p>


  <p>テストハーネスは、イベントハブにイベントを送信するために、メッセージの再プレーヤーを使用して駆動されました。 このシナリオに固有のデータを使用するための変更により、Microsoft からダウンロードできる呼び出しイベント生成アプリである <a href="https://download.microsoft.com/download/8/B/D/8BD50991-8D54-4F59-AB83-3354B69C8A7E/TelcoGenerator.zip" target="_blank">Telcogenerator</a>を使用しています。 ソース コードは <a href="https://github.com/Azure/azure-stream-analytics/tree/master/Samples/TelcoGenerator" target="_blank">GitHub</a>から入手できます。</p>


  <h2>チームは何を学習したか?</h2>


  <p>Azure Functions は簡単に構成でき、数分以内に Azure Event Hubs から膨大な量のテレメトリデータを使用するように設定できます。 ロードテストが実行され、テレメトリが<a href="https://azure.microsoft.com/services/monitor/?WT.mc_id=streamfunction-acomblog-kbaroni" target="_blank">Azure アプリケーションインサイト</a>によってキャプチャされました。 Azure Functions は、この特定のワークフローに必要なパフォーマンスとスループットが提供されたことを明確に示しています。</p>


  <table border="1" cellpadding="2" cellspacing="0">
   <tbody>
    <tr>
     <td valign="top"><strong>アーキテクチャ</strong></td>
     <td valign="top"><strong>1個のイベントハブ + 1 つの Azure 関数</strong></td>
    </tr>
    <tr>
     <td valign="top">1つのメッセージをエンドツーエンドで処理するための最小時間 (低い方がよい)</td>
     <td valign="top">69ミリ秒</td>
    </tr>
    <tr>
     <td valign="top">1分間に処理された平均イベント数 (高い方が適しています)</td>
     <td valign="top">8300</td>
    </tr>
   </tbody>
  </table>


  <p align="center"><em>テーブル: ロードテストの結果</em></p>


  <p>ロードテストのパフォーマンスに加えて、Azure Functions の選択に役立つその他の機能には、次のものが含まれます。</p>


  <ul>
   <li>ミリ秒単位の待機時間を使用して一度に1つのイベントを評価して実行する機能。イベントが順番に処理されることを保証します。</li>
   <li>Azure Functions は、C#、JavaScript、Python などの言語をサポートしています。これにより、パイプライン処理で複雑なビジネスロジックを適用できます。</li>
   <li>SQL Database と統合された Azure 関数には、次のような利点があります。 <ul>
    <li>
    <ul>
     <li>イベントおよびトランザクション処理に対するトランザクション制御。 イベントのトランザクションで処理エラーが検出された場合、イベントに含まれるすべてのトランザクションがロールバックされる可能性があります。</li>
    </ul>

    <ul>
     <li>SQL Database のメモリ内処理とネイティブストアドプロシージャを使用したデータ準備の大部分は非常に高速でした。</li>
    </ul>
    </li>
   </ul>
   </li>
   <li>参照データやビジネスロジックに対する動的な変更は、Azure Functions で簡単に使用できます。 参照テーブルとストアドプロシージャは、SQL Database で簡単かつ迅速に更新でき、パイプライン &rsquo; の再デプロイを必要とせずに、その後の実行ですぐに使用できます。</li>
   <li>JSON ファイルの処理は、各 JSON ファイルから抽出された最大5つの個別銀行トランザクションによって、非常に複雑で複雑でした。 Azure Functions では、.NET Framework のネイティブ JSON 機能を利用できるため、JSON の解析が高速になりました。</li>
   <li>初期状態では、スケーリング時にサービスに Event Hubs コンシューマーグループのロックに関する問題が発生しました。 1つの Azure 関数 &rdquo; を使用した<a href="https://azure.microsoft.com/en-us/blog/a-fast-serverless-big-data-pipeline-powered-by-a-single-azure-function/?WT.mc_id=streamfunction-acomblog-kbaroni" target="_blank">高速でサーバーレスのビッグデータパイプライン</a>で &ldquo; 説明されている構成パラメーターを試してみると、このソリューションのビッグデータ量の要件を満たすために必要な機能が1つだけでした。</li>
   <li>Azure 関数を使用すると、処理アクティビティ間で状態を簡単に保存できます。</li>
   <li>DevOps のリリースプロセスでは、Azure Functions パイプラインを組み込んだり、Azure Functions メソッドの単体テストを開発したりすることができます。 このシナリオでは、データ値の単体テストを開発し、Azure 関数のデータ型チェックに役立てることができました。</li>
  </ul>


  <h2>推奨される次の手順</h2>


  <p>ソリューションの要件が洗練されているため、テクノロジの意思決定者は、イベントおよびデータボリュームで突然の変動によってデータパイプラインがどのように動作するかを知ることが重要になります。 データパイプラインソリューションのテクノロジを検討するときは、パイプラインのロードテストを検討してください。 開始するには、次のリンクを使用してください。</p>


  <ul>
   <li><a href="https://github.com/jeffhollan/functions-csharp-eventhub-ordered-processing" target="_blank">イベントハブと Azure Functions ソリューション</a>(モバイルバンクソリューションではありません) を使用してイベントを処理するための例を紹介します。</li>
   <li>&ldquo;1 つの Azure 関数 &rdquo; を利用する<a href="https://azure.microsoft.com/en-us/blog/a-fast-serverless-big-data-pipeline-powered-by-a-single-azure-function/?WT.mc_id=streamfunction-acomblog-kbaroni" target="_blank">高速でサーバーレスのビッグデータパイプライン</a>です。</li>
   <li>言及されている銀行詐欺ソリューションの完全なアーキテクチャについては、ブログ &ldquo; 記事「 <a href="https://download.microsoft.com/download/0/1/5/0150425C-14C7-41F4-97EA-3DE57B678C51/IndSG_FraudDetection.pdf" target="_blank">Mobile bank の不正使用ソリューションガイド</a> &rdquo; 」を参照してください。</li>
  </ul>


  <p>このブログで共同作業を行うために、 <a href="https://www.linkedin.com/in/cedza/" target="_blank">Cedric Labuschagne</a>、 <a href="https://www.linkedin.com/in/chris-cook-49b88457/" target="_blank">Chris クック</a>、 <a href="https://www.linkedin.com/in/eujon-sellers/" target="_blank">Eujon</a> 販売者に感謝します。</p>
