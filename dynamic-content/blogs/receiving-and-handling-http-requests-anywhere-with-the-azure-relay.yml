### YamlMime:Yaml
ms.openlocfilehash: 3666cbd92d3e90acfaec01c3d3828344a61f8a83
ms.sourcegitcommit: d03bdc7fe5447adb6530886aab848b75fe8fa8ee
ms.translationtype: MT
ms.contentlocale: ja-JP
ms.lasthandoff: 03/11/2022
ms.locfileid: "139904452"
Slug: receiving-and-handling-http-requests-anywhere-with-the-azure-relay
Title: Azure Relay での任意の場所での HTTP 要求の受信と処理
Summary: ビルド2018カンファレンスの時点では、リレーは、他の Azure ニュースの leaning について気にしたことがない可能性のある新しいトリックを学習しました。現在、リレーは、オープン Websocket プロトコルに対するリレー型 HTTP 要求もサポートするようになりました。
Content: >-
  <p>ビルド2018のカンファレンスから Microsoft &rsquo; のカバレッジに準拠している場合は、新しい<a href="https://channel9.msdn.com/Shows/Azure-Friday/At-Build-2018-Visual-Studio-Live-Share" target="_blank">Visual Studio Live Share</a>機能を使用して、ユーザーがどこにいるかにかかわらず、Visual Studio ユーザー間で即座にピアツーピアの共同作業を行うことができるようになりました。 1人の開発者はコーヒーショップに座っていて、航空会社では機内 WiFi を使用していますが、どちらもコードを直接共同作業することができます。</p>


  <p>&quot;Visual Studio チームがこの機能を提供できるようにするネットワークマジック &quot; は、azure Service Bus、azure Event Hubs、Azure Event Grid と共にメッセージングサービスファミリの一部である<a href="https://docs.microsoft.com/en-us/azure/service-bus-relay/relay-what-is-it" target="_blank">Azure Relay</a>です。 Relay は、実際にはすべての Azure サービスの中で最も古いものであり、最も古いパブリック育成が12年前に開始されており、2010年1月に Azure platform で起動された元のサービスのいくつかに含まれていました。</p>


  <p>それまでの間、Relay は、任意の WebSocket クライアントスタックで動作できる、 <a href="https://docs.microsoft.com/en-us/azure/service-bus-relay/relay-hybrid-connections-protocol" target="_blank">完全にドキュメント化</a> されたオープンプロトコルを話し、受信ファイアウォール規則、パブリック IP アドレス、または DNS 登録を必要とせずに、他のクライアントからの着信接続のリスナーになるようにしています。 すべての受信通信は、ネットワークリンクレベルではなくアプリケーションレイヤー内で終了するため、仮想プライベートネットワーク (VPN) テクノロジを使用するよりも、個々のアプリに到達するためのより安全なソリューションになります。</p>


  <p>ビルド2018カンファレンスの時点で、この Relay は、他の Azure ニュースの中で amidst についての情報を得られなかった可能性のある新しいトリックを学習しました。現在、Relay はリレー型の HTTP 要求もサポートするよう &rsquo; になりました。</p>


  <p>この機能は、コンテナー内で実行されるアプリケーションまたはアプリケーションコンポーネントと、パブリックエンドポイントを提供するのが困難で&#39;、 <a href="https://azure.microsoft.com/en-us/services/event-grid/" target="_blank">Azure Event Grid</a>と統合できる webhook の実装に特に適しています。</p>


  <p>Relay は、アプリケーションやデバイスがファイアウォールの背後に到達する必要がある場合によく使用されます。 一般的なアプリケーションシナリオとしては、クラウドベースの SaaS アプリケーションと販売ポイント (ショップ、喫茶店、レストラン、tanning salons、gyms、修理ショップ)、または専門サービスオフィス (税金アドバイザー、法律事務機関、医療診療所など) との統合が挙げられます。 さらに、複雑な VPN セットアップではなく <a href="https://docs.microsoft.com/en-us/azure/app-service/app-service-hybrid-connections" target="_blank">リレーベースの通信パス</a> を使用する企業の IT 部門では、リレーがますます普及しています。 このようなシナリオについては、近い将来にさらにニュースをお送りします。</p>


  <p>新しい HTTP サポートを使用すると、パブリックに到達可能な HTTP (S) リスナーをどこにでも作成し、ホストすることができます。また、電話やその他のデバイスでも、Azure Relay サービスに残して、解決可能な DNS 名、TLS サーバー証明書、およびパブリックにアクセス可能な IP アドレスを提供できます。 アプリケーションに必要なのは、共通の HTTPS ポート443経由の Azure Relay への送信 Websocket 接続のみです。</p>


  <p>例として、簡単な Node.js の例を見てみましょう &rsquo; 。 まず、 &rsquo; すぐに Node.js &ldquo; を使用して構築され &rdquo; た最小のローカル HTTP リスナーは次のようになります。</p>


  <pre style="background: white; color: black; font-family: consolas, courier new, courier;">

  var http = require(&#39;http&#39;);

  var port = process.env.PORT || 1337;


  http.createServer(function (req, res) {

  &nbsp;&nbsp;&nbsp;&nbsp; res.writeHead(200, { &#39;Content-Type&#39;: &#39;text/plain&#39; });

  &nbsp;&nbsp;&nbsp;&nbsp; res.end(&#39;Hello World\n&#39;);

  }).listen(port);

  </pre>


  <p>これは、Azure Relay を使用する Node.js アプリケーションと同等です。</p>


  <pre style="background: white; color: black; font-family: consolas, courier new, courier;">

  var http = require(&#39;hyco-https&#39;);


  var uri = http.createRelayListenUri(&quot;cvbuild.servicebus.windows.net&quot;, &quot;app&quot;);

  var server = http.createRelayedServer({

  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; server: uri,

  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; token: () =&gt; http.createRelayToken(uri, &quot;listen&quot;, &quot;{&hellip;key&hellip;}&quot;)

  &nbsp;&nbsp;&nbsp;&nbsp; },

  &nbsp;&nbsp;&nbsp;&nbsp; function (req, res) {

  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; res.writeHead(200, { &#39;Content-Type&#39;: &#39;text/plain&#39; });

  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; res.end(&#39;Hello World\n&#39;);

  }).listen();

  </pre>


  <p>主な変更点は、リレーアプリケーションは Node.js組み込みの http &rsquo; モジュールではなく hyco &rsquo; モジュールを使用 &lsquo; し、リレーに接続するためのエンドポイントとセキュリティトークンの情報を指定する createrelayedserver &rsquo; メソッドを使用して &lsquo; サーバーを作成すること &lsquo; です。 &rsquo; 最も重要: Node.js HTTP ハンドラーコードはまったく同じです。</p>


  <p>.NET Standard については、 <a href="https://www.nuget.org/packages/Microsoft.Azure.Relay" target="_blank">Microsoft Azure relay</a> NuGet パッケージの最新プレビューで既存の relay API を拡張して、HTTP 要求の処理もサポートしています。 Websocket 接続の場合と同様に HybridConnectionListener を作成し、RequestHandler コールバックを追加するだけです。</p>


  <pre style="background: white; color: black; font-family: consolas, courier new, courier;">

  var listener = new HybridConnectionListener(uri, tokenProvider);

  listener.RequestHandler = (context) =&gt;

  {

  &nbsp;&nbsp;&nbsp;&nbsp; context.Response.StatusCode = HttpStatusCode.OK;

  &nbsp;&nbsp;&nbsp;&nbsp; context.Response.StatusDescription = &quot;OK&quot;;

  &nbsp;&nbsp;&nbsp;&nbsp; using (var sw = new StreamWriter(context.Response.OutputStream))

  &nbsp;&nbsp;&nbsp;&nbsp; {

  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; sw.WriteLine(&quot;hello!&quot;);

  &nbsp;&nbsp;&nbsp;&nbsp; }

  &nbsp;&nbsp;&nbsp;&nbsp; context.Response.Close();

  };

  </pre>


  <p>既存の ASP.NET Core サービスでリレーに対する要求をリッスンする場合は、リリース直後に作成された新しい<a href="https://www.nuget.org/packages/Microsoft.Azure.Relay.AspNetCore" target="_blank">AspNetCore</a> NuGet パッケージを使用します。これにより、UseAzureRelay () &quot; を追加 &quot; することで、リレーの背後にある既存の ASP.NET Core アプリをホストできます。 web ホストビルダーの拡張機能と、ハイブリッド接続の共有アクセス規則の接続文字列の構成 ( <a href="https://github.com/Azure/azure-relay-aspnetserver" target="_blank">readme</a>、<a href="https://github.com/Azure/azure-relay-aspnetserver/tree/dev/samples" target="_blank">その他のサンプル</a>を参照)。</p>


  <pre style="background: white; color: black; font-family: consolas;">
      public static IWebHost BuildWebHost(string[] args) =&gt;
  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; WebHost.CreateDefaultBuilder(args)

  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .UseStartup&lt;Startup&gt;()

  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .UseAzureRelay(options =&gt;

  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {

  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; options.UrlPrefixes.Add(connectionString);

  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; })

  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .Build();

  </pre>


  <p>これで、HTTP 機能が運用環境でプレビュー段階になりました。これは、サポートと SLA を備えた既存のリレー機能と共に使用できます。 プレビュー段階であるため、まだ最終的な形ではありません。その &rsquo; ため、HTTP 関連のワイヤプロトコルに大幅な変更が加えられる可能性があります。</p>


  <p>リレー &rsquo; は通常のリバースプロキシではないため、リレーによってオーバーライドされ、最終的にはアラインしようとする、下位レベルの HTTP の詳細がいくつかあります。 模範的の既知の問題として、リレーは常にチャンク転送エンコードを使用して HTTP 応答をに変換するという問題があります。これ &rsquo; は、プロトコルの purists にはかなり面倒な場合がありますが、ほとんどのアプリケーションレベルのユースケースには影響しません。</p>


  <p>使用を開始するには、 <a href="https://docs.microsoft.com/en-us/azure/service-bus-relay/relay-hybrid-connections-http-requests-dotnet-get-started" target="_blank">C#</a> または <a href="https://docs.microsoft.com/en-us/azure/service-bus-relay/relay-hybrid-connections-http-requests-node-get-started" target="_blank">Node.js</a> のチュートリアルを確認してから、新しい HTTP 機能を使用しているかどうかにかかわらず、チュートリアルの下にあるフィードバックオプションを使用してお知らせください。</p>
