### YamlMime:Yaml
ms.openlocfilehash: b8f6167144a9e26ffd4cb4007453c1e5501c718b
ms.sourcegitcommit: d03bdc7fe5447adb6530886aab848b75fe8fa8ee
ms.translationtype: MT
ms.contentlocale: ja-JP
ms.lasthandoff: 03/11/2022
ms.locfileid: "139890638"
Slug: vertical-partitioning-in-sql-azure-part-1
Title: 'SQL Azure での列方向のパーティション分割: パート1'
Summary: '[この記事は SQL Azure チームによって提供されました。]SQL Azure は、現在 1 gb と 10 gb のデータベースをサポートしています。 大量のデータを SQL Azure に格納する場合は、テーブルを分割できます...'
Content: <p>[この記事は SQL Azure チームによって提供されました。]</p><p>SQL Azure は、現在 1 gb と 10 gb のデータベースをサポートしています。 SQL Azure に大量のデータを格納する場合は、複数の SQL Azure データベース間でテーブルを分割できます。 この記事では、中間層を使用して、LINQ を使用して異なる SQL Azure データベースで2つのテーブルを結合する方法について説明します。 この手法では、SQL Azure でデータを垂直方向にパーティション分割します。 </p>  <p>このバージョンの列方向のパーティション分割では、スキーマ内のすべてのテーブルを2つ以上の SQL Azure データベースに分割しています。 SQL Azure。 1つのデータベースにまとめるテーブルを選択するには、各テーブルのサイズが &ndash; どの程度大きいかを把握しておく必要があります。この目標は、各データベースが同じサイズになるようにテーブルを均等に分散することです。</p>  <p>データベースをパーティション分割することによって、パフォーマンスの向上も得られます。 SQL Azure によってデータベースが複数の物理マシンに分散されるため、ワークロードをパーティション分割することで、より多くの CPU と RAM リソースを取得できます。 たとえば、データベースを 10-1 GB SQL Azure のデータベースにパーティション分割すると、CPU とメモリのリソースが10倍になります。 TicketDirect によって、ピーク時の負荷中に数百の SQL Azure データベース間でワークロードをパーティション分割するケーススタディ (<a href="https://www.microsoft.com/casestudies/Case_Study_Detail.aspx?CaseStudyID=4000005890">ここ</a>にあります) があります。 </p>  <p>SQL Azure データベース全体でワークロードをパーティション分割すると、すべてのテーブルを1つのデータベースに格納する機能の一部が失われます。 この手法を使用する際の考慮事項の一部を次に示します。</p>  <ul>  <li>複数のデータベースにまたがる外部キーはサポートされていません。 言い換えると、あるデータベースのルックアップテーブルの主キーを、別のデータベースのテーブルの外部キーから参照することはできません。 これは、外部キーに対する SQL Server &rsquo; のデータベース間サポートにも同様の制限があります。 </li>  <li>クライアント側で Microsoft 分散トランザクションマネージャーを使用している場合でも、複数のデータベースにまたがるトランザクションを作成することはできません。 これは、別のデータベースへの挿入が失敗した場合に、1つのデータベースで挿入をロールバックできないことを意味します。 この制限は、例外をキャッチし、正常に完了したステートメントに対して undo &rdquo; スクリプトを実行 &ldquo; するために必要なクライアント側のコーディング &ndash; によって否定できます。 </li>  </ul>  <h4>SQLAzureHelper クラス</h4>  <p>列方向のパーティション分割を実現するために、次のような <b>SQLAzureHelper </b>クラスが導入されています。</p>  <ul>  <li>パフォーマンスのために前方読み取り専用カーソルを実装します。 </li>  <li><b>IEnumerable</b>と LINQ のサポート </li>  <li>結果セットが不要になったときに、接続とデータリーダーを破棄します。 </li>  </ul>  <p>このコードでは、前方読み取り専用カーソルを使用することのパフォーマンス上の利点があります。つまり、結合に必要なデータが SQL Azure からフェッチされないことを意味します。 </p>  <p><b>SQLAzureHelper</b>クラス<b></b>から結果セットを取得するコードは次のようになります。</p>  <pre class="csharpcode">var colorDataReader = SQLAzureHelper.ExecuteReader(      ConfigurationManager.ConnectionStrings[<span class="str">"ColorDatabase"</span>].ConnectionString,      sqlConnection =&gt;      {          SqlCommand sqlCommand =              <span class="kwrd">new</span> SqlCommand(<span class="str">"SELECT ColorName, CompanyId FROM Colors"</span>,                  sqlConnection);          <span class="kwrd">return</span> (sqlCommand.ExecuteReader());      });    var companyDataReader = SQLAzureHelper.ExecuteReader(      ConfigurationManager.ConnectionStrings[<span class="str">"CompanyDatabase"</span>].ConnectionString,      sqlConnection =&gt;      {          SqlCommand sqlCommand =              <span class="kwrd">new</span> SqlCommand(<span class="str">"SELECT CompanyId, CompanyName FROM Companies"</span>,                  sqlConnection);          <span class="kwrd">return</span> (sqlCommand.ExecuteReader());      });</pre>  <p>      </p>  <p>結果セットは、LINQ による結合として2つの SQL Server データベースから返されます。</p>  <h4>LINQ</h4>  <p>LINQ は、統合言語のクエリ、セット、および変換操作を含む .NET Framework の一連の拡張機能です。 C# および Visual Basic をクエリのネイティブ言語構文に拡張し、これらの機能を利用するためのクラスライブラリを提供します。 LINQ の詳細については、 <a href="https://msdn.microsoft.com/en-us/netframework/aa904594.aspx">こちら</a>を参照してください。 このコードでは、クライアント側のクエリプロセッサとして LINQ を使用して、2つの結果セットの結合とクエリを実行します。</p>  <pre class="csharpcode">var query =      from color <span class="kwrd">in</span> colorDataReader      join company <span class="kwrd">in</span> companyDataReader on          (Int32)color[<span class="str">"CompanyId"</span>] equals (Int32)company[<span class="str">"CompanyId"</span>]      select <span class="kwrd">new</span>      {          ColorName = (<span class="kwrd">string</span>)color[<span class="str">"ColorName"</span>],          CompanyName = (<span class="kwrd">string</span>)company[<span class="str">"CompanyName"</span>]      };    <span class="kwrd">foreach</span> (var combo <span class="kwrd">in</span> query)  {      Console.WriteLine(String.Format(<span class="str">"{0} - {1}"</span>, combo.CompanyName, combo.ColorName));  }</pre>  <p>    </p>  <p>このコードは、結果セットを取得し、 <b>CompanyId</b>に基づいて結合し、 <b>CompanyName</b> と <b>colorname</b>で構成される新しいクラスを選択します。</p>  <h4>接続と SQL Azure </h4>  <p>1つ注意すべき点は、前のブログ記事で説明した再試行シナリオについては、上記 &rsquo; のコードでは考慮されないことです。 これは、例を簡略化するために行われています。 再試行コードは、LINQ クエリを完全に再実行するために、 <b>SQLAzureHelper</b> クラスの外部にある必要があります。</p>  <p>次のブログ記事では、 <b>SQLAzureHelper</b> クラスを使用して行方向のパーティション分割を行う方法を説明します。 質問、懸念事項、コメントがありますか。 これらを下に投稿してください。</p>
