### YamlMime:Yaml
ms.openlocfilehash: a0f18515a4328d306b96e197c6225afb149701f8
ms.sourcegitcommit: d03bdc7fe5447adb6530886aab848b75fe8fa8ee
ms.translationtype: MT
ms.contentlocale: ja-JP
ms.lasthandoff: 03/11/2022
ms.locfileid: "139894728"
Slug: using-varnish-as-front-end-cache-for-azure-web-apps
Title: Azure Web Apps のフロント エンド キャッシュとしての機能のWeb Apps
Summary: "\"込み\" は、コンテンツが多い Web サイトと非常に使用できる API 向けに設計された Http アクセラレータです。 サンプル構成ファイルを使用して、 のインストールと構成を行う方法について説明します。"
Content: "<p><strong>\"込</strong> み\" は、コンテンツが多い Web サイトと非常に使用できる API 向けに設計された Http アクセラレータです。 Azure Web Apps の上で、Website サーバーを簡単に起動&#39;パフォーマンスを向上させることができます。 Web ページをキャッシュし、Web サイト ユーザーにコンテンツを迅速に提供できます。 このブログの投稿では、サンプル構成ファイルを使用して、 のインストールと構成を行う方法について説明します。</p>\n\n<h2>手順 1: Azure 上の Linux 仮想マシンを使用してクラウド サービスを作成する</h2>\n\n<p>まず、Linux 仮想マシンを使用してクラウド サービスをセットアップする必要があります。詳細については、 <a href=\"https://azure.microsoft.com/en-us/documentation/articles/virtual-machines-linux-tutorial/\">こちらをクリックしてください</a> 。 ほとんどの Web アプリでは、1 つの VM で十分です。 ただし、障害回復性のあるフロントエンド キャッシュが必要な場合は、クラウド サービスで少なくとも 2 つの仮想マシンを使用することをお勧めします。 このブログ記事では、Ubuntu LTS を使用します。</p>\n\n<h2>手順 2: すべての VM にをインストールする</h2>\n\n<p>Varnish-cache.org によって提供される Packages パッケージ <a href=\"https://varnish-cache.org\">を使用 varnish-cache.org</a>。サポートされているアーキテクチャは、Ubuntu LTS <em>用の amd64 </em>のみです。 その他の Linux ディストリビューションについては、インストール手順については、こちらを参照 <a href=\"https://www.varnish-cache.org/trac/wiki/Installation\">してください</a>。 Connect <a href=\"https://www.chiark.greenend.org.uk/~sgtatham/putty/download.html\">PuTTY</a> を使用して各仮想マシンに接続し、ルート ユーザーとして次の操作を行います。</p>\n\n<ul>\n    <li>セキュリティ キー [Debian と Ubuntu] を追加します。</li>\n</ul>\n\n<blockquote>\n<pre class=\"brush: csharp; auto-links: true; collapse: false; first-line: 1; gutter: true; html-script: false; light: false; ruler: false; smart-tabs: true; tab-size: 4; toolbar: true;\">\nwget \napt-key add GPG-key.txt</pre>\n</blockquote>\n\n<ul>\n    <li>パッケージ URL を apt-get リポジトリのソースリストに追加します。</li>\n</ul>\n\n<blockquote>\n<pre class=\"brush: csharp; auto-links: true; collapse: false; first-line: 1; gutter: true; html-script: false; light: false; ruler: false; smart-tabs: true; tab-size: 4; toolbar: true;\">\necho &quot;deb  precise varnish-3.0&quot; | sudo tee -a /etc/apt/sources.list</pre>\n</blockquote>\n\n<ul>\n    <li>パッケージ マネージャーを更新し、Cache Cache をダウンロード/インストールする</li>\n</ul>\n\n<blockquote>\n<pre>\napt-get update\napt-get install varnish\n</pre>\n</blockquote>\n\n<h2>手順 3: 大層構成</h2>\n\n<p>既定の設定は、80 (HTTP) または 443 (HTTPS の場合) の前面ポートで実行するように設定されていないので、Web アプリに必要なポートを使用するように変更する必要があります。 ポート 80 は、HTTP トラフィックの既定の TCP ポートです。 Web サイトで SSL を使用する予定の場合は、HTTPS トラフィックの既定のポートであるポート 443 も開く必要があります。</p>\n\n<p>Azure プレビュー ポータルにログインし、仮想マシンを選択<a href=\"https://azure.microsoft.com/en-us/documentation/articles/virtual-machines-set-up-endpoints/\"></a>して、ポート 80 (HTTP) または 443 (HTTPS) のエンドポイントを追加します。 これは、すべての仮想マシンに対して行う必要があります。 Ubuntu の構成ファイルは /&nbsp;<em>etc/default/is at the.</em> お気に入りのエディターを使用してファイルを編集します。このブログ記事「Im&rsquo; using nano editor」を参照してください。</p>\n\n<blockquote>\n<pre>\nnano /etc/default/varnish</pre>\n</blockquote>\n\n<p>ファイルには、いくつかの既定の設定があります。 下にスクロールすると、次のようなテキスト で始まる [Daemon デーモン] オプションを定義するテキスト DAEMON_OPTS表示されます。</p>\n\n<pre class=\"brush: csharp; auto-links: true; collapse: false; first-line: 1; gutter: true; html-script: false; light: false; ruler: false; smart-tabs: true; tab-size: 4; toolbar: true;\">\nDAEMON_OPTS=&quot;-a :6081 \\\n-T localhost:6082 \\\n-f /etc/varnish/default.vcl \\\n-S /etc/varnish/secret \\\n-s malloc,256m&quot;</pre>\n\n<p>ポートを 6081 から 80 (HTTP) または 443 (HTTPS) に変更します。</p>\n\n<pre class=\"brush: csharp; auto-links: true; collapse: false; first-line: 1; gutter: true; html-script: false; light: false; ruler: false; smart-tabs: true; tab-size: 4; toolbar: true;\">\nDAEMON_OPTS=&quot;-a :80 \\\n-T localhost:6082 \\\n-f /etc/varnish/default.vcl \\\n-S /etc/varnish/secret \\\n-s malloc,256m&quot;</pre>\n\n<p>既定では、ポート 80 または 443&nbsp; はファイアウォールによってブロックされます。そのため、 <em>iptables </em>コマンドを使用してポートを明示的に開く必要があります。</p>\n\n<p><strong>iptables の使用:</strong></p>\n\n<p>次のコマンドを実行することで、ルートはポート 80 を開き、ポート 80 経由で通信する web サイトWeb 閲覧を許可します。</p>\n\n<pre>\niptables -A INPUT -p tcp -m tcp --sport 80 -j ACCEPT\niptables -A OUTPUT -p tcp -m tcp --dport 80 -j ACCEPT\n</pre>\n\n<p>セキュリティで保護された Web サイトへのアクセスを許可するには、ポート 443 も開く必要があります。</p>\n\n<pre class=\"brush: csharp; auto-links: true; collapse: false; first-line: 1; gutter: true; html-script: false; light: false; ruler: false; smart-tabs: true; tab-size: 4; toolbar: true;\">\niptables -A INPUT -p tcp -m tcp --sport 443 -j ACCEPT \niptables -A OUTPUT -p tcp -m tcp --dport 443 -j ACCEPT \n</pre>\n\n<h2>手順 4: /etc/etc/ で既定の VCL ファイルを変更する</h2>\n\n<p>日本では、プログラムを実行するために、VCL 言語で記述された命令を含む .vcl ファイル (既定値は <em>/etc/ins/ as</em> <em>default.vcl</em>) を使用します。 これは、要求の処理方法とドキュメント キャッシュ システムの動作を定義するために使用されます。</p>\n\n<p>次のコマンドを使用して、エディターを再度開き、default.vcl の内容を変更します ( <em>/etc/分/ の</em>下)。</p>\n\n<pre>\nnano /etc/varnish/default.vcl</pre>\n\n<p>Azure Web アプリを参照する .host と .port を使用して、既定のバックエンドを作成します。&nbsp;基本的な VCL 構成ファイルのサンプルを次に示<em></em>します (my-azure-webapp.azurewebsites.net を実際の Web アプリケーションのカスタム ドメインまたはドメイン URL azurewebsite.net 置き換えてください)。 また、4.0 以上の機能を使用している場合は、ファイルの先頭に <em>vcl 4.0 </em>を含める必要があります。 ボタン 4.0 VCL のドキュメントの詳細については、こちらをクリック <a href=\"https://www.varnish-cache.org/docs/4.0/reference/vcl.html\">してください</a>。</p>\n\n<pre class=\"brush: csharp; auto-links: true; collapse: false; first-line: 1; gutter: true; html-script: false; light: false; ruler: false; smart-tabs: true; tab-size: 4; toolbar: true;\">\nvcl <span class=\"pl-c1\">4</span>.<span class=\"pl-c1\">0</span>;\nbackend default {\n\n      .host = &quot;my-azure-webapp.azurewebsites.net&quot;;\n      .port = &quot;80&quot;;\n      .connect_timeout = 600s;\n      .first_byte_timeout = 600s;\n      .between_bytes_timeout = 600s;\n}\nsub vcl_recv {\n     set req.http.host = &quot;my-azure-webapp.azurewebsites.net&quot;;\n     set req.backend = default;\n     return (lookup);\n}\n\n</pre>\n\n<h2>トラブルシューティング</h2>\n\n<p>このサーバーで問題が発生した場合&nbsp; は、次のコマンドを実行してログを表示できます。</p>\n\n<blockquote>\n<pre class=\"brush: csharp; auto-links: true; collapse: false; first-line: 1; gutter: true; html-script: false; light: false; ruler: false; smart-tabs: true; tab-size: 4; toolbar: true;\">\nvarnishlog cmd</pre>\n</blockquote>\n\n<p>サイトを再度参照し、VM のログを確認します。 詳細については、<a href=\"https://www.varnish-cache.org/docs/4.0/users-guide/troubleshooting.html\">こちら</a>をクリックしてください。</p>\n\n<h2>サンプル VCL 構成ファイル</h2>\n\n<ul>\n    <li><strong>WordPress</strong></li>\n</ul>\n\n<p>WordPress Web アプリを使用している場合は、ここを<a href=\"https://github.com/SunBuild/varnish-4.0-azure-vcl-template/blob/master/wordpress.vcl\"></a>クリックして WordPress 用のサンプルの [WordPress] 構成をダウンロードします。</p>\n\n<ul>\n    <li><strong>Drupal</strong></li>\n</ul>\n\n<p>Drupal Web アプリを使用している場合は、ここを<a href=\"https://github.com/SunBuild/varnish-4.0-azure-vcl-template/blob/master/drupal.vcl\"></a>クリックして Drupal 用のサンプルの [試用] 構成をダウンロードします。</p>"
