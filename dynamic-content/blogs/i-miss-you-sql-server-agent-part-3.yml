### YamlMime:Yaml
ms.openlocfilehash: 91a9a4f6083bd6c4aa90719ae29e52e95e9028f7
ms.sourcegitcommit: d03bdc7fe5447adb6530886aab848b75fe8fa8ee
ms.translationtype: MT
ms.contentlocale: ja-JP
ms.lasthandoff: 03/11/2022
ms.locfileid: "139891617"
Slug: i-miss-you-sql-server-agent-part-3
Title: 'エージェントの SQL Server を見逃しました: パート3'
Summary: '[この記事は SQL Azure チームによって提供されました。]現時点では、SQL Azure には SQL Server エージェントの概念がありません。 このブログシリーズでは、軽量の代替を作成しようとしています...'
Content: '<p>[この記事は SQL Azure チームによって提供されました。]</p><p>現時点では、SQL Azure には SQL Server エージェントの概念がありません。 このブログシリーズでは、Windows Azure worker ロールを使用して軽量の代用を作成しようとしています。 シリーズの最初のブログ記事では、Windows Azure worker ロールと SQL Server エージェントの違いについて説明し、Visual Studio といくつかのコードについて説明しました。 2番目のブログ記事では、1日に1回だけジョブを実行する worker ロールをコーディングする方法について説明しました。 このシリーズの3番目の投稿では、Windows Azure worker ロールのエラー処理について説明します。</p>  <h2>エラーの処理</h2>  <p>マルチスレッドアプリケーションをコーディングする場合、たとえば、2つ目のブログ投稿の例と同様に、何かを正常に実行する必要がある場合は、エラーケースを処理することが非常に重要です。 コードは、本当に完了したかどうか、またはエラーが発生して再起動する必要があるかどうかを知る必要があります。 ジョブを完了する前にワーカーロールがリサイクルされるとどうなりますか。 または、ワーカーロールが例外をスローしますか。 または、SQL Azure から一時的なエラーが発生しますか。 このコード例では、このような状況でジョブが完了しない場合、データベースには、開始実行日はなく、終了実行日がない行が存在し、完了を試行するワーカーロールはありません。 基本的には、 <b>Stopjob</b>ストアドプロシージャを呼び出さずに、 <b>startjob</b>ストアドプロシージャを呼び出します。 この行は、worker ロールがジョブを処理しているときと同じ状態であることに注意してください。2つの間で異なることを通知するには、ジョブの所要時間を想定します。</p>  <h2>トランザクション</h2>  <p>1つのデータベースで1つのトランザクションでジョブを完了できる場合は、Azure ワーカーロールの例外、transact-sql SQL のエラー、また SQL Azure は一時的なエラーを Windows に復旧するジョブ処理システムを作成できます。</p>  <p>SQL Azure がローカルトランザクション内の操作を完了しようとしている場合 (詳細については、トランザクションのブログの記事を参照)、クライアント側でエラーが発生した場合、SQL Azure によって接続が切断され、トランザクションのロールバックが強制的に行われます。 これは、Windows azure ワーカーロールが何らかの理由で失敗した場合、azure の障害 Windows、またはクライアント側の例外のいずれかによって、接続が終了し、ロールバックが発生します。</p>  <p>常に、次の2つの結果のいずれかを取得します。</p>  <ul>   <li>ジョブとトランザクションは正常に完了しました。 Windows Azure ワーカーロールから<b>stopjob</b>ストアドプロシージャを呼び出すことができます。 (後で説明した) <b>Stopjob</b> が成功するように特別な注意を払っている場合は、1日に1回の追跡を正常に管理できます。</li>    <li>Windows Azure ワーカーロールに例外またはエラーが発生したため、接続が閉じられ、ジョブ操作がロールバックされ、 <b>stopjob</b>が呼び出されません。</li> </ul>  <p>操作が半分 (SQL Azure トランザクション) に実行されている場合や、 <b>stopjob</b>が呼び出され、トランザクションがロールバックされた場合は、発生することはありません。 また、worker ロールの例外とワーカーロールの障害を同じカテゴリにまとめることができることも意味します。これは、同じエラー処理でそれらを処理することです。</p>  <h2>Self-Monitoring Worker ロール</h2>  <p>ジョブの完了を確認し、worker ロールがリサイクルされる可能性があることがわかっている場合は、完了していないワーカージョブをクリーンアップする必要があります。 これを行う最も簡単な方法は、ジョブが実行される可能性のある最大時間を想定して、完了していないジョブの実行時間が長いデータベース内のすべての行を削除することです。 行を削除すると、ワーカーロールによってジョブが再起動され、この時点でエラーが発生することなく完了します。</p>  <p>次に示すのは、1時間以上実行されているすべてのジョブをクリーンアップするクリーンアップの SQL コードです。</p>  <pre class="csharpcode"><span class="kwrd">CREATE</span> <span class="kwrd">PROC</span> CleanUp  <span class="kwrd">AS</span>  <span class="kwrd">DELETE</span> jobactivity   <span class="kwrd">WHERE</span> stop_execution_date <span class="kwrd">IS</span> <span class="kwrd">NULL</span> <span class="kwrd">AND</span> DATEDIFF(<span class="kwrd">minute</span>,start_execution_date,GetDate()) &gt; 60 </pre>      <p>これは、メインループで、ストアドプロシージャの形式で実行中のワーカーロールインスタンスから呼び出されます。</p>    <pre class="csharpcode"><span class="kwrd">public</span> <span class="kwrd">override</span> <span class="kwrd">void</span> Run()  {      <span class="rem">// This is a sample worker implementation. Replace with your logic.</span>      Trace.WriteLine(<span class="str">&quot;WorkerRole1 entry point called&quot;</span>, <span class="str">&quot;Information&quot;</span>);        <span class="kwrd">while</span> (<span class="kwrd">true</span>)      {          <span class="rem">// WWB: Clean Up The Unfinished Jobs</span>          CleanUp();            DateTime nextExecutionTime = <span class="kwrd">new</span> DateTime(              DateTime.UtcNow.Year,              DateTime. UtcNow.Month, DateTime. UtcNow.Day,              13, 0, 0);            <span class="kwrd">if</span> (DateTime. UtcNow &gt; nextExecutionTime)          {              <span class="rem">// WWB: After 1:00 pm, Try to Get a Job Id.</span>              Guid? jobId = StartJob(<span class="str">&quot;TestJob&quot;</span>);              <span class="kwrd">if</span> (jobId.HasValue)              {                  Trace.WriteLine(<span class="str">&quot;Working&quot;</span>, <span class="str">&quot;Information&quot;</span>);                    <span class="rem">// WWB: This Method Has the Code That Execute</span>                  <span class="rem">// A Stored Procedure, The actual Job</span>                  ExecuteTestJob();                    StopJob(jobId.Value);              }                <span class="rem">// WWB: Sleep For An Hour</span>              <span class="rem">// This Reduces The Calls To StartJob</span>              Thread.Sleep(3600000);          }          <span class="kwrd">else</span>          {              <span class="rem">// WWB: Check Every Minute</span>              Thread.Sleep(60000);          }      }  }</pre>      <p>複数の worker ロールインスタンスがある場合に、もう一方が実行中のジョブをクリーンアップすると、ジョブの実際の完了時間が想定よりも長くなる状況が発生します。</p>    <ul>    <li>Jobactivity 内の行は、クリーンアップ中に誤ってワーカーロールインスタンスによって削除されます。</li>      <li>他のワーカーロールインスタンスがジョブを完了すると、StopJob が呼び出され、行が存在しないため、エラーは発生しません。</li>      <li>その後、ジョブはもう一度完了します。これは、1日に1回の目標に違反します。 このような分散システムでは、1日1回保証する方法はありません。 保証できるのは、少なくとも1日に1回だけです (ベストエフォートを正確に1回)。</li>  </ul>    <p>成功させる最善の方法は、クリーンアップストアドプロシージャで最大のランタイムについての想定が非常に十分であることを確認することです。</p>    <p>また、時間を十分に注意してください。その日にジョブを開始しすぎて、最長実行時間が長すぎる場合、ジョブが失敗したときにジョブを完了するための時間が残っていない可能性があります。 たとえば、11:00 pm に45分のジョブを開始するジョブがある場合、 <b>クリーンアップ</b> ストアドプロシージャはその行を削除する必要がありますが、ジョブを再度処理するのに十分な時間はありません。</p>    <h2>SQL Azure での一時的なエラー</h2>    <p>SQL Azure の一時的なエラーは、SQL Azure フェールオーバーが発生したときに発生するエラーです。ただし、同じ呼び出しで後でエラーが発生することはありません。 詳細については、こちらのブログ記事をご覧ください。 ジョブが正常に完了した場合は、 <b>Stopjob</b> ストアドプロシージャを正常に呼び出すことが非常に重要です。 このため、 <b>Stopjob</b> ストアドプロシージャを呼び出すときに、ブログの投稿で説明されている再試行シナリオを確実に実行する必要があります。 そのような場合、SQL Azure するその他のすべてのクエリでは、一時的なエラーをチェックする必要はありません。エラーが発生すると Windows Azure worker ロールインスタンスがリサイクルされ、クリーンアップ後にジョブが再実行されるためです。</p>    <h2>[エラー報告]</h2>    <p>これらのブログ投稿では、いくつかのエラー処理について触れています。ただし、エラー報告については説明していません。 ジョブが失敗したタイミングを知ることはできませんか。 行をクリーンアップする必要がある場合は、 これは、Windows Azure 診断で行うことができます。詳細については、<a href="https://msdn.microsoft.com/en-us/library/ee758705.aspx">こちら</a>を参照してください。</p>    <h2>まとめ</h2>    <p>このシリーズを校正し、すべての部分をどのようにまとめるかについてアイデアをマルクスに感謝したいと思います。 Windows Azure に重点を置いたブログがここにあります。 twitter について<a href="https://twitter.com/smarx">は、こちら</a>を参照してください。 </p>    <p>このブログシリーズでは、SQL Server エージェントのすべての機能を置き換えようとしていません。私の目標は、Windows Azure ワーカーロールを使用して基本的な SQL Server エージェントの機能をレプリケートするための簡単なコードを紹介することでした。</p>    <p>同じことを実現するためのより良い方法はありますか。 以下のコメントに投稿してください。 質問、懸念事項、コメントがありますか。 これらを下に投稿してください。</p>'
