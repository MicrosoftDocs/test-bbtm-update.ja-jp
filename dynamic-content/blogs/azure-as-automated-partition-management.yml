### YamlMime:Yaml
ms.openlocfilehash: b1e3b7854a94be09a9ca0ff737eeb1b9f0695c38
ms.sourcegitcommit: d03bdc7fe5447adb6530886aab848b75fe8fa8ee
ms.translationtype: MT
ms.contentlocale: ja-JP
ms.lasthandoff: 03/11/2022
ms.locfileid: "139894572"
Slug: azure-as-automated-partition-management
Title: Azure Analysis Services によるパーティション管理の自動化
Summary: パーティション管理の自動化のためのホワイトペーパー & コードサンプル
Content: >-
  <p>Azure Analysis Services テーブルモデルでは、クエリパフォーマンスを最適化するために、圧縮されたメモリ内キャッシュにデータを格納できます。 これにより、大規模なデータセットに対するユーザーの対話性が高速になります。</p>


  <p>通常、大規模なデータセットでは、データ読み込みプロセスを高速化および最適化するためにテーブルのパーティション分割が必要です。 パーティション分割によって増分読み込みが可能になり、並列処理が増加し、メモリの消費量が減少します。 <a href="https://msdn.microsoft.com/en-us/library/microsoft.analysisservices.tabular.aspx">表形式オブジェクトモデル</a>(TOM) は、パーティションを作成および管理するための API として機能します。</p>


  <p>Analysis Services 表形式モデルの自動パーティション管理に関する <a href="https://github.com/Microsoft/Analysis-Services/blob/master/AsPartitionProcessing/Automated%20Partition%20Management%20for%20Analysis%20Services%20Tabular%20Models.pdf" target="_blank">ホワイトペーパー</a> を参照してください。 ここでは、最小限のコード変更で <a href="https://github.com/Microsoft/Analysis-Services/tree/master/AsPartitionProcessing">Aspartitionprocessing</a> TOM コードサンプルを使用する方法について説明します。 これは、汎用的な構成を重視することを目的としています。</p>


  <p>このサンプルは、Azure Analysis Services と互換性があります。 次の図は、アーキテクチャの例を示しています。</p>


  <p><a href="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/7f7d9a1c-b43c-4dab-b1cb-72f4833cc4df.png"><img alt="Azure AS Architecture" border="0" height="356" src="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/368408d7-05b5-4c4b-93cf-5b480a5c336d.png" style="border-top: 0px; border-right: 0px; background-image: none; border-bottom: 0px; padding-top: 0px; padding-left: 0px; border-left: 0px; display: inline; padding-right: 0px" title="アーキテクチャとしての Azure" width="743"></a></p>


  <p><a href="https://azure.microsoft.com/en-us/services/sql-database/">Azure SQL Database</a>は、構成およびログデータベースに使用されます。</p>


  <p>実行には<a href="https://azure.microsoft.com/en-us/services/functions/">Azure Functions</a>が使用され、さまざまな方法でトリガーできます。 次の一覧は、Azure Functions で使用できる多くのオプションの一部を示しています。</p>


  <ul>
   <li>タイマー関数の CRON 式を使用してスケジュールされます。 この場合、個別のスケジュールシステムを設定する必要はありません。</li>
   <li>Webhook 関数に対して webhook 要求を使用するか、HttpTrigger 関数の HTTP 要求を使用します。 これにより、URL を呼び出すことができる既存のスケジュールシステムとの統合が可能になります。</li>
   <li>Azure Functions の組み込み統合ポイントを使用して Azure キューからトリガーされます。</li>
  </ul>


  <p>Marco Russo (SQLBI) に感謝し、Anton (Opifex ソリューション) によってホワイトペーパーとコードサンプルに貢献しました。</p>
