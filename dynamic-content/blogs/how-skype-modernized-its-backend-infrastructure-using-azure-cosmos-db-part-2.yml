### YamlMime:Yaml
ms.openlocfilehash: b123ceb410c9c35b98cbaaac6215a3b4f743a545
ms.sourcegitcommit: d03bdc7fe5447adb6530886aab848b75fe8fa8ee
ms.translationtype: MT
ms.contentlocale: ja-JP
ms.lasthandoff: 03/11/2022
ms.locfileid: "139894370"
Slug: how-skype-modernized-its-backend-infrastructure-using-azure-cosmos-db-part-2
Title: Azure Cosmos DB を使用したバックエンドインフラストラクチャの最新の Skype 方法-パート2
Summary: Skype は、Microsoft のグローバル分散 NoSQL データベースサービスである Azure Cosmos DB に最適です。 これは、新しい People Core サービス (pc) に必要なすべての Skype をもたらしました。これには、スループットとストレージのターンキーのグローバルな分散と柔軟なスケーリングが含まれます。これは、グローバルな規模で非常に短い待機時間を必要とする Skype のような分散アプリの理想的な基盤となります。
Content: >-
  <p><em>これは、実際のニーズを満たすために Azure Cosmos DB をどのように使用しているか、およびそれに加えた違い &rsquo; に関する3部構成のブログ投稿シリーズです。<a href="https://azure.microsoft.com/en-us/blog/how-skype-modernized-its-backend-infrastructure-using-azure-cosmos-db-part-1/">第1部</a>では、行動を取るために直面した Skype の課題について説明しました。この投稿 (第2部) では、バックエンドインフラストラクチャを最新化するために Azure Cosmos DB を実装 Skype 方法について説明します。<a href="https://azure.microsoft.com/en-us/blog/how-skype-modernized-its-backend-infrastructure-using-azure-cosmos-db-part-3/">パート 3</a>では、これらの作業の結果につい &rsquo; て説明します。</em></p>


  <p><strong>注:</strong> 斜体/かっこ内のコメントは&#39;s です。</p>


  <h2>解決策</h2>


  <h3>ユーザーに近い場所にデータを配置する</h3>


  <p>Skype は、Microsoft のグローバル分散 NoSQL データベースサービスである Azure Cosmos DB に最適です。 これは、新しい People Core サービス (pc) に必要なすべての Skype をもたらしました。これには、スループットとストレージのターンキーのグローバルな分散と柔軟なスケーリングが含まれます。これは、グローバルな規模で非常に短い待機時間を必要とする Skype のような分散アプリの理想的な基盤となります。</p>


  <h3>初期デザインの決定</h3>


  <p>プロトタイプは2017年5月に開始されました。 チームによって行われたいくつかの初期の選択には、次のようなものがあります。</p>


  <ul>
   <li><strong>Geo レプリケーション:</strong>チームは、1つの<a href="https://azure.microsoft.com/en-us/global-infrastructure/regions/" target="_blank">azure リージョン</a>に Azure Cosmos DB をデプロイし、その<a href="https://docs.microsoft.com/en-us/azure/cosmos-db/distribute-data-globally" target="_blank">プッシュボタンの geo レプリケーション</a>を使用して、合計7つの azure リージョンにレプリケートしました。これは、3つの北米、2つのヨーロッパ、およびアジア太平洋 (apac) リージョンの2つになります。 ただし、この後では、これら3つの地域で1つの存在がすべての Sla を満たすのに十分であるということがわかりました。</li>
   <li><strong>一貫性レベル:</strong>geo レプリケーションの設定では、チームは<a href="https://docs.microsoft.com/en-us/azure/cosmos-db/consistency-levels" target="_blank">Azure Cosmos DB でサポートされている5つの整合性レベル</a>の間でセッションの整合性を選択します。 <em>(セッションの一貫性は、単調な読み取り、単調な書き込み、および読み取り専用の書き込みを保証するため、デバイスまたはユーザーセッションが関係するシナリオに最適です)。</em></li>
   <li>パーティション<strong>分割:</strong> <a href="https://docs.microsoft.com/en-us/azure/cosmos-db/partition-data" target="_blank">パーティションキー</a>として UserID を選択する Skype、各ユーザーのすべてのデータが同じ物理パーティションに存在することを保証します。 <em>(Azure Cosmos DB を使用する場合、各コレクションには、データの論理パーティションとして機能するパーティションキーが必要です。また、物理パーティションにまたがって、内部的に透過的に分散するための自然な境界に Azure Cosmos DB を提供します)。</em></li>
  </ul>


  <h3>Azure Cosmos DB change feed に基づくイベントドリブンアーキテクチャ</h3>


  <p>新しい pc サービスを構築するために、Skype 開発者は、Azure Cosmos DB での<a href="https://docs.microsoft.com/en-us/azure/cosmos-db/change-feed" target="_blank">change feed のサポート</a>に基づいて、マイクロサービスのイベントドリブンアーキテクチャを実装しています。 Change feed は、Azure Cosmos DB コンテナーをリッスン &rdquo; し、変更されたドキュメントの並べ替えられたリストを変更した順に出力することによって &ldquo; 機能します。 変更は保持され、非同期的に増分処理できます。また、出力を 1 つ以上のコンシューマーに分散させて並列処理することもできます。 <em>(Azure Cosmos DB の Change Feed は、既定ではすべてのアカウントに対して有効になっており、追加のコストは発生しません。プロビジョニングされた RU/s を使用して、Azure Cosmos DB の他の操作と同じようにフィードから読み取ることができます)。</em></p>


  <p>&ldquo;一般に、イベントドリブンアーキテクチャは Kafka、Event Hub、またはその他のイベントソースを &rdquo; 使用します。 Kafka について説明します。 &ldquo;ただし、Azure Cosmos DB を使用すると、変更フィードには、アーキテクチャ全体を簡略化した組み込みのイベントソースが用意されています。&rdquo;</p>


  <p>ソリューション &rsquo; の監査履歴の要件を満たすために、開発者は <a href="https://docs.microsoft.com/en-us/azure/architecture/patterns/event-sourcing" target="_blank">キャプチャ状態パターンを使用してイベントソーシング</a>を実装しました。 このパターンでは、ドメインにデータの現在の状態だけを格納するのではなく、追加専用のストアを使用して、データに対して行われた一連のアクション ( &ldquo; パターンのイベントソーシング &rdquo; 部分) と、変換状態 ( &ldquo; キャプチャ状態 &rdquo; ) を記録します。 追加専用のストアは、レコードのシステムとして機能し、ドメインオブジェクトを具体化するために使用できます。 また、トランザクションデータの一貫性を確保し、補正アクションを可能にする完全な監査証跡と履歴を保持します。</p>


  <h3>最適なパフォーマンスを得るために、読み取りパスと書き込みパス、およびデータモデルを分離する</h3>


  <p>開発者は、 <a href="https://docs.microsoft.com/en-us/azure/architecture/patterns/cqrs" target="_blank">コマンドクエリ責務分離 (CQRS) パターン</a> をイベントソーシングパターンと共に使用して、個別の書き込みおよび読み取りパス、インターフェイス、およびデータモデルを実装しています。それぞれの関連タスクに合わせて調整されています。 &ldquo;CQRS をイベントソーシングパターンと共に使用すると、イベントのストアは書き込みモデルになります。これは、発生した内容や変更されたこと、意図した内容、および発行者であるユーザーを取得するための、 &rdquo; Kaduk についての情報の正式なソースです。 &ldquo;これらはすべて、変更されたドメイン集計 &mdash; ユーザー、個人、およびグループごとに1つの JSON ドキュメントに格納されます。 読み取りモデルは、クエリ用に最適化され、2つ目の小さな JSON ドキュメントに格納される具体化されたビューを提供します。 これは、Azure Cosmos DB ドキュメント形式によって有効になり、1つのコレクション内で異なるデータ構造を持つさまざまな種類のドキュメントを格納できるようになります。 &rdquo;CQRS と共に<a href="https://docs.microsoft.com/en-us/azure/architecture/patterns/cqrs#event-sourcing-and-cqrs" target="_blank">イベントソーシングを使用する方法</a>の詳細については、こちらを参照してください。</p>


  <h3>カスタム変更フィードの処理</h3>


  <p>Azure Functions を使用して変更フィードの処理を処理する代わりに、開発チームは、 <a href="https://docs.microsoft.com/en-us/azure/cosmos-db/change-feed-processor" target="_blank">Azure Cosmos DB change feed processor ライブラリ</a> &mdash; を使用して独自の変更フィード処理を実装することを選択しました。このコードは Azure Functions によって内部的に使用されます。 これにより、開発者は、キューに対する再試行を実装する機能、配信不能イベントのサポート、さらに詳細な監視など、変更フィードの処理をよりきめ細かく制御できるようになりました。 カスタム変更フィードプロセッサは、PaaS v1 &rdquo; モデルの &ldquo; Azure Virtual Machines (vm) 上で実行されます。</p>


  <p>&ldquo;Change feed processor ライブラリを使用して、すべての Sla が満たされていることを保証する優れた制御を提供し &rdquo; ました。 Kaduk について説明します。 &ldquo;たとえば、Azure Functions では、関数は失敗するか、再試行の間、スピンと待機を行うことができます。 スピンアンド待機を行うことはでき &rsquo; ません。そのため、変更フィードプロセッサライブラリを使用して定期的に再試行するキューを実装し、1日または2日後に失敗した場合は、確認のために配信不能メッセージコレクション &rsquo; に &lsquo; 要求を送信しました。 また、要求の処理速度、処理されているノード、各パーティションの残存作業の推定など、広範な監視 &mdash; も実装しまし<em>た (すべての機能の詳細につい</em>ては、 <a href="https://blogs.msdn.microsoft.com/fkaduk/tag/changefeed/" target="_blank"><em>Frantisek &rsquo; s のブログ記事</em></a>を<em>参照して</em>ください)。 &rdquo;</p>


  <h3>クロスパーティショントランザクションと他のサービスとの統合</h3>


  <p>Change feed では、複数のユーザーのデータにまたがる複数のパーティションにまたがるトランザクションなど、バックグラウンドの後処理を実装するための基盤も提供されています。 John がメッセージの送信をブロックした場合の例を次に示します。 システムは、ユーザー John からのコマンドを受け入れてユーザーのデータをブロックします。このとき、要求が検証され、適切なハンドラーにディスパッチされます。これにより、イベント履歴が保存され、ユーザー John のクエリ可能データが更新されます。 クロスパーティショントランザクションを担当するポストバックは、変更フィードを監視し、John によってブロックされた情報を、逆ブロックとして (別のパーティションに存在する可能性がある) データにコピーします。 この情報は、ピア間のリレーションシップを決定するために使用されます。 (<em>このパターンの詳細については、「分散トランザクションを &ldquo; </em><a href="https://www-db.cs.wisc.edu/cidr/cidr2007/papers/cidr07p15.pdf" target="_blank"><em>超えるライフサイクル: アポストロフィ状態 &rsquo; の意見</em></a>」を参照<em>してください)。 &rdquo; </em></p>


  <p>同様に、開発者は change feed を使用して、通知、グラフ検索、チャットなど、他のサービスとの統合をサポートしています。 イベントは、実行中のすべての変更フィードプロセッサによってバックグラウンドで受信されます。そのうちの1つは、パブリックスキーマを使用して、Azure Event Hub などの外部イベントコンシューマーに通知を発行する役割を担います。</p>


  <p><a href="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/c7ea79b6-8a3d-4d11-90c9-4a77090404e7.png"><img alt="Azure Cosmos DB flowchart" border="0" height="406" src="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/30f41c76-fbac-40e0-9511-fedb034505b6.png" style="border: 0px currentcolor; border-image: none; margin-right: auto; margin-left: auto; float: none; display: block; background-image: none;" title="Azure Cosmos DB フローチャート" width="556"></a></p>


  <h3>ユーザーデータの移行</h3>


  <p>SQL Server から Azure Cosmos DB へのユーザーデータの移行を容易にするために、開発者は、以前の pc サービスのすべてのユーザーデータを反復処理するサービスを作成しました。</p>


  <ul>
   <li>SQL Server のデータに対してクエリを実行し、Azure Cosmos DB の新しいデータモデルに変換します。</li>
   <li>Azure Cosmos DB にデータを挿入し、新しいデータベースでユーザー &rsquo; のアドレス帳を "マスター" としてマークします。</li>
   <li>各ユーザーの移行ステータスの参照テーブルを更新します。</li>
  </ul>


  <p>開発者は、ユーザーにプロセス全体をシームレスにするために、ユーザーのルックアップテーブルの移行状態をチェックし、適切なデータストア (古いまたは新規) に要求をルーティングするプロキシサービスも実装しました。 すべてのユーザーが移行された後、古い PC サービス、参照テーブル、および一時プロキシサービスが運用環境から削除されました。</p>


  <p><a href="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/f85fb594-b18a-4834-810d-22e665b83779.png"><img alt="Migration for production flowchart" border="0" height="419" src="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/f8e1f1ad-6544-47d8-b750-89d6a439a5da.png" style="border: 0px currentcolor; border-image: none; margin-right: auto; margin-left: auto; float: none; display: block; background-image: none;" title="運用フローチャートの移行" width="651"></a></p>


  <p>運用ユーザー向けの移行は2017年10月に開始され、約2か月かかりました。 現在、すべての要求は Azure Cosmos DB によって処理されます。これには、レプリケートされた各リージョンに 140 tb を超えるデータが含まれます。 新しい PC サービスでは、最大15000の読み取りと1秒あたりの6000書き込みが処理されます。 プロセスは、RU の使用状況が必要に応じて割り当てられた RU をスケールすることを監視します。</p>


  <p><em>Azure Cosmos DB の Skype &rsquo; の実装に起因する結果については、<a href="https://azure.microsoft.com/en-us/blog/how-skype-modernized-its-backend-infrastructure-using-azure-cosmos-db-part-3/">パート3に進んで</a>ください。</em></p>
