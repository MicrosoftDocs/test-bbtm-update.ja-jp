### YamlMime:Yaml
ms.openlocfilehash: 8c1cfd3a536d4078c04b9ccf7ec18638ca2bfa8e
ms.sourcegitcommit: d03bdc7fe5447adb6530886aab848b75fe8fa8ee
ms.translationtype: MT
ms.contentlocale: ja-JP
ms.lasthandoff: 03/11/2022
ms.locfileid: "139889349"
Slug: 3-best-practices-for-windows-azure-sql-reporting-development
Title: Azure Windows開発SQL Reporting 3 つのベスト プラクティス
Summary: 編集者のメモ:&nbsp;このブログ記事は、David Magar、&nbsp;Program Manager、Azure WindowsにSQL Reporting。  既存の&rsquo;プロジェクトを作成してプッシュReporting Servicesを取りたがっていますが...
Content: "<p><strong>エディターのメモ:</strong>&nbsp;このブログ記事は、Azure Windows David Magar,Program&nbsp; Manager SQL Reporting。</p>  <p>既存の&rsquo;プロジェクトを使用してReporting Servicesしてクラウドにプッシュする必要は生じがちですが、本当にそうすべきではないの&rsquo;です。 ローカル サーバーで実行できるレポートは、レポート サーバーに配置した後にパフォーマンスがSQL Reporting場合があります。</p>  <p>幸いにも、ほとんどの場合、実行時間の短縮されたレポートを生成する 3 つの簡単な変更があります。 このブログ記事では、それぞれについて詳しく説明しています。</p>  <h4>ベスト プラクティス #1: ReportViewer コントロールを再構成する</h4>  <p>ASP.Net ページまたは Windows フォーム アプリケーションで ReportViewer コントロール (RVC) を使用している場合は、次の構成を変更する必要があります。</p>  <ol>  <li>WebRequest を呼び出して、アプリケーションの初期化で既定の <span style=\"font-family: 'courier new', courier;\"><span style=\"color: #00ccff;\">プロキシを無効にします</span>。DefaultWebProxy = <span style=\"color: #0000ff;\">null</span></span></li>  <li><span style=\"font-family: 'courier new', courier;\">SetParameter ではなく SetParameters</span> Windows呼び出SQL Reporting、Azure のすべてのレポート パラメーターを一<span style=\"font-family: 'courier new', courier;\">度に設定します。</span> パラメーターを設定すると、Azure Windowsデータ層SQL Reporting呼び出しが行Windows Azure SQL Database。 読み取り/書き込みサイクルを減らすには、いくつかの呼び出しではなく 1 つの呼び出しを発行すると、大きな問題が生じ得る可能性があります。</li>  <li>ログオン呼び出&rsquo;しを行う代わりに認証に Cookie を使用するアプリケーションのRVC を構成します。 これにより、ユーザーまたはアプリケーションは 1 回ログインし、後で Cookie を返してレンダリングを高速化します。 レポート サーバーでは、過去 60 分以内に作成された Cookie しか許可されません。そのため、アプリケーションの設計時にこの事実を考慮する必要があります。 Cookie 認証を実現する方法については、こちらを参照してください。</li>  </ol>  <h4>ベスト プラクティス #2: 同じデータ センター内の Web アプリケーションとデータベースを共同配置する。</h4>  <p>ReportViewer コントロールは、レポート サーバーと頻繁に通信します。 この動作&rsquo;を排除できませんが、Azure アプリケーションとレポート サーバーを同じデータ センターにWindowsすることで、そのコストを最小限に抑えてください。</p>  <p>Azure データベースをデプロイする場所を選択する場合も、同じWindowsがSQLされます。 1 つのクエリに送信SQL Database、一定のオーバーヘッドが発生します。 認証、承認、要求の処理などはすべて、初期接続とページレンダリングの間の遅延に寄与するアクションです。 データベースを他のアプリケーション コンポーネントと同じデータ センターに置くことで、これらのアクションの実行時間が短縮され、レンダリング時間が大幅に短縮され、パフォーマンスが向上します。</p>  <p>データベース、アプリケーション、およびレポート サーバーの場所を検出し、各レポートレンダリングのデータを取り込むのにかかる時間を正確に把握できます。このブログ記事は、David Bahat 氏のチームから読み取っています。</p>  <h4>ベスト プラクティス #3: 効率的なクエリを記述する</h4>  <p>レポートを作成する場合は、レポートの視覚化に必要なデータのみを取り込むクエリを設定します (&ldquo;特に、クエリのデザイン時に 、select *&rdquo; type of SQL Statements は避けます)。 このベスト プラクティスにより、可能な限り最速のレンダリングのためにレポートが最適化されます。</p>  <p>結論として、これらの 3 つの提案が、SQL Reporting で動作するアプリケーションで発生する可能性があるパフォーマンスの問題の一部を解決するのに役立つことを願っています。 以下のフィードバックとコメントをお待ちしております。</p>  <p>よろしくお願い申し上げます。<br>David Magar<br>Program Manager、Azure Windows SQL Reporting</p>"
