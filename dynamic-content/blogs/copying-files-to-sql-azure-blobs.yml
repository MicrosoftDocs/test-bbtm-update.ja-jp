### YamlMime:Yaml
ms.openlocfilehash: 56448bcf9909ae79716c23fee8778dfe2cbe20b5
ms.sourcegitcommit: d03bdc7fe5447adb6530886aab848b75fe8fa8ee
ms.translationtype: MT
ms.contentlocale: ja-JP
ms.lasthandoff: 03/11/2022
ms.locfileid: "139889522"
Slug: copying-files-to-sql-azure-blobs
Title: BLOB へのファイルSQL Azureコピー
Summary: '[この記事は、チームによってSQL Azureされました。](コマンド ラインから実行する) 単純なコンソール アプリケーションを作成して、複数の BLOB をファイルからファイルにアップロードSQL Azure。 この記事では、...'
Content: '<p>[この記事は、チームによってSQL Azureされました。]</p><p>(コマンド ラインから実行する) 単純なコンソール アプリケーションを作成して、複数の BLOB をファイルからファイルにアップロードSQL Azure。 この記事では、その動作について説明し、必要に応じてコードを変更する場合に備え、コンソール アプリケーションとソース コードの完全な Visual Studio ソリューションを提供します。 これは、SqlStream クラスを導入した、この以前のブログ記事 <b>の拡張機能</b> です。</p>  <p>一部のシナリオでは、デスクトップから <b>varbinary(max)</b> 列にSQL Azureイメージを直接デプロイしたい場合があります。 これを行うには、Microsoft SSIS や BCP ユーティリティのようなツールを使用します。 ただし、イメージのディレクトリがある場合、このツールを使用すると、ストリーミング形式ですべて SQL Azure に直接アップロードし、イメージを SQL Azure に個別に書き込まれたブロックに分割できます。 </p>  <p>&rsquo;イメージである必要はない。 BlobCopy を使用すると、ファイルに格納できる任意のデータをデータ列に直接SQL Azureできます。</p>  <p>このツールがどのように使用されるのかについて、多くの前提を作成しました。これにより、サンプルとコードをシンプルに保つ利点が得ました。 想定がツールの使い方と一致しない可能性があります。そのため、必要に応じて調整できるようコードを含めしました。 必要な操作&rsquo;を行う方法を理解できなかった場合は、以下のコメントを投稿してください。 また、学習曲線を低く保つために、BCP パラメーターの多くをエミュレートしました。</p>  <p>次に示すのは、私が行った前提です。</p>  <ul>  <li>ファイルのディレクトリがあります。各ファイルはデータベース内の行です。 </li>  <li>更新する行にのみ、ディレクトリ内にファイルが含まれます。 </li>  <li>BlobCopy の実行時に、ディレクトリ内のすべてのファイルがアップロードされます。 </li>  <li>拡張子のない各ファイルの名前は、BLOB が書き込まれるデータベース内の主キーを表します。 たとえば、AdventureWorksLTAZ2008R2 データベースと SalesLT.Product テーブルでは、884.jpg ファイルは ProductId = 884 になります。 </li>  <li>一度に 8192 バイトのデータがアップロードされます。 これは、トランザクションあたりのブロック サイズです。 </li>  </ul>  <p>注意する必要がある点の 1 つは、ストリーム中の障害によって BLOB がデータベース内の不明な状態のままである点です。 各書き込みはトランザクションですが、BLOB は複数のブロックと複数の書き込みに分割されます。 複数の書き込みで成功し、プロセスを終了するエラーが発生した場合、BLOB はデータベースに部分的にのみ書き込まれる可能性があります。</p>  <h4>サンプル</h4>  <p>このサンプル コードでは、AdventureWorksLTAZ2008R2 データベースを使用し、ThumbNailPhoto 列の SalesLT.Product テーブルに C:\My Projects\Sql Azure Blog\BlobCopy\Test Files のすべてのファイルを書き込みます。</p>  <p><em>BlobCopy.exe AdventureWorksLTAZ2008R2.SalesLT.Product -S tcp:yourServer.database.windows.net -U yourlogin -P yourPassword -K ProductId -B ThumbNailPhoto -F "C:\My Projects\Sql Azure Blog\BlobCopy\Test Files"</em></p>  <h4>引数</h4>  <blockquote>  <p><strong><em>BlobCopy database_name.schema.table_name -S server_name&ndash; U &ndash;login_id P password -K &ndash;primary_key B &ndash;blob_column F folder_of_files</em></strong></p>  </blockquote>  <p>BCP ユーティリティと同様に、最初の引数は、ブログを記述するコピー先のデータベース、スキーマ、テーブルです。</p>  <p><b>-S </b>server_name: 接続SQL Azureサーバーを指定します。 </p>  <p><b>-U </b>login_id: 接続に使用するログイン ID を指定SQL Azure。</p>  <p><b>-P </b>password: ログイン ID のパスワードを指定します。 このオプションを使用しない場合、BlobCopy では既定のパスワード (NULL) が使用されます。</p>  <p><b>-K primary_key </b>: BlobCopy が BLOB を書き込む行を識別できるよう、テーブルの主キー列を指定します。 これは列名です。主キーの値はファイル名から取得されます。</p>  <p><b>-B blob_column</b> : BLOB を書き込む列を指定します。</p>  <p><b>-F</b> folder_of_files: BLOB がファイルとして格納されているローカル コンピューターのフォルダーの場所。 アップロードする行ごとに 1 つのファイル。 ファイル名は、行を識別する主キーの値です。</p>  <h4>追加</h4>  <p>これらのコードへの追加は、リーダーに残されている場合に役立ちます。</p>  <ul>  <li>別のディレクトリへのアップロードが成功した後、ファイルを移動します。</li>  <li>各トランザクションでコピーされたバイトの量を、コマンド引数によって決定できます。</li>  <li>このブログ記事で説明したように、一時的な再試行を処理します。</li>  </ul>  <h4>まとめ</h4>  <p>質問、懸念事項、コメントはありますか? 以下に投稿すると、対処を試みることができます。</p>'
