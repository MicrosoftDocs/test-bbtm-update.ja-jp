### YamlMime:Yaml
ms.openlocfilehash: 3a0033cfe8e9b43cbc931fc8f67ccdfa3bd75db3
ms.sourcegitcommit: d03bdc7fe5447adb6530886aab848b75fe8fa8ee
ms.translationtype: MT
ms.contentlocale: ja-JP
ms.lasthandoff: 03/11/2022
ms.locfileid: "139891433"
Slug: now-available-the-service-bus-september-2011-release
Title: '利用可能になりました: Service Bus 2011 年9月リリース'
Summary: 今週のビルドで発表されたように、2011年9月の Service Bus リリースが利用可能になりました。 このサービスは2010年1月に開始されたため、運用環境では最大の機能更新プログラムです。
Content: '<p>今週の<a target="_blank" href="https://www.buildwindows.com/">ビルド</a>で発表されたように、2011年9月の Service Bus リリースが利用可能になりました。 これは、サービスが2010年1月に開始されてから、運用環境で最大の機能を更新したものです。</p>  <p>Service Bus は、セキュリティで保護された接続とメッセージング機能を提供します。これにより、オンプレミスとクラウドの両方にわたるハイブリッドアプリケーションだけでなく、クラウド内で分散した疎結合アプリケーションを構築できます。 これにより、さまざまな通信およびメッセージングプロトコルとパターンが可能になり、開発者が配信保証、信頼性の高いメッセージング、およびスケールについて心配する必要がなくなります。 Service Bus の詳細については、こちらを参照してください。</p>  <p>このリリースでは、キュー、トピック、サブスクリプション、ルールなどの機能をサポートすることによって、pub/sub メッセージングを向上させる Service Bus の機能強化が導入されました。 このリリースでは、次のような Windows Azure platform でも新しいシナリオが可能になります。</p>  <ul>  <li>非同期クラウドイベント &ndash; イベント通知を常時接続しているクライアント (電話、リモートワーカー、キオスクなど) に配布します。</li>  <li>イベントドリブンのサービス指向アーキテクチャ (SOA): 時間の経過と共に簡単に進化できる疎結合システムを構築します。 &ndash;</li>  <li>拡張性と回復性に優れたアプリケーションを構築するための高度な Intra-App メッセージング &ndash; 負荷平準化と負荷分散</li>  </ul>  <p><a target="_blank" href="https://blogs.msdn.com/b/appfabric/archive/2011/05/17/an-introduction-to-service-bus-queues.aspx">キュー</a>および<a target="_blank" href="https://blogs.msdn.com/b/appfabric/archive/2011/05/25/an-introduction-to-service-bus-topics.aspx">トピック</a>で具体化された新しいメッセージング機能は、最初は2011年 5<a target="_blank" href="https://blogs.msdn.com/b/appfabric/archive/2011/05/13/introducing-the-windows-azure-appfabric-service-bus-may-2011-ctp.aspx">月の CTP で</a>サービスのプレビューとして利用可能になり、現在は Service Bus 運用環境にあります。 &nbsp;新しいメッセージング機能の詳細な機能のいくつかには、セッションの処理状態を追跡するファシリティと共にセッションの固有のサポートが含まれていましたが、前の導入プログラムに従っている &rsquo; 顧客プロジェクトのニーズ、および Service Bus について長期的なアーキテクチャの内容を実行しているその他の Microsoft 開発作業について直接通知されて</p>  <h3>変更内容</h3>  <p>ドキュメントを参照してサンプルを調べると、開発者は、新しいメッセージング機能の API が、お客様からのフィードバックに応じて 2011 CTP リリース &ndash; から大幅に変更されたことを確認できます。 api 変更の主な目的の1つは、api を効率化し、新しい Service Bus 機能を使用するために必要なコード行の数を減らすことでした。ここ &rsquo; では、次の例をいくつか紹介します。</p>  <p>もう1つの目的は、API のランタイム部分をより堅牢 &ndash; な例にすることでした。開発者は、CTP で明示的にネットワーク接続が切断されたことが原因で例外を処理し、エラー &rsquo; が発生した &lsquo; &rsquo; 受信側または送信側オブジェクトを置き換える &lsquo; 明示的 Service Bus &lsquo; な手順を実行します。 アプリケーションによる明示的な回復が必要な状態。</p>  <h3>&rsquo;変更点</h3>  <p>開発者に表示されないのは、サービスの不連続性、または運用環境での Service Bus 動作の破壊的な変更です。 ここでは、proverbially をすべてのユーザーから取り出して、非常に &ndash; 拡張された機能 &ndash; を使用して、移動したテーブルで crystal、中国、または silverware のいずれも使用しないようにしまし &rsquo; た。 Service Bus を使用する既存のアプリが引き続き実行され、以前の運用 SDK &lsquo; &rsquo; &ndash; の Microsoft.ServiceBus.dll アセンブリ 1.0. x. x では、既存のアプリを新しいリリースに適合させるために必要な作業はありません。</p>  <h3>新機能の使用方法</h3>  <p>ただし、.net のすべての新しい Service Bus 機能を利用するには、新しいメッセージ API を含む新しい Microsoft.ServiceBus.dll バージョン 1.5. x. x で新しい SDK を使用する必要があります。 ここでの推奨事項は、リレー機能のみを使用しているアプリケーションでも、この最新のアセンブリに対して再コンパイルとテストが行われ、1.0. x. x. x アセンブリの顧客展開が通常のアップグレードとデプロイのサイクルの一部として段階的に開始されることです。</p>  <p>新しい 1.5. x. REST API Service Bus 3.5 4.0 Windows 8 4.0 &ndash; x. x. x. x. x. x. x. x. x. x. x. x. x. x. x. x. x. x. x. x. x. x. x. x. x. x. x. x. x. x. x. x. x. x. x. x. x. x これらの Silverlight サンプルに加えて、Java、PHP、およびその他のプラットフォームから Service Bus にアクセスするためのコードも用意 &ndash; &nbsp; されています。これらのサンプルでは、それぞれ適切なネイティブランタイム api が使用されますが、用語やパターンに関しては .net API がエコーされます。</p>  <p>このリリースでは、REST API を使用することをお勧めします。 Service Bus のキューやトピックに依存するアプリケーションが、送信 HTTPS アクセスを可能にする、厳密に管理されたネットワーク環境からアクセスする必要がありますが、送信トラフィックに対して TCP 9354 を利用できない場合にも適しています。</p>  <p>新しい .NET API を直接使用することの大きなメリットは、新しい Microsoft.ServiceBus.dll クライアントビットで使用される TCP プロトコルが HTTP よりも大幅に効率的であることです。 ここでも、TCP プロトコルは、セッションやトランザクションのサポートなど、いくつかの高度な機能の前提条件となっています。 &nbsp;</p>  <h3>既存のアプリケーションの新しい機会</h3>  <p>また、旧バージョンとの互換性を維持していたとしても &rsquo; 、既存の Service Bus アプリを使用する開発者は、今後数か月にわたって検討することが必要になる場合があります。 今後の投稿について具体的なガイダンスを提供しますが、ここでは、いくつかの高度な例を紹介します。</p>  <ul>  <li>ほとんどのユースケースでは、新しいキュー機能はメッセージバッファーよりも適しています。 アプリケーションが一時的なメッセージバッファー (自動的に有効期限切れと消滅) に依存している場合や、他のほとんどの場合に送信側 &ndash; でメッセージバッファー &rsquo; のオーバーフローポリシーに依存している場合など、メッセージバッファーが優先される特殊なユースケースがあります。この場合、キューへの移動は見慣れになります。&nbsp;</li>  <li>NetEventRelayBinding はリレー型のマルチキャストの一方向メッセージング &ndash; を提供しますが、最大25個の同時リスナーの制限はありません。 多くの場合、これらのパスを、すべての宛先に独自のサブスクリプションがあり、新しい NetMessagingBinding を使用してメッセージを受信するトピックに置き換えることをお勧め &rsquo; します。 これにより、スケール (最大で2000の同時サブスクリプション) が提供され、サブスクリプションもフィルター処理できます。 NetEventRelayBinding の残りの違いは、TCP ベースのすべての接続メカニズムが、送信側 &rsquo; から理論的に考えられる送信レートよりも受信速度が遅い場合にクライアントに負荷がかかることです。&nbsp;&nbsp;&nbsp;</li>  </ul>  <h3>CTP 5 月と比較した API の変更</h3>  <p>お客様からのフィードバックと、お客様から提供された api &rsquo; を使用してアプリを構築するための独自の経験に基づいて、api の機能強化を数多く行ってきまし &rsquo; た。また、既存のコードとの互換性を維持したまま、既存の Service Bus Relay 機能 &ndash; にもメリットがあります。</p>  <p>最も顕著な変更点の1つは、API に直接資格情報を供給するのではなく、トークンプロバイダー &rsquo; の &lsquo; 概念を導入したセキュリティ &rsquo; に関するものです。 Credential クラスを使用して、TransportClientEndpointBehavior で資格情報を設定することは引き続きリレーで可能ですが、現在は非推奨としてラベル付けされています。 &nbsp;Service Bus は、Windows Azure AppFabric Access Control サービス (ACS) によって発行されたアクセストークンとフェデレーションセキュリティを使用します。 API のファクタリングは、フェデレーションの性質を反映するようになりました。トークンプロバイダーは、必要に応じて、トークンを取得して Service Bus クライアントインフラストラクチャに提供する独立したエンティティです。 この新しいファクタリングによって、ユーザーコードは新しいトークンプロバイダーを API にプラグインし、特別な方法で資格情報を取得し、Access Control サービスと対話することができます。たとえば、facebook ログインを要求する web ブラウザーコントロールをホストするダイアログウィンドウを表示し、結果として作成された facebook トークンを ACS に渡してから、アプリケーションに Service Bus アクセストークン</p>  <p>管理 API サーフェスにも、少しの作り直しがあります。 ServiceBusNamespaceClient は <i>NamespaceManager</i> と呼ばれるようになりました。現在 &ndash; 、特定のキュー、トピック、またはサブスクリプションが既に存在するかどうかを確認するための &ndash; メソッドがあります。 名前空間マネージャーでは、サブスクリプションの規則を直接管理することもできます。 サブスクリプションに対するルールの作成は、フィルタを使用して行われます。また、それぞれのクラスも若干再構成されています。たとえば、SqlFilterExpression は <i>Sqlfilter</i>になりました。</p>  <p>最も重要な変更 &ndash; 点としては、コアメッセージング API &rsquo; での改善 &ndash; が行われました。これにより、内部 &rsquo; でいくつかの &lsquo; ことが変更され、API サーフェイスの複雑さが大幅に軽減されます。</p>  <p>新しいサンプルを見ると、 <i>Messagingfactory</i> とそれによってディスペンサーされたすべてのオブジェクトの状態管理モデルがはるかに単純になりました。 使用するために &lsquo; オブジェクトを開く &rsquo; 必要がなくなりました。また、オブジェクトが faulted 状態になることもなくなります。 これらの変更は軽微な詳細のように思えるかもしれませんが、基になるバイナリプロトコルの機能強化によって、複数の送信側と受信側の間で接続を共有できるようになりました。また &ndash; 、メッセージのプリフェッチが最も重要 &ndash; であると考えられます。 つまり、アプリケーションは、保留中 &lsquo; の受信要求を受け取る &rsquo; ことができるようになりました。また、接続が切断されたり、OS と共に休止したりすることができます。また、ネットワークが再び利用可能になると、再接続してメッセージの取得を自動的に再試行します。</p>  <p><i>Netmessagingbinding</i> は、WCF との完全な統合を提供するキューおよびトピックに対するバインドの新しい名前であり、機能的にはいとこ netmsmqbinding に似ています。 サービス側では、NetMessagingBinding は、キューまたはサブスクリプションからメッセージをプルする自動メッセージポンプを提供します。これ &rsquo; は、WCF &rsquo; の ReceiveContext メカニズムと統合されています。</p>  <h3>どこですか? 方法はありますか。</h3>  <p>前述のように、新しいリリースは現在利用可能であり、これらすべての機能をすぐに使用できます。 必要なクライアントアセンブリとサンプルは、こちらからダウンロードできます。 また、Windows Azure SDK の一部として NuGet または Web Platform Installer を使用してランタイムアセンブリを簡単にインストールし、アプリケーションの構築を開始することもできます。</p>  <p>2011年9月のリリースは、以前に使用されていた CTP 環境 ( &ldquo; appfabriclabs.com &rdquo; ) ではなく、Service Bus の通常の運用環境でのみ利用可能であることに注意してください。 CTP 環境に対して実行されるアプリケーションは、その日以降に環境が変更される可能性があるため、2011年10月31日以降は通常の Service Bus サービスに移行する必要があります。</p>  <p>このリリースの詳細については、次のリソースを参照してください。</p>  <ul>  <li>Service Bus の概要</li>  <li>ビデオ: Service Bus の概要</li>  <li>ビデオ: Service Bus Relay の概要</li>  <li>ビデオ: Service Bus キューの概要</li>  <li>ビデオ: Service Bus のトピックの概要</li>  <li>ビデオ &amp; コードサンプル: <a target="_blank" href="https://appfabricdemos.codeplex.com/releases/view/67597">Service Bus Relay の使用方法</a></li>  <li>ビデオ &amp; コードサンプル: <a target="_blank" href="https://appfabricdemos.codeplex.com/releases/view/66576">Service Bus キューの使用方法</a></li>  <li>ビデオ &amp; コードサンプル: <a target="_blank" href="https://appfabricdemos.codeplex.com/releases/view/66577">Service Bus の使用方法に関するトピック</a></li>  <li>ブログの投稿: <a target="_blank" href="https://blogs.msdn.com/b/appfabric/archive/2011/05/25/an-introduction-to-service-bus-topics.aspx">Service Bus のトピックの概要</a></li>  <li>ブログの投稿: <a target="_blank" href="https://blogs.msdn.com/b/appfabric/archive/2011/05/17/an-introduction-to-service-bus-queues.aspx">Service Bus キューの概要</a></li>  <li>ブログの投稿:<b> </b> <a target="_blank" href="https://blogs.msdn.com/b/appfabric/archive/2011/05/18/using-the-service-bus-via-rest-http.aspx">REST/HTTP 経由での Service Bus の使用</a></li>  <li>Service Bus の詳細な faq</li>  <li>更新された SDK</li>  <li><a target="_blank" href="https://msdn.microsoft.com/en-us/library/ee732537.aspx">MSDN のドキュメント</a></li>  </ul>  <p>ビルド時に行われた Windows Azure 関連のすべての発表の詳細については、ブログの投稿「Windows 8 の新しい Windows azure Toolkit、azure SDK 1.5、Windows Geo-Replication Windows など)」をお読みください。 &nbsp; ビルドまたは基調講演を見る方法の詳細については、「ビルド仮想プレスルーム」を参照してください。 &nbsp;およびに従っ <a target="_blank" href="https://twitter.com/windowsazure">@WindowsAzure</a> <a target="_blank" href="https://twitter.com/#%21/STBNewsBytes">@STBNewsBytes</a> て、ビルドに関する最新のニュースとリアルタイムの説明を参照してください。<i>&nbsp;</i></p>  <p><i>Clemens Vasters は、Service Bus の主要な技術リーダーです。 Clemens <a target="_blank" href="https://twitter.com/clemensv">@clemensv</a> に従います。 <br></i></p>'
