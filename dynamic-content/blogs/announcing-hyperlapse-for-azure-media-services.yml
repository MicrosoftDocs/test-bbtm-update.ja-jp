### YamlMime:Yaml
ms.openlocfilehash: dc9998780845e782d2fd61d1e13c7d906ca79341
ms.sourcegitcommit: d03bdc7fe5447adb6530886aab848b75fe8fa8ee
ms.translationtype: MT
ms.contentlocale: ja-JP
ms.lasthandoff: 03/11/2022
ms.locfileid: "139891247"
Slug: announcing-hyperlapse-for-azure-media-services
Title: Azure Media Services のハイパー・ダウンの発表
Summary: '今日では、Azure Media Services について、ハイパー・汚れの無料パブリックプレビューの開始を示しています。  '
Content: "<div style=\"background:#eee;border:1px solid #ccc;padding:5px 10px;\">2019年3月28日の時点で、Azure Media Services の hyperlapse プレビューは使用できなくなりました。 最新の<a href=\"https://azure.microsoft.com/en-us/services/media-services/\">Azure Media Services 更新プログラム</a>の詳細については、こちらをご覧ください。</div>\n\n<p>Azure Media Services の Media Hyperlapse プレビュー機能は間もなく廃止されます。 2018年12月19日以降、メディアのハイパーな変更や機能強化は行われなくなり、2019年3月29日には廃止され、利用できなくなります。 &rsquo;この機能を廃止しても、クラウドベースのビデオエンコード、ストリーミング、およびインデックスサービスでは、 <a href=\"https://docs.microsoft.com/en-us/azure/media-services/\" target=\"_blank\">Media Services</a>が引き続き利用できます。</p>\n\n<p>メディアを使用して既に処理した &rsquo; コンテンツについては、その結果の出力ビデオが Azure Media Services アカウントで引き続き利用できます。 この変更が発生する可能性があるため、ご不便をおかけして申し訳ありません。</p>\n\n<p>ご質問がある場合は、 <a href=\"mailto:amshelp@microsoft.com\">お問い合わせください</a>。</p>\n\n<p>&nbsp; 過去5年間、ドローンカメラとアクションカメラの導入により、ビデオキャプチャデバイスの横長が大幅に中断されています。 &nbsp; 多くの場合、レンズおよびカメラハードウェアは、ソーシャルメディアとマルチメディア共有の増加と共に、どこでもアマチュア videographers のドアを開いていました。 &nbsp; 今では、高いレートで高レートの写真を撮影し、彼らの行動を撮影することができます。また、カメラを空にして、以前には不可能なショットをキャプチャして、世界中ですぐに共有することもできます。 しかし、このテクノロジを使用すると、新たな課題が発生しました。 &nbsp; たとえば、主要な出来事をカバーするドローンを持つニュース組織として、時間のかかるビデオを使用している場合には、それほど退屈ではなく、便利で興味深いカタログに分類されています。 &nbsp; 15分間のマウンテンバイクを録画する場合、どのようにして、消費可能な、共有可能なバージョンのフッテージを作成するのでしょうか。 これらの過去数か月の間に、microsoft の研究では、この問題に対処するために、Azure Media Services のクラウドに Microsoft ハイパーな取り組みを行っています。 &nbsp;今日では、 <strong>Azure Media Services について、ハイパー・汚れの無料パブリックプレビュー</strong>の開始を示しています。このリリースは、ハイパー・・・ <a href=\"https://news.microsoft.com/?p=188061\">Pro のモバイルおよびハイパー</a>な時期に関連した &nbsp; ものであり、開発者やメディア企業に対するサービスとして Microsoft のサービスとしてのサービスを提供することに重点を置いています。 &nbsp;Microsoft Hyperlapse は、すべて &nbsp; のパブリック Azure データセンターでご利用いただけるようになりました。 &nbsp;</p>\n\n<h2>Microsoft の Hyperlapse とは何ですか?</h2>\n\n<p>Microsoft Hyperlapse は、MSR で20年以上のコンピュータービジョン研究を行った結果であり、ビデオ安定化と時間成果を組み合わせて、長い形式のコンテンツからすばやく使用できる美しいビデオを作成しています。 スノーボードラン &nbsp; のヘルメットを共有する場合は、Microsoft Hyperlapse を使用して、ビデオの安定化によって、ビデオを安定化させ、コンテンツを使いやすいクリップに高速化します。 &nbsp; Microsoft Hyperlapse は、専門的な安定化ハードウェア/カメラを使用して、プロの記録された実行の洗練された印象を提供します。 次のビデオ ( <a href=\"https://aka.ms/ampblog\">Azure Media Player</a>) を参照して、Microsoft hyperlapse からの円滑なエクスペリエンスを示します。 &nbsp;</p>\n\n<p>Microsoft Hyperlapse によって、smooth timelapses 生成されます。 具体的には、ハイパー・・・・・パー・・・・・・・・・・・・・ダウンビデオの場合と比較して、通常の時期にツリーに注目します。 &nbsp; 従来の時間が経過したテクノロジは、アマチュア videography の jerks と広がりではありませんが、ハイパーな破棄によって、ここに表示されるスムーズ終了の結果に移動することができます。 Azure Media Services にとっての hyperlapse、Azure Media Services 上の<a href=\"https://azure.microsoft.com/en-us/documentation/articles/media-services-get-media-processor/\">メディアプロセッサ</a>に Microsoft ハイパー・・テクノロジを統合することです。 &nbsp;私たちは、この優れたテクノロジと、今日の Hyperlapse 試すことによって Azure クラウドの ultrascale とグローバルな存在の相乗効果を活用するために、すべてを招待しています。 Azure Media Services を使用すると、仮想化タスクのスケーラブルなバッチ処理をスケジュールし、ハードウェアを仮想的にスケールアップすることによって必要な数のジョブを並列化できます。 &nbsp;</p>\n\n<h2>無料パブリックプレビュー</h2>\n\n<p>このパブリックプレビューオファリングでは、<strong>すべての Azure Media Services アカウント</strong>に Microsoft hyperlapse 無料で提供しています。</p>\n\n<blockquote>注: プレビュー期間中は、hyperlapse ジョブを1万のビデオフレームに制限する予定です。</blockquote>\n\n<h2>作業の開始</h2>\n\n<p><a href=\"https://azure.microsoft.com/en-us/develop/media-services/\">REST API/sdk</a>または<a href=\"https://aka.ms/amse\">Azure Media Services エクスプローラー</a>を使用して、お客様の web またはアプリのオファリングに簡単に統合できます。 次に示すのは、最初の Hyperlapse ジョブを開始するための C# プログラムと構成 XML のサンプルです。 &nbsp;このコードには、 <a href=\"https://github.com/Azure/azure-sdk-for-media-services\">Azure Media Services C# sdk</a>と<a href=\"https://github.com/Azure/azure-sdk-for-media-services-extensions\">sdk 拡張</a>パッケージ (NuGet で利用可能) の両方が必要です。 &nbsp;</p>\n\n<h3>サンプル プログラム</h3>\n\n<pre class=\"prettyprint\">\nusing System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Threading.Tasks;\n\nusing Microsoft.WindowsAzure.MediaServices.Client;\nusing System.Configuration;\nusing System.IO;\nusing System.Threading;\n\n\nnamespace MyFirstHyperlapseJob\n{\n    class Program\n    {\n        \n        // declare constants and globals\n        private static CloudMediaContext _context = null;\n        private static readonly string _accountName = {ACCOUNT_NAME};\n        private static readonly string _accountKey = {ACCOUNT_KEY};\n\n        private const string _mpName = &quot;Azure Media Hyperlapse&quot;;\n        private static readonly string _inputFile = {INPUT_FILE_PATH};  \n    private static readonly string _outputFolder = {OUTPUT_FOLDER_PATH};\n        private const string _hyperlapseConfiguration = {PATH_TO_CONFIG};\n\n        static void Main(string[] args)\n        {\n            _context = new CloudMediaContext(_accountName, _accountKey);\n            RunHyperlapseJob(_inputFile, _outputFolder, _hyperlapseConfiguration);\n        }\n\n        static void RunHyperlapseJob(string input, string output, string hyperConfig)\n        {\n            // create asset with input file\n            IAsset asset = _context\n                           .Assets\n                           .CreateFromFile(input, AssetCreationOptions.None);\n\n            // grab instance of Azure Media Hyperlapse MP\n            IMediaProcessor mp = _context\n                                 .MediaProcessors\n                                 .GetLatestMediaProcessorByName(_mpName);\n\n            // create Job with hyperlapse task\n            IJob job = _context\n                       .Jobs\n                       .Create(String.Format(&quot;Hyperlapse {0}&quot;, input));\n\n            if (!String.IsNullOrEmpty(hyperConfig))\n            {\n                hyperConfig = File.ReadAllText(hyperConfig);\n            }\n            ITask hyperlapseTask = job.Tasks.AddNew(&quot;Hyperlapse task&quot;, \n                                                    mp,\n                                                    hyperConfig, \n                                                    TaskOptions.None);\n            hyperlapseTask.InputAssets.Add(asset);\n            hyperlapseTask.OutputAssets.AddNew(&quot;Hyperlapse output&quot;, \n                                                AssetCreationOptions.None);\n\n\n            job.Submit();\n\n            // Create progress printing and querying tasks\n                Task progressPrintTask = new Task(() =&gt;\n                {\n\n                    IJob jobQuery = null;\n                    do\n                    {\n                        var progressContext = _context;\n                        jobQuery = progressContext.Jobs\n                                                  .Where(j =&gt; j.Id == job.Id)\n                                                  .First();\n                        Console.WriteLine(string.Format(&quot;{0}\\t{1}\\t{2}&quot;, \n                                          DateTime.Now, \n                                          jobQuery.State, \n                                          jobQuery.Tasks[0].Progress));\n                        Thread.Sleep(10000);\n                    }\n                    while (jobQuery.State != JobState.Finished &amp;&amp;\n                           jobQuery.State != JobState.Error &amp;&amp;\n                           jobQuery.State != JobState.Canceled);\n                });\n                progressPrintTask.Start();\n\n                Task progressJobTask = job.GetExecutionProgressTask(\n                                                     CancellationToken.None);\n                progressJobTask.Wait();\n\n                // If job state is Error, the event handling \n                // method for job progress should log errors.  Here we check \n                // for error state and exit if needed.\n                if (job.State == JobState.Error)\n                {\n                    ErrorDetail error = job.Tasks.First().ErrorDetails.First();\n                    Console.WriteLine(string.Format(&quot;Error: {0}. {1}&quot;, \n                                                    error.Code, \n                                                    error.Message));                    \n                }\n\n            DownloadAsset(job.OutputMediaAssets.First(), output);\n        }\n\n        static void DownloadAsset(IAsset asset, string outputDirectory)\n        {\n            foreach (IAssetFile file in asset.AssetFiles)\n            {\n                file.Download(Path.Combine(outputDirectory, file.Name));\n            }\n        }\n\n        // event handler for Job State\n        static void StateChanged(object sender, JobStateChangedEventArgs e)\n        {\n            Console.WriteLine(&quot;Job state changed event:&quot;);\n            Console.WriteLine(&quot;  Previous state: &quot; + e.PreviousState);\n            Console.WriteLine(&quot;  Current state: &quot; + e.CurrentState);\n            switch (e.CurrentState)\n            {\n                case JobState.Finished:\n                    Console.WriteLine();\n                    Console.WriteLine(&quot;Job finished.&quot;);\n                    break;\n                case JobState.Canceling:\n                case JobState.Queued:\n                case JobState.Scheduled:\n                case JobState.Processing:\n                    Console.WriteLine(&quot;Please wait...\\n&quot;);\n                    break;\n                case JobState.Canceled:\n                    Console.WriteLine(&quot;Job is canceled.\\n&quot;);\n                    break;\n                case JobState.Error:\n                    Console.WriteLine(&quot;Job failed.\\n&quot;);\n                    break;\n                default:\n                    break;\n            }\n        }\n    }\n}\n</pre>\n\n<p>&nbsp;</p>\n\n<h3>構成 XML</h3>\n\n<pre class=\"prettyprint\">\n&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-16&quot;?&gt;\n&lt;Preset xmlns:xsi=&quot;<a href=\"https://www.w3.org/2001/XMLSchema-instance\">https://www.w3.org/2001/XMLSchema-instance</a>&quot; xmlns:xsd=&quot;<a href=\"https://www.w3.org/2001/XMLSchema\">https://www.w3.org/2001/XMLSchema</a>&quot; Version=&quot;1.0&quot; xmlns=&quot;<a href=\"https://www.windowsazure.com/media/encoding/Preset/2014/03\" title=\"https://www.windowsazure.com/media/encoding/Preset/2014/03&#10;Ctrl+Click or tap to follow the link\">https://www.windowsazure.com/media/encoding/Preset/2014/03</a>&quot;&gt;\n&nbsp; &lt;Sources&gt;\n&nbsp;&nbsp;&nbsp; &lt;Source StartFrame=&quot;0&quot; NumFrames=&quot;10000&quot;&gt;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;InputFiles /&gt;\n&nbsp;&nbsp;&nbsp; &lt;/Source&gt;\n&nbsp; &lt;/Sources&gt;\n&nbsp; &lt;Options&gt;\n&nbsp;&nbsp;&nbsp; &lt;Speed&gt;8&lt;/Speed&gt;\n&nbsp; &lt;/Options&gt;\n&lt;/Preset&gt;</pre>\n\n<p>&nbsp;</p>"
