### YamlMime:Yaml
ms.openlocfilehash: 253a4ac28c90c65ffcf9748456b7535adeebf989
ms.sourcegitcommit: d03bdc7fe5447adb6530886aab848b75fe8fa8ee
ms.translationtype: MT
ms.contentlocale: ja-JP
ms.lasthandoff: 03/11/2022
ms.locfileid: "139896875"
Slug: bot-conversation-history-with-azure-cosmos-db
Title: Azure Cosmos DB を使用したボットの会話履歴
Summary: このBot Framework、 State と呼ばれる会話のコンテキストを追跡するサービスBot Framework提供されます。 これにより、ユーザー、会話、または特定のユーザーに関連付けられているデータを、会話のコンテキスト内に格納および取得できます。
Content: "<p>このBot Frameworkは、\"状態\" と呼ばれる会話のコンテキストを追跡Bot Framework<strong> します</strong>。 これにより、ユーザー、会話、または特定のユーザーに関連付けられているデータを、会話のコンテキスト内に格納および取得できます。</p>\n\n<p>この記事では、 <a href=\"https://github.com/Microsoft/BotBuilder\" target=\"_blank\">Bot Builder SDK</a> (C# または Node.js) を使用してボットを開発した経験があるものとします。そのため、ボットの実装に関する詳細については説明します。</p>\n\n<p>Cosmos DB&rsquo; を使用する前に、会話データを格納することの重要性と、それが Bot Framework State に格納される方法を理解すると便利です。</p>\n\n<h2>会話データを格納する理由</h2>\n\n<p>会話データが役に立つ可能性があるシナリオを次に示します。</p>\n\n<ul>\n <li><strong>アナリティクス：</strong> ユーザー データと会話をほぼリアルタイムで分析する場合。 また、モデルとMachine Learning (<strong>Microsoft Cognitive Services APIs など) を適用Cognitive Services APIs</strong>。<br>\n次に例をいくつか示します。 <ul>\n  <li>会話の質を追跡するための感情分析&nbsp;&nbsp;</li>\n  <li>ボット内のメッセージをファネル分析して、自然言語処理 ( <a href=\"https://www.luis.ai/\" target=\"_blank\">LUIS</a> として) が失敗した場所、または入力メッセージをより適切に処理するために改善できる場所を特定する</li>\n  <li>メトリック: アクティブユーザーまたは新規ユーザーの数とメッセージ数 (ボットがユーザーと関わるエンゲージメントのレベルを決定する場合)</li>\n </ul>\n </li>\n <li><strong>監査：</strong> 監査目的ですべてのユーザーのデータを格納する必要がある場合。 ソリューションによっては、要件になる場合があります。</li>\n</ul>\n\n<h2>会話データの格納方法</h2>\n\n<p>会話データは、プロパティ バッグと呼ばれる 3 つの異なる構造 (JSON 形式) で格納されます。</p>\n\n<ul>\n <li><strong>Userdata：</strong> この&#39;ユーザー プロパティ バッグです。ここで、ID はユーザー <strong>ID です</strong>。 すべての会話でユーザー データがグローバルに格納されます。 特定&#39;に依存しないユーザーに関するデータ&#39;格納する場合に便利です。 たとえば、特定のユーザーのすべての会話を追跡し、追加情報 (ユーザー名、生年月日など) を取得できます。</li>\n</ul>\n\n<pre>\n{\n     &quot;id&quot;: &quot;emulator:userdefault-user&quot;,\n     &quot;botId&quot;: &quot;&lt;your Bot ID&gt;&quot;,\n     &quot;channelId&quot;: &quot;emulator&quot;,\n     &quot;conversationId&quot;: &quot;&lt;your conversation ID&gt;&quot;,\n     &quot;userId&quot;: &quot;&lt;user ID&gt;&quot;,\n     &quot;data&quot;: {\n         &quot;username&quot;: &quot;Fernando de Oliveira&quot;\n     },\n     &quot;_rid&quot;: &quot;9G5GANrnJQADAAAAAAAAAA==&quot;,\n     &quot;_self&quot;: &quot;dbs/9G5GAA==/colls/9G5GANrnJQA=/docs/9G5GANrnJQADAAAAAAAAAA==/&quot;,\n     &quot;_etag&quot;: &quot;\\&quot;01008737-0000-0000-0000-5993a11d0000\\&quot;&quot;,\n     &quot;_attachments&quot;: &quot;attachments/&quot;,\n     &quot;_ts&quot;: 1502847257\n}</pre>\n\n<p>C# で UserData にデータを保存する方法の例を次に示します。</p>\n\n<pre>\nprivate bool userWelcomed;\n\npublic virtual async Task MessageReceivedAsync(IDialogContext context, IAwaitable&lt;IMessageActivity&gt; result)\n{\n         var message = await result;\n\n        string userName;\n\n        if (!context.UserData.TryGetValue(&quot;username&quot;, out userName))\n         {\n             PromptDialog.Text(context, ResumeAfterPrompt, &quot;Before get started, please tell me your name?&quot;);\n             return;\n         }\n\n        if (!userWelcomed)\n         {\n             userWelcomed = true;\n             await context.PostAsync($&quot;Welcome back {userName}!&quot;);\n\n            context.Wait(MessageReceivedAsync);\n         }\n}\n\nprivate async Task ResumeAfterPrompt(IDialogContext context, IAwaitable&lt;string&gt; result)\n{\n     try\n     {\n         var userName = await result;\n         userWelcomed = true;\n\n        await context.PostAsync($&quot;Welcome {userName}!&quot;);\n\n        context.UserData.SetValue(&quot;username&quot;, userName);\n     }\n     catch (TooManyAttemptsException ex)\n     {\n         await context.PostAsync($&quot;Oops! Something went wrong :( Technical Details: {ex}&quot;);\n     }\n\n    context.Wait(MessageReceivedAsync);\n}</pre>\n\n<ul>\n <li><strong>ConversationData:</strong> これは&#39;のプロパティ バッグです。ここで、ID は会話 <strong>ID です</strong>。 1 つの会話に関連するデータをグローバルに格納します。 このデータは、会話内のすべてのユーザーに表示されます。 たとえば、ボットに既定の言語を設定できるグループ会話 (ボットが理解してグループ メンバーと対話する言語)。</li>\n</ul>\n\n<pre>\n{\n     &quot;id&quot;: &quot;emulator:conversation&lt;your conversation ID&gt;&quot;,\n     &quot;botId&quot;: &quot;&lt;your Bot ID&gt;&quot;,\n     &quot;channelId&quot;: &quot;emulator&quot;,\n     &quot;conversationId&quot;: &quot;&lt;your conversation ID&gt;&quot;,\n     &quot;userId&quot;: &quot;default-user&quot;,\n     &quot;data&quot;: {\n         &quot;defaultLanguage&quot;: &quot;pt-BR&quot;\n     },\n     &quot;_rid&quot;: &quot;9G5GANrnJQAEAAAAAAAAAA==&quot;,\n     &quot;_self&quot;: &quot;dbs/9G5GAA==/colls/9G5GANrnJQA=/docs/9G5GANrnJQAEAAAAAAAAAA==/&quot;,\n     &quot;_etag&quot;: &quot;\\&quot;0800357b-0000-0000-0000-598b52060000\\&quot;&quot;,\n     &quot;_attachments&quot;: &quot;attachments/&quot;,\n     &quot;_ts&quot;: 1502302725\n}</pre>\n\n<p>ConversationData にデータを保存する方法の例を次に示します。</p>\n\n<pre>\npublic async Task StartAsync(IDialogContext context)\n{\n     string language;\n\n    if (!context.ConversationData.TryGetValue(&quot;defaultLanguage&quot;, out language))\n     {\n         language = &quot;pt-BR&quot;;\n         context.ConversationData.SetValue(&quot;defaultLanguage&quot;, country);\n     }\n\n    await context.PostAsync($&quot;Hi! I&#39;m currently configured for {language} language.&quot;);\n\n    context.Wait(MessageReceivedAsync);\n}</pre>\n\n<ul>\n <li>PrivateConversationData: プライベート&#39;のプロパティ バッグを使用します。この ID は、ユーザー <strong>ID</strong> と会話 <strong>ID のマージです</strong>。 1 つの会話に関連するデータをグローバルに格納します。このデータは、会話内の現在のユーザーにのみ表示されます。 会話&#39;(ブラウザー キャッシュなど) の終了時にクリーンアップする一時データを格納する場合に便利です。 たとえば、オンライン購入用のボットでは、注文 ID を保存できます。</li>\n</ul>\n\n<pre>\n{\n     &quot;id&quot;: &quot;emulator:private&lt;your conversation ID&gt;:default-user&quot;,\n     &quot;botId&quot;: &quot;&lt;your Bot ID&gt;&quot;,\n     &quot;channelId&quot;: &quot;emulator&quot;,\n     &quot;conversationId&quot;: &quot;&lt;your conversation ID&gt;&quot;,\n     &quot;userId&quot;: &quot;default-user&quot;,\n     &quot;data&quot;: {\n         &quot;ResumptionContext&quot;: {\n             &quot;locale&quot;: pt-BR&quot;,\n             &quot;isTrustedServiceUrl&quot;: false\n         },\n         &quot;DialogState&quot;: &quot;&lt;dialog state ID&gt;&quot;,\n         &quot;orderId&quot;: &quot;&lt;order ID&gt;&quot;\n     },\n     &quot;_rid&quot;: &quot;9G5GANrnJQAXAAAAAAAAAA==&quot;,\n     &quot;_self&quot;: &quot;dbs/9G5GAA==/colls/9G5GANrnJQA=/docs/9G5GANrnJQAXAAAAAAAAAA==/&quot;,\n     &quot;_etag&quot;: &quot;\\&quot;0100f938-0000-0000-0000-5993ab090000\\&quot;&quot;,\n     &quot;_attachments&quot;: &quot;attachments/&quot;,\n     &quot;_ts&quot;: 1502849796\n}  </pre>\n\n<p>PrivateConversationData にデータを保存する方法の例を次に示します。</p>\n\n<pre>\nstring orderId;\n\nif (!context.PrivateConversationData.TryGetValue(&quot;orderId&quot;, out orderId))\n{\n     // Generic method to generate an order ID\n     orderId = await GetOrderIdAsync();\n\n    context.PrivateConversationData.SetValue(&quot;orderId&quot;, orderId);\n\n    await context.PostAsync($&quot;{userName}, this is your order ID: {orderId}&quot;);\n}</pre>\n\n<h2>Cosmos状態ではなく DB Bot Frameworkする</h2>\n\n<p>既定では、Bot Framework State をBot Frameworkして会話データを格納します。 プロトタイプ作成用に設計され、開発およびテスト環境に役立ちます。 この記事の執筆時点では、サイズ制限は 32 KB のみです。 詳細については、データ管理 <a href=\"https://docs.microsoft.com/en-us/bot-framework/rest-api/bot-framework-rest-state\" target=\"_blank\">に関する説明を参照してください</a>。</p>\n\n<p>実稼働環境では、&rsquo;NoSQL <strong> </strong><strong> </strong> データベースを使用して、Azure Cosmos DB などのドキュメント<a href=\"https://docs.microsoft.com/en-us/azure/cosmos-db/introduction\" target=\"_blank\">としてデータを格納することを強くお勧めします</a>。 これは&#39;モデル データベース (ドキュメント、グラフ、キー値、テーブル、列ファミリ モデルなど) であり、次のようないくつかの重要な利点があります。</p>\n\n<ul>\n <li><strong>グローバル分散:</strong> データ&#39;異なる <a href=\"https://azure.microsoft.com/regions/\" target=\"_blank\">Azure</a> リージョンに分散し、ユーザーへの待機時間を短くすることができます。</li>\n <li><strong>水平スケーラビリティ:</strong>1 秒あたりの粒度でデータベースを簡単<a href=\"https://docs.microsoft.com/en-us/azure/cosmos-db/request-units\" target=\"_blank\"></a>にスケーリングし、ニーズに応じてストレージ サイズを自動的にスケールアップまたはスケールダウンできます。</li>\n <li><strong>可用性：</strong> データベースが 1 つのリージョンで 99.99% 以上の可用性を確保できます。</li>\n</ul>\n\n<p>ドキュメント モデルの場合、 <strong>Azure DocumentDB</strong> や <strong>MongoDB のようなオプションがあります</strong>。 この記事では、 <a href=\"https://docs.microsoft.com/en-us/azure/cosmos-db/documentdb-introduction\" target=\"_blank\">DocumentDB API を使用します</a>。</p>\n\n<h2>会話データの格納</h2>\n\n<p>ボット会話データ ストレージをカスタマイズするには、SDK <a href=\"https://github.com/Microsoft/BotBuilder-Azure\" target=\"_blank\">Azure Extensions Bot Builderを使用できます</a>。 C# で Bot Builder <strong>SDK</strong> を使用してボットを開発する場合は、Global.asax ファイルを編集する必要があります。</p>\n\n<pre>\nprotected void Application_Start()\n{\n     // Adding DocumentDB endpoint and primary key\n     var docDbServiceEndpoint = new Uri(&quot;&lt;your documentDB endpoint&gt;&quot;);\n     var docDbKey = &quot;&lt;your documentDB key&gt;&quot;;\n\n    // Creating a data store based on DocumentDB\n     var store = new DocumentDbBotDataStore(docDbServiceEndpoint, docDbKey);\n\n    // Adding Azure dependencies to your bot (documentDB data store and Azure module)\n     var builder = new ContainerBuilder();\n\n    builder.RegisterModule(new AzureModule(Assembly.GetExecutingAssembly()));           \n    \n     // Key_DataStore is the key for data store register with the container\n     builder.Register(c =&gt; store)\n         .Keyed&lt;IBotDataStore&lt;BotData&gt;&gt;(AzureModule.Key_DataStore)\n         .AsSelf()\n         .SingleInstance();\n\n    // After adding new dependencies, update the container\n     builder.Update(Conversation.Container);\n\n    GlobalConfiguration.Configure(WebApiConfig.Register);\n}</pre>\n\n<p>ボットを実行し、Azure portal で Cosmos DB サービスを開いた場合は、保存されているドキュメントがすべて表示されます ([データ エクスプローラー] <strong>をクリックします</strong>)。</p>\n\n<p><a href=\"https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/a99e5cb7-d42f-4f9f-b0b4-f0528391eaae.jpg\"><img alt=\"data-explorer\" border=\"0\" height=\"548\" src=\"https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/0516f02d-e2fd-43ac-ab92-fa5eec24642f.jpg\" style=\"border: 0px currentcolor; border-image: none; margin-right: auto; margin-left: auto; float: none; display: block; background-image: none;\" title=\"data-explorer\" width=\"1024\"></a></p>\n\n<h2>リファレンス</h2>\n\n<ul>\n <li><a href=\"https://docs.microsoft.com/en-us/bot-framework/dotnet/bot-builder-dotnet-concepts\" target=\"_blank\">.NET 用 Bot Builder SDK の主要な概念</a></li>\n <li><a href=\"https://docs.microsoft.com/en-us/bot-framework/dotnet/bot-builder-dotnet-state\" target=\"_blank\">Bot Builder: 状態データを管理する</a></li>\n <li><a href=\"https://docs.microsoft.com/en-us/bot-framework/troubleshoot-general-problems#where-is-conversation-state-stored\" target=\"_blank\">会話状態はどこに格納されるのですか。</a></li>\n <li><a href=\"https://docs.microsoft.com/en-us/azure/cosmos-db/introduction\" target=\"_blank\">Azure Cosmos DB のドキュメント</a></li>\n <li><a href=\"https://github.com/Microsoft/BotBuilder-Samples\" target=\"_blank\">Bot Builderサンプル</a></li>\n</ul>"
