### YamlMime:Yaml
ms.openlocfilehash: d0d25785f29a7aa4da8d464a121a817aa3f712cd
ms.sourcegitcommit: d03bdc7fe5447adb6530886aab848b75fe8fa8ee
ms.translationtype: MT
ms.contentlocale: ja-JP
ms.lasthandoff: 03/11/2022
ms.locfileid: "139895632"
Slug: azure-load-balancer-new-distribution-mode
Title: Azure Load Balancer配布モードの追加
Summary: 'ソース IP アフィニティと呼ばれる新しい配布モードが導入され、セッション アフィニティまたはクライアント IP アフィニティとも呼ばれる。 Azure Load Balancer を 2 組 (ソース IP、接続先 IP) または 3 組 (ソース IP、接続先 IP、プロトコル) を使用するように構成して、使用可能なサーバーにトラフィックをマップできます。 '
Content: "Azure Load Balancerは、ロード バランサー セットで定義されているクラウド サービスまたは仮想マシン内の正常なサービス インスタンス間で受信トラフィックを分散するレイヤー 4 (TCP、UDP) タイプのロード バランサーです。\n\n分散アルゴリズムは、5 つの組 (ソース IP、ソース ポート、接続先 IP、接続先ポート、プロトコルの種類) のハッシュを使用して、使用可能なサーバーにトラフィックをマップします。 これは、トランスポート セッション内でのみ持続性を提供します。 TCP または UDP の同じセッション内のパケットは、負荷分散されたエンドポイントの背後にある同じデータ センターの IP (DIP) インスタンスに送信されます。 クライアントがもう一度接続を開くか、同じソース IP から新しいセッションを開始すると、ソース ポートが変更され、トラフィックは別の DIP エンドポイントに送信されます。\n\n<a href=\"https://acom.azurecomcdn.net/80C57D/blogmedia/blogmedia/2014/10/21/SLB-5-tuple.png\"><img style=\"float: none;padding-top: 0px;padding-left: 0px;margin-left: auto;padding-right: 0px;margin-right: auto;border-width: 0px\" title=\"SLB 5 タプル\" alt=\"SLB 5 tuple\" src=\"https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/SLB-5-tuple_thumb.png\" width=\"640\" height=\"252\" border=\"0\" /></a>\n\nソース IP アフィニティと呼ばれる新しい分散モードが導入されています (セッション アフィニティやクライアント IP アフィニティとも呼ばれます)。 Azure Load Balancer を 2 組 (ソース IP、接続先 IP) または 3 組 (ソース IP、接続先 IP、プロトコル) を使用するように構成して、使用可能なサーバーにトラフィックをマップできます。 ソース IP アフィニティを使用して、同じクライアント コンピューターから開始された接続は、同じ DIP エンドポイントに移動します。\n\n<a href=\"https://acom.azurecomcdn.net/80C57D/blogmedia/blogmedia/2014/10/21/SLB-2-tuple.png\"><img style=\"float: none;padding-top: 0px;padding-left: 0px;margin-left: auto;padding-right: 0px;margin-right: auto;border-width: 0px\" title=\"SLB 2 タプル\" alt=\"SLB 2 tuple\" src=\"https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/SLB-2-tuple_thumb.png\" width=\"640\" height=\"262\" border=\"0\" /></a>\n\nソース IP アフィニティは、ソースとグループの間<a href=\"https://go.microsoft.com/fwlink/p/?LinkId=517389\" target=\"_blank\">の非Azure Load Balancerを解決RD ゲートウェイ</a>。 これで、1 つのクラウド サービス内に RD ゲートウェイ ファームを構築できます。\n\nもう 1 つの使用シナリオは、実際のデータのアップロードが UDP を介して行うが、コントロール プレーンが TCP を介して実現されるメディアのアップロードです。\n<ul>\n <li>クライアントは、まず負荷分散されたパブリック アドレスに TCP セッションを開始し、特定の DIP に接続します。このチャネルは、アクティブなまま接続の状態を監視します。</li>\n <li>同じクライアント コンピューターからの新しい UDP セッションが、同じ負荷分散されたパブリック エンドポイントに開始されます。この接続は、前の TCP 接続と同じ DIP エンドポイントにも送られるため、メディアのアップロードは TCP 経由のコントロール チャネルを維持しながら高スループットで実行されることが予想されます。</li>\n</ul>\n&nbsp;\n\n負荷分散されたセットが変更されると (仮想マシンの削除や追加)、クライアント要求の分散が再計算されます。 最終的に同じサーバーに接続する既存のクライアント セッションからの新しい接続に依存することはできません。 また、ソース IP アフィニティ分散モード を使用すると、トラフィックが均等に分散されない可能性があります。 プロキシの背後で実行しているクライアントは、1 つの固有のクライアント アプリケーションと見なすことができます。\n\n&nbsp;\n<h2>シナリオ</h2>\n<ul>\n <li>PowerShell または仮想マシンを使用して仮想 <a href=\"https://azure.microsoft.com/en-us/documentation/articles/virtual-machines-set-up-endpoints/\" target=\"_blank\">マシン上の</a> エンドポイントへのロード バランサーの配布を構成Service Management API</li>\n <li>PowerShell または Service Management API を使用して、Load-Balanced エンドポイント セットのロード バランサーの配布を構成します。</li>\n <li>サービス モデルを使用して、Web/Worker ロールのロード バランサー分散を <a href=\"https://msdn.microsoft.com/en-us/library/windowsazure/ee758711.aspx\" target=\"_blank\">構成します</a>。</li>\n</ul>\n&nbsp;\n<h2>PowerShell の例</h2>\n最新のリリース (10 月<a href=\"https://github.com/Azure/azure-sdk-tools/releases\" target=\"_blank\">のリリース) をAzure PowerShell</a>インストールしてください\n\n&nbsp;\n<h3>Azure エンドポイントを仮想マシンに追加してロード バランサー分散モードを設定する</h3>\n<pre class=\"prettyprint\">Get-AzureVM -ServiceName \"mySvc\" -Name \"MyVM1\" | Add-AzureEndpoint -Name \"HttpIn\" -Protocol \"tcp\" -PublicPort 80 -LocalPort 8080 –LoadBalancerDistribution “sourceIP”| Update-AzureVM</pre>\nLoadBalancerDistribution は、2 タプル (ソース IP、宛先 IP) の負荷分散、3 タプル (ソース IP、宛先 IP、プロトコル) の負荷分散の <strong></strong><strong> sourceIPProtocol</strong>、または 5 タプル負荷分散の既定の動作が必要な場合は none に設定できます。<strong></strong>\n\n&nbsp;\n<h3>エンドポイント ロード バランサー分散モード構成を取得する</h3>\n<pre class=\"prettyprint\">PS C:\\&gt; Get-AzureVM –ServiceName “MyService” –Name “MyVM” | Get-AzureEndpoint\n\nVERBOSE: 6:43:50 PM - Completed Operation: Get Deployment\nLBSetName : MyLoadBalancedSet\nLocalPort : 80\nName : HTTP\nPort : 80\nProtocol : tcp\nVip : 65.52.xxx.xxx\nProbePath :\nProbePort : 80\nProbeProtocol : tcp\nProbeIntervalInSeconds : 15\nProbeTimeoutInSeconds : 31\nEnableDirectServerReturn : False\nAcl : {}\nInternalLoadBalancerName :\nIdleTimeoutInMinutes : 15\nLoadBalancerDistribution : sourceIP</pre>\n&nbsp;\n\nLoadBalancerDistribution 要素が存在しない場合、Azure ロード バランサーは既定の 5 組のアルゴリズムを使用します。\n\n&nbsp;\n<h3>負荷分散エンドポイント セットで分散モードを設定する</h3>\nエンドポイントが負荷分散エンドポイント セットの一部である場合は、負荷分散エンドポイント セットで分散モードを設定する必要があります\n<pre class=\"prettyprint\">Set-AzureLoadBalancedEndpoint -ServiceName \"MyService\" -LBSetName \"LBSet1\" -Protocol tcp -LocalPort 80 -ProbeProtocolTCP -ProbePort 8080 –LoadBalancerDistribution \"sourceIP\"</pre>\n<h2>クラウド サービスの例</h2>\nAzure SDK for .NET 2.5 (11 月にリリース予定) を利用してクラウド サービスを更新できます\n\nクラウド サービスのエンドポイントの設定は、.csdef で行われます。 ロード バランサー分散モードをアップデートしてクラウド サービスをデプロイするには、デプロイのアップグレードが必要です。\n\nエンドポイント設定の .csdef の変更例は次の通りです。\n<pre class=\"prettyprint\">&lt;WorkerRole name=\"worker-role-name\" vmsize=\"worker-role-size\" enableNativeCodeExecution=\"[true|false]\"&gt;\n  &lt;Endpoints&gt;\n    &lt;InputEndpoint name=\"input-endpoint-name\" protocol=\"[http|https|tcp|udp]\" localPort=\"local-port-number\" port=\"port-number\" certificate=\"certificate-name\" loadBalancerProbe=\"load-balancer-probe-name\" loadBalancerDistribution=\"sourceIP\" /&gt;\n  &lt;/Endpoints&gt;\n&lt;/WorkerRole&gt;\n&lt;NetworkConfiguration&gt;\n  &lt;VirtualNetworkSite name=\"VNet\"/&gt;\n  &lt;AddressAssignments&gt;\n    &lt;InstanceAddress roleName=\"VMRolePersisted\"&gt;\n      &lt;PublicIPs&gt;\n        &lt;PublicIP name=\"public-ip-name\" idleTimeoutInMinutes=\"timeout-in-minutes\"/&gt;\n      &lt;/PublicIPs&gt;\n    &lt;/InstanceAddress&gt;\n  &lt;/AddressAssignments&gt;\n&lt;/NetworkConfiguration&gt;</pre>\n<h2>API の例</h2>\nロード バランサーのディストリビューションは、サービス管理 <a href=\"https://msdn.microsoft.com/en-us/library/azure/ee460799.aspx\" target=\"_blank\">API を使用して構成できます</a>\n\nx-ms-version ヘッダーが 2014-09-01 以降のバージョンで設定されていることをご確認ください。\n\n&nbsp;\n<h3>デプロイで指定した負荷分散セットの構成を更新します。</h3>\n<b>要求の例</b>\n<pre class=\"prettyprint\">POST https://management.core.windows.net/&lt;subscription-id&gt;/services/hostedservices/&lt;cloudservice-name&gt;/deployments/&lt;deployment-name&gt;?comp=UpdateLbSet \n\nx-ms-version: 2014-09-01 \n\nContent-Type: application/xml \n\n&lt;LoadBalancedEndpointList xmlns=\"\" xmlns:i=\"https://www.w3.org/2001/XMLSchema-instance\"&gt; \n\n&lt;InputEndpoint&gt; \n\n&lt;LoadBalancedEndpointSetName&gt; endpoint-set-name &lt;/LoadBalancedEndpointSetName&gt; \n\n&lt;LocalPort&gt; local-port-number &lt;/LocalPort&gt; \n\n&lt;Port&gt; external-port-number &lt;/Port&gt; \n\n&lt;LoadBalancerProbe&gt; \n\n&lt;Port&gt; port-assigned-to-probe &lt;/Port&gt; \n\n&lt;Protocol&gt; probe-protocol &lt;/Protocol&gt; \n\n&lt;IntervalInSeconds&gt; interval-of-probe &lt;/IntervalInSeconds&gt; \n\n&lt;TimeoutInSeconds&gt; timeout-for-probe &lt;/TimeoutInSeconds&gt; \n\n&lt;/LoadBalancerProbe&gt; \n\n&lt;Protocol&gt; endpoint-protocol &lt;/Protocol&gt; \n\n&lt;EnableDirectServerReturn&gt; enable-direct-server-return &lt;/EnableDirectServerReturn&gt; \n\n&lt;IdleTimeoutInMinutes&gt;idle-time-out&lt;/IdleTimeoutInMinutes&gt; \n\n&lt;LoadBalancerDistribution&gt;sourceIP&lt;/LoadBalancerDistribution&gt; \n\n&lt;/InputEndpoint&gt; \n\n&lt;/LoadBalancedEndpointList&gt;</pre>\nLoadBalancerDistribution の値は、2 タプル アフィニティの <strong>場合は sourceIP</strong> 、3 タプル アフィニティの場合は <strong>sourceIPProtocol</strong> 、関係 <strong>なし (アフィニティ</strong> なし) を指定できます。 つまり 5 タプル) に設定できます。\n\n<b>応答</b>\n<pre class=\"prettyprint\">HTTP/1.1 202 Accepted \n\nCache-Control: no-cache \n\nContent-Length: 0 \n\nServer: 1.0.6198.146 (rd_rdfe_stable.141015-1306) Microsoft-HTTPAPI/2.0 \n\nx-ms-servedbyregion: ussouth2 \n\nx-ms-request-id: 9c7bda3e67c621a6b57096323069f7af \n\nDate: Thu, 16 Oct 2014 22:49:21 GMT</pre>"
