### YamlMime:Yaml
ms.openlocfilehash: 836135052334c1447efbd681ce39994f32a2f1d4
ms.sourcegitcommit: d03bdc7fe5447adb6530886aab848b75fe8fa8ee
ms.translationtype: MT
ms.contentlocale: ja-JP
ms.lasthandoff: 03/11/2022
ms.locfileid: "139904898"
Slug: create-flexible-arm-templates-using-conditions-and-logical-functions
Title: 条件と論理関数を使用した柔軟な ARM テンプレートの作成
Summary: このブログ投稿では、Azure Resource Manager テンプレートのテンプレート言語式に用意されているいくつかの新機能について説明します。
Content: "<p>このブログ投稿では、Azure Resource Manager テンプレートのテンプレート言語式に用意されているいくつかの新機能について説明します。</p>\n\n<h3>背景</h3>\n\n<p>顧客からのよく寄せられる質問は、 &ldquo; ARM テンプレートで条件をどのように使用できるかということです。ユーザーがパラメーター a を選択すると、リソース a が作成されます。 それ以外の場合は、リソース B を作成 &rdquo; する必要があります。 &nbsp; これを実現する唯一の方法は、入れ子になったテンプレートを使用し、デプロイグラフを操作するための mainTemplate を持つことです。</p>\n\n<p>一般的なパターンを次に示します。ここでは、ユーザーが [ <em>新規</em> ] または [ <em>既存</em>] を選択します。</p>\n\n<pre class=\"prettyprint\">\n{\n    &quot;$schema&quot;: &quot;https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#&quot;,\n    &quot;contentVersion&quot;: &quot;1.0.0.0&quot;,\n    &quot;parameters&quot;: {\n        &quot;newOrExisting&quot;: {\n            &quot;type&quot;: &quot;String&quot;,\n            &quot;allowedValues&quot;: [\n                &quot;new&quot;,\n                &quot;existing&quot;\n            ]\n        }\n    },\n    &quot;variables&quot;: {\n        &quot;templatelink&quot;: &quot;[concat(&#39;https://raw.githubusercontent.com/krnese/ARM/master/&#39;, concat(parameters(&#39;newOrExisting&#39;),&#39;StorageAccount.json&#39;))]&quot;\n    },\n    &quot;resources&quot;: [\n        {\n            &quot;apiVersion&quot;: &quot;2017-05-10&quot;,\n            &quot;name&quot;: &quot;nestedTemplate&quot;,\n            &quot;type&quot;: &quot;Microsoft.Resources/deployments&quot;,\n            &quot;properties&quot;: {\n                &quot;mode&quot;: &quot;incremental&quot;,\n                &quot;templateLink&quot;: {\n                    &quot;uri&quot;: &quot;[variables(&#39;templatelink&#39;)]&quot;,\n                    &quot;contentVersion&quot;: &quot;1.0.0.0&quot;\n                },\n                ...\n</pre>\n\n<p>変数宣言では、テンプレートへのリンクはパラメーター入力に基づいて構築されます。</p>\n\n<p>この例では、テンプレートへの URI がで &lsquo; https://raw.githubusercontent.com/krnese/ARM/master/newStorageAccount.json&rsquo あるか、また &lsquo; https://raw.githubusercontent.com/krnese/ARM/master/existingStorageAccount.json&rsquo はであることを示しています。&nbsp;&nbsp;</p>\n\n<p>この方法は機能し &nbsp; 、ユーザーがパラメーターの選択で [ <em>新規</em> ] または [ <em>既存</em> ] を選択したかどうかに関係なく、テンプレートのデプロイを成功させます。 ただし、入れ子になったテンプレートを持つ方法は、時間の経過と共に多くのテンプレートにつながる可能性があります。 デプロイグラフでエラーが発生しないように、一部のテンプレート &nbsp; は完全に空になっています。 さらに、通常はストレージアカウント以外の他のリソースの種類 &ndash; を使用し、複数の条件が関係する可能性があるため、複雑さが増大します。</p>\n\n<p>また、よく使用されるもう1つの手法は、入力パラメーターに基づいて複雑な変数を操作して、リソースの特定のプロパティを決定することでした。 次の例では、入力として<em>Windows</em>または<em>linux</em>を許可するパラメータープラットフォームに基づいて、ARM が複雑な変数内を移動して、linux または Windows の仮想マシンを作成する方法を示しています。</p>\n\n<pre class=\"prettyprint\">\n        &quot;osType&quot;: &quot;[variables(concat(&#39;osType&#39;,parameters(&#39;platform&#39;)))]&quot;,        \n        &quot;osTypeWindows&quot;: {\n            &quot;imageOffer&quot;: &quot;WindowsServer&quot;,\n            &quot;imageSku&quot;: &quot;2016-Datacenter&quot;,\n            &quot;imagepublisher&quot;: &quot;MicrosoftWindowsServer&quot;\n        },\n        &quot;osTypeLinux&quot;: {\n            &quot;imageOffer&quot;: &quot;UbuntuServer&quot;,\n            &quot;imageSku&quot;: &quot;12.04.5-LTS&quot;,\n            &quot;imagepublisher&quot;: &quot;Canonical&quot;\n        },\n</pre>\n\n<p>言うまでもありませんが、これを簡略化することをお勧めします。これにより、テンプレート言語が条件をより簡単にサポートおよび処理できるようになります。</p>\n\n<h3>条件のサポートの導入</h3>\n\n<p>常にお客様からのフィードバックをお待ちしております (今年のビルドで発表されます)。リソースに関する条件のサポートが追加され、さらに多くの機能が追加されました。 &nbsp;これには、条件を処理するときにテンプレート言語で使用できる<a href=\"https://docs.microsoft.com/en-us/azure/azure-resource-manager/resource-group-template-functions-logical\">論理</a>関数と<a href=\"https://docs.microsoft.com/en-us/azure/azure-resource-manager/resource-group-template-functions-comparison\">比較</a>関数が含ま &nbsp; れます。</p>\n\n<p>ARM テンプレートで新機能を活用する方法の実際の例を示します。 現在の例では、仮想マシンを Windows または Linux ベースのどちらにするかをユーザーが選択できるようにするには、このブログの投稿で前述したように、複雑な変数を操作する必要があります。 また、仮想マシンを運用環境に移行するかどうかをユーザーが決定する必要がある場合は、オプションのリソースとして可用性セットを使用することによって、リソース &nbsp; をデプロイしたか、空のテンプレートを入れ子にする必要があります。</p>\n\n<p>合計では、少なくとも3つのテンプレートが必要になります (そのうちの2つは、入れ子になったテンプレートであることに注意してください)。</p>\n\n<p>条件と関数を使用することで、1つのテンプレートを使用してこれを実現できるようになりました。 あまり詳しく説明しません。 &rsquo;まず、サンプルテンプレートで使用しているいくつかのパラメーターについて説明し、実行した手順について説明します。</p>\n\n<pre class=\"prettyprint\">\n    &quot;parameters&quot;: {\n        &quot;vmNamePrefix&quot;: {\n            &quot;type&quot;: &quot;string&quot;,\n            &quot;defaultValue&quot;: &quot;VM&quot;,\n            &quot;metadata&quot;: {\n                &quot;description&quot;: &quot;Assign a prefix for the VM you will create.&quot;\n            }\n        },\n        &quot;production&quot;: {\n            &quot;type&quot;: &quot;string&quot;,\n            &quot;allowedValues&quot;: [\n                &quot;Yes&quot;,\n                &quot;No&quot;\n            ],\n            &quot;metadata&quot;: {\n                &quot;description&quot;: &quot;Select whether the VM should be in production or not.&quot;\n            }\n        },\n        &quot;platform&quot;: {\n            &quot;type&quot;: &quot;string&quot;,\n            &quot;allowedValues&quot;: [\n                &quot;WinSrv&quot;,\n                &quot;Linux&quot;\n            ],\n            &quot;metadata&quot;: {\n                &quot;description&quot;: &quot;Select the OS type to deploy.&quot;\n            }\n        },\n        &quot;pwdOrssh&quot;: {\n            &quot;type&quot;: &quot;securestring&quot;,\n            &quot;metadata&quot;: {\n                &quot;description&quot;: &quot;If Windows, specify the password for the OS username. If Linux, provide the SSH.&quot;\n            }\n        },\n</pre>\n\n<p>仮想マシンにプレフィックスを割り当てるだけでなく、 <em>運用環境</em> と <em>プラットフォーム</em>のパラメーターも用意されています。</p>\n\n<p>運用環境では、ユーザーは [ <em>はい]</em> または [ <em>いいえ</em>] を選択できます。 <em>[はい]</em>の場合、作成する仮想マシンが可用性セットに関連付けられていることを確認する必要があります。これは、仮想マシンの作成プロセスの前にこのリソースを配置する必要があるためです。 これをサポートするために、次のリソースをテンプレートに追加しました。</p>\n\n<pre class=\"prettyprint\">\n        {\n            &quot;condition&quot;: &quot;[equals(parameters(&#39;production&#39;), &#39;Yes&#39;)]&quot;,\n            &quot;type&quot;: &quot;Microsoft.Compute/availabilitySets&quot;,\n            &quot;apiVersion&quot;: &quot;2017-03-30&quot;,\n            &quot;name&quot;: &quot;[variables(&#39;availabilitySetName&#39;)]&quot;,\n            &quot;location&quot;: &quot;[resourceGroup().location]&quot;,\n            &quot;properties&quot;: {\n                &quot;platformFaultDomainCount&quot;: 2,\n                &quot;platformUpdateDomainCount&quot;: 3\n            },\n            &quot;sku&quot;: {\n                &quot;name&quot;: &quot;Aligned&quot;\n            }\n        },\n</pre>\n\n<p><em>Condition</em>プロパティに注意してください。 比較関数、equals (arg1、arg2) を使用しています。これにより、2つの値が互いに等しいかどうかがチェックされます。 この場合、パラメーター <em>production</em> が <em>yes</em>に等しい場合、ARM は実行時にこのリソースを処理します。 True<em>(選択されて </em>いない) の場合、プロビジョニングされません。</p>\n\n<p>テンプレートの仮想マシンリソースについては、導入された条件に基づいて可用性セットへの参照を宣言しています。</p>\n\n<pre class=\"prettyprint\">\n           &quot;properties&quot;: {\n                &quot;availabilitySet&quot;: &quot;[if(equals(parameters(&#39;production&#39;), &#39;Yes&#39;), variables(&#39;availabilitySetId&#39;), json(&#39;null&#39;))]&quot;,</pre>\n\n<p>ここ &rsquo; では、論理関数の1つである if () を使用します。 この関数は 3 つの引数を受け取ります。 1つ目は条件 (ブール値) です。これは、true または false のどちらであるかを確認するための値です。 2番目の引数は true の値になり、その後に、3番目の引数が false になります。 この結果、仮想マシンが関連付けられます。 ユーザーが<em>production</em>パラメーターに対して<em>[はい]</em>を選択すると、仮想マシンは、その条件によって既に作成されているテンプレートで宣言されている可用性セットに関連付けられます。 ユーザーが [いいえ] を選択した場合、可用性セット &rsquo; は作成され<em>ません</em>。そのため、仮想マシンのリソースからの関連付けがあり &rsquo; ます。</p>\n\n<p>また、Windows または Linux 仮想マシンを作成するかどうかを決定するパラメータープラットフォームも用意されています。 テンプレート全体で言語式を簡略化するために、Linux および Windows の値を変数のセクションに追加しました。</p>\n\n<pre class=\"prettyprint\">\n        &quot;windowsOffer&quot;: &quot;WindowsServer&quot;,\n        &quot;windowsSku&quot;: &quot;2016-Datacenter&quot;,\n        &quot;windowsPublisher&quot;: &quot;MicrosoftWindowsServer&quot;,\n        &quot;linuxOffer&quot;: &quot;UbuntuServer&quot;,\n        &quot;linuxSku&quot;: &quot;12.04.5-LTS&quot;,\n        &quot;linuxPublisher&quot;: &quot;Canonical&quot;,\n</pre>\n\n<p>仮想マシンリソースでは、使用されるイメージを区別する storageprofile セクション内で、Windows または Linux 用の変数を参照しています。</p>\n\n<pre class=\"prettyprint\">\n&quot;storageProfile&quot;: {\n                    &quot;imageReference&quot;: {\n                        &quot;publisher&quot;: &quot;[if(equals(parameters(&#39;platform&#39;), &#39;WinSrv&#39;), variables(&#39;windowsPublisher&#39;), variables(&#39;linuxPublisher&#39;))]&quot;,\n                        &quot;offer&quot;: &quot;[if(equals(parameters(&#39;platform&#39;), &#39;WinSrv&#39;), variables(&#39;windowsOffer&#39;), variables(&#39;linuxOffer&#39;))]&quot;,\n                        &quot;version&quot;: &quot;latest&quot;,\n                        &quot;sku&quot;: &quot;[if(equals(parameters(&#39;platform&#39;), &#39;WinSrv&#39;), variables(&#39;windowsSku&#39;), variables(&#39;linuxSku&#39;))]&quot;\n                    },\n</pre>\n\n<p>ユーザーが<em>platform</em>パラメーターに<em>WinSrv</em>を選択した場合は、Windows イメージを指す変数の値を取得します。 そうでない場合や <em>Linux</em> が選択されている場合は、代わりにこれらの変数を参照します。 結果は、Windows Server 2016 または Ubuntu を使用する仮想マシンになります。</p>\n\n<p>最後に、少なくとも、テンプレートには出力セクションがあります。これにより、ユーザーは選択内容に基づいていくつかの手順を実行できます。</p>\n\n<pre class=\"prettyprint\">\n    &quot;outputs&quot;: {\n        &quot;vmEndpoint&quot;: {\n            &quot;type&quot;: &quot;string&quot;,\n            &quot;value&quot;: &quot;[reference(concat(variables(&#39;pNicName&#39;))).dnsSettings.fqdn]&quot;\n        },\n        &quot;platform&quot;: {\n            &quot;type&quot;: &quot;string&quot;,\n            &quot;value&quot;: &quot;[parameters(&#39;platform&#39;)]&quot;\n        },\n        &quot;connectionInfo&quot;: {\n            &quot;type&quot;: &quot;string&quot;,\n            &quot;value&quot;: &quot;[if(equals(parameters(&#39;platform&#39;), &#39;WinSrv&#39;), &#39;Use RDP to connect to the VM&#39;, &#39;Use SSH to connect to the VM&#39;)]&quot;\n        }\n    }\n</pre>\n\n<p>ユーザーが Windows サーバーをデプロイすると、次の出力が表示されます。</p>\n\n<p><a href=\"https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/b81a43d4-599d-4bd1-adab-baa321bb6796.png\"><img alt=\"image\" border=\"0\" height=\"110\" src=\"https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/2fa884b2-e033-4ca8-b2e3-ae245af2e2fc.png\" style=\"border: 0px currentColor; border-image: none; padding-top: 0px; padding-right: 0px; padding-left: 0px; display: inline; background-image: none;\" title=\"絵\" width=\"605\"></a></p>\n\n<p>ユーザーが Linux をデプロイすると、次のように表示されます。</p>\n\n<p><a href=\"https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/1501153b-dd2a-42a4-9df4-064b23b245bd.png\"><img alt=\"image\" border=\"0\" height=\"86\" src=\"https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/8e44fd52-fc9d-44ee-b7e1-63d92748e3c4.png\" style=\"border: 0px currentColor; border-image: none; padding-top: 0px; padding-right: 0px; padding-left: 0px; display: inline; background-image: none;\" title=\"絵\" width=\"605\"></a></p>\n\n<h3>まとめ</h3>\n\n<p>テンプレートで宣言するリソースに関する条件と、論理関数と比較関数を使用したテンプレート言語自体に対する条件のサポートを導入することで、はるかに単純なテンプレートにシーンを設定しました。 以前に条件を実装していた回避策から移動できるようになりました。また、複雑なアプリ、リソース、およびトポロジを Azure にデプロイする場合でも、はるかに柔軟性を高める必要があります。</p>\n\n<p><a href=\"https://gist.github.com/krnese/59f3f2668ecd9b02402bf31bbc6bf253\">完全なテンプレートについては、こちらを参照して</a>ください。</p>"
