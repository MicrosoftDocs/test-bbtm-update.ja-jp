### YamlMime:Yaml
ms.openlocfilehash: b20bc1687cac4fc42e7a839c4370eb44f729349a
ms.sourcegitcommit: d03bdc7fe5447adb6530886aab848b75fe8fa8ee
ms.translationtype: MT
ms.contentlocale: ja-JP
ms.lasthandoff: 03/11/2022
ms.locfileid: "139892624"
Slug: securing-your-connection-string-in-windows-azure-part-4
Title: 'Windows Azure での接続文字列のセキュリティ保護: パート4'
Summary: '[この記事は SQL Azure チームによって提供されました。]これは、Windows Azure での接続文字列のセキュリティ保護に関する、マルチパートのブログシリーズの4番目の部分です。 最初のブログ投稿 (ここにあります)...'
Content: '<p>[この記事は SQL Azure チームによって提供されました。]</p><p>これは、Windows Azure での接続文字列のセキュリティ保護に関する、マルチパートのブログシリーズの4番目の部分です。 最初のブログ投稿 (ここにあります) では、公開キーと秘密キーのペアを作成する方法について説明しました。 <a href="https://msdn.microsoft.com/en-us/library/ee758713.aspx">Windows Azure 証明書ストア</a>を使用して、セキュリティで保護された接続文字列を格納および暗号化解除します。 2番目のブログ投稿 (ここに記載されています) では、Windows azure 管理者が azure Windows に秘密キーをインポートした方法を説明しました。 3番目のブログ記事では、SQL Server 管理者が公開キーを使用して接続文字列を暗号化する方法について説明します。 このブログ投稿では、暗号化された接続文字列を取得するために、開発者の役割と、web ロールプロジェクトに追加する必要があるコードについて説明します。</p>  <p>この手法では、web developer の役割があります。公開キー (ただし、使用する必要はありません) と、SQL Server 管理者によって付与された暗号化された<b>web.config</b>ファイルにアクセスできます。 彼の仕事は次のとおりです。</p>  <ul>   <li><b>web.config</b>の秘密キーのサムプリントを参照します。 </li>    <li>プロバイダーアセンブリ (PKCS12ProtectedConfigurationProvider) をプロジェクトに追加します。 </li> </ul>  <p>この手法では、開発者のロールが最も制限されたロールです。 秘密キーや接続文字列にアクセスすることはできません。</p>  <h2>プロバイダーをダウンロードしてコンパイルする</h2>  <p>プロバイダーは、web ロールプロジェクトから参照できるようにコンパイルする必要があります。 Visual Studio 2008 または Visual Studio 2010 が必要になります。 このことについては、SQL Azure 管理者向けのパート3で説明しましたが、開発者はこれもコンパイルしておく必要があります。 場合によっては、開発者が SQL Azure 管理者に対してコンパイルすることがあります。場合によっては、すべてのビルドでコードがチェックインおよびコンパイルされます。会社のガイド行に従います。 コンパイルする手順は次のとおりです。</p>  <ol>   <li>MSDN コードギャラリーから、ソースコードを使用して .zip をダウンロードします。 </li>    <li>.zip ファイル内のすべてのものをローカルコンピューターに保存します。 </li>    <li>PKCS12ProtectedConfigurationProvider ファイルを見つけて、Visual Studio のソリューションとして開きます。 </li>    <li>ツールメニューで、[<b>ビルド</b>  |  ] [<b>ソリューション</b>のビルド] の順に選択します。 </li>    <li><b>PKCS12ProtectedConfigurationProvider\bin\Release</b>ディレクトリには、PKCS12ProtectedConfigurationProvider.dll が存在する必要があります。 </li>    <li>他のサードパーティのアセンブリが web ロールに配置されている場合は、ソース管理を使用している場合は、PKCS12ProtectedConfigurationProvider.dll コピーします。 このようにして、他の開発者は再コンパイルする必要がありません。 </li> </ol>  <h2>プロバイダーを使用するための Project の更新</h2>  <ol>   <li>このカスタム保護された構成プロバイダーのアセンブリ参照を Web ロールプロジェクトに追加します。これは上記で作成した <strong>PKCS12ProtectedConfigurationProvider.dll</strong> です。 これを行うには、Web ロールプロジェクトの [参照] を右クリックし、[参照の追加] をクリックします。 次に、カスタムプロバイダーの再頒布可能ディレクトリを参照し、[Pkcs12CertProtectedConfiguratoinProvider.dll] を選択します。 追加した参照を右クリックし、[プロパティ] をクリックします。 参照の "ローカルコピー" プロパティを True に設定します。通常は、既に True に設定されています。 これは、アセンブリが Azure Windows にデプロイされるようにするために必要です。 </li>    <li>azure 管理者 Windows から、Windows azure Portal から秘密キーのサムプリントを取得します。      <p><a href=""><img style="border-right-width: 0px; display: inline; border-top-width: 0px; border-bottom-width: 0px; border-left-width: 0px" title="clip_image002" border="0" alt="clip_image002" src="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/5633.clip_5F00_image002_5F00_thumb.jpg" width="884" height="411"></a></p>      <p><b>web.config</b>の拇印を、Windows Azure portal ののサムプリントに置き換えます。これは秘密キーのサムプリントであり、プロバイダーが接続文字列を復号化するために必要となります。</p>   </li>    <li><b>web.config</b>ファイルと、新しく追加した参照を含むプロジェクトファイルをチェックインします。 </li> </ol>  <p>これで、デプロイパッケージを作成して Windows Azure にデプロイする準備ができました。 暗号化された接続文字列が PKCS12ProtectedConfigurationProvider.dll アセンブリと共に<b>web.config</b>ファイルは、Azure Windows にデプロイされます。このファイルは、拇印によって参照される、Windows 証明書ストアの秘密キーを使用して、拇印によって参照されます。プロバイダーは、コードの接続文字列を復号化することができます。</p>  <h2>開発者の人生</h2>  <p>セキュリティが強化されると、開発者の仕事が困難になることに気付きましたか。 この手法の1つとして、開発ファブリックを実行している開発者ボックスで運用 <b>web.config</b> ファイルが機能しないことが挙げられます。 これは、秘密キーが開発者のボックスにないため、その秘密キーが <b>web.config</b>の暗号化を解除するために必要なためです。このソリューションでは、開発者のボックスに秘密キーをインストールするのではなく、接続文字列が侵害される可能性があります。 これを解決するには、開発者が別の<b>web.config</b>を実行するようにします。1つは、開発 SQL Azure データベースへの接続文字列を含んでいます。 このバージョンの接続文字列を暗号化する必要はありません。</p>  <h2>コード レビュー</h2>  <p><strong>web.config</strong>と Windows azure 証明書ストアへのアクセス権を持つ azure サーバー Windows 運用環境で実行されているすべてのコードは、SQL Azure 接続文字列にアクセスできます。 次にコード例を示します。</p>  <pre class="csharpcode">Response.Write(<span class="str">&quot;Clear text connection string is: &quot;</span> +                   System.Web.Configuration.WebConfigurationManager.ConnectionStrings                              [<span class="str">&quot;SQLAzureConn&quot;</span>].ConnectionString);</pre>      <p>実稼働サーバーでを実行すると、接続文字列が出力されます。 つまり、Windows Azure サーバーで実行されているすべてのコードは、接続文字列を暗号化することによって行われたセキュリティ作業の整合性を侵害しないように、セキュリティコードレビューを行う必要があります。 また、運用 Windows Azure サーバーにデプロイできるすべてのユーザーが、接続文字列を調べることもできます。</p>    <h2>まとめ</h2>    <p>質問、懸念事項、コメントがありますか。 これらを下に投稿してください。</p>'
