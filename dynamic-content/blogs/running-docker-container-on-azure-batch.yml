### YamlMime:Yaml
ms.openlocfilehash: fa1a9e3a8337bd4afbbd6a4c5b5af8e577675999
ms.sourcegitcommit: d03bdc7fe5447adb6530886aab848b75fe8fa8ee
ms.translationtype: MT
ms.contentlocale: ja-JP
ms.lasthandoff: 03/11/2022
ms.locfileid: "139910345"
Slug: running-docker-container-on-azure-batch
Title: Azure Batch で Docker コンテナーを実行する
Summary: Batch サービスでの Linux VM サポートの導入により、パッケージ化とデプロイのメカニズムとして Docker ハブを使用して Azure Batch でコンテナー ベースのタスクを実行できます。
Content: >-
  <h5>このブログ記事は、現在は古いものです。&nbsp;コンテナー アプリケーションは 2 つの方法で Batch と一緒に使用できます。次に説明するサンプルの代わりに、どちらかを使用する必要があります。 <a href="https://docs.microsoft.com/azure/batch/batch-docker-container-workloads">Batch</a> または Batch Shipyard を使用してコンテナー アプリケーションをネイティブに実行する方法については、<a href="https://github.com/Azure/batch-shipyard">ドキュメントを参照してください</a>。</h5>


  <hr>

  <p>Docker は、コンテナー内でアプリケーションをパッケージ化、デプロイ、実行するツールです。 Batch サービスでの <a href="https://azure.microsoft.com/blog/announcing-support-of-linux-vm-on-azure-batch-service/">Linux VM</a> サポートの導入により、&#39;でコンテナー ベースのタスクをパッケージ化およびデプロイ メカニズムとして Docker ハブを使用して Azure Batch で実行できます。<br>

  &nbsp;<br>

  Azure には、Marathon と Chronos を使用したサービスとしてのコンテナー ホスティングも用意されています。 コンテナー ベースのアプリケーションのホスティング環境が必要な場合は、Azure Container Service選択できます。 一方、反復的なコンピューティング ジョブを実行するためにスケジューラが必要な場合は、Batch サービスを選択する必要があります。これにより、ジョブ バイナリとデータをコンテナー形式でパッケージ化してデプロイできます。<br>

  &nbsp;<br>

  Batch&rsquo; で Docker <a href="https://github.com/Azure/azure-batch-samples/tree/master/Python/Batch">テクノロジを使用する方法GitHub</a>サンプルを 2 つ追加しました。 1 つ目は、コンピューティング ノードの Batch プールを作成し、Docker swarm クラスターに変換する方法を示しています。 SSH トンネルを使用して Docker swarm にローカルで接続し、クラスターと対話できます。<br>

  &nbsp;<br>

  2 つ目のサンプルでは、Batch プールでタスクとして Docker コンテナーを実行するエンドツーエンドのワークフローを示します。<br>

  &nbsp;<br>

  どちらのサンプルも、VM に Docker コンテナーをインストールするプールの作成から始めます。 プール VM は Ubuntu 14.04 に基づいて作成されます。 プールは、Docker_starttask.sh で実行される開始タスクを使用して作成されます。このスクリプトでは、Docker リポジトリをパッケージ ソース リストに追加し、Docker エンジンをインストールして、構成後の手順を実行する方法を知っています。 このスクリプトは、VM が既定のプール構成である Ubuntu 14.04 に基づくと想定しています。 このスクリプトは他の Linux ディストリビューションでは機能しませんが、簡単に更新できます (特に他のバージョンの Ubuntu の場合)。 スタートアップ タスクの RunElevated フラグが true に設定されているので、スクリプト cli には sudo&quot; は&quot;必要ない点に注意してください。<br>

  &nbsp;<br>

  2 番目のサンプルでは、ジョブ準備タスクを使用してジョブを作成します。 タスクは Docker pull を &quot;実行して&quot; 、イメージを削除Docker Hub。 ジョブ準備タスクは、ジョブの他のタスクがノードで実行される前に実行される必要があります。そのため、実際のタスクが開始すると、イメージがそこに表示されます。 もう 1 つのオプションは、 &ldquo;Docker pull を&rdquo; タスクコマンド ラインの最初の処理として設定する方法です。<br>

  &nbsp;<br>

  このサンプルでは、最後にタスクがジョブに追加されます。 タスクのコマンド ラインは、コンテナーにコマンドをフィードするワンラインです。 &quot;コンテナーは対話モードとして -i&quot; を使用して実行され、コンソールの STDIN/STDOUT/STDERR にアタッチされ、すべての出力を stdout と stderr にキャプチャできます。<br>

  &nbsp;<br>

  スクリプトが完了すると、コンテナーは終了します。 タスクは完了としてマークされます。 Docker の実行は、コンテナー自体から返されたコードで終了します。そのため、タスク実行情報プロパティからタスク終了コードを監視して結果を確認できます。<br>

  &nbsp;<br>

  コンテナーは VM サンドボックスではなくホスト環境内で実行されるので、通常の監視ツールが機能します。 ホスト上の top/htop のようなコマンドでは、タスクの CPU 使用率が表示されます。 Stdout/stderr は、コンテナーからの出力をキャプチャします。 ホストはインターネットに接続して、必要なリソースをダウンロードできます。<br>

  &nbsp;<br>

  言及する価値の 1 つは、コンテナーが既定&#39;ホスト上のファイルを共有しなけれないことです。 コンテナーを起動するために &quot;リソース ファイルが必要な場合は、Docker cli に -v&quot; オプションを追加するだけで、コンテナーにホスト ディレクトリをマウントできます。</p>
