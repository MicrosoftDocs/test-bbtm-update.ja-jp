### YamlMime:Yaml
ms.openlocfilehash: f60b5b961a354c40833841b98f91dc65be93d3d3
ms.sourcegitcommit: d03bdc7fe5447adb6530886aab848b75fe8fa8ee
ms.translationtype: MT
ms.contentlocale: ja-JP
ms.lasthandoff: 03/11/2022
ms.locfileid: "139894523"
Slug: azure-mobile-apps-september-2015-update
Title: Azure Mobile Apps 9 月2015更新プログラム
Summary: Azure Mobile Apps 向け .NET サーバー SDK の最新の機能強化について説明します。 Azure Table Storage のサポートが追加され、ASP.NET プロジェクトの種類との統合が改善されました。
Content: >-
  <p><em>この投稿は Matthew Henderson によって共同作成されました</em> <a href="https://azure.microsoft.com/en-us/blog/author/matthew-henderson/"><em></em></a>。<br />

  &nbsp;</p>


  <p>&rsquo;Azure Mobile Apps 用 .Net サーバー SDK の最新の更新プログラムについてお知らせします。 &rsquo;この記事をまだお持ちでない場合は、先月の<a href="https://azure.microsoft.com/en-us/blog/azure-mobile-apps-august-2015-update/">ブログ投稿を確認 &rsquo; </a>することをお勧めします。ここでは、統合された web とモバイルのエクスペリエンスについて説明しました。</p>


  <p>今月は、.NET サーバー SDK のバージョン0.2.575 に新しい更新プログラムがいくつか追加されました。&nbsp;</p>


  <ul>
   <li>(新規!)Azure Table Storage のサポート</li>
   <li>(重大な変更)ASP.NET との統合を強化するために、自動 OWIN セットアップを削除しました</li>
   <li>(重大な変更)認証ミドルウェアのセットアップの機能強化</li>
   <li>(重大な変更)データベーススキーマセットアップの既定値の向上</li>
   <li>(重大な変更)クライアントは、システムプロパティを要求する必要がなくなり、既定で送信されます。</li>
  </ul>


  <p>作業を開始する最も簡単な方法は、他の依存関係を取り込む<a href="https://www.nuget.org/packages/Microsoft.Azure.Mobile.Server.Quickstart" target="_blank">、NuGet パッケージ</a>をインストールすることです。 また、必要な特定の Microsoft.............</p>


  <h2>Azure Storage</h2>


  <p>これで、Storage 新しい TableControllers パッケージを通じて、azure Table Storage をのバッキングデータプロバイダーとして使用できるようになりました。</p>


  <p>Storage に接続するには、TableController の<strong>Initialize ()</strong>メソッドに次のを追加します。</p>


  <pre class="prettyprint">

  DomainManager = new StorageDomainManager<todoitem>(connectionStringName, tableName, Request);

  </todoitem></pre>


  <p>ここで、 <strong>connectionStringName</strong>は Storage 接続文字列のアプリ設定キーです。 <strong>tableName</strong>は、アクセスするテーブルの名前です。 これは多くの場合、コントローラーの名前にすぎません。 <strong>ControllerName ()</strong>です。</p>


  <p><strong>Storagedomainmanager</strong>は<strong>entitydomainmanager</strong>とは少し異なる方法で動作し、TableController ヘルパーメソッドの異なるサブセットを実装します。 つまり、TableController &ldquo; get &rdquo; メソッドは次のようになります。</p>


  <pre class="prettyprint">

  public Task&lt;IEnumerable&lt;TodoItem&gt;&gt; GetAllTodoItems(ODataQueryOptions queryOptions)

  {
      return QueryAsync(queryOptions);
  }


  public Task&lt;SingleResult&lt;TodoItem&gt;&gt; GetTodoItem(string id)

  {
      return LookupAsync(id);
  }</pre>


  <p>Mobile Apps クライアント sdk はすべて、この Table Storage ドメインマネージャーと連携します。 ただし、現在、iOS クライアントでは、StorageDomainManager を使用したテーブルコントローラー &nbsp; に対するオフライン同期はサポートされていません。</p>


  <h2>OWIN スタートアップ</h2>


  <p>.NET サーバー SDK には、OWIN ミドルウェアの使用方法がいくつかあります。 以前の OWIN パッケージには、一部のコンポーネントを自動的に接続する startup クラスが含まれていました。</p>


  <p>これは便利な機能ですが、動作 &rsquo; をカスタマイズするのも難しく、既存のアプリに簡単に統合できませんでした。 クイックスタートパッケージにこのスタートアップクラスは含まれなくなりました。 <strong>これは重大な変更です。</strong></p>


  <p>以前のバージョンのクイックスタートパッケージからアップグレードするには、新しいスタートアップクラスを追加し、そこに構成を移動する必要があります。</p>


  <ol>
   <li>Visual Studio で、プロジェクトを右クリックし、[<strong>追加 &gt; </strong>]、[新しい項目] の順に選択します。 <strong> &gt; &gt; [OWIN Startup クラス</strong>] を選択します。&nbsp;</li>
   <li><strong>MobileAppConfiguration</strong>のコードを<strong>webapiconfig.cs ()</strong>から、新しい startup クラスの<strong>Configuration ()</strong>メソッドに移動します。 <strong>Global.asax によって</strong>渡されたグローバルではなく、新しい<strong>httpconfiguration</strong>を作成する場合は、アプリを呼び出し<strong>ます。UseWebApi (config)</strong>は、メソッドの末尾にあります。</li>
  </ol>


  <p>または、Azure Portal のサーバークイックスタートプロジェクトをプロジェクトの開始点として使用します。</p>


  <h2>OWIN ミドルウェア</h2>


  <p>この更新プログラムの認証エクスペリエンスを改善しまし &rsquo; た。 これで、すべての auth コンポーネントが独自の OWIN ミドルウェアに含まれるようになりました。 これにより開発者に対する制御が向上するだけでなく、モバイルアプリの認証コンポーネントは、SignalR ルートを含む任意の ASP.NET アプリの種類と統合できるようになりました。</p>


  <p><strong>これは互換性に影響する変更</strong>点です。 <strong>MobileAppConfiguration メソッド ()</strong> は削除されており、不要になりました。</p>


  <p>認証を使用するには、OWIN startup クラスで次の呼び出しを行う必要があります。</p>


  <pre class="prettyprint">

  app.UseMobileAppAuthentication(config);</pre>


  <p>ここで、 <strong>config</strong> はグローバル httpconfiguration または WEB API OWIN 自己ホストに使用しているもののいずれかです。 認証の設定の詳細については、「<a href="https://azure.microsoft.com/en-us/documentation/articles/app-service-mobile-dotnet-backend-how-to-use-server-sdk/#how-to-add-authentication-to-a-server-project" target="_blank">方法: サーバープロジェクトに認証を追加</a>する」を参照してください &nbsp; 。</p>


  <h2>データベース スキーマ</h2>


  <p>以前は、.NET サーバー SDK では、Entity Framework セットアップで既定のスキーマ名としてモバイルアプリ名が使用されていました。 私たちは、dbo またはカスタムスキーマ名を使用することがよくあるため、この &rsquo; ような既定値はあまり役に立ちませんでした。</p>


  <p>現在、.NET サーバー SDK のクイックスタートでは、Entity Framework <strong>dbo</strong>と同じ既定のスキーマ名が使用されています。 別のスキーマ名を使用する場合は、Dbcontext で指定し <strong>ます。 OnModelCreating ()</strong> の実装:</p>


  <pre class="prettyprint">

  modelBuilder.HasDefaultSchema(schema); // specify the schema string </pre>


  <p>この変更の一環として、 <strong>GetSchemaName ()</strong>メソッドを削除しました。このメソッドでは、アプリ設定 <em>MS_TableSchema</em> (存在する場合) または <em>MS_MobileServiceName </em>(そうでない場合) が使用されます。</p>


  <p>(注: クラス <strong>Servicesettingsdictionary</strong> は、サーバー SDK の最新の更新プログラムのセットでは、 <strong>MobileAppSettingsDictionary </strong>に変更されました)。</p>


  <p><strong>これは、互換性に影響する変更</strong>点です。 <strong>GetSchemaName ()</strong>メソッドを使用している場合は、次の変更を行います。</p>


  <pre class="prettyprint">

  // string schema = MobileAppSettingsDictionary.GetSchemaName(); // method removed


  // ensure you have an app setting for MS_MobileServiceName

  string schema = System.Configuration.ConfigurationManager.AppSettings.Get(&quot;MS_MobileServiceName&quot;); </pre>


  <p>注: クイックスタートプロジェクトでは、web.config に<em>MS_MobileServiceName</em>の設定が追加されなくなりました。スキーマ名として独自のキーを作成し、web.config または Azure Portal のアプリ設定ブレードで指定することをお勧めします。</p>


  <h2>システム プロパティ</h2>


  <p>以前は、 <strong>__createdAt</strong>、 <strong>__updatedAt</strong>、 <strong>__version</strong>、および <strong>__deleted</strong> のシステムプロパティは、クエリ <strong>__systemProperties = *</strong> をサーバーに送信した場合にのみクライアントに送信されます。 Mobile Services では、旧バージョンとの互換性のためにこの動作が必要でしたが、クライアント sdk をテストおよび開発するのは困難でした。</p>


  <p>この新しいリリースでは、クエリ文字列 <strong>__systemProperties</strong> が無視され、サービスは常にこれらのシステムプロパティを返します。 <strong>$Select</strong>を使用して特定の列を取得する場合は、単にこの句にシステムプロパティを追加します。 &#39;s $select が指定されていない場合は、システムプロパティを含むすべてのプロパティが返されます。</p>


  <p><strong>これは、互換性に影響する変更</strong>点です。 &nbsp;クライアント Sdk はほとんどの場合、同じように動作しますが、次の2つの点に注意する必要があります。</p>


  <ul>
   <li>IOS と JavaScript クライアントでは、オンラインテーブル Api が使用されている場合、更新操作と削除操作によって <strong>__version</strong> フィールドが既定でサーバーに返されます。 同時更新 (オプティミスティック同時実行制御) の競合処理のサポートが不要な場合は、更新を実行する前に、このフィールドをクライアントオブジェクトから削除する必要があります。 オフラインの同期 Api は影響を受けません。</li>
   <li>任意のクライアントで、クエリに <strong>$select</strong> と <strong>__systemProperties</strong>の両方が含まれている場合は、 <strong>$select</strong> 句のシステムプロパティのみが返されます。 クエリを変更して、必要なシステムプロパティを <strong>$select</strong> 句に含める必要があります。</li>
  </ul>


  <p>Mobile Apps はまだプレビュー段階ですが、試してみる&#39;をお勧めします。 コメント、 <a href="https://social.msdn.microsoft.com/forums/azure/en-US/home?forum=azuremobile">MSDN フォーラム</a> &nbsp; 、または <a href="https://twitter.com/AzureMobile">@AzureMobile</a> についてご意見をお寄せください。 製品に記載されている内容 &rsquo; についてご提案がある場合は、フィードバックサイトでお知らせください。</p>


  <p>SDK への変更は引き続き投稿され、 <a href="https://go.microsoft.com/fwlink/?LinkId=625009">.net SERVER sdk の changelog</a>にも含まれるように &nbsp;&#39;ます。</p>


  <ul>

  </ul>
