### YamlMime:Yaml
ms.openlocfilehash: 90eac1ed6d48b15b2604a7a3b3a5168b458f2607
ms.sourcegitcommit: d03bdc7fe5447adb6530886aab848b75fe8fa8ee
ms.translationtype: MT
ms.contentlocale: ja-JP
ms.lasthandoff: 03/11/2022
ms.locfileid: "139891236"
Slug: announcing-sql-parameterization-in-documentdb
Title: DocumentDB の SQL パラメーター化を発表
Summary: Azure DocumentDB SQL SDK でのパラメーター化されたクエリのサポートREST APIお知らせします。
Content: "<p><a href=\"https://azure.microsoft.com/en-us/services/documentdb/\" target=\"_blank\">Azure DocumentDB </a>SQL SDK でのパラメーター化されたクエリのサポートREST APIお知らせします。 この機能を使用して、パラメーター化されたクエリをSQLできます。 パラメーター化SQLは、ユーザー&ldquo;入力の堅牢な処理とエスケープを提供し、挿入 * によるデータの誤SQL防止&rdquo;します。 次&#39;.NET SDK を使用したサンプルを見てみしましょう。単純なクエリ文字列SQL LINQ 式に加えて、パラメーター&#39;クエリを作成するために使用できる新しい SqlQuerySpec クラスを追加しました。 次&#39;、 &quot;作成者名に対して 1 人のユーザーが指定したパラメーターを使用して Books&quot; コレクションにクエリを実行するサンプルを示します。</p>\n\n<pre class=\"prettyprint\">\nIQueryable&lt;Book&gt; queryable = client.CreateDocumentQuery&lt;Book&gt;(\n                collectionSelfLink,\n                new SqlQuerySpec\n        {\n                    QueryText = &quot;SELECT * FROM books b WHERE (b.Author.Name = @name)&quot;, \n                    Parameters = new SqlParameterCollection() \n            { \n                          new SqlParameter(&quot;@name&quot;, &quot;Herman Melville&quot;)\n                    }\n        });</pre>\n\n<p>ここで注意する必要がある興味深い点を次に示します。</p>\n\n<ul>\n    <li>SQL DocumentDB のパラメーターでは、T-SQL から借用された使い慣れた @ 表記が使用されます。</li>\n    <li>パラメーター値には、任意の有効な JSON (文字列、数値、ブール値、null、配列または入れ子になった JSON) を指定できます。</li>\n    <li>DocumentDB はスキーマを使用しないので、パラメーターはどの型にも対して検証されません</li>\n    <li>SqlParameterCollection に SqlParameters を追加することで、追加のパラメーターを簡単に指定できます</li>\n</ul>\n\n<p>また、DocumentDB REST APIパラメーター化もネイティブでサポートされています。 上記の .NET サンプルは、次の呼び出しにREST APIされます。 パラメーター化されたクエリを使用するには、次に示すように、Content-Type ヘッダーを <em><b>application/query+json</b></em> として指定し、クエリを JSON として本文で指定する必要があります。</p>\n\n<pre class=\"prettyprint\">\nPOST https://contosomarketing.documents.azure.com/dbs/XP0mAA==/colls/XP0mAJ3H-AA=/docs\nHTTP/1.1 x-ms-documentdb-isquery: True \nx-ms-date: Mon, 18 Aug 2014 13:05:49 GMT \nauthorization: type%3dmaster%26ver%3d1.0%26sig%3dkOU%2bBn2vkvIlHypfE8AA5fulpn8zKjLwdrxBqyg0YGQ%3d \nx-ms-version: 2014-08-21 \nAccept: application/json \nContent-Type: application/query+json \nHost: contosomarketing.documents.azure.com \nContent-Length: 50 \n{      \n    &quot;query&quot;: &quot;SELECT * FROM books b WHERE (b.Author.Name = @name)&quot;,     \n    &quot;parameters&quot;: [          \n        {&quot;name&quot;: &quot;@name&quot;, &quot;value&quot;: &quot;Herman Melville&quot;}         \n    ] \n}</pre>\n\n<p>上記の方法を使用して、ドキュメント コレクション、およびデータベース、DocumentCollections、Attachments などのシステム メタデータ コレクションに対してクエリを発行できます。 これを試してみるには、サポートされているプラットフォーム (.NET、Java、Node.js、JavaScript、または Python) に DocumentDB SDK の最新ビルドをダウンロードします。</p>\n\n<blockquote><em>*DocumentDB は、&ldquo;&rdquo;クエリは厳密に読み取り専用の操作なので、特権の昇格につながる最も一般的な種類のインジェクション攻撃の影響を受けにくい。ただし、悪意のあるクエリを&rsquo;作成することで、ユーザーが同じコレクション内でアクセスすべきではないデータにアクセスSQL場合があります。SQLパラメーター化のサポートは、このような攻撃を防ぐのに役立ちます。</em></blockquote>"
