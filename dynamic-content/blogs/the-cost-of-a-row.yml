### YamlMime:Yaml
ms.openlocfilehash: 405cf3371ff708217af73c682a70e749da345dfc
ms.sourcegitcommit: d03bdc7fe5447adb6530886aab848b75fe8fa8ee
ms.translationtype: MT
ms.contentlocale: ja-JP
ms.lasthandoff: 03/11/2022
ms.locfileid: "139897034"
Slug: the-cost-of-a-row
Title: 行のコスト
Summary: '[この記事は、チームによってSQL Azureされました。]前のブログ記事では、対象となるインデックスのコストを計算する方法について説明しました。この記事では、対象となるインデックスのパフォーマンスを評価できます。'
Content: "<p>[この記事は、チームによってSQL Azureされました。]</p><p>前のブログ記事では、対象となるインデックスのコストを計算する方法について説明しました。この記事では、対象となるインデックスのパフォーマンスが毎月のコストに見合う価値があった場合に評価できます。 このブログ記事では、Transact-SQL を使用して、テーブル内の行の平均コストを計算します。</p>  <p>Imagineをレビューする Web サイトを実行し、Web ページで広告スペースを販売して収益を生み出す方法について説明します。 広告エンジンは、レビューごとに毎月の収益の量を出力できます。 各レビューでストレージにどのくらいのコストがかかるか把握すると良いでしょうか。 このSQL Azure、それを実行できます。</p>  <h2>SQL Azure価格</h2>  <p>現時点ではSQL Azure月あたり 9.99 ドルのデータが課金されます (公式の価格については、こちらを参照してください)。 これは、データベースの上限サイズではなく、格納するデータの実際のサイズが下がる範囲のコストです。 つまり、1 GB の Web エディション データベースに数メガバイトしか格納していない場合、コストは月額 9.99 ドルになります。 範囲の上側は、1、5、10、20、30、40、50 ギガバイトです。データを格納するバイトあたりのコストを削減するサイズに近くなります。 次に示すのは、SQLコストを計算する Transact-SQL ステートメントです。</p>  <pre class=\"csharpcode\"><span class=\"kwrd\">DECLARE</span> @SizeInBytes bigint  <span class=\"kwrd\">SELECT</span> @SizeInBytes =  (<span class=\"kwrd\">SUM</span>(reserved_page_count) * 8192)      <span class=\"kwrd\">FROM</span> sys.dm_db_partition_stats    <span class=\"kwrd\">DECLARE</span> @Edition sql_variant  <span class=\"kwrd\">SELECT</span>  @Edition =DATABASEPROPERTYEX ( DB_Name() , <span class=\"str\">'Edition'</span> )    <span class=\"kwrd\">SELECT</span>    (<span class=\"kwrd\">CASE</span>       <span class=\"kwrd\">WHEN</span> @SizeInBytes/1073741824.0 &lt; 1 <span class=\"kwrd\">THEN</span> (<span class=\"kwrd\">CASE</span> @Edition <span class=\"kwrd\">WHEN</span> <span class=\"str\">'Web'</span> <span class=\"kwrd\">THEN</span> 9.99 <span class=\"kwrd\">ELSE</span> 99.99 <span class=\"kwrd\">END</span>)      <span class=\"kwrd\">WHEN</span> @SizeInBytes/1073741824.0 &lt; 5 <span class=\"kwrd\">THEN</span> (<span class=\"kwrd\">CASE</span> @Edition <span class=\"kwrd\">WHEN</span> <span class=\"str\">'Web'</span> <span class=\"kwrd\">THEN</span> 49.95 <span class=\"kwrd\">ELSE</span> 99.99 <span class=\"kwrd\">END</span>)       <span class=\"kwrd\">WHEN</span> @SizeInBytes/1073741824.0 &lt; 10 <span class=\"kwrd\">THEN</span> 99.99        <span class=\"kwrd\">WHEN</span> @SizeInBytes/1073741824.0 &lt; 20 <span class=\"kwrd\">THEN</span> 199.98      <span class=\"kwrd\">WHEN</span> @SizeInBytes/1073741824.0 &lt; 30 <span class=\"kwrd\">THEN</span> 299.97                   <span class=\"kwrd\">WHEN</span> @SizeInBytes/1073741824.0 &lt; 40 <span class=\"kwrd\">THEN</span> 399.96                    <span class=\"kwrd\">WHEN</span> @SizeInBytes/1073741824.0 &lt; 50 <span class=\"kwrd\">THEN</span> 499.95                        <span class=\"kwrd\">END</span>) / @SizeInBytes</pre>      <h2>行サイズの確認</h2>    <p>int、<b>bigint</b>、<b>float</b> などのデータ型を<b></b>行で使用している場合。 これらはすべて固定サイズであり、使用するストレージの量を簡単に計算できます。 ただし、 <b>varchar(max)</b> のような可変サイズ フィールドを使用している場合、テーブル内のすべての行に対して 1 行のサイズが 1 つになるわけではありません。各行は、格納されている内容によって異なります。 このため、テーブルの平均行サイズを使用して行のコストを計算します。</p>    <p>クラスター化インデックスのストレージ (テーブルのメイン ストレージ) と共に、そのテーブルに非クラスター化インデックスのコストを含める必要があります。 これらのインデックスは、全体的なパフォーマンスを向上させるデータを再配置します。非クラスター化インデックスサイズについては、このブログ記事を参照してください。</p>    <p>データベース内のすべてのテーブルのSQL月あたりのコストを計算する Transact-SQLを次に示します。</p>    <pre class=\"csharpcode\"><span class=\"kwrd\">DECLARE</span> @SizeInBytes bigint  <span class=\"kwrd\">SELECT</span> @SizeInBytes =  (<span class=\"kwrd\">SUM</span>(reserved_page_count) * 8192)      <span class=\"kwrd\">FROM</span> sys.dm_db_partition_stats    <span class=\"kwrd\">DECLARE</span> @Edition sql_variant  <span class=\"kwrd\">SELECT</span>  @Edition =DATABASEPROPERTYEX ( DB_Name() , <span class=\"str\">'Edition'</span> )    <span class=\"kwrd\">DECLARE</span> @CostPerByte <span class=\"kwrd\">float</span>    <span class=\"kwrd\">SELECT</span>    @CostPerByte = (<span class=\"kwrd\">CASE</span>       <span class=\"kwrd\">WHEN</span> @SizeInBytes/1073741824.0 &lt; 1 <span class=\"kwrd\">THEN</span> (<span class=\"kwrd\">CASE</span> @Edition <span class=\"kwrd\">WHEN</span> <span class=\"str\">'Web'</span> <span class=\"kwrd\">THEN</span> 9.99 <span class=\"kwrd\">ELSE</span> 99.99 <span class=\"kwrd\">END</span>)      <span class=\"kwrd\">WHEN</span> @SizeInBytes/1073741824.0 &lt; 5 <span class=\"kwrd\">THEN</span> (<span class=\"kwrd\">CASE</span> @Edition <span class=\"kwrd\">WHEN</span> <span class=\"str\">'Web'</span> <span class=\"kwrd\">THEN</span> 49.95 <span class=\"kwrd\">ELSE</span> 99.99 <span class=\"kwrd\">END</span>)       <span class=\"kwrd\">WHEN</span> @SizeInBytes/1073741824.0 &lt; 10 <span class=\"kwrd\">THEN</span> 99.99        <span class=\"kwrd\">WHEN</span> @SizeInBytes/1073741824.0 &lt; 20 <span class=\"kwrd\">THEN</span> 199.98      <span class=\"kwrd\">WHEN</span> @SizeInBytes/1073741824.0 &lt; 30 <span class=\"kwrd\">THEN</span> 299.97                   <span class=\"kwrd\">WHEN</span> @SizeInBytes/1073741824.0 &lt; 40 <span class=\"kwrd\">THEN</span> 399.96                    <span class=\"kwrd\">WHEN</span> @SizeInBytes/1073741824.0 &lt; 50 <span class=\"kwrd\">THEN</span> 499.95                        <span class=\"kwrd\">END</span>)  / @SizeInBytes</pre>      <pre class=\"csharpcode\"><span class=\"kwrd\">SELECT</span>             sys.objects.name,        <span class=\"kwrd\">sum</span>(reserved_page_count) * 8192 <span class=\"str\">'Bytes'</span>,         row_count <span class=\"str\">'Row Count'</span>,          (<span class=\"kwrd\">CASE</span> row_count <span class=\"kwrd\">WHEN</span> 0 <span class=\"kwrd\">THEN</span> 0 <span class=\"kwrd\">ELSE</span>         (<span class=\"kwrd\">sum</span>(reserved_page_count) * 8192)/ row_count <span class=\"kwrd\">END</span>)          <span class=\"str\">'Bytes Per Row'</span>,        (<span class=\"kwrd\">CASE</span> row_count <span class=\"kwrd\">WHEN</span> 0 <span class=\"kwrd\">THEN</span> 0 <span class=\"kwrd\">ELSE</span>          ((<span class=\"kwrd\">sum</span>(reserved_page_count) * 8192)/ row_count)           * @CostPerByte <span class=\"kwrd\">END</span>)          <span class=\"str\">'Monthly Cost Per Row'</span>  <span class=\"kwrd\">FROM</span>             sys.dm_db_partition_stats, sys.objects   <span class=\"kwrd\">WHERE</span>             sys.dm_db_partition_stats.object_id = sys.objects.object_id   <span class=\"kwrd\">GROUP</span> <span class=\"kwrd\">BY</span> sys.objects.name, row_count      </pre>      <p>このコマンドを Adventure Works データベースに読み込SQL Azureすると、次の結果が得られます。</p>    <p><a href=\"\"><img style=\"border-right-width: 0px; display: inline; border-top-width: 0px; border-bottom-width: 0px; border-left-width: 0px\" title=\"clip_image001\" border=\"0\" alt=\"clip_image001\" src=\"https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/3515.clip_5F00_image001_5F00_thumb_5F00_7820BCB1.png\" width=\"571\" height=\"261\"></a></p>    <p>注意点の 1 つは、データベース内の各製品の格納に 1 か月に 10 セントのコストがかかることと、各販売注文ヘッダーのコストが 5 セントである点です。 これにより、数日後にオフサイトに販売情報をアーカイブする方法、ストレージをオフセットする販売ごとのトランザクション コスト、販売されていないサイトから製品をクリーンアップする方法に関する優れた分析情報が得られる可能性があります。</p>    <p>もう 1 つの考慮すべき点は、Adventure Works データベース のデータが約 3 meg ほど小さいことです。データが大きくなると (1 ギガバイトの上側に近づくほど)、各バイトを格納するコストが減少します。 そのため、Adventure Works データベースで製品を追加すると、1 ギガバイト以下である限り、製品行ごとにストレージのコストが削減されます。 つまり、バイト ストアのコストを最小限に抑えるために、データベースを最大値に設定します。</p>    <h2>免責情報</h2>    <p>SQL Azure の価格と最大データベース サイズは、将来変更される可能性があります。インデックス コストが正確な状態を確認するために、提供されているクエリと現在のコストを比較してください。</p>    <h2>まとめ</h2>    <p>同じことを実現するより良い方法はありますか? 以下のコメントに投稿してください。 質問、懸念事項、コメントはありますか? 以下に投稿すると、対処を試みることができます。</p>"
