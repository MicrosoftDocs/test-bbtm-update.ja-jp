### YamlMime:Yaml
ms.openlocfilehash: d2b57cb8097f539d78e1ba484af583de6cdc1de3
ms.sourcegitcommit: d03bdc7fe5447adb6530886aab848b75fe8fa8ee
ms.translationtype: MT
ms.contentlocale: ja-JP
ms.lasthandoff: 03/11/2022
ms.locfileid: "139895998"
Slug: detecting-script-based-attacks-on-linux
Title: Linux でのスクリプトベースの攻撃の検出
Summary: 先月、Linux 用の Azure Security Centerの拡張機能を発表しました。 この投稿では、既存の検出に Linux アナログがWindowsする方法を示します。
Content: >-
  <p>先月、Linux 用の Azure Security Center<a href="https://azure.microsoft.com/en-us/blog/how-azure-security-center-helps-detect-attacks-against-your-linux-machines/">&rsquo;検出の拡張機能を発表しました</a>。 この投稿では、既存の検出に Linux アナログがWindowsする方法を示します。 この具体的な例は、コマンド ラインのエンコードまたは難読化です。 攻撃者がコマンドのエンコードを望む理由には、スクリプトにコマンドをカプセル化する際の引用符/エスケープの問題の最小化や、ホストベースの侵入検出から隠す基本的な手段が含まれます。 これらの手法には、ファイルをディスクにドロップする必要を回避する追加の利点があります。従来のウイルス対策製品によって攻撃者が検出されるリスクが軽減されます。</p>


  <h2>Windows に対するエンコードされた PowerShell 攻撃</h2>


  <p>このような動作は、環境に対する攻撃で使用Windowsがあります。 前のブログ <a href="https://azure.microsoft.com/en-us/blog/how-azure-security-center-unveils-suspicious-powershell-attack/">記事では、</a> PowerShell コマンドを base64 としてエンコードする手法の 1 つを紹介しています。 PowerShell を使用すると、実際にこれを非常に簡単に行い、次の形式のコマンドを使用できます。</p>


  <pre>

  powershell.exe -EncodedCommand dwByAGkAdABlAC0AbwB1AHQAcAB1AHQAIABFAG4AYwBvAGQAZQBkACAAUABvAHcAZQByAFMAaABlAGwAbAAgAHMAYwByAGkAcAB0AA==</pre>


  <p>唯一の実際のつまずきブロックは、デコードされたコマンドが UTF-16 である必要があるという要件です ( &lsquo;したがって、結果として得られる base64 では A&rsquo; が使用されます)。</p>


  <h2>Linux でのエンコードされたシェル攻撃</h2>


  <p>システムに対する攻撃Windows、Linux システムでのコマンドのエンコードに対して同じ動機が存在します。 特殊文字のカプセル化&iuml;の問題を回避し、ウイルス対策やログ分析を回避する場合です。</p>


  <p>Linux には PowerShells&rsquo; -EncodedCommand パラメーターに相当するネイティブな機能はありません。ほとんどの場合、<em>coreutils</em> パッケージ (<em>cp</em>、<em>ls</em>、<em>mv</em>、<em>rm</em> などの重要なコマンドを提供するパッケージ) から <em>base64</em> などのコマンドがパッケージ化されます。 埋め込みシステムでは、多くの場合、これらの同じユーティリティは <em>BusyBox</em> または同様のユーティリティを含めることによって提供されます。 これにより、エンコードされたコマンドの実行は、このような呼び出しの出力を選択したシェルにリダイレクトするのと同じほど簡単です。 単純な Bash の例は次のようになります。</p>


  <pre>

  echo ZWNobyAiT2JmdXNjYXRlZCBiYXNoIHNjcmlwdCI= | base64 -d | bash</pre>


  <p>この時点で注意する必要があるのは、Linux では特に、base64 が唯一の町のゲームではなく、16 進数エンコードがユビキタスである可能性が高いと思います。</p>


  <pre>

  echo 6563686f20224f626675736361746564206261736820736372697074220a | xxd -r -p | bash</pre>


  <p>または、より詳細な円記号でエスケープされた 8 進数または 16 進数:</p>


  <pre>

  printf &#39;\145\143\150\157\040\042\117\142\146\165\163\143\141\164\145\144\040\142\141\163\150\040\163\143\162\151\160\164\042\012&#39; | bash</pre>


  <h2>Linux でのエンコードされたスクリプト攻撃</h2>


  <p>これらの専用デコーダーに加えて、Python/Perl/Ruby などのほとんどのスクリプト言語には、独自の組み込みの base64 ライブラリが付属しています。そのため、このようなスクリプトの難読化は非常に簡単です。 単純な Perl の例は次のようになります。</p>


  <pre>

  exec(decode_base64(&quot;SW5zZXJ0IFBlcmwgc2NyaXB0IGhlcmUuLi4=&quot;))</pre>


  <p>この手法の欠点の 1 つは、関連するライブラリを最初にインポートする一般的な要件です ( &ldquo;この場合は、必要な MIME::Base64&rdquo; ステートメントを省略しました)。</p>


  <h2>Linux ホストで観察された実際の攻撃</h2>


  <p>次の例は、Python でのこのアプローチの実際の使用方法を示しています。 このイベントでは、SSH パスワードのブルート フォースが成功した後の動作が観察されました。</p>


  <p>このアクティビティは、ブルート フォースの成功から始Azure Security Center、複数の異なる分析によって取得されました。 次のスクリーンショットは、前のセクションで説明した種類の疑わしいエンコードされた Python の検出を示しています。</p>


  <p><a href="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/c0ea20d9-e3b8-4027-921f-765eb473acfc.png"><img alt="Azure Security Center detection" border="0" height="921" src="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/1db8120f-c115-40b8-ab62-ea892020018b.png" style="margin: 0px auto; border: 0px currentcolor; border-image: none; float: none; display: block; background-image: none;" title="Azure Security Center検出" width="1202"></a><br>

  &nbsp;<br>

  アラートで強調表示されているコマンド ラインからカプセル化された base64 をデコードすると、次のようになります。</p>


  <p><a href="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/2760706a-7fc8-41e3-99ef-0308f5d5dd89.png"><img alt="Python botnet downloader" border="0" height="243" src="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/448dbd05-9caf-4911-abcd-31a3e5bba192.png" style="margin: 0px auto; border: 0px currentcolor; border-image: none; float: none; display: block; background-image: none;" title="Python botnet ダウンッカー" width="940"></a><br>

  &nbsp;<br>

  ご覧のように、<em>urlopen</em> とそれ以上の <em>base64decodeexec</em> /  は、さらに base64 でエンコードされた Python をダウンロードして実行します。<em></em> この動作は、外側のエンコードの下で、強調表示されたアラートによって検出された動作です。 ダウンロードするスクリプトは、完全に Python ボットネットのメイン コントローラー コードです。</p>


  <p>コントローラー スクリプトの後続の<em>分析 (さらに</em> <em>urlopen</em> 呼び出しを介して受け取る構成を含む) は、このボットネットの主な目標は、ワイプという名前のバイナリとして保存された Monero の暗号化通貨マイナーのダウンロードと実行を示唆している可能性があります (Linux ファイルシステム署名をワイプするための使い慣れたツールの名前を想定したのが変です)。 最後に、永続化は、さらに別の base64 でエンコードされた Python スクリプトを実行する 6 時間の cron ジョブを追加して実現されます。今回は <em>httpsd</em> として格納されます (おそらく&rsquo; Apaches <em>httpd</em> の虚数 SSL バリアントのように選択されます)。 コントローラー コードの次のスニペットでは、この後者の操作が強調表示されています。</p>


  <p><a href="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/e13aee25-1dd1-4c8c-a5c8-fa6a14a623ba.png"><img alt="Python botnet controller" border="0" height="693" src="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/d337d8be-a986-4430-8d58-8b0de0134cdc.png" style="margin: 0px auto; border: 0px currentcolor; border-image: none; float: none; display: block; background-image: none;" title="Python Botnet コントローラー" width="940"></a></p>


  <h2>Linux VM の保護</h2>


  <p>この投稿に記載されている攻撃の種類の多くは、SSH パスワードのブルート フォースに由来します。 個々のマシンのアクセス要件に応じて、この手法を軽減する方法は複数あります。 最も簡単な解決策は、可能であれば、ネットワークのベスト プラクティスに関するアドバイスで説明したように、SSH を無効にするか、特定のネットワークへのアクセス <a href="https://docs.microsoft.com/en-us/azure/security/azure-security-network-security-best-practices">をロックダウンすることです</a>。 インターネットからのアドホック接続が特定のマシンに必要な場合、 <a href="https://docs.microsoft.com/en-us/azure/security-center/security-center-just-in-time">Azure Security Center&rsquo; s JIT</a> 仮想マシンへのアクセスを有効にすると、限られた期間にオンデマンド アクセスを許可できます。 最後に、SSH ガイダンスの大部分と同様に、公開キー認証を有効にして<a href="https://docs.microsoft.com/en-us/azure/virtual-machines/linux/create-ssh-keys-detailed"></a>パスワード ログインを無効にした方が、ほとんどの場合、賢明な予防措置です。</p>


  <h2>まとめ</h2>


  <p>PowerShell 分析は、一見すると完全に焦点を当てているWindows、Linux システムをターゲットとする攻撃者も同様の動作を示します。 多くの場合、これは両方のプラットフォームを攻撃するのと同じユーザーで、実際には驚く必要はありません。 また、それらを検出する方法は、多くの場合、同様に移植可能である可能性を覚えておくことが重要です。 この移植性は、上記の例に示すように、Python などのプラットフォームに依存しないスクリプト言語を使用して、実際にはさらに一歩踏み込む可能性があります。多くの場合、攻撃者は Windows と Linux の両方でまったく同じコードを使用して、後続の検出を同じにします。</p>
