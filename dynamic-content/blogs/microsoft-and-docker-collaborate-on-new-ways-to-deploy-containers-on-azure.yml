### YamlMime:Yaml
ms.openlocfilehash: 411f21cbcfb0b3bc99c3a334aaad96f9a7906f4d
ms.sourcegitcommit: d03bdc7fe5447adb6530886aab848b75fe8fa8ee
ms.translationtype: MT
ms.contentlocale: ja-JP
ms.lasthandoff: 03/11/2022
ms.locfileid: "139894761"
Slug: microsoft-and-docker-collaborate-on-new-ways-to-deploy-containers-on-azure
Title: Microsoft と Docker が Azure にコンテナーをデプロイする新しい方法で共同作業を行う
Summary: これまで以上に、開発者は、急速に増加する顧客の要求を満たすために機敏性を必要とします。
Content: >-
  <p>これまで以上に、開発者は、急速に増加する顧客の要求を満たすために機敏性を必要とします。 コンテナー化は、機敏性を高める重要な方法の 1 つです。 コンテナー化されたアプリケーションは、ライフサイクルのすべてのステージのコードとして必要なインフラストラクチャ、依存関係、構成を定義することで、より一貫性のある反復可能な方法で構築されます。 多くの場合、アプリケーションは実行時に起動と停止が速くなります。多くの場合、クラウドでの迅速な起動、停止、スケールアウト、更新に役立ちます。</p>


  <p>これを念頭に置<a href="https://aka.ms/dockerazuremay2020" target="_blank"></a>いて、Microsoft と Docker の間で新しいパートナーシップを発表し、Docker Desktop を Microsoft Azure および Visual Studio 製品ラインとより密接に統合しました。&nbsp;&nbsp;</p>


  <p>Docker Desktop の組み込みツール、機能、およびコマンド ライン ユーティリティを使用すると、コンテキストを使用してクラウドでコンテナーを実行し、いくつかの簡単なコマンドで Azure コンテナーで実行するためのコンテキストとして Azure をネイティブに設定する方法が提供されます。 製品の統合は、Azure Container Instances (ACI) を作成する機能から始まります。これは、オーケストレーションなしで、分離されたコンテナーで動作できる任意のシナリオのソリューションです。</p>


  <p>例&rsquo;を使用して、新しい製品の統合を見てみしましょう。 Docker Desktop を使用してローカル開発者マシン上で既にビルドおよび実行されている、単純な TCP ベースの Python ゲーム サーバー アプリがあります。 アプリは、Linux の細いバージョンと、その他の依存関係に依存requirements.txt。 Visual Studio Code の Docker ツール拡張機能では、Docker Desktop 上でビルドと実行を簡単に実行できるコマンドと、Docker Hub のプライベート コンテナー レジストリへのプッシュが提供されます。 このエクスペリエンスは、WSL2 の新しいリリースを使用して特に高速です。</p>


  <p><a href="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/ec2c30c3-ff3a-483f-a922-72832d7587a6.gif"><img alt="DockerAnnouce1" border="0" height="576" src="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/c2dfbf4e-3ca4-42c1-acec-cd89fd674efb.gif" style="border: 0px currentcolor; margin-right: auto; margin-left: auto; display: block; background-image: none;" title="DockerAnnouce1" width="1024"></a></p>


  <p>更新されたバージョンの Docker Desktop では、今年の後半に、次の手順に合った Docker コンテキストを作成するためのネイティブ コマンドがAzure Container Instances。</p>


  <p style="margin-left: 40px;"><code>$ docker context aci-create paulyuk/webapp-dev<br>

  $ docker context use paulyuk/webapp-dev</code></p>


  <p>コンテキストは、Docker ホストを持つ 1 つ以上の環境間で簡単にスワップする場合に便利です。 たとえば、ローカル (既定値)、myapp-dev、myapp-qa のコンテキストを使用できます。 Docker ツール チェーン全体 (Docker.exe CLI を含む) がコンテキストを受け入れ、 これにより、同じ使い慣れたコマンドを使用して、Azure でコンテナーを簡単に実行し、ローカルで実行するのと一貫性が保たれ、</p>


  <p style="margin-left: 40px;"><code>$ docker run paulyuk/pythontcpgame:1.1</code></p>


  <p>Docker Desktop の標準ツールを使用して、コンテナーを Azure にデプロイするのと同じ方法で簡単にデプロイできます。 さらに、Docker Desktop + Visual Studio + WSL2 + GitHubを使用して、クラウドに最適化されたデスクトップを作成できます。 この <a href="https://aka.ms/dockercon2020azuresession" target="_blank">DockerCon LIVE 2020</a> セッションの統合について詳しく説明します。</p>


  <p>Docker とのコラボレーションを拡大し、開発者のエクスペリエンスを向上し続けることにうらやむを得ています。</p>


  <h2>詳細情報</h2>


  <p>パートナーシップの詳細については、Docker のこのリリースと<a href="https://aka.ms/dockerblogpostmay2020" target="_blank">ブログの投稿を参照してください</a>。<a href="https://aka.ms/dockerazuremay2020" target="_blank"></a> Docker コンテキストを使用して現在<a href="https://code.visualstudio.com/docs/containers/overview" target="_blank">VS Code Docker 拡張機能</a>を利用できます。<a href="https://www.docker.com/products/docker-desktop" target="_blank">Docker Desktop</a> と <a href="https://aka.ms/wsl2" target="_blank">WSL2 統合は現在利用</a>できます。 Docker Desktop での ACI 統合を使用したプレビューは、今年の後半に続きます。</p>
