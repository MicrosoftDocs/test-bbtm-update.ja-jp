### YamlMime:Yaml
ms.openlocfilehash: 25c609e75f383f6b10aa7208b1b1314b64f484ac
ms.sourcegitcommit: d03bdc7fe5447adb6530886aab848b75fe8fa8ee
ms.translationtype: MT
ms.contentlocale: ja-JP
ms.lasthandoff: 03/11/2022
ms.locfileid: "139896087"
Slug: build-an-azure-app-service-to-record-raspberry-pi-sensor-data
Title: Raspberry Pi センサー Azure App Service記録するデータを作成する
Summary: 最近、Raspberry Pi と Azure SDK 2.8.2 対応 Visual Studio 2015 Community Edition を使用して、Azure App Service で実行されている API アプリにセンサー データを送信できる迅速でダーティなアプリケーションを作成することを決定しました。 このブログ記事では、このサンプルの作成について説明します。
Content: >-
  <p>休日&rsquo;から Raspberry Pi が座り回り、それを利用する方法に関する多くのアイデアが得ていました。 アイデアは問題&rsquo;ではありません。時間が不足しています。 2016&rsquo; 年はうるう年を考えると、1 日が余分に過ごしたので、追加の日を使用して最後に Raspberry Pi をいじってみたらどうでしょうか。 &rsquo;Visual Studio 最近、Azure App Service 2015&rsquo; の Azure App Service ツールの構築と発表に非常に忙しいので、チームの一部の作成と知識を使用して新しい楽しいことを行ってみたらどうでしょうか。</p>


  <p>そこで、Raspberry Pi と <a href="https://azure.microsoft.com/en-us/blog/announcing-azure-sdk-2-8-2-for-net/" target="_blank">Azure SDK 2.8.2</a> 対応 Visual Studio 2015 Community Edition を使用して、Azure App Service で実行されている API アプリにセンサー データを送信できる迅速でダーティなアプリケーションを作成しました。 この投稿では、このサンプルの作成について説明します。このサンプルは、このサンプル リポジトリに格納<a href="https://github.com/bradygaster/LeapDayTinkering" target="_blank">GitHubされています</a>。</p>


  <h1>前提条件</h1>


  <p>この投稿では、サンプル コードをビルドして実行するためのすべての部分が、App Serviceデバイス上にあると想定しています。 必要なハードウェアとソフトウェアの両方の前提条件を次に&rsquo;示します。</p>


  <ol>
      <li><a href="https://dev.windows.com/en-us/iot" target="_blank">IoT</a> <a href="https://www.raspberrypi.org/products/raspberry-pi-2-model-b/" target="_blank">で実行されている Raspberry Pi 2 モデル B+</a> Windowsです。 Windows IoT を使用して Raspberry Pi を設定するプロセスは単純ですが、この投稿の範囲を超えている場合があります。 IoT&rsquo; サイトはじめににWindows関する記事が掲載されています。デバイスにデバイスをインストールする必要がある場合はWindows開始してください。 プロセス全体に要する&rsquo;時間は 1 時間未満で、重い作業はほとんど必要ありません。そのため、IoT&rsquo; を新規に使用する場合は、簡単なウィザードを使用してセットアップ プロセスを非常に基本的に行います。</li>
      <li><a href="https://www.visualstudio.com/" target="_blank">Visual Studio 2015 Community</a></li>
      <li><a href="https://azure.microsoft.com/en-us/blog/announcing-azure-sdk-2-8-2-for-net/" target="_blank">Azure SDK 2.8.2 for .NET</a> には、Web、モバイル、および開発者向けの新しい機能強化がREST APIされています</li>
      <li>コード&rsquo;をデプロイするために Azure アカウントが必要App Service。 まだお持ち&rsquo;でない場合は<a href="https://azure.microsoft.com/en-us/free/" target="_blank"></a>&nbsp;、こちらにサインアップし<a href="https://www.visualstudio.com/products/visual-studio-dev-essentials-vs"></a>、Visual Studio Dev Essentials 25 ドルの Azure クレジットを受け取る必要があります。</li>
  </ol>


  <p>これらの項目に加えて、&rsquo;Raspberry Pi をネットワークに接続するためのネットワーク ケーブルも必要です。 接続されると&rsquo;、&rsquo;&rsquo;Visual Studio からデバイスにコードをデプロイし、デバイスでライブ実行されている間にコードをデバッグできます。 マウスとキーボード&rsquo;を Raspberry Pi に接続できるのが理想的です。 デスクトップ コンピューターからワイヤレス マウスとキーボードの組み合わせを使用しましたが、Raspberry Pi に対してヒューマン インターフェイス デバイスを有効にするための多くのオプションが存在します。</p>


  <h1>センサー データを記録するアプリ サービス</h1>


  <p>最初の手順は、デプロイして実行する基本的なREST APIを作成Azure App Service。 azure API Apps テンプレート&rsquo;Visual Studio使用すると、空のプロジェクトを簡単に開始できます。 このテンプレートは基本的に<a href="https://www.asp.net/web-api" target="_blank"></a>&rsquo;空の ASP.NET Web API提供します。そのため、経験豊富な開発者が ASP.NET 場合は、この部分を使い慣れたものにする必要があります。 Azure API Apps プロジェクト テンプレートでは<a href="https://www.nuget.org/packages/swashbuckle" target="_blank">、Swashbuckle NuGet</a> パッケージも追加されています。このパッケージにより、<a href="https://github.com/OAI/OpenAPI-Specification" target="_blank">Open API Specification</a> (旧<a href="https://swagger.io/" target="_blank">称 Swagger</a>) メタデータを使用して Web API エンドポイントを動的に記述する機能が有効になります。</p>


  <p><img alt="leap-day-tinkering-01" border="0" height="476" src="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/ed40f875-1b17-4cff-8c91-c3479e36c133.png" style="border-left-width: 0px; border-right-width: 0px; background-image: none; border-bottom-width: 0px; padding-top: 0px; padding-left: 0px; display: inline; padding-right: 0px; border-top-width: 0px" title="leap-day-tinkering-01" width="610"></p>


  <p>Swashbuckle パッケージを更新して、パッケージがテンプレートに含まれているので追加された機能の利点を得API Appsしました。 Swashbuckle の新機能の一部には、Web API アクション メソッドを装飾するために使用できる注釈が含まれます。 これらの手法と他の手法と Swashbuckle をカスタマイズする方法の詳細については、Azure.com ドキュメント センターの記事「 <a href="https://azure.microsoft.com/en-us/documentation/articles/app-service-api-dotnet-swashbuckle-customize/" target="_blank">Swashbuckle</a> で生成された API 定義のカスタマイズ」 <a href="https://azure.microsoft.com/en-us/get-started/" target="_blank">を参照</a>してください。</p>


  <p>センサー <a href="https://github.com/bradygaster/LeapDayTinkering/blob/master/LeapDayTinkering.AppService/Controllers/SensorController.cs" target="_blank">とデバイス Web</a> API <a href="https://github.com/bradygaster/LeapDayTinkering/blob/master/LeapDayTinkering.AppService/Controllers/DeviceController.cs" target="_blank">コントローラー</a> のコードは意図的に基本的です。 実際には&rsquo;何も格納しませんが、独自のストレージ パラダイムをプラグインできるよう、基本的な開始点を提供するように設計されています。 必要に合SQL Server<a href="https://azure.microsoft.com/en-us/services/sql-database/" target="_blank">データベース</a>、App Service ファイル システム、<a href="https://azure.microsoft.com/en-us/documentation/services/app-service/" target="_blank"></a>または Azure Storageを使用してデータを永続<a href="https://azure.microsoft.com/en-us/documentation/services/storage/" target="_blank"></a>化できます。</p>


  <p><img alt="image" border="0" height="532" src="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/5f652c03-035a-47a7-915b-3dfb1ce0756c.png" style="border-left-width: 0px; border-right-width: 0px; background-image: none; border-bottom-width: 0px; padding-top: 0px; padding-left: 0px; display: inline; padding-right: 0px; border-top-width: 0px" title="image" width="610"></p>


  <p>たとえば、センサー コントローラーには、単純な <a href="https://github.com/bradygaster/LeapDayTinkering/blob/master/LeapDayTinkering.AppService/Models/SensorReading.cs" target="_blank">SensorReading</a> モデルのインスタンスを受け取る Post メソッドという 1 つのメソッドがあります。 <em>SwaggerResponse </em>属性を使用して、Post メソッドのビジネス ルールに基づいて API が返す可能性があるすべての HTTP 応答コードを指定できます。</p>


  <ol>
      <li>ユーザーが不明なデバイスのセンサー読み取りを送信しようとすると、コントローラーは、デバイスが存在しないことを示す HTTP 404 を&rsquo;返します。</li>
      <li>ユーザーが既知のデバイスのセンサー読み取りを送信すると、読み取りが記録され、HTTP 200 がクライアントに返されます。</li>
  </ol>


  <p>GitHub サンプルで提供されるコードは完全に自己的に含まれているので、独自のビジネス ルールやストレージ機能を使用してコードを拡張するための基本的な開始点を提供するための調整はほとんど必要とされません。 ここでは、 で&rsquo;この API を実行Azure App Service。</p>


  <h1>サービスへのApp Service</h1>


  <p>WEB API プロジェクトを API アプリとしてApp Service発行する方法は非常に簡単です。 プロジェクトを右クリックし、プロジェクトコンテキスト メニュー <strong>から [発行</strong> ] を選択します。 これを行った後、[プロファイルの発行] ダイアログが表示されます。 当然ながら、このコード&rsquo;をこのコードを公開してAzure App Service。</p>


  <p><img alt="leap-day-tinkering-03" border="0" height="379" src="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/c123ff23-ef35-4289-af13-a94bc36a5c62.png" style="border-left-width: 0px; border-right-width: 0px; background-image: none; border-bottom-width: 0px; padding-top: 0px; padding-left: 0px; display: inline; padding-right: 0px; border-top-width: 0px" title="leap-day-tinkering-03" width="480"></p>


  <p>次に、[&rsquo;作成] ダイアログApp Service&rsquo;使用して、Web API コードApp Service発行するファイル名を指定します。 次のスクリーン ショットで示されているApp Service Creation&rsquo; は、API&rsquo; アプリを発行すると推測できるほどスマートなので、[アプリの種類] メニューの既定の選択になります。</p>


  <p>[新規] ボタン <strong>をクリック </strong>して新しいリソース グループを作成し、新しい無料リソース グループプランApp Serviceしました。 [App Service の作成<strong></strong>] ダイアログの [作成] ボタンをクリックすると、リソース グループが App Service プランと、自分のコードをホストする実際の App Service と共に作成されます。</p>


  <p><img alt="leap-day-tinkering-04" border="0" height="360" src="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/b57bf73f-e1ee-4aed-bb6c-1137d9b6ed68.png" style="border-left-width: 0px; border-right-width: 0px; background-image: none; border-bottom-width: 0px; padding-top: 0px; padding-left: 0px; display: inline; padding-right: 0px; border-top-width: 0px" title="leap-day-tinkering-04" width="480"></p>


  <p>リソースが Azure App Service Visual Studioされると、発行プロファイルがダウンロードされ、プロジェクトに追加されます。 その後、発行プロセスが完了し、コードがクラウドで実行されます。</p>


  <h1>Raspberry Pi の接続</h1>


  <p>Raspberry Pi で実行されるコードも非常に単純で、意図的に独自の想像を使用して、必要に合った機能を追加できます。 チーム&rsquo; ルームで実行されている Raspberry Pi の大画面の画像を次に示します。 ご覧のように、アプリは &ndash; 非常に基本的です。切り替えボタンのみで構成され、クリックするとタイマーが開始されます。 タイマーが発生するたび、デプロイしApp Service要求が行されます。</p>


  <p><img alt="leap-day-tinkering-15" border="0" height="360" src="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/b2aef31f-abab-433f-b9f5-f0fd6f5481c0.jpg" style="border-left-width: 0px; border-right-width: 0px; background-image: none; border-bottom-width: 0px; padding-top: 0px; padding-left: 0px; display: inline; padding-right: 0px; border-top-width: 0px" title="leap-day-tinkering-15" width="480"></p>


  <p>Visual Studio App Service&rsquo; ツールで使用できる新しい REST API&rsquo; クライアント生成機能のおかげで、API に呼び出して応答を解析するために、複雑なコードや複雑なコードを記述する必要はありません。 IoT Windows は Visual Studio Universal Windows Project (UWP) テンプレートを使用して構築されたアプリです。Visual Studio に組み込みの REST API クライアント生成機能を使用して、UWP プロジェクトに直接コードを生成できます。</p>


  <p>これを行うには、Visual Studio で UWP <strong>&gt; </strong>プロジェクトを右クリックし、REST API で [クライアントの追加] ジェスチャを選択ソリューション エクスプローラー。 Visual Studio で何年も使用できるが、基本的な HTTP REST API に重点を置いた <strong>サービス参照の追加</strong>&rsquo; 機能と同様に、REST API クライアント ジェネレーターは、HTTP メソッドを介して App Service を呼び出す非常に単純な (および論理的な) コードをドロップします。</p>


  <p><img alt="leap-day-tinkering-06" border="0" height="463" src="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/0ed9f3c5-6d2d-4644-87a2-6661e3b4b8d0.png" style="border-left-width: 0px; border-right-width: 0px; background-image: none; border-bottom-width: 0px; padding-top: 0px; padding-left: 0px; display: inline; padding-right: 0px; border-top-width: 0px" title="leap-day-tinkering-06" width="480"></p>


  <p>[REST API クライアントの生成] ダイアログが開いたら、[ <strong>Azure</strong> 資産の選択] ボタンをクリックして、API 定義で有効になっている既存の App Services の一覧を表示できます (API Apps に対してではなく、任意の種類の App Service の API 定義を設定できます)。</p>


  <p><img alt="leap-day-tinkering-07" border="0" height="226" src="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/00d3da5e-ac9d-46df-8238-77e9bd9932d0.png" style="border-left-width: 0px; border-right-width: 0px; background-image: none; border-bottom-width: 0px; padding-top: 0px; padding-left: 0px; display: inline; padding-right: 0px; border-top-width: 0px" title="leap-day-tinkering-07" width="360"></p>


  <p>[既存のファイルの選択] ダイアログでAzure App Service最近デプロイしたファイルをApp Serviceしました。 便利な [検索] ボックスに注目してください。このボックスには、名前でフィルター処理App Servicesを表示できます。</p>


  <p><img alt="leap-day-tinkering-08" border="0" height="360" src="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/064be647-5c20-4881-90c7-82a0fdd0760e.png" style="border-left-width: 0px; border-right-width: 0px; background-image: none; border-bottom-width: 0px; padding-top: 0px; padding-left: 0px; display: inline; padding-right: 0px; border-top-width: 0px" title="leap-day-tinkering-08" width="480"></p>


  <p>App Service を選択して <strong>[OK</strong>] ボタンをクリックすると、メタデータがダウンロードされ、コードが生成され、NuGet を介して依存関係がインストールされ、コードがプロジェクトにドロップされます。</p>


  <p><img alt="image" border="0" height="360" src="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/faf8abe8-2b23-4591-99b6-bbff287a987f.png" style="border-left-width: 0px; border-right-width: 0px; background-image: none; border-bottom-width: 0px; padding-top: 0px; padding-left: 0px; display: inline; padding-right: 0px; border-top-width: 0px" title="image" width="251"></p>


  <p><strong>メモ： </strong>このGitHubコードを含む GitHub リポジトリには既に REST API Client&rsquo;&rsquo; コードが生成されています。そのため、自分で実行する場合は、これを行う必要はありません。 [API の&rsquo;形状を変更しない限り、実行する必要がある唯一の操作は、Azure にデプロイした App Serviceのベース URL&rsquo; を変更する必要があります。 <a href="https://github.com/bradygaster/LeapDayTinkering/blob/master/LeapDayTinkering.RaspberryPi/ViewModels/MainPageViewModel.cs" target="_blank">MainPageViewModel.cs</a>&rsquo; のコードでは、URL を変更する場所が表示されます。この URL は、デモンストレーション URL ではなくApp Serviceを参照します。</p>


  <p><img alt="image" border="0" height="389" src="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/9f627113-1fdf-4e6d-8f51-830e01ed6575.png" style="border-left-width: 0px; border-right-width: 0px; background-image: none; border-bottom-width: 0px; padding-top: 0px; padding-left: 0px; display: inline; padding-right: 0px; border-top-width: 0px" title="image" width="610"></p>


  <p>Raspberry Pi&rsquo; アプリ用にコードが完成したら、それを Raspberry Pi にデプロイし、そこで継続的に実行し、間隔で App Service を ping する必要があります。</p>


  <h1>Raspberry Pi へのデプロイ</h1>


  <p>ほとんどの場合、Pi でのライブへのデプロイとデバッグは比較的簡単です。 デバイス アプリ コードを含&rsquo;む UWP プロジェクトは既に準備が整い、ARM&rsquo; プロセッサで実行するように構成されています。そのため、自分で実行する必要はありません。 必要 <strong>な操作</strong> は、自分のデバイスで実行するプロジェクトを構成する方法です。 これを行うには、UWP プロジェクトの [<strong></strong>プロパティ] ノードをダブルクリックして、UWP プロジェクトの [プロパティ] Projectウィンドウを開Visual Studio。</p>


  <p>開いた&rsquo;後、[デバッグ] <strong>タブを</strong> 選択し、Raspberry Pi の IP アドレスを指定します。 これにより、Visual Studioをライブで展開またはデバッグする場合に、デバイスに接続する方法がわかっています。 [ターゲット デバイス] メニューから <strong>[リモート </strong>コンピューター] <strong> </strong>オプションを選択し、[認証モード] メニューから [ユニバーサル (暗号化されていないプロトコル <strong>)</strong> <strong>] を選択</strong> します。</p>


  <p><img alt="image" border="0" height="264" src="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/a4f19777-74ee-4749-b027-cf79c88a52a5.png" style="border-left-width: 0px; border-right-width: 0px; background-image: none; border-bottom-width: 0px; padding-top: 0px; padding-left: 0px; display: inline; padding-right: 0px; border-top-width: 0px" title="image" width="480"></p>


  <p>このセット&rsquo;を受け取った後は、UWP プロジェクトを右クリックし、[<strong></strong>デプロイ] を選択してコードを Raspberry Pi にプッシュできます。 &rsquo;デプロイ プロセスには数分かかる場合がありますが、コードをデプロイすると、次のスクリーンショットに示すように、Visual Studio 出力ウィンドウに Raspberry Pi にデプロイされた UWP アプリのパッケージ名が通知されます。</p>


  <p><img alt="image" border="0" height="151" src="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/40c24e73-3c72-4284-b37b-67ee8e4808b1.png" style="border-left-width: 0px; border-right-width: 0px; background-image: none; border-bottom-width: 0px; padding-top: 0px; padding-left: 0px; display: inline; padding-right: 0px; border-top-width: 0px" title="image" width="610"></p>


  <p>Raspberry Pis ブラウザー&rsquo; ベースの App Manager () を使用して、新しくデプロイされたアプリを選択し、[開始] ボタンを<strong></strong>クリックして起動できます。</p>


  <p><img alt="image" border="0" height="116" src="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/b792d632-47c4-4458-acbf-c53df5f01594.png" style="border-left-width: 0px; border-right-width: 0px; background-image: none; border-bottom-width: 0px; padding-top: 0px; padding-left: 0px; display: inline; padding-right: 0px; border-top-width: 0px" title="image" width="610"></p>


  <p>これで、UWP アプリがデバイスで実際に実行されているのを確認できます。 オフにする場合は、 <strong>LeapDayTinkering.RaspberryPi</strong> アプリの横にある一番右の列にある [X] をクリックします。</p>


  <p><img alt="image" border="0" height="104" src="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/bb09b06f-8c13-480e-980d-d916f31f421b.png" style="border-left-width: 0px; border-right-width: 0px; background-image: none; border-bottom-width: 0px; padding-top: 0px; padding-left: 0px; display: inline; padding-right: 0px; border-top-width: 0px" title="image" width="610"></p>


  <p>アプリの実行が開始されるとすぐに&rsquo;、Raspberry Pi に接続されているモニターに表示されます。 [送信の <strong>開始] </strong>トグル ボタンをクリックすると、コード内のタイマーが有効になります。その結果、メッセージが 20 秒ごとにApp Service送信されます。 REST API に送信される要求を確認するには、デプロイした App Service ノードで [Cloud Explorer&rsquo; ウィンドウのデバッガーのアタッチ] コマンドを使用して、<strong></strong>リモート デバッガーをアタッチします。</p>


  <p><img alt="image" border="0" height="360" src="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/e1532079-6496-46f4-8327-2117f61dae88.png" style="border-left-width: 0px; border-right-width: 0px; background-image: none; border-bottom-width: 0px; padding-top: 0px; padding-left: 0px; display: inline; padding-right: 0px; border-top-width: 0px" title="image" width="211"></p>


  <p>Web API&rsquo;&rsquo; コントローラー コードにブレークポイントを配置することで、Raspberry Pi から送信されたメッセージが App Service に到着したメッセージを確認できます。 次のスクリーンショットは、デバッグ セッションでアクティブなブレークポイントを示Visual Studio、Azure App Serviceに接続されています。</p>


  <p><img alt="image" border="0" height="379" src="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/05a76b5d-e0e2-4269-afbc-b7d1d6262283.png" style="border-left-width: 0px; border-right-width: 0px; background-image: none; border-bottom-width: 0px; padding-top: 0px; padding-left: 0px; display: inline; padding-right: 0px; border-top-width: 0px" title="image" width="610"></p>


  <h1>まとめと次のステップ</h1>


  <p>この投稿では、IoT プロジェクトのバック エンドとして App Service を使用する方法について紹介します。また、このコードでは、創造性を発揮できる優れた開始点を提供します。 コードをつかんでカスタマイズし、サンプルに追加する場合は、ブランチまたは pull request を自由に送信できます。 将来のアイデアには、ストレージ レイヤーに関する抽象化、追加のセンサー機能、Raspberry Pi で実行されている UWP アプリのセンサー プロバイダーや拡張機能が含まれる場合があります。</p>


  <p>IoT プロジェクトが単純な REST API アクセスのポイントを越え、深刻なテレメトリまたはデータ収集手法が必要な場合、Azure 上の IoT にはさまざまなオプションがあります。 Azure IoT <a href="https://azure.microsoft.com/en-us/develop/iot/" target="_blank">デベロッパー</a> センターには、最近一般提供されるになった最近作られた <a href="https://azure.microsoft.com/en-us/documentation/services/iot-hub/" target="_blank">IoT Hubs</a> など、利用可能なすべてのオプションに関する豊富な情報があります。 デバイスで<a href="https://azure.microsoft.com/en-us/documentation/services/event-hubs/" target="_blank">Event Hubs</a>データを分析<a href="https://azure.microsoft.com/en-us/documentation/services/notification-hubs/" target="_blank"></a>するための Event Hubs、プッシュ通知オプション、および <a href="https://azure.microsoft.com/en-us/documentation/services/machine-learning/" target="_blank">Machine Learning</a>&rsquo; と共に、Azure 上の埋め込みデバイスで実行できる操作に制限はありません。</p>
