### YamlMime:Yaml
ms.openlocfilehash: 51215a602513c91d7261409a00a3f90084bd30f3
ms.sourcegitcommit: d03bdc7fe5447adb6530886aab848b75fe8fa8ee
ms.translationtype: MT
ms.contentlocale: ja-JP
ms.lasthandoff: 03/11/2022
ms.locfileid: "139894525"
Slug: azure-mobile-apps-november-2015-update
Title: Azure Mobile Apps 11 月の2015更新プログラム
Summary: 認証に対する変更、REST API、ポータルでの新しい編集エクスペリエンス、およびクライアントとサーバーの Sdk のリリース候補について説明します。
Content: >-
  <p>現在、モバイルアプリケーションの構築をサポート App Service するために追加されているいくつかの新機能を発表しました&#39;。 App Service Mobile は、より堅牢で機能が豊富で使いやすくなったため、次のモバイルバックエンド API に最適です。</p>


  <p>この一連の更新には次のものが含まれます。</p>


  <ul>
   <li>モバイルアプリケーション用のコードテーブルと Api がない</li>
   <li>ターンキー認証のサポート</li>
   <li>ファイル同期機能</li>
   <li>REST API の更新 (いくつかの重大な変更があります)</li>
  </ul>


  <p>これらは、現在の&#39;ポータルの更新プログラムと、次の SDK リリースでキャプチャされます。</p>


  <ul>
   <li>Node.JS Server SDK-2.0.0-alpha5</li>
   <li>.NET サーバー SDK-0.3.36.0 (リリース候補)</li>
   <li>iOS クライアント SDK-3.0.0-beta4 (リリース候補)</li>
   <li>Windows と Xamarin クライアント SDK-2.0.0-beta3 以降 (リリース候補)</li>
  </ul>


  <h1>Mobile Apps 用の簡易テーブル &ndash; なしコード api (プレビュー)</h1>


  <p>元の Mobile Services に関する優れた点の1つは、ブラウザーでテーブルを作成し、スクリプトを編集できることでした。 サーバープロジェクトの配置や多数のコードの保持について心配する必要はなく、どこからでもアプリを更新することができ&#39;ます。 私たち &rsquo; は、お客様がこの機能を使いやすくすることを本当に気に入っていることを聞いています。&#39;私たちは、現在、Azure Mobile Apps のためにこのようなエクスペリエンスを提供しています。</p>


  <p><img alt="clip_image001" border="0" height="340" src="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/18cb0c3d-90ca-4abc-9ba6-ef78ddbec722.png" style="border-top: 0px; border-right: 0px; background-image: none; border-bottom: 0px; float: none; padding-top: 0px; padding-left: 0px; margin-left: auto; border-left: 0px; display: block; padding-right: 0px; margin-right: auto" title="clip_image001" width="640"></p>


  <p>簡易テーブル &quot; と呼ばれる &quot; 、SQL Azure によって支えられた、モバイル対応の OData CRUD api を簡単に作成できるようになりました。 これらの api は、iOS、Android、Windows、Xamarin &amp; Cordova プラットフォームの Mobile Apps クライアント sdk でのファーストクラスのサポートを備えており、オフラインデータ同期機能ですぐに機能します。 テーブルを作成したら、そのテーブルに格納されているデータを表示し、スキーマを変更し、ポータル内ですべてのカスタムロジックを追加することができます。</p>


  <p><img alt="AppService_blog_Nov16_easydata" height="189" src="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/58c6a7f0-35a1-4122-83bd-ef7d497cc535.png" style="float: none; margin-left: auto; display: block; margin-right: auto" title="AppService_blog_Nov16_easydata" width="640"></p>


  <p>また、 &rsquo; 簡単なテーブルも非常に柔軟に作成できました。 バックグラウンドでは、SQL データベースを使用して Express.JS アプリケーションをスキャフォールディングし、いつでも必要に応じてサイトとデータベースを引き継ぎ、カスタマイズすることができます。 ストレージ層をスワップして、Azure Table Storage、mongo DB、またはその他のデータサービスを使用することもできます。 これは、ノードアプリケーションに対して実行できるいくつかの開発方法の1つでもあります。 必要に応じて、git を使用して、またはが提供 App Service その他の <a href="https://azure.microsoft.com/en-us/documentation/articles/web-sites-deploy/">デプロイオプション</a> のいずれかを使用してデプロイすることもできます。</p>


  <p>現在、この機能は、Node SDK を使用しているサイト (特に、ポータル内から作成されたもの) に限定されています。 このため、&#39;d を試してみる場合は、前述のようにクイックスタートに移動し、「」を参照してください。 クイックスタートをデプロイしたら、設定内から [テーブルの簡単操作] オプションと [簡単な Api] オプションを使用して、エンドポイントを作成および管理できます。 これらのいずれかに対して [スクリプトの編集] をクリックすると、Visual Studio オンラインエディターが開きます。</p>


  <h1>コードなしの認証/承認</h1>


  <p>以前は、新しい <a href="https://azure.microsoft.com/en-us/blog/announcing-app-service-authentication-authorization">App Service の認証/承認</a> 機能に関する投稿を公開しました。 この新しいリリースでは、Azure Active Directory、Facebook、Google、Microsoft アカウント、Twitter、またはカスタム id プロバイダーとの認証を任意の App Service インスタンスに統合する&#39;ことが、かつてないほど簡単になりました。 これには Mobile Services に含まれていたすべての機能が備わっていますが、スコープの堅牢なサポートにより、管理が容易になり、コードは必要ありません。</p>


  <p>受け取った多くのフィードバックの1つは、アプリケーションレベルで認証をさらに制御する必要があることでした。 Mobile Apps は、プレビューの初期段階で使用されていた App Service ゲートウェイの代わりに App Service 認証/承認を使用するようになりました。 ゲートウェイは非推奨とされますが、さらに通知されるまで引き続き機能します。 認証/承認機能は、追加のリソースを必要とせず、すべての App Service アプリケーションですぐに使用できます。</p>


  <p><img alt="Authentication-Authorization" border="0" height="435" src="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/6a2c218b-cdd2-43a1-9995-7e71f0c82183.png" style="border-top: 0px; border-right: 0px; background-image: none; border-bottom: 0px; float: none; padding-top: 0px; padding-left: 0px; margin-left: auto; border-left: 0px; display: block; padding-right: 0px; margin-right: auto" title="Authentication-Authorization" width="640"></p>


  <p>アプリケーションの認証を有効にするには、[モバイル認証設定] オプションを使用するのではなく、[認証/承認] を選択します。 同じ認証機能がすべて用意されており、AAD を構成するためのエクスペリエンスは、わずか数回のクリックで簡素化されています。 この変更の一環として、[モバイル認証] ショートカットが削除されます。 既存のゲートウェイを使用する場合は、いつでもリソースグループからアクセスできます。</p>


  <p>この変更の結果、一部のログインと id のエンドポイントが異なります。 このことを反映するために、クライアント Sdk が更新されました。 詳細については、 <a href="https://azure.microsoft.com/en-us/blog/announcing-app-service-authentication-authorization">認証/承認の投稿</a> を参照してください。 また、プレビューでカスタム認証のサポートをリリースすることで、長期にわたる要求にも対処&#39;ます。 詳細については、以下の「.NET サーバー SDK」セクションを参照してください。</p>


  <h1>ファイル同期のサポート</h1>


  <p>App Service Mobile には、オフラインで動作するアプリを開発者が作成し、さまざまなバックエンドデータストアと同期するためのデータ同期機能が含まれています。 以前は、これは構造化データに限定されていましたが、現在はファイルのプレビューサポートを追加&#39;ます。 これで、テーブルによって公開されるすべてのエンティティに、blob ストレージに保存されたファイルへの参照を含めることもできます。 &nbsp; クライアント側では、エンティティから参照されるファイルの変更を追跡します。 この機能では、次の Api がクライアント SDK に導入されています。</p>


  <pre class="prettyprint">

  mobileClient.InitializeFileSync(new MyFileSyncHandler(this), syncStore);

  await myTable.PullFilesAsync(entity);

  await myTable.PushFileChangesAsync();

  </pre>


  <p>ここで、MyFileSyncHandler は IFileSyncHandler の実装です。 これにより、ファイルをローカルに保存する必要があることをアプリケーションに通知し、既定の同期規則をオーバーライドできます。</p>


  <p>サーバー Sdk は、アプリケーションが blob storage と安全に直接同期できるように、クライアントの SAS キーの発行を処理します。 また、同期メタデータの管理や、テーブルエンティティへのファイルのアタッチ方法にも役立ちます。</p>


  <p>Xamarin および Windows 用のクライアントライブラリをインストールして、ファイル同期サポートを試すことができます。これについては、<a href="https://aka.ms/amobile_filesync">こちら</a>を参照してください。 この機能を使用する詳細なサンプルについては、 <a href="https://aka.ms/amobile_filesync_sample">こちら</a>を参照してください。</p>


  <h1>REST API の変更</h1>


  <h3>API バージョンの確認</h3>


  <p>モバイル開発の課題の1つは、クライアントとサーバーのバージョンの同期を維持することです。これは、プロジェクトの依存関係のメジャーバージョンのアップグレードを行う場合に特に重要です。今後、お客様が Mobile Apps Sdk の更新プログラムを簡単に使用できるようにしたいと考えています。 現在、クライアントとサーバー間の API コントラクトの不一致を防ぐためのバージョン管理システムが導入されています。 サーバー Sdk によって、クライアント Sdk が提供するバージョンヘッダーが検索されるようになりました。 サポートされているクライアントバージョンが存在しない場合、サーバーはどのバージョンを受け入れるかを説明するエラーを返します。</p>


  <p>これは、古いバージョンのモバイルサービスクライアント SDK が最新の Mobile Apps Server SDK と通信できないことを意味します。 API の動作の多くは同じですが、プッシュ通知登録の処理方法など、いくつかの違いがあります。 このような変更によって生じる驚くことを避けるために、開発者ができるだけシンプルにすることを望んでいました。</p>


  <p>提供されている Mobile Apps Sdk を使用&#39;ないコンポーネントがアプリケーションに含まれている場合は、REST 呼び出しでバージョンを指定できます。 ヘッダーまたはクエリ文字列パラメーターとして ZUMO-API バージョンを追加するだけで、値は対象のバージョンになります。 特定のバージョンと、それらが相互に対話する方法の詳細については、新しい <a href="https://azure.microsoft.com/en-us/documentation/articles/app-service-mobile-client-and-server-versioning">クライアントとサーバーのバージョン管理</a> に関するトピックを参照してください。</p>


  <h3>システムプロパティの名前変更</h3>


  <p><a href="https://azure.microsoft.com/en-us/blog/azure-mobile-apps-september-2015-update/">9 月の更新プログラム</a>では、システムプロパティが返される方法が変更されました。 今回のリリースでは、プロパティの名前を変更して、前にプレフィックスを付けた2つのアンダースコアを削除しています。 <strong>__CreatedAt</strong>、 <strong>__updatedAt</strong>、 <strong>__version</strong>、および<strong>__Deleted</strong>の各プロパティは、それぞれ<strong>createdat</strong>、 <strong>updatedAt</strong>、 <strong>version</strong>、および<strong>deleted</strong>になりました。 これにより、 <a href="https://github.com/AutoMapper/AutoMapper">Automapper</a> などのツールを使用してデータ型のマッピングを簡単に記述できるようになり、アプリ全体で使用されるデータオブジェクトをより適切に制御できるようになります。 これは API コントラクトの重大な変更であることに注意してください。現在リリースされているクライアントとサーバーの Sdk はこの変更を反映しており、両方を同時に更新する必要があります。 これにより、API バージョンも確実にアラインされます。</p>


  <h1>Node.JS Server SDK 2.0.0-alpha5</h1>


  <p>先月は、Node.JS SDK を <a href="https://azure.microsoft.com/en-us/blog/announcing-node-for-azure-mobile-apps/">オープンソース</a> にしています。これにより、ユーザーは、&#39;計画を立て、プロセスに参加することを確認できます。 私たちは既にいくつかのコミュニティの投稿を受けていますが、今後もご利用ください。&#39;</p>


  <p>この SDK は alpha のままであることに注意してください。 ユーザーはこのバージョンを使用して実行することをお勧めしますが、このバージョンでは運用環境に移行しないでください。 追加のフィードバックを収集した後は、ベータ版に移行します。</p>


  <p>このバージョンの SDK は、ポータルベースのクイックスタートでも提供されており、ポータルでの編集にも使用できます。 ポータルで Node.JS モバイルアプリを作成するには、まず [新規]、[Web + モバイル]、[モバイルアプリ] の順にクリックし、作成手順に従います。 アプリが作成されたら、それに移動して設定を開き、[モバイル] カテゴリから [はじめに] を選択します。 クライアントプラットフォームを選択し、指示に従います。 手順2では、クラシッククイックスタートを使用して Node.JS サイトをプロビジョニングします。</p>


  <p>現時点では、Node.JS に使用できるエンドツーエンドのチュートリアルはありません。 ただし、 <a href="https://aka.ms/nodemobile">Node SDK を操作</a>するための一般的なドキュメントが記述されており、 <a href="https://github.com/Azure/azure-mobile-apps-node">GitHub リポジトリ</a>に関する優れたドキュメントがあります。 ノード SDK をアルファからさらに堅牢なプレビューに移行すると、azure.com に関するドキュメント一式が提供されます。</p>


  <h1>.NET サーバー SDK リリース候補</h1>


  <p><a href="https://azure.microsoft.com/en-us/blog/updates-to-the-mobile-apps-server-sdk/">これまで</a><a href="https://azure.microsoft.com/en-us/blog/azure-mobile-apps-september-2015-update/">数か月</a>で、.net sdk に対して<a href="https://azure.microsoft.com/en-us/blog/azure-mobile-apps-august-2015-update/">いくつかの</a>更新が行われ&#39;ました。 再表示&#39;フィードバックに基づいて、リリース候補の準備が&#39;されていると考えています。 SDK はまだプレビュー段階ですが、1.0 として予想されているものと非常に密接に一致している必要があります。</p>


  <p>作業を開始するには、 <a href="https://www.nuget.org/packages/Microsoft.Azure.Mobile.Server/0.3.36">0.3.36.0 NuGet パッケージ</a>をプロジェクトにインストールします。 ポータルのクイックスタートプロジェクトは、このバージョンを使用するようにも更新されています。 他の更新プログラムと同様に、注意すべき重大な変更がいくつかあります。 これらのほとんどは、特に認証に関連するメソッドの名前変更にすぎません。 MobileApp * で開始された変数とメソッドは AppService * になります。これらの機能の多くは、モバイル以外のシナリオにも当てはまります。</p>


  <p>また、カスタム認証のサポートを提供する新しいプレビュー NuGet パッケージも<a href="https://www.nuget.org/packages/Microsoft.Azure.Mobile.Server.Login/0.3.36">導入しています:。</a> このパッケージは、MobileAppLoginHandler () メソッドを提供します。このメソッドを使用すると、特定のユーザーのトークンを簡単に発行できます。 たとえば、独自のユーザー名/パスワードストアを利用する場合は、次のような API を作成できます。</p>


  <pre class="prettyprint">

  public HttpResponseMessage Post([FromBody] JObject assertion)

  {
   if (isValidAssertion(assertion)) //checks against a database
   {
    JwtSecurityToken token = MobileAppLoginHandler.CreateToken(new Claim[] { new Claim(JwtRegisteredClaimNames.Sub, assertion[&quot;username&quot;]) }, mySigningKey, myAppURL, myAppURL, TimeSpan.FromHours(24));
    return this.Request.CreateResponse(HttpStatusCode.OK, new LoginResult()
    {
     AuthenticationToken = token.RawData,
     User = new LoginResultUser() { UserId = userName.ToString() }
    });
   }
   else
   {
    return this.Request.CreateUnauthorizedResponse();
   }
  }</pre>


  <p>ここで、isValidAssertion はカスタム検証ロジックをラップするためのメソッドであり、LoginResult/LoginResultUser は単なる単純なオブジェクトであり、応答で設定されているプロパティをラップします。 カスタム認証は、非常に軽量であるため、独自のストアまたはサードパーティプロバイダーと簡単に統合できます。</p>


  <p>また、MobileAppUser (最近は AppServiceUser に名前が変更されました) など、いくつかの余分な型も削除されています。 このクラスは、実際には GetIdentityAsync () メソッドを提供しただけで、明示的なキャストを行っていました。 ここで、GetIdentityAsync () を IPrincipal の拡張メソッドに移行した&#39;ので、次のように記述するだけで済みます。</p>


  <pre class="prettyprint">

  ProviderCredentials creds = await this.User.GetAppServiceIdentityAsync&lt;FacebookCredentials&gt;(this.Request);</pre>


  <p>拡張メソッドが適切に表示されるように、 &quot; を使用してを必ず指定して &quot; ください。</p>


  <p>また、最近、.NET サーバー SDK のオープンソーシングを <a href="https://azure.microsoft.com/en-us/blog/open-sourcing-app-service-mobile-net-server-sdk/">発表</a> しました。 私たちの<a href="https://github.com/Azure/azure-mobile-apps-net-server">GitHub リポジトリ</a>は、ファイルの問題を把握するのに最適な場所であり、&#39;再実行して、プロジェクトに貢献します。 変更の完全な一覧は、 <a href="https://go.microsoft.com/fwlink/?linkid=625009&amp;clcid=0x409">changelog</a>にも表示されます。</p>


  <h1>クライアント SDK リリース候補</h1>


  <p>リリース候補クライアント Sdk は、バージョンヘッダーを提供し、新しいエンドポイントを認証に使用できるように更新されました。 また、最新のサーバー SDK を使用するために必要なシステムプロパティの変更も含まれています。 ほとんどの開発者は、コンストラクターを除き、新しいクライアント Sdk に更新するときにコードの変更について心配する必要はありません。 コンストラクターは、アプリケーションの URL だけでなく、省略可能なデリゲートハンドラーを受け取るようになりました。 ゲートウェイの URL パラメーターが、認証の変更により削除されました。また、アプリケーションキーパラメーターが失われています。サーバー SDK の変更を7月からミラーリングしています。</p>


  <h3>iOS (Objective-C)</h3>


  <pre class="prettyprint">

  self.client = [MSClient clientWithApplicationURLString:@&quot;https://contoso.azurewebsites.net&quot;];</pre>


  <h3>iOS (Swift)</h3>


  <pre class="prettyprint">

  let client = MSClient(applicationURLString:&quot;https://contoso.azurewebsites.net&quot;)

  </pre>


  <h3>Windows と Xamarin (C#)</h3>


  <pre class="prettyprint">

  MobileServiceClient client = new MobileServiceClient(&quot;https://contoso.azurewebsites.net&quot;);</pre>


  <p><a href="https://www.nuget.org/packages/WindowsAzure.MobileServices/2.0.0-beta-3">マネージ NuGet パッケージ</a>をインストールするか、 <a href="https://github.com/Azure/azure-mobile-services/blob/master/CHANGELOG.ios.md#sdk-downloads">iOS フレームワーク</a>をダウンロードして、リリース候補を試すことができます。 ポータルのクイックスタートプロジェクトも更新され、これらのプロジェクトが含まれるようになりました。</p>


  <h1>HTML/JS クイックスタートの一時的な削除</h1>


  <p>API バージョンの確認、システムプロパティの名前変更、認証の切り替えなど、いくつかの変更は、HTML/JS SDK にまだ実装されていません。 SDK の互換性に関して混乱を減らすために、ポータルのクイックスタートオプションから SDK を一時的に削除することを選択しました。</p>


  <p>HTML/JS SDK をパリティにすることは、短期的な目標であり、すぐに元に戻すことを目的としています。 プレビューを続けている間、しばらくお待ちください。</p>


  <h1>近日中にクラウドに近日公開&hellip;</h1>


  <p>近日中にさらに多くの変更が加えられています。 ここでは、年の終わりの前に来る&#39;を簡単にプレビュー&#39;ます。</p>


  <ul>
   <li>リリース候補の Sdk をプレビューから移動する</li>
   <li>Mobile Apps の Android SDK</li>
   <li>Node.JS SDK のベータリリース</li>
   <li>コードを変更する必要がない Mobile Services のお客様のワンクリック移行</li>
   <li>これらの機能を最大限に活用するのに役立つその他のドキュメント</li>
  </ul>


  <p>それまでは、上記の更新プログラムを確認し、ご意見をお聞かせください。 次のコメント ( <a href="https://twitter.com/AzureMobile">Twitter</a>、microsoft <a href="https://social.msdn.microsoft.com/forums/azure/en-US/home?forum=azuremobile">MSDN フォーラム</a>、または <a href="https://feedback.azure.com/forums/216254-mobile-apps-formerly-mobile-services">Azure フィードバックサイト</a>) で、Mobile Apps チームと接続できます。</p>
