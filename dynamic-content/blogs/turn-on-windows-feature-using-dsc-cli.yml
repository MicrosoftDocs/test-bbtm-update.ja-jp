### YamlMime:Yaml
ms.openlocfilehash: 8299d8be110ea37b2ed05b9ed4d6ed0d85667a4b
ms.sourcegitcommit: d03bdc7fe5447adb6530886aab848b75fe8fa8ee
ms.translationtype: MT
ms.contentlocale: ja-JP
ms.lasthandoff: 03/11/2022
ms.locfileid: "139910291"
Slug: turn-on-windows-feature-using-dsc-cli
Title: Powershell DSC 拡張機能と Azure CLI を使用した Windows 機能の有効化
Summary: この記事では、Powershell DSC とを使用して Azure Vm に IIS をインストールする簡単な方法について説明し Azure CLI
Content: "<p>Azure でカスタムスクリプト拡張機能を使用する DevOps エンジニア &nbsp; には、<a href=\"https://msdn.microsoft.com/en-us/powershell/dsc/configurations\">Desired State Configuration (DSC) &nbsp; </a>や<a href=\"https://azure.microsoft.com/en-us/documentation/articles/virtual-machines-windows-classic-extensions-customscript/\">カスタム Powershell スクリプト</a>の使用 &nbsp; など、 &nbsp; さまざまな方法が用意されています。 しかし、Azure リソースグループ内の既存の Windows Virtual Machines に IIS サーバーをインストールするなどの簡単なタスクを実行する場合は、どのようなオプション &nbsp; がありますか。 <a href=\"https://blogs.endjin.com/2015/07/using-azure-resource-manager-and-powershell-dsc-to-create-and-provision-a-vm/\">ARM テンプレート</a>の使用 &nbsp; 、 <a href=\"https://azure.microsoft.com/en-us/documentation/articles/automation-dsc-overview/\">DSC</a> &nbsp; の Azure Automation<a href=\"https://www.petri.com/4-ways-to-configure-azure-vms-using-powershell\">その他の方法</a>など、複雑さ &nbsp; に応じてさまざまな &nbsp; 方法があります。 ただし、場合によっては、スクリプトがより適切な方法 &nbsp; であることがあります。特 &rsquo; &nbsp; &nbsp; に、保守と更新が必要な運用レベルのインフラストラクチャをセットアップし<em><strong>ていない</strong></em>場合などです。</p>\n\n<p>この後者のシナリオでは、 <a href=\"https://www.chef.io/chef/\">Chef</a>、<a href=\"https://puppet.com/\">パペット</a> &nbsp; 、または &nbsp; 内部 azure ツールなどのサードパーティアプローチ &nbsp; を使用した DSC オートメーション<a href=\"https://azure.microsoft.com/en-us/documentation/services/automation/\">は、ニーズ</a> &nbsp; に応じて機能する可能性があります。 これらのソリューション &nbsp; は、インストールされている &nbsp; ソフトウェアの必要な構成状態を継続的に管理するためのサーバーベース &nbsp; のプルモデルを &nbsp; 採用しています。</p>\n\n<p>私のシナリオは非常に単純であり、ほとんどの場合、最小限の面倒で実行する必要のある1回限りの構成タスク &rsquo; です。 &rsquo;シナリオは次のようになります。</p>\n\n<ul>\n <li>Azure リソースグループには、 <a href=\"https://azure.microsoft.com/en-us/documentation/articles/guidance-compute-3-tier-vm/\">CLI スクリプトを使用して</a>いくつかの仮想マシンがデプロイされています。</li>\n <li>仮想マシンは、web 層、ビジネス層、およびデータベース層を含む3層アーキテクチャの一部です。</li>\n <li>ネットワークセキュリティグループ (NSG) の規則は、前提条件に基づいて階層間の通信を許可または拒否するスクリプトによってプロビジョニングされます。</li>\n <li>Web 層の仮想マシンには、HTTP 要求を介してビジネス層へのアクセスをテストおよび検証できる IIS サーバーが必要です。</li>\n <li>仮想マシンは、automation を使用して簡単にアクセスできる <a href=\"https://azure.microsoft.com/en-us/documentation/articles/guidance-naming-conventions/\">Azure リソースの推奨される名前付け規則</a> に従ってプロビジョニングされます。</li>\n</ul>\n\n<p><strong>注</strong>: この記事のシナリオは、一連の仮想マシンに IIS インフラストラクチャをインストールすることに限定されますが、この方法を使用すると、ドメインコントローラー、DNS サーバー &nbsp; 、SQL サーバー、フェールオーバークラスター (WSFC) など、他のいくつかの WMF ベースのタスクを実行する &nbsp; ことができ&#39;ます。 同様の DSC 拡張機能は、 <a href=\"https://azure.microsoft.com/en-us/blog/introduce-azure-dscforlinux-extension/\">Linux ベースの仮想マシン</a>でも使用できます。</p>\n\n<p>このシナリオを理解したところで、火やっかいを経由せずにこれを実現する方法を見てみましょう &rsquo; 。 Azure リソースグループの簡単なスクリーンショットを次に示します。</p>\n\n<p><img alt=\"VMsInRG\" border=\"0\" height=\"178\" src=\"https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/8470c745-8b8f-469a-8ef3-a46a9dd59774.png\" style=\"border-width: 0px; padding-top: 0px; padding-right: 0px; padding-left: 0px; display: inline; background-image: none;\" title=\"VMsInRG\" width=\"610\"></p>\n\n<p>上のスクリーンショットでは、いくつかの点に注意する必要があります。</p>\n\n<ul>\n <li>仮想マシンは、 <strong>svc2-vm1</strong>、 <strong>bc-svc2-vm2</strong> などの命名パターンに従います。</li>\n <li>リソースグループには <strong>、bc-dev-rg</strong>という名前が付けられます。</li>\n</ul>\n\n<p>上記のスクリーンショットに示されている仮想マシンに IIS をインストールする手順を次に示します。</p>\n\n<ul>\n <li>次の内容を含む Powershell ファイルを作成し、 <strong>IISConfig.ps1</strong>として保存します。</li>\n</ul>\n\n<pre class=\"prettyprint\">\nConfiguration ConfigureWeb\n{ \n node (&quot;localhost&quot;)\n { \n  WindowsFeature InstallWebServer \n  { \n   Ensure = &quot;Present&quot;\n   Name = &quot;Web-Server&quot; \n  } \n } \n}</pre>\n\n<ul>\n <li>次の手順を使用して、モジュールをパッケージ化し、パブリックアクセス可能な blob コンテナーの URL に発行します。 <ul>\n  <li>管理モードで Powershell x86<sup>1</sup> コマンドウィンドウを開きます。</li>\n  <li>Azure アカウントにログインし、サブスクリプションを選択します。\n  <pre class=\"prettyprint\">\nLogin-AzureRmAccount\nSelect-AzureRmSubscription &ndash;SubscriptionId my-subscription-id</pre>\n  </li>\n  <li><sup>2 つ</sup>のスクリプトをストレージアカウントに発行します。 次のコマンドは、スクリプトを<strong>IISConfig.zip</strong>ファイルに &nbsp; パッケージ化し、指定されたストレージアカウントのストレージコンテナーに発行します。</li>\n </ul>\n </li>\n</ul>\n\n<pre class=\"prettyprint\">\nPublish-AzureRmVMDscConfiguration -ConfigurationPath .\\IISConfig.ps1 -ContainerName mycontainer -StorageAccountName mystorageaccount -ResourceGroupName myresourcegroup</pre>\n\n<ul>\n <li>次の内容のテキストファイルを作成し、 <strong>Turnoniis .cmd</strong>として保存します。</li>\n</ul>\n\n<pre class=\"prettyprint\">\n@ECHO OFF\n\n:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::\n:: Set up variables.\n:: Change these variables to match your deployment.\nSET APP_NAME=bc\nSET ENVIRONMENT=dev\nSET RESOURCE_GROUP=%APP_NAME%-%ENVIRONMENT%-rg\n\n:: Number of Virtual Machines (VMs) to configure. Set according to your scenario.\nSET NUM_VMS=3\n\n:: Loop through all the VMs and call subroutine that installs IIS on each VM.\n:: Loop counter and the service tier name are passed as parameters.\nFOR /L %%I IN (1,1,%NUM_VMS%) DO CALL :ConfigureIIS %%I svc2\n\nGOTO :eof\n\n::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::\n:: Subroutine that configures IIS\n\n:ConfigureIIS\nSET TIER_NAME=%2\nSET VM_NAME=%APP_NAME%-%TIER_NAME%-vm%1\n\nECHO Turning on IIS configuration for: %VM_NAME% under resource group: %RESOURCE_GROUP%\n\n:: Following assumes that you have\n::  1. Logged into your Azure subscription using &quot;azure login&quot;\n::  2. Set the active subscription using &quot;azure account set &lt;subscription-name&gt;&quot;\n\nCALL azure vm extension set --resource-group %RESOURCE_GROUP% --vm-name %VM_NAME% ^\n --name DSC --publisher-name Microsoft.Powershell --version 2.9 ^\n --public-config &quot;{\\&quot;ModulesUrl\\&quot;: \\&quot;https://mystorage.blob.core.windows.net/scripts/IISConfig.ps1.zip\\&quot;, \\&quot;ConfigurationFunction\\&quot;: \\&quot;IISConfig.ps1\\\\ConfigureWeb\\&quot; }&quot;\n \nGOTO :eof</pre>\n\n<p>基本的には、 &rsquo; 次のことを行います。</p>\n\n<ol>\n <li>指定された名前付け規則に基づいて Vm を反復処理する</li>\n <li>各 VM でのサブルーチン <strong>ConfigureIIS</strong> の呼び出し</li>\n <li>各 VM で <strong>azure vm extension set</strong> コマンドレットを呼び出し、次のパラメーターを渡します。</li>\n</ol>\n\n<pre class=\"prettyprint\">\n--resource-group      Name of the resource group    </pre>\n\n<pre class=\"prettyprint\">\n--vm-name             Name of the virtual machine    </pre>\n\n<pre class=\"prettyprint\">\n--name                Type of the custom script extension    </pre>\n\n<pre class=\"prettyprint\">\n--publisher-name      Name of the extension publisher    </pre>\n\n<pre class=\"prettyprint\">\n--version             Version of the extension    </pre>\n\n<pre class=\"prettyprint\">\n--public-config       JSON text specifying </pre>\n\n<pre class=\"prettyprint\">\n                      ModuleUrl    Packaged configuration location</pre>\n\n<pre class=\"prettyprint\">\n                      ConfigurationFunction    Name of the configuration function in the script including path</pre>\n\n<ul>\n <li>コマンドプロンプトを開き、コマンドスクリプトが格納されているフォルダーに移動して、 <strong>ファイルを実行</strong> します。</li>\n</ul>\n\n<p>同様の方法を使用して、仮想マシンの Windows 機能のオン/オフを切り替えることができます。 複数の Windows 機能を同時に操作するための DSC 構成の記述の詳細については、<a href=\"https://msdn.microsoft.com/en-us/powershell/dsc/fileresource\">この記事</a>をご確認ください。</p>\n\n<hr>\n<blockquote>\n<p><sup> <strong>1</strong> </sup>ターゲットの仮想マシンでは既定で powershell の x86 ビルドが使用されるため、powershell の x64 ビルドは使用しないでください。 この潜在顧客に準拠していないと、次のことが発生します。</p>\n</blockquote>\n\n<ul>\n <li>リソースグループが存在するにもかかわらず、 <strong>リソースグループ </strong>などのあいまいなメッセージで、Azure storage コンテナーにプロセスを発行できませんでした。</li>\n <li>ターゲットの仮想マシンでプロセスを解凍できませんでした。エラーメッセージが最も役に立たないため、デバッグが非常に困難です。</li>\n</ul>\n\n<blockquote>\n<p><sup><strong>2</strong></sup>別の方法として、パッケージをローカルに作成し、それを GitHub アカウントにアップロードする方法があります。 この場合は、ストレージコンテナーの url をパブリックのアクセス可能な GitHub url に置き換えます。 この場合に使用する変更されたコマンドを以下に示します。</p>\n\n<pre class=\"prettyprint\">\nPublish-AzureRmVMDscConfiguration -ConfigurationPath .\\IISConfig.ps1 -OutputArchivePath IISConfig.zip</pre>\n</blockquote>"
