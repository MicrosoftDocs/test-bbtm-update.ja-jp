### YamlMime:Yaml
ms.openlocfilehash: c189af8d5fc7999fe8c135b281db4b3067ad06cd
ms.sourcegitcommit: d03bdc7fe5447adb6530886aab848b75fe8fa8ee
ms.translationtype: MT
ms.contentlocale: ja-JP
ms.lasthandoff: 03/11/2022
ms.locfileid: "139904219"
Slug: deploying-wordpress-application-using-visual-studio-team-services-and-azure-part-two
Title: Visual Studio Team Services と Azure を使用した WordPress アプリケーションのデプロイ – パート 2
Summary: この投稿は、Azure WebApp for Containers と Azure Database for MySQL を使用して Docker 化されたカスタム WordPress Web サイトをデプロイするために Visual Studio Team Services (VSTS) を使用して CI/CD パイプラインを設定する方法を説明する 2 つのブログ投稿の第 2 部です。
Content: >-
  <p>この投稿は、Azure WebApp for Containers と Azure Database for MySQL を使用して Docker 化されたカスタム WordPress Web サイトをデプロイするために Visual Studio Team Services (VSTS) を使用して CI/CD パイプラインを設定する方法を説明する 2 つのブログ投稿の第 2 部です。 <a href="https://azure.microsoft.com/en-us/blog/deploying-wordpress-application-using-vsts-and-azure-part-one/" target="_blank">「Visual Studio Team Services と Azure</a> を使用した WordPress アプリケーションのデプロイ - パート 1 では、VSTS を使用して継続的インテグレーション (CI) プロセスを構築する方法について説明しました。このパートでは、VSTS リリース管理を使用して継続的デリバリー (CD) 部分に焦点を当てる予定です。</p>


  <h2>このパートの前提条件</h2>


  <ul>
   <li><a href="https://dev.mysql.com/doc/mysql-apt-repo-quick-guide/en/" target="_blank">Azure Virtual Machine にインストールされた MySQL </a>クライアント (apt-get install mysql-client-5.7)。</li>
   <li>Azure VM マシンから Azure Databases for MySQL への接続を許可する</li>
   <li><a href="https://marketplace.visualstudio.com/items?itemName=colinsalmcorner.colinsalmcorner-buildtasks" target="_blank">この VSTS Route Traffic 拡張機能のインストール</a></li>
  </ul>


  <h2>&ndash; Visual Studio Team Services リリース フェーズ</h2>


  <p>次の各手順を完了した後、保存することをお勧めします。</p>


  <p>まず、新しい空<strong>+</strong>のリリース定義を作成し、リリースに<strong></strong>移動し、アイコンをクリックしてリリース定義<strong></strong>の作成を選択し、テンプレートとして空の<strong>プロセスを選択</strong>する必要があります。</p>


  <p><a href="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/e758c595-f64d-496a-8026-42abeb2be71d.png"><img alt="pic1" border="0" height="630" src="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/5b2810a2-c31a-49f2-b6df-b490013d435b.png" style="border: 0px currentcolor; border-image: none; margin-right: auto; margin-left: auto; float: none; display: block; background-image: none;" title="pic1" width="2031"></a></p>


  <p>まず&rsquo;、パイプラインに成果物を追加します。 [追加<strong>] セクション </strong>(Artifacts 1) で [追加] をクリックすると、右側のブレードが表示され、次の項目を選択します。</p>


  <ul>
   <li>ソースの種類の &ndash; ビルド</li>
   <li>&ndash; Project関連するプロジェクト名</li>
   <li>ソース &ndash; 作成したビルド定義の名前</li>
   <li>既定のバージョンの [最新 &ndash; ]</li>
   <li>ソースエイリアス 既定値 &ndash; のままにする</li>
  </ul>


  <p>[追加] を<strong></strong>クリックした後、[Artifacts<strong></strong>] セクション (手順 2) の下にあるトリガー アイコンをクリックします。右側のブレードが表示され、継続的デプロイ トリガーを有効に<strong>することを選択</strong>します。</p>


  <p>[環境] セクションを構成し、展開前条件アイコン<strong> </strong> (手順 3) をクリックし、[リリース トリガーの<strong></strong>後] を選択して右側のブレードを閉じる必要があります。</p>


  <p>次の手順では、開発パイプラインにタスク <strong>を</strong>追加します。リンク (手順 4) をクリックするか、タスクをクリック <strong>します</strong>。</p>


  <h2>開発パイプライン</h2>


  <p>[ <strong>タスク]</strong> タブで[エージェント フェーズ] <strong>をクリックし、</strong> ホスト <strong>されている Linux プレビューをエージェント キュー</strong> として選択します。 アイコンをクリックして、次のタスクを<strong>追加+します</strong>。</p>


  <ul>
   <li>3 つの SSH コマンド タスク</li>
   <li>デプロイ Azure App Service 1 つ</li>
   <li>1 Azure App Service管理タスク</li>
  </ul>


  <p><a href="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/27629961-5a01-461e-8e51-a30d8bf7b289.png"><img alt="image" border="0" height="234" src="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/94e3064a-a125-4674-9272-164c6a033825.png" style="border: 0px currentcolor; border-image: none; margin-right: auto; margin-left: auto; float: none; display: block; background-image: none;" title="イメージ" width="624"></a></p>


  <p>次に、開発 CD プロセス中に使用する変数を<strong> 追加する必要</strong> があります。 [変数] <strong>タブをクリック</strong> し、次の一覧から追加を開始し、スコープ <strong>として [開発</strong> ] を選択します。</p>


  <ul>
   <li>$(destappinsight) &ndash;Dev 環境の Application Insight Instrumentation キー</li>
   <li>$(desturl) App Service &ndash; の URL</li>
   <li>DB のバックアップおよび復元操作を実行する際の $(migrationfile) &ndash; 一時ファイル名</li>
   <li>$(mysqldestdb) &ndash; DB name of Dev environment</li>
   <li>$(mysqlhost) &ndash; サーバー名 Azure Database for MySQL</li>
   <li>$(mysqlpass) &ndash; Azure Database for MySQL</li>
   <li>$(mysqlport) &ndash; ポートのAzure Database for MySQL</li>
   <li>$(mysqlsourcedb) &ndash; ローカル環境の DB 名</li>
   <li>$(mysqluser) &ndash; Azure Database for MySQL</li>
   <li>$(resultfile) - DB のバックアップと復元の操作を実行する際の一時ファイル名</li>
   <li>$(sourceappinsight) - ローカル環境の Application Insight Instrumentation キー</li>
   <li>$(sourceurl) &ndash; ローカル環境 URL</li>
  </ul>


  <p>機密性&rsquo;の高い値を格納するためのより安全なソリューションを使用できます。詳細については、 <a href="https://docs.microsoft.com/en-us/vsts/build-release/concepts/library/variable-groups" target="_blank">Azure KeyVault</a> を使用して機密値を格納し、VSTS で使用する方法に関するページを参照してください。</p>


  <p>[タスク] タブに<strong>戻る</strong>前に、新しい SSH エンドポイント (設定/サービス/新しいサービス エンドポイント/SSH) を追加する必要があります。 Azure 仮想マシンの詳細を入力します。</p>


  <p><a href="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/44fb6175-254f-4cc8-9728-22611fd0a585.png"><img alt="image" border="0" height="267" src="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/f9fbb78b-1aea-4aae-be18-8f589e93c2bd.png" style="border: 0px currentcolor; border-image: none; margin-right: auto; margin-left: auto; float: none; display: block; background-image: none;" title="イメージ" width="624"></a></p>


  <p>ここで、[タスク&rsquo;] タブ <strong>に戻り</strong> 、タスクの編集を開始します。</p>


  <p>1 つめは、次の <strong>値を使用してファイルにバックアップ DB</strong> を実行することです。</p>


  <pre style="margin-left: 40px;">

  SSH endpoint &ndash; select the relevant SSH endpoint

  Run &ndash; Commands

  Commands &ndash;

  mysqldump -P $(mysqlport) -h $(mysqlhost)  -u $(mysqluser)  -p$(mysqlpass) $(mysqlsourcedb) &gt; $(resultfile)  </pre>


  <p>2 つ目の SSH タスクは、値 <strong>を次の値</strong> に置き換えるタスクです。</p>


  <pre style="margin-left: 40px;">

  SSH endpoint &ndash; select the relevant SSH endpoint

  Run &ndash; Commands

  Commands &ndash;

  sed &#39;s/$(sourceurl)/$(desturl)/g;s/$(sourceappinsight)/$(destappinsight)/g&#39; $(resultfile) &gt; $(migrationfile)</pre>


  <p>3 つ目の SSH タスクは、 <strong>次の値を使用して、移行されたファイルから DB</strong> を復元します。</p>


  <pre style="margin-left: 40px;">

  SSH endpoint &ndash; select the relevant SSH endpoint

  Run &ndash; Commands

  Commands &ndash;

  mysql -h $(mysqlhost) -u $(mysqluser)  -p$(mysqlpass) $(mysqldestdb) &lt; $(migrationfile)</pre>


  <p>4 番目のタスクは、次 <strong>Azure App Serviceを</strong> 使用してバージョン 3 をデプロイする方法について説明します。</p>


  <pre style="margin-left: 40px;">

  Azure subscription &ndash; select the relevant Azure subscription

  App type &ndash; Linux Web App

  App Service name &ndash; select Dev environment App Service

  Image Source &ndash; Container Registry

  Registry or Namespace &ndash; Azure Container Registry login server value

  Image &ndash; The Docker image name from CI process

  Tag - $(Build.BuildId)

  App settings &ndash;

  -DB_ENV_NAME $(mysqldestdb) -DB_ENV_USER $(mysqluser) -DB_ENV_PASSWORD $(mysqlpass) -DB_ENV_HOST $(mysqlhost)</pre>


  <p>5 番目のタスクは、[管理Azure App Service次 <strong>の値Azure App Service</strong> して再起動します。</p>


  <pre style="margin-left: 40px;">

  Azure subscription &ndash; select the relevant Azure subscription

  Action &ndash; Restart App Service

  App Service name - select the App Service of Dev environment</pre>


  <p>開発 CD パイプラインの構築 <strong>が</strong> 完了しました。</p>


  <h2>テスト パイプライン</h2>


  <p>パイプライン タブに戻<strong>り</strong><strong>、開発環境</strong>を強調表示し、<strong></strong>環境を複製することを選択します (手順 5)、新しい環境テストを呼び出<strong>します</strong>。</p>


  <p>テスト環境のデプロイ前条件 <strong></strong> (手順 6) として、[環境トリガーの後] を選択し、[配置前承認] オプションを有効にし、チームのメンバーを承認者として選択して、テスト環境<strong></strong>のデプロイ プロセスを開始します。<strong></strong> <strong></strong></p>


  <p>ブレードを閉じると、下のリンクをクリックして環境タスクを表示します (手順 7)。</p>


  <p>[<strong> タスク]</strong> タブが表示されます。最初の 3 つの SSH タスクを更新する必要はありません。<br>

  4 番目のタスクは &ndash; 、テストApp Service <strong>の</strong> 名前を正しいApp Serviceに更新します。<br>

  5 番目のタスクは &ndash; 、新しいApp Service <strong>します</strong>。</p>


  <p>[変数 <strong>] タブに移動</strong> し、テスト <strong>スコープに従</strong> ってフィルター処理し、変数の値をテスト環境に <strong>設定</strong> します。 これで、テスト CD パイプラインの構築 <strong>が</strong> 完了しました。</p>


  <p>タスク グループを作成 <a href="https://docs.microsoft.com/en-us/vsts/build-release/concepts/library/task-groups" target="_blank">し、異なる</a> 環境間で使用できる実装オプションの詳細を確認します。</p>


  <h2>実稼働パイプライン</h2>


  <p>私たちの目標は、ダウンタイムなしで実稼働ロールアウトを行い、サービスが提供しているスロット メカニズムとルーティング機能Azure アプリ使用します。</p>


  <p>実稼働環境を<strong>作成するには</strong>、テスト環境を作成するために同<strong></strong>じ手順を繰り返します (手順 8、9、10)。</p>


  <p>[変数] <strong>タブに移動</strong> し、実稼働 <strong>スコープに従</strong> ってフィルター処理し、値を実稼働環境 <strong>に設定</strong> します。 $(mysqldestdb) の値をステージ DB に設定します。 さらに、新しい変数 $(mysqlproddb) を追加し、値を実稼働 DB に設定します。</p>


  <p>[<strong>タスク] タブ</strong>に戻り、4 番目と 5 <strong></strong> &lsquo;&rsquo; 番目のタスクの <strong>App Service</strong> 名を更新します。今回は、[スロットにデプロイ] オプションをオンにし、運用用に作成したステージング スロットを選択App Service。</p>


  <p>アイコンをクリックして、追加のタスクを<strong>追加+します</strong>。</p>


  <ul>
   <li>1 つのルート トラフィック タスク - [実稼働App Service、ステージ スロット、およびトラフィックの 100% のルートを選択します (下のスクリーンショットを参照)</li>
   <li>他の SSH タスクと同じ &ndash; 構成の 2 つの SSH コマンド タスクが異なるコマンド</li>
  </ul>


  <p style="margin-left: 40px;"><strong>1st task コマンド:</strong></p>


  <pre style="margin-left: 40px;">
        mysqldump -P $(mysqlport) -h $(mysqlhost)  -u $(mysqluser)  -p$(mysqlpass) $(mysqldestdb) &gt; $(resultfile)</pre>

  <p style="margin-left: 40px;"><strong>2 つ目のタスク コマンド:</strong></p>


  <pre style="margin-left: 40px;">
        mysql -h $(mysqlhost) -u $(mysqluser)  -p$(mysqlpass) $(mysqlproddb) &lt; $(resultfile)</pre>

  <ul>
   <li>デプロイ Azure App Service 1 つ<br>
  4 番目のタスクと同じですが、今回はスロット オプションを確認せずに</li>
   <li>1 Azure App Service管理タスク<br>
  5 番目のタスクと同じですが、今回はスロット オプションを確認せずに</li>
   <li>1 つのルート トラフィック タスク<br>
  [Production App Service、ステージ スロット、およびトラフィックのルート 0% を選択します</li>

  </ul>


  <p>実稼働用 CD の構築が完了しました。 結果を確認します。</p>


  <p><a href="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/5b11ce37-e92f-4df8-ba5a-0fe1e07801bb.png"><img alt="image" border="0" height="488" src="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/6a8bbf75-3ab6-4f8c-8bfb-6c4cadf11d97.png" style="border: 0px currentcolor; border-image: none; margin-right: auto; margin-left: auto; float: none; display: block; background-image: none;" title="イメージ" width="616"></a></p>


  <h2>まとめ</h2>


  <p>この一連の 2 つのブログ記事では、Docker を導入して DevOps プロセスの最新化を開始し、CI/CD ツールとして Visual Studio Team Services (VSTS) を使用し、クラウド プロバイダーとして Azure を使用する方法を簡単に試す機会を得たと思います。 この種の最新化は、任意の組織のデプロイ変換への最初のステップになる可能性があります。</p>


  <h2>リソース</h2>


  <ul>
   <li><a href="https://docs.microsoft.com/en-us/vsts/build-release/" target="_blank">VSTS 概要 CI/CD を使用する方法</a></li>
   <li><a href="https://azure.microsoft.com/en-us/services/key-vault/" target="_blank">Azure KeyVault</a></li>
   <li><a href="https://docs.microsoft.com/en-us/vsts/build-release/concepts/library/variable-groups" target="_blank">VSTS 変数グループ</a></li>
   <li><a href="https://docs.microsoft.com/en-us/vsts/build-release/concepts/library/task-groups" target="_blank">VSTS タスク グループ</a></li>
  </ul>
