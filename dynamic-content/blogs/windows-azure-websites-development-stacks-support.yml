### YamlMime:Yaml
ms.openlocfilehash: e5acc485b6262e8dc1a2c7f17033537af3492085
ms.sourcegitcommit: d03bdc7fe5447adb6530886aab848b75fe8fa8ee
ms.translationtype: MT
ms.contentlocale: ja-JP
ms.lasthandoff: 03/11/2022
ms.locfileid: "139895705"
Slug: windows-azure-websites-development-stacks-support
Title: Azure Websites 開発スタックのサポート Windows
Summary: Windows Azure websites (waws) チームは、開発スタックのサポートモデルに投資しています。これにより、web アプリの実行を迅速に開始し、web アプリのスペースを拡大することができます。 これ。。。
Content: >-
  Windows Azure websites (waws) チームは、開発スタックのサポートモデルに投資しています。これにより、web アプリの実行を迅速に開始し、web アプリのスペースを拡大することができます。 このブログ記事では、開発スタックのバージョン管理と拡張性、およびこれらの原則が web アプリにどのように適用されるかを理解するために使用するいくつかの基本的な原則について説明します。


  現在、 <strong>.net</strong>、 <strong>PHP</strong>、 <strong>Node.js</strong>、および <strong>Python</strong> スタックはサポートされています。 「」の Windows Azure development center <a href="https://azure.microsoft.com/en-us/develop" target="_blank">https://azure.microsoft.com/en-us/develop</a> は、これらのそれぞれに対して優れたサポート技術情報を提供します。 Web サイトを作成した後は、コンテンツをアップロードするだけで、最小限の情報入力で実行できます。

  <h4><strong>WAWS 開発スタックのバージョン管理</strong></h4>

  PHP など、サポートされている一部の開発スタックは、サイドバイ <strong>サイドバージョン</strong>を有効にするように設計されています。 これらの開発スタックには、プラットフォームに対して検証されている現在のバージョンのセットが用意されています。 また、互換性の理由から特定のバージョンを選択しない限り、既定値が設定されるので、入力は必要ありません。


  .NET などの他の開発スタックは、一部のバージョンの <strong>インプレースアップグレード</strong> を提供するように設計されています (.net 4.5 など)。 この例では、開発スタックの現在のビューを維持し、最新バージョンの機能と利点を提供しています。


  サポートされている各開発スタックの WAWS で使用できるバージョンの概要と、それぞれのバージョンの既定値については、「 <a href="https://github.com/projectkudu/kudu/wiki/Azure-Web-Sites-Development-Stacks" target="_blank">https://github.com/projectkudu/kudu/wiki/Azure-Web-Sites-Development-Stacks</a> 」を参照してください。

  <h4><strong>開発スタックの拡張性</strong></h4>

  カスタマイズが必要になる場合があるため、各開発スタックで提供される機能拡張ポイントをサポートしています。

  <h4><strong>.NET </strong></h4>

  .NET framework は WAWS プラットフォームと緊密に統合されています。


  <span style="text-decoration: underline;"><strong>構成</strong></span>


  構成は、 <em>web.config </em>ファイルを使用して指定できます。 の使用に慣れている <em>apphost.config</em> ファイルは、waws で直接編集することはできませんが、 <a href="https://msdn.microsoft.com/en-us/library/dd465326.aspx" target="_blank">XML ドキュメント変換</a> (xdt) の宣言を使用して変更することができます。 既定のドキュメントなどの <em>apphost.config</em> の一部の設定は、web サイトの [構成] タブで Azure portal を使用して編集することもできます。


  <span style="text-decoration: underline;"><strong>機能拡張</strong></span>


  MVC や Web ページなどの Bin に配置できるコンポーネントは、web アプリケーションフォルダーに追加できます。


  <a href="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/1072.1.png-550x0.png"><img class="alignnone size-full wp-image-133241" alt="1072.1.png-550x0" src="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/1072.1.png-550x0.png" width="550" height="223" /></a>

  <h3><strong>Node.js</strong></h3>

  <span style="text-decoration: underline;"><strong>構成</strong></span>


  WAWS にデプロイされた Node.js アプリケーションに関連する主な構成ファイルを次に示します。

  <ul>
   <li><em>package. json</em></li>
  </ul>

  これは、クロスプラットフォームに関連する Node.js 固有の構成ファイルです。 使用例としては、Node.js モジュールの依存関係 (Express.js など) とランタイムバージョン番号の指定などがあります。

  <ul>
   <li><em>iisnode. .yml </em></li>
  </ul>

  これは、iisnode カスタム IIS モジュールによって使用される構成ファイルです。 使用例としては、node.exe を開始するためのコマンドの指定、iisnode によって作成される node.exe プロセスの数、構成のログ記録などがあります。

  <ul>
   <li><em>web.config</em></li>
  </ul>

  これは、WAWS プラットフォームによって使用される IIS 構成ファイルです。 このファイルは、必要なハンドラー登録をキャプチャし、静的ファイルのパフォーマンス最適化のために URL リライトを使用できるようにします。


  <span style="text-decoration: underline;"><strong>機能拡張</strong></span>


  WAWS と統合された Node.js 開発スタックには、「」に <a href="https://nodejs.org/api/" target="_blank">https://nodejs.org/api</a> 記載されているコア機能が含まれています。 「」に <a href="https://npmjs.org/" target="_blank">https://npmjs.org</a> 記載されている NPM モジュールのエコシステムは、開発スタックのコア機能を拡張するために使用できます。 パッケージの json 構成ファイルを使用すると、web アプリケーションに含めるモジュールを指定できます。 Git ベースのソース管理を使用する場合は、 <em>git プッシュ</em>操作中に、依存関係をフェッチしてインストールするために、waws platform <em>npm install</em>と統合されたインストールが実行されます。 FTP などの他のデプロイメカニズムを使用する場合は、ローカル開発中にモジュールをダウンロードして構成し、web アプリ全体を WAWS にアップロードすることができます。 NPM モジュールには、互換性のあるクロスプラットフォームの Javascript モジュールと、特定のプラットフォームを対象とするように設計されたネイティブモジュールの両方が含まれていることに注意してください。常に、アプリケーションをテストすることをお勧めします。


  <span style="text-decoration: underline;"><strong>ランタイム バージョン</strong></span>


  WAWS プラットフォームに含まれている Node.js バージョンのいずれかを選択することも、カスタム Node.js ランタイムをアップロードして構成することもできます。 手順については Windows Azure デベロッパーセンター <a href="https://azure.microsoft.com/en-us/develop/nodejs/common-tasks/specifying-a-node-version" target="_blank">https://azure.microsoft.com/en-us/develop/nodejs/common-tasks/specifying-a-node-version</a> () を参照してください。

  <h4><strong>PHP</strong></h4>

  <span style="text-decoration: underline;"><strong>構成</strong></span>


  WAWS にデプロイされた PHP アプリケーションに関連するメイン構成ファイルは、標準の PHP <em>. user.ini </em>ファイルです。 このファイルを使用すると、診断用に display_errors などの変更可能な PHP ディレクティブを設定できます。


  <span style="text-decoration: underline;"><strong>機能拡張</strong></span>


  既定では、WAWS は一連の主要な PECL 拡張機能をサポートしています。 カスタム拡張機能も歓迎します。 カスタム拡張機能を有効にするには、DLL を FTP ルートの下に配置し、[構成] タブの下に、PHP 拡張機能の (アプリケーションルートに対して相対的な) 値を設定した PHP_EXTENSIONS アプリ設定を追加します。


  <span style="text-decoration: underline;"><strong>ランタイムのバージョンとカスタマイズ</strong></span>


  バージョン選択は、web サイトの [構成] タブに Azure portal 経由でアクセスできるようになります。


  <a href="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/3005.2.png-550x0.png"><img class="alignnone size-full wp-image-133231" alt="3005.2.png-550x0" src="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/3005.2.png-550x0.png" width="550" height="301" /></a>


  カスタム FastCGI ベースの PHP 開発スタックは、WAWS でもサポートされています。 web サイトのルートの下に開発スタックをアップロードします。 Web サイトの [構成] タブにアクセスし、新しいスクリプトプロセッサ (通常は php-cgi.exe) を * .php 拡張子に関連付けます。 スクリプトプロセッサには絶対パスが必要です。たとえば、D:\home\site\wwwroot を使用してサイトルートを参照している D:\home\site\wwwroot\php5.5\php-cgi.exe です。


  <a href="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/2287.3.png-550x0.png"><img class="alignnone size-full wp-image-133221" alt="2287.3.png-550x0" src="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/2287.3.png-550x0.png" width="550" height="102" /></a>

  <h3><strong>Python</strong></h3>

  <span style="text-decoration: underline;"><strong>構成</strong></span>


  WAWS にデプロイされた Python アプリケーションに関連するメイン構成ファイルは <em>web.config</em>です。このファイルは、必要なハンドラー登録をキャプチャし、静的ファイルのパフォーマンス最適化のために URL リライトを使用できるようにします。 <em>web.config</em>ファイルの使用は省略可能です。ハンドラーマッピングは、Azure portal の [構成] タブで指定することもできます。 詳細については Windows Azure Developer Center」 <a href="https://azure.microsoft.com/en-us/develop/python/tutorials/web-sites-configuration" target="_blank">https://azure.microsoft.com/en-us/develop/python/tutorials/web-sites-configuration</a> を参照してください。


  一部の構成オプションは、Azure portal の [構成] タブにある [アプリ設定で更新できます。

  <ul>
   <li>WSGI_LOG: アプリケーションと構成エラーをキャプチャするためのログファイルへの絶対パス</li>
   <li>WSGI_HANDLER: 環境と start_response 関数を受け入れる WSGI プロトコルの呼び出し可能な<a href="https://www.python.org/dev/peps/pep-0333/#the-application-framework-side" target="_blank">アプリケーションオブジェクト</a></li>
  </ul>

  ここで指定する値は、モジュール名とパッケージ名の後に、使用するモジュール内の属性を指定する必要があります。たとえば、mypackage (属性を呼び出す必要があることを示すかっこを追加します)。

  <ul>
   <li>WSGI_RESTART_FILE_REGEX: ファイル名を指定する正規表現</li>
  </ul>

  既定では、これはすべての *. .py *ファイルと.config ファイル* を参照します。(( \\ .py) |( \\.config)) $


  <span style="text-decoration: underline;"><strong>機能拡張</strong></span>


  配置にパッケージを追加するには、アプリケーションルートの下にを含め、 <em>web.config</em>またはアプリ設定を使用して python パスを構成します。 Virtualenv は現在 WAWS ではサポートされていません。


  任意のパッケージの展開をサポートするには、まず、パッケージを保存するためのディレクトリを web サイトのルートに作成します。これは、Python lib フォルダーに<em>サイト</em> - <em>パッケージ</em>ディレクトリがある場合と似ていますが、web アプリケーション内に配置され、Windows Azure Websites にデプロイされます。この新しいディレクトリにパッケージをコピーし、このディレクトリへの絶対パスを <em>web.config</em> の python パスに追加します (例: <em>D:\home\site\wwwroot\my-packages</em>)。これで、パッケージを web アプリケーション内からインポートできるようになります。


  この例の1つは、アプリケーション内に Django を含めることです。最初に Django をダウンロードするか、既存の Python のインストールにインストールします。次に、Django パッケージをコピー __します (__ 通常は Django という名前のフォルダーを .py ファイルで)、アプリケーション内のディレクトリにコピーします。既定では、アプリケーションルートは、パッケージを検索するディレクトリの一覧に含まれています。サブディレクトリ (たとえば mypackages\django) に含める場合は、親ディレクトリを PYTHON web.config パスに追加できます (この例では D:\home\site\wwwroot\mypackages.)。


  詳細については Windows Azure Developer Center」 <a href="https://azure.microsoft.com/en-us/develop/python/tutorials/web-sites-with-django" target="_blank">https://azure.microsoft.com/en-us/develop/python/tutorials/web-sites-with-django</a> を参照してください。


  <span style="text-decoration: underline;"><strong>ランタイムのバージョンとカスタマイズ</strong></span>


  カスタム FastCGI ベースの Python 開発スタックを開始します。 カスタム開発スタックを web サイトのルートにアップロードし、web サイトハンドラーのマッピングを構成して、FastCGI ベースのスクリプトプロセッサへの絶対パスを含めることができます。


  フィードバックは常に歓迎されます。フォーラムからの <a href="https://social.msdn.microsoft.com/Forums/en-US/windowsazurewebsitespreview/threads/" target="_blank">フィードバック</a>により、開発スタックのニーズをより適切にサポートする方法をお知らせください。
