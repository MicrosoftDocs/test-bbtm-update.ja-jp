### YamlMime:Yaml
ms.openlocfilehash: 542266c53455ff4c31cc9219a4b0dd4400770f4b
ms.sourcegitcommit: d03bdc7fe5447adb6530886aab848b75fe8fa8ee
ms.translationtype: MT
ms.contentlocale: ja-JP
ms.lasthandoff: 03/11/2022
ms.locfileid: "139890893"
Slug: announcing-the-1-0-0-rc1-of-microsoft-azure-webjobs-sdk
Title: Microsoft Azure web ジョブ SDK の 1.0.0-rc1 の発表
Summary: >-
  Microsoft Azure web ジョブ SDK の別のプレビューをリリースしています。これは、Scott selman によって導入されました。 前のプレビューの詳細については、こちらのお知らせ投稿を参照してください。


  このリリースには...
Content: "Microsoft Azure web ジョブ SDK の別のプレビューをリリースしています。これは、 <a href=\"https://www.hanselman.com/blog/IntroducingWindowsAzureWebJobs.aspx\">Scott selman によって導入</a>されました。 前のプレビューの詳細については、こちらの <a href=\"https://blogs.msdn.com/b/webdev/archive/2014/09/12/announcing-the-0-6-0-beta-preview-of-microsoft-azure-webjobs-sdk.aspx\">お知らせ投稿</a>を参照してください。\n\nこのリリースには、0.6.0 ベータ版とバグ修正と同じ一般的な機能セットがあります。\n<h4><strong>このリリースのダウンロード</strong></h4>\nweb ジョブ SDK は NuGet ギャラリーからダウンロードできます。 これらのパッケージは、次のように NuGet パッケージマネージャーコンソールを使用して NuGet ギャラリーからインストールまたは更新できます。\n<pre>Install-Package Microsoft.Azure.WebJobs -Pre</pre>\nMicrosoft Azure Service Bus トリガーを使用する場合は、次のパッケージをインストールします。\n<pre>Install-Package Microsoft.Azure.WebJobs.ServiceBus -Pre</pre>\n<h4><strong>Web ジョブ SDK とは</strong></h4>\nMicrosoft Azure web サイトの<a href=\"https://azure.microsoft.com/en-us/documentation/articles/web-sites-create-web-jobs/\">web ジョブ</a>機能により、web サイトでサービスやバックグラウンドタスクなどのプログラムを簡単に実行できるようになります。 <i>.exe</i>、 <i>.cmd</i>、 <i>.bat</i>ファイルなどの実行可能ファイルを web サイトにアップロードして実行しながら、トリガーまたは連続 web ジョブとして実行できます。 Web ジョブ SDK を使用しない場合、バックグラウンドタスクを接続して実行するには、複雑なプログラミングが必要です。 SDK には、最小限のコードを記述して一般的なタスクを実行できるフレームワークが用意されています。\n\nweb ジョブ SDK には、Microsoft Azure Storage の blob、キュー、テーブル、Service Bus で動作するバインドとトリガーシステムがあります。 バインディングシステムを使用すると、Microsoft Azure Storage オブジェクトの読み取りまたは書き込みを行うコードを簡単に記述できます。 トリガーシステムは、キューまたは blob で新しいデータを受信するたびに、コード内の関数を呼び出します。\n<h4><strong>Web ジョブ SDK のシナリオ</strong></h4>\nここでは、Azure Web ジョブ SDK を使用してより簡単に処理できる標準的なシナリオをいくつか取り上げます。\n<ul>\n<ul>\n <li><b>画像処理</b> または CPU を集中的に使用する作業。</li>\n <li>電子メールの送信など、バックグラウンドスレッドで実行する実行 <b>時間の長いタスク</b> 。 これまでは、アプリがしばらくの間アイドル状態になった場合、IIS はアプリをリサイクルするため、ASP.NET でこれを行うことができませんでした。 Azure Websites の <a href=\"https://weblogs.asp.net/scottgu/archive/2014/01/16/windows-azure-staging-publishing-support-for-web-sites-monitoring-improvements-hyper-v-recovery-manager-ga-and-pci-compliance.aspx\">AlwaysOn</a> では、アプリがアイドル状態のときに web サイトがリサイクルされるのを防ぐことができます。 <a href=\"https://weblogs.asp.net/scottgu/archive/2014/01/16/windows-azure-staging-publishing-support-for-web-sites-monitoring-improvements-hyper-v-recovery-manager-ga-and-pci-compliance.aspx\">AlwaysOn</a> は、サイトがスリープ状態にならないことを保証します。つまり、Web ジョブと web ジョブ SDK を使用して、実行時間の長いタスクやサービスを実行できます。</li>\n <li><b>キューの処理</b>。 Web フロントエンドがバックエンド サービスと通信する一般的な方法は、キューを使用することです。 これは、一般的なプロデューサー–コンシューマーパターンです。</li>\n <li><b>RSS 集計</b>。 RSS フィードのリストを維持するサイトがある場合は、フィードからのすべての記事をバックグラウンド プロセスにプルすることができます。</li>\n <li><b>ファイルのメンテナンス</b>(ログファイルの集計やクリーンアップなど)。</li>\n <li>CSV リーダーなどの<strong>受信、ログ</strong>の解析、テーブルへのデータの格納。</li>\n</ul>\n</ul>\n<h4><strong>SDK の目標</strong></h4>\n<ul>\n <li>バックグラウンド処理の作業を行うときに、Azure Storage の使用を容易にする方法を提供します。</li>\n <li>SDK を使用すると、アプリケーション内での Azure Storage の使用が簡単になります。 ストレージから読み取り/書き込みを行うコードを記述する必要はありません。</li>\n <li>プロバイダーは、開発者が診断やログ記録コードを記述することなく、豊富な診断機能と監視機能を提供します。</li>\n</ul>\n&nbsp;\n<h3><strong>SDK の機能</strong></h3>\n<h4><strong>トリガー</strong></h4>\n関数は、キューまたは Blob で新しい入力が検出されたときに実行されます。\n<h4><strong>バインド</strong></h4>\nSDK は、バインドをサポートして、C# プリミティブ型と Azure storage (Blob、テーブル、キュー、Service Bus など) との間のモデルバインディングを提供します。 これにより、開発者は、blob、テーブル、およびキューの読み取り/書き込みを簡単に行うことができます。これは、Azure Storage からの読み取り/書き込みのコードについて理解する必要がないためです。\n<ul>\n <li><strong>便宜上</strong>。 使用するのに最も有用な型を選択できます。 Web ジョブ SDK は、グルーコードを処理します。 Blob に対して文字列操作を行う場合は、TextWriter に変換する方法を気にせずに、TextReader/TextWriter に直接バインドすることができます。</li>\n <li><strong>フラッシュと終了</strong>: web ジョブ SDK は、未処理の出力を自動的にフラッシュして閉じます。</li>\n <li><strong>単体テスト</strong>。 SDK を使用すると、てではなく TextWriter のようなプリミティブ型をモックすることができるため、コードの単体テストが可能になります。</li>\n <li><strong>診断</strong>モデルバインドはダッシュボードと連携して、パラメーターの使用に関するリアルタイムの診断を提供します。</li>\n</ul>\n現在、次のバインドがサポートされています: <strong>Stream、TextReader/Writer、および String。</strong>Storage SDK からカスタム型およびその他の型にバインドするためのサポートを追加することもできます。\n<h4><strong>Azure キュー</strong></h4>\nSDK を使用すると、キューの新しいメッセージに対して関数をトリガーできます。 SDK を使用すると、String、Poco (Plain old CLR object)、byte []、および Azure storage SDK 型にバインドできるので、メッセージの内容に簡単にアクセスできます。 キューで使用できるその他の主要な機能を次に示します。\n\n詳細については、 <a href=\"https://azure.microsoft.com/blog/2014/09/06/announcing-the-0-5-0-beta-preview-of-microsoft-azure-webjobs-sdk/\">0.5.0</a>、  <a href=\"https://azure.microsoft.com/blog/2014/08/21/announcing-the-0-4-0-beta-preview-of-microsoft-azure-webjobs-sdk/\">0.4.0</a> 、 <a href=\"https://azure.microsoft.com/blog/2014/06/18/announcing-the-0-3-0-beta-preview-of-microsoft-azure-webjobs-sdk/\">v0.3.0</a> の各発表投稿をお読みください。\n<ul>\n <li>関数をトリガーし、メッセージの内容を String、Poco (Plain old CLR object)、byte []、および CloudQueueMessage にバインドします。</li>\n <li>1つまたは複数のメッセージをキューに送信します。</li>\n <li>キューを使用した並列実行: SDK は、QueueTrigger 内でキューのメッセージを並列でフェッチします。 つまり、次に示すように、関数がキューでリッスンしている場合、SDK はこのキューに対して 16 (既定) のキューメッセージのバッチを同時に取得します。 関数は並列でも実行されます。</li>\n <li>Azure キューでの有害メッセージの処理</li>\n <li>キューの DequeueCount プロパティにアクセスします</li>\n <li>Azure キューのポーリングロジックの向上: SDK はランダムな指数バックオフアルゴリズムを実装して、ストレージトランザクションコストに対するアイドルキューポーリングの影響を軽減します。</li>\n <li>高速パス通知: SDK を使用して複数のキューにメッセージを送信する場合は、SDK によってメッセージが高速に追跡されます。 V0.3.0 では、SDK は ~ 2 秒ごとにポーリングを行います。これは、アプリに20個の関数のチェーン (キューへの書き込み、別のキューへの書き込み、別の関数のトリガーなど) が発生した場合に、20個のキューメッセージを処理するために約40秒かかったことを意味します。 これらの変更により、これで最大8秒かかります。</li>\n <li>キューポーリングの構成オプション: SDK では、キューのポーリング動作を構成できるいくつかのノブが公開されています。\n<ul>\n <li>MaxPollingInterval は、キューが空の場合に、メッセージを確認する前に待機する最長時間を指定します。 既定値は1分です。</li>\n <li>キューメッセージが有害キューに移動されるときに使用される MaxDequeueCount。 既定値は5です。</li>\n</ul>\n</li>\n</ul>\n<h4><strong>Azure BLOB</strong></h4>\n新しい blob が検出されたとき、または既存の blob が更新されたときに、SDK を使用して関数をトリガーできます。 SDK では、Stream、String、Poco (Plain old CLR object)、byte []、TextReader、TextWriter、および Azure storage SDK 型にバインドできるようにすることで、blob の内容にアクセスできます。\n\n詳細については、 <a href=\"https://azure.microsoft.com/blog/2014/09/06/announcing-the-0-5-0-beta-preview-of-microsoft-azure-webjobs-sdk/\">0.5.0</a>、  <a href=\"https://azure.microsoft.com/blog/2014/08/21/announcing-the-0-4-0-beta-preview-of-microsoft-azure-webjobs-sdk/\">0.4.0</a> 、 <a href=\"https://azure.microsoft.com/blog/2014/06/18/announcing-the-0-3-0-beta-preview-of-microsoft-azure-webjobs-sdk/\">v0.3.0</a> の各発表投稿をお読みください。\n<ul>\n <li>BlobTriggers は、新しい blob が検出された場合、または既存の blob が更新された場合にのみトリガーされます。</li>\n <li>Blob の再試行とエラー処理: このリリースの SDK では、blob の処理中にエラーが発生した場合に、関数の再試行がサポートされるようになりました。 BlobTrigger は、指定された最大再試行回数 (既定では5回) まで処理されます。 しきい値に達すると、関数が5回実行されると、SDK は \"web ジョブ\" という名前のメッセージをキューに配置します。 このキューで QueueTrigger を使用して関数をトリガーし、メッセージのカスタムエラー処理を実行できます。</li>\n</ul>\n<h4><strong>Azure Storage テーブル</strong></h4>\nSDK を使用すると、テーブルにバインドし、読み取り、書き込み、更新、削除の各操作を実行できます。\n\n詳細については、 <a href=\"https://blogs.msdn.com/b/webdev/archive/2014/09/12/announcing-the-0-6-0-beta-preview-of-microsoft-azure-webjobs-sdk.aspx\">0.6.0</a>、  <a href=\"https://azure.microsoft.com/blog/2014/09/06/announcing-the-0-5-0-beta-preview-of-microsoft-azure-webjobs-sdk/\">0.5.0</a>、  <a href=\"https://azure.microsoft.com/blog/2014/08/21/announcing-the-0-4-0-beta-preview-of-microsoft-azure-webjobs-sdk/\">0.4.0</a> 、および <a href=\"https://azure.microsoft.com/blog/2014/06/18/announcing-the-0-3-0-beta-preview-of-microsoft-azure-webjobs-sdk/\">v0.3.0</a> の各発表に関する投稿をお読みください。\n\n受信は、blob に格納されているファイルを解析し、その値を CSV リーダーなどのテーブルに格納する場合の一般的なシナリオです。 このような場合、受信関数は大量の行 (<em>場合によっては100万</em>) を書き込む可能性があります。\n\nWeb ジョブ SDK を使用すると、この機能を簡単に実装でき、テーブルに書き込まれた行の数などのリアルタイムの監視機能を追加して、受信関数の進行状況を監視することができます。\n\n次の関数は、10万行を Azure Table storage に書き込む方法を示しています。\n<pre class=\"prettyprint\">public static class Program\n{\n    static void Main()\n    {\n        JobHost host = new JobHost();\n        host.Call(typeof(Program).GetMethod(\"Ingress\"));\n    }\n    [NoAutomaticTrigger]\n    public static void Ingress([Table(\"Ingress\")] ICollector&lt;Person&gt; tableBinding)\n    {\n        // Loop to simulate Ingressing lots of rows. \n        // You would replace this with your own logic\n        // of reading from blob storage and write to Azure Tables.\n        for (int i = 0; i &lt; 100000; i++)\n        {\n            tableBinding.Add(\n            new Person() \n            { PartitionKey = \"Foo\", RowKey = i.ToString(), Name = \"Name\" }\n            );\n        }\n    }\n}\npublic class Person\n{\n    public string PartitionKey { get; set; }\n    public string RowKey { get; set; }\n    public string Name { get; set; }\n}</pre>\n<h4><strong>Azure Service Bus</strong></h4>\nAzure キューと同様に、SDK を使用すると Service Bus キューまたはトピックに新しいメッセージが送信されたときに関数をトリガーできます。 SDK を使用すると、String、Poco (Plain old CLR object)、byte []、BrokeredMessage にバインドできるため、メッセージの内容に簡単にアクセスできます。\n\n詳細については <a href=\"https://azure.microsoft.com/blog/2014/06/18/announcing-the-0-3-0-beta-preview-of-microsoft-azure-webjobs-sdk/\">、v0.3.0-beta</a> に関するこの発表の投稿をお読みください。\n<h4><strong>全般</strong></h4>\nSDK のその他の興味深い機能の一部を次に示します。\n\n<strong>-非同期のサポート: </strong>SDK では、非同期関数がサポートされています。\n\n<strong>-Cancellationtoken: </strong>関数は関数で CancellationToken パラメーターを受け取ることができ、関数はホストからキャンセル要求を受け取ることができます。\n\n<strong>-NameResolver: </strong>SDK には、キュー名または blob 名のソースを指定できる機能拡張レイヤーが用意されています。 例: この機能を使用して、構成ファイルからキュー名を取得できます。 この <a href=\"https://github.com/Azure/azure-webjobs-sdk-samples/tree/master/BasicSamples/MiscOperations\">サンプル</a>を参照してください。\n\n<strong>-Web ジョブのシャットダウン通知: </strong>Web ジョブには、Web ジョブが停止したときに通知を生成する正常なシャットダウン通知機能があります。 SDK は、この通知をキャンセルトークンを使用して関数にフローします。 この SDK では、Web ジョブがシャットダウンされたときに通知することで、Web ジョブでのこのグレースフルシャットダウンがサポートされています。 この情報は、CancellationToken を使用して関数にフローされます。 次の関数は、Web ジョブの停止時に取り消し要求を受け取る CancellationToken を受け取ります。\n<pre class=\"prettyprint\">public static void UseCancellationToken(\n    [QueueTrigger(\"inputqueue\")] string inputText,\n    TextWriter log,\n    CancellationToken token)\n{\n      // This is a long running function which can be cancelled  \n      while (!token.IsCancellationRequested)\n      {\n          Thread.Sleep(2000);\n          log.WriteLine(\"Not cancelled\");\n      }\n      log.WriteLine(\"cancelled\");\n}</pre>\n<h4><strong>Web ジョブを監視するためのダッシュボード。</strong></h4>\nWeb ジョブ (任意<b><i>の言語で記述</i></b>された任意の種類の) を実行すると、リアルタイムで監視できます。 特定の実行の状態 (実行中、停止、完了)、最終実行時刻、ログを確認できます。 次のスクリーンショットは、Web サイトで実行されているすべての Web ジョブのビューを示しています。\n\nSDK を使用して Web ジョブを作成すると、プログラムの機能に関する診断と監視のエクスペリエンスが得られます。 たとえば、次のフローを含む \"ImageResizeAndWaterMark\" というイメージ処理 Web ジョブがあるとします。\n\nユーザーが \"images-input\" という名前の Blob コンテナーにイメージをアップロードすると、SDK によって Resize 関数がトリガーされます。 サイズ変更すると、イメージが処理され、ウォーターマーク関数をトリガーする \"images2\" コンテナーに書き込まれます。 透かし関数は、イメージのサイズを変更し、\"images3\" Blob コンテナーに書き込みます。 次の <em>コードは、上記で説明した Web ジョブを示し</em>ています。\n<pre class=\"prettyprint\">    public class ImageProcessing\n    {\n        public static void Resize(\n            [BlobTrigger(@\"images-input/{name}\")] WebImage input,\n            [Blob(@\"images2-output/{name}\")] out WebImage output)\n        {\n            var width = 80;\n            var height = 80;\n            output = input.Resize(width, height);\n        }\n\n        public static void WaterMark(\n            [BlobTrigger(@\"images2-output/{name}\")] WebImage input,\n            [Blob(@\"image3-output/{name}\")] out WebImage output)\n        {\n            output = input.AddTextWatermark(\"WebJobs\", fontSize: 6);\n        }\n    }\n\n    public class WebImageBinder : ICloudBlobStreamBinder&lt;WebImage&gt;\n    {\n        public Task&lt;WebImage&gt; ReadFromStreamAsync(Stream input, System.Threading.CancellationToken cancellationToken)\n        {\n            return Task.FromResult&lt;WebImage&gt;(new WebImage(input));\n        }\n\n        public Task WriteToStreamAsync(WebImage value, Stream output, System.Threading.CancellationToken cancellationToken)\n        {\n            var bytes = value.GetBytes();\n            return output.WriteAsync(bytes, 0, bytes.Length);\n        }\n    }</pre>\nazure で web ジョブを実行すると、Windows azure Websites ポータルの [web ジョブ] \\ (web ジョブ) タブにある \"imageresizeandwatermark\" の [ログ] リンクをクリックすると、ダッシュボードが表示されます。\n\n<a href=\"https://acom.azurecomcdn.net/80C57D/blogmedia/blogmedia/2014/09/19/aztaresportal.png\"><img style=\"border-width: 0px;\" title=\"aztaresportal\" alt=\"aztaresportal\" src=\"https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/aztaresportal_thumb.png\" width=\"644\" height=\"161\" border=\"0\" /></a>\n\nダッシュボードは SiteExtension であるため、url:  <a href=\"https://mysite.scm.azurewebsites.net/azurejobs\"> https://mysite に移動してアクセスできます。<strong></strong>azurewebsites.net/<strong>azurejobs</strong></a><a href=\"https://mysite.scm.azurewebsites.net/azurejobs\">。</a>  SiteExtension にアクセスするには、デプロイ資格情報が必要です。 サイト拡張機能へのアクセスの詳細については、Kudu プロジェクトのドキュメントを参照してください。 <a href=\"https://github.com/projectkudu/kudu/wiki/Accessing-the-kudu-service\">https://github.com/projectkudu/kudu/wiki/Accessing-the-kudu-service</a><strong></strong>\n<h5><strong>関数の実行の詳細</strong></h5>\nこの \"ImageResizeAndWaterMark\" Web ジョブの特定の実行を監視しているときに、次のようなプログラム内の関数に関する呼び出しの詳細を表示できます。\n<ul>\n<ul>\n <li>この関数のパラメーターは何ですか?</li>\n <li>関数の実行にかかった時間。</li>\n <li>Blob からの読み取りにかかった時間と、読み取り/書き込みバイト数。</li>\n</ul>\n</ul>\n<a href=\"https://acom.azurecomcdn.net/80C57D/blogmedia/blogmedia/2014/09/19/new_details.png\"><img style=\"border-width: 0px;\" title=\"new_details\" alt=\"new_details\" src=\"https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/new_details_thumb.png\" width=\"690\" height=\"540\" border=\"0\" /></a>\n<h5><strong>再生の呼び出し &amp;</strong></h5>\n上の例では、何らかの理由でウォーターマーク関数が失敗した場合は、新しいイメージをアップロードし、ウォーターマーク関数を再生します。これにより、実行チェーンがトリガーされ、Resize 関数も呼び出されます。 これは、関数を連結するための複雑なグラフがある場合に、問題を診断してデバッグするのに役立ちます。 また、ダッシュボードから関数を呼び出すこともできます。\n<h5><strong>因果関係 of 関数</strong></h5>\n上の例では、ウォーターマーク関数が Blob に書き込まれるときに、Resize 関数がトリガーされることがわかっています。 ダッシュボードには、関数間の因果関係が表示されます。 新しい入力が検出されたときにトリガーされる多数の関数をチェーン化している場合は、この因果関係グラフを表示すると便利です。\n<h5><strong>Blob の検索</strong></h5>\nBlob の検索をクリックすると、その Blob に何が起こったかに関する情報を取得できます。 たとえば、ImageResizeAndWaterMark の場合、ウォーターマーク関数が実行されたため、Blob が書き込まれました。 検索 Blob の詳細については、こちらの <a href=\"https://blogs.msdn.com/b/jmstall/archive/2014/02/19/who-wrote-that-blob.aspx\">投稿</a>を参照してください。\n<h3><strong>サンプル</strong></h3>\nWeb ジョブ SDK のサンプルは、 <a href=\"https://github.com/Azure/azure-webjobs-sdk-samples\">https://github.com/Azure/azure-webjobs-sdk-samples</a>\n<ul>\n<ul>\n <li>Blob、テーブル、キュー、および Service Bus のトリガーとバインドの使用方法については、サンプルを参照してください。</li>\n <li>PhluffyShuffy という名前のサンプルがあります。これは、顧客が画像をアップロードして、その画像を blob storage から処理するように関数をトリガーする画像をアップロードできる Web サイトです。</li>\n</ul>\n</ul>\n<h3><a href=\"https://www.asp.net/aspnet/overview/developing-apps-with-windows-azure/getting-started-with-windows-azure-webjobs\">チュートリアル: Windows Azure WebJobs SDK を使用したはじめに</a></h3>\nWeb ジョブ SDK の概要については、このチュートリアルに従ってください。\n<h3><strong>ドキュメント</strong></h3>\n<ul>\n<ul>\n <li><a href=\"https://channel9.msdn.com/Shows/Web+Camps+TV/Making-Your-Jobs-Easier-With-Windows-Azure-WebJobs-SDK\">Windows Azure WebJobs SDK を使用して仕事を簡単にする Channel 9 ビデオ</a></li>\n <li><a href=\"https://www.hanselman.com/blog/IntroducingWindowsAzureWebJobs.aspx\">Scott マン Selman による Web ジョブと SDK の概要</a></li>\n <li>web ジョブを使用して構築された web サイトモニターと<a href=\"https://twitter.com/bradygaster\">Brady</a>の ASP.NET</li>\n <li><a href=\"https://www.asp.net/aspnet/overview/developing-apps-with-windows-azure/azure-webjobs-recommended-resources\">Azure WebJobs-推奨されるリソース</a></li>\n <li><a href=\"https://channel9.msdn.com/Tags/azurefridaywebjobs\">Azure 金曜の Web ジョブビデオシリーズ</a></li>\n</ul>\n</ul>\n<h4></h4>\n<h3>SDK を使用して Web ジョブを Azure Websites にデプロイする</h3>\nazure SDK 2.4 での Visual Studio 2013 Update 3 には、web ジョブを azure Websites に発行するためのツールサポート Visual Studio 追加されました。 詳細については、「 <a href=\"https://azure.microsoft.com/en-us/documentation/articles/websites-dotnet-deploy-webjobs/\">Azure Websites に Azure WebJobs をデプロイする方法</a>」を参照してください <a name=\"how-to-deploy-azure-webjobs-to-azure-websites\"></a> 。\n<h4></h4>\n<h3>0.6.0 から 1.0.0-rc1 への移行に関する既知の問題</h3>\n<h5><strong>Blob をストリームにバインドする場合は、FileAccess パラメーターが必要です</strong></h5>\nこのリリース以降、SDK では、Blob 属性を使用してストリームにバインドするときに、FileAccess パラメーターを設定する必要があります。\n<pre class=\"prettyprint\">public static void BindingToBlob(\n[BlobTrigger(\"container/input\")]  Stream input,\n[Blob(\"container/output\", FileAccess.Write)]  Stream output\n)\n{\n\n}</pre>\n<h5><strong>CloudBlockBlob や Cloudblockblob やてなどの Azure storage SDK へのバインド</strong></h5>\n既定の FileAccess は読み取りではなく ReadWrite であり、使用可能な唯一のオプションです。\n\n&nbsp;\n<h3><strong>フィードバックを提供してヘルプを得る</strong></h3>\nMicrosoft Azure Web サイトと Microsoft Azure web ジョブ SDK の<a href=\"https://azure.microsoft.com/en-us/documentation/articles/web-sites-create-web-jobs/\">web ジョブ</a>機能はプレビュー段階です。 このエクスペリエンスを改善するためのフィードバックは常に歓迎されます。\n\nチュートリアルに直接関係のない質問がある場合は、 <a href=\"https://azure.microsoft.com/en-us/support/forums/\">Azure フォーラム</a>、 <a href=\"https://forums.asp.net/1247.aspx\">ASP.NET フォーラム</a>、または<a href=\"https://stackoverflow.com/\">StackOverflow.com</a>に投稿できます。 <a href=\"https://twitter.com/search?q=AzureWebJobs\">#AzureWebJobs</a> SDK for Twitter と、stackoverflow のタグ Azure-WebJobsSDK を使用します。"
