### YamlMime:Yaml
ms.openlocfilehash: b2bac8efe1edffd03b0949a64aed866eb876bc99
ms.sourcegitcommit: d03bdc7fe5447adb6530886aab848b75fe8fa8ee
ms.translationtype: MT
ms.contentlocale: ja-JP
ms.lasthandoff: 03/11/2022
ms.locfileid: "139889042"
Slug: r-workloads-on-azure-batch
Title: Azure Batch 上の R ワークロード
Summary: この記事では、Batch によって、多数の Vm にわたる Azure でシンプルな R スクリプトを実行する方法について説明します。
Content: "R は、オープンソースのソフトウェア環境と言語であり、さまざまな統計およびグラフィカル手法を提供し、高度に拡張可能で、すべてのプラットフォームで実行できます。 今日の R は、日常業務においてさまざまな組織によって使用されています。たとえば、銀行、automakers、航空会社の製造元、技術会社などがあります。 これらは、大規模なハイパースケールで実行される何らかの形式の予測と統計分析に R を使用します。 これにより、大規模な計算と大規模な処理が行われます。これは、大規模なリソースが必要になることを意味します。\n\nここで Azure Batch があります。2014年10月以降のパブリックプレビューのサービス。 Microsoft Azure で管理されたサービスとしてリソース、スケジュール設定、タスク実行を提供します。 これは、クラスターで大規模な R スクリプトとワークロードを実行する場合に最適です。 モデルと分析を提供 Azure Batch し、Vm のリソースとスケジューリングを行い、R を実行してスクリプトを実行し、直接結果を取得し、出力を正しい宛先にプッシュします。\n\nBatch によって、多数の Vm 間で Azure でシンプルな R スクリプトを実行する方法について説明します。 サービスは、ジョブの分割によって生成されるすべてのタスクについて、\"RScript.exe\" を実行します (R は<a href=\"https://cran.r-project.org/mirrors.html\" target=\"_blank\">ここで</a>ダウンロードできます<a href=\"https://cran.r-project.org/bin/windows/base/rw-FAQ.html#Introduction\" target=\"_blank\">。こちらを参照し</a>てください Windows についてはこちらを参照してください)。 R 実行可能ファイルは、batch アプリポータルを使用してパッケージ化され、batch アカウントにアップロードされます。このポータルには、batch アカウントを使用して Azure Portal 経由でアクセスできます。 R スクリプトを実行するコードも、同じリソースを使用してパッケージ化およびアップロードされます。\n\nソリューションには、次の2つの主要な部分があります。\n\n<strong>1) クラウド–</strong> これは、ジョブの分割を多数のタスクに実行してからタスク実行コードに実行するサーバー側コードです。\n<pre class=\"prettyprint\">public static readonly CloudApplication Application = new ParallelCloudApplication\n        {\n            ApplicationName = \"RWorkload\",\n            JobType = \"RWorkload\",\n            JobSplitterType = typeof(RWorkloadJobSplitter),\n            TaskProcessorType = typeof(RWorkloadTaskProcessor)\n        };</pre>\nこのコードでは、自分のワークロードについて説明します。 アプリケーション名は、ポータルにアップロードする必要があるアプリケーションイメージの zip と対応しています。 これには、R スクリプトの実行可能ファイルが含まれます。 ジョブの種類は、ワークロードを送信するためにクライアントによって参照されるものです。\n<pre class=\"prettyprint\">protected override IEnumerable&lt;TaskSpecifier&gt; Split(IJob job, JobSplitSettings settings)\n        {\n            var taskList = new List&lt;TaskSpecifier&gt;();\n            var task = new TaskSpecifier\n            {\n                RequiredFiles = job.Files,\n                Parameters = job.Parameters\n            };\n\n            taskList.Add(task);\n\n            return taskList;\n        }</pre>\nこのコードは1つのタスクを作成しますが、ファイルの数などのパラメーターのホストに応じて複数のタスクを作成したり、スクリプトを解析したり、ワークロードを分割する高度なケースを特定したりするために拡張できます。 クライアントから渡されたすべてのファイルとパラメーターを渡すことにも注意してください。 これには、メインの R スクリプトを含むすべてのスクリプトが含まれます。これは、他の複数のスクリプトを呼び出すか、または呼び出すことができません。 パラメーターには、主要な r スクリプトファイル名が含まれています。これは、どの R スクリプトがプライマリスクリプトであるかを識別するのに役立ちます。\n<pre class=\"prettyprint\">protected override TaskProcessResult RunExternalTaskProcess(ITask task, TaskExecutionSettings settings)\n        {\n            //R input script\n            var inputFile = task.Parameters[\"inputFile\"];\n\n            const string outputFile = \"output.txt\";\n\n            //std output directed to this file\n            string standardOutput = string.Format(\"std_task{0}.out\", task.TaskId);\n\n            var process = new ExternalProcess\n            {\n                CommandPath = ExecutablePath(@\"R-3.1.2\\bin\\Rscript.exe\"),\n                Arguments = string.Format(\"{0} &gt; {1}\", inputFile, standardOutput),\n                WorkingDirectory = LocalStoragePath\n            };\n\n            try\n            {\n                var processOutput = process.Run();\n                return TaskProcessResult.FromExternalProcessResult(processOutput, standardOutput, outputFile);\n            }\n            catch (Exception ex)\n            {\n                Log.Error(\"Error in task processor: {0}\", ex.ToString());\n            }\n\n            return new TaskProcessResult { Success = TaskProcessSuccess.RetryableFailure };\n        }</pre>\nタスクプロセッサは、入力スクリプトを使用して R スクリプト実行可能ファイルを実行し、出力を標準出力ファイルに送信して、実行可能ファイルによって独立して生成されたテキストファイルに出力をキャプチャするだけです。 これらの出力は、タスクの結果として渡されます。つまり、これらの出力は blob ストレージにアップロードされ、ポータルのタスク/ジョブのダウンロードを通じて利用できます。\n\n<strong>2) クライアント–</strong> これは、必要なファイルと共にジョブを送信し、ジョブの状態を監視して、生成された出力をダウンロードするクライアント側のコードです。\n<pre class=\"prettyprint\">var parameters = new Dictionary&lt;string, string&gt;\n            {\n                { \"Rscript\", \"&lt;your main R script&gt;.r\" },\n                { \"inputFile\", \"&lt;your r scripts&gt;.r\" }\n            };\n\n            return new JobSubmission\n            {\n                Name = \"R\",                             \n                Type = \"RWorkload\",                     \n                RequiredFiles = userInputFilePaths,     \n                Parameters = parameters,                \n                InstanceCount = 1,         \n            };</pre>\nクライアントは、ジョブ送信オブジェクトを含むジョブの仕様を構築します。 上の例では、ジョブに名前を付けたジョブの種類がクラウドコードのジョブの種類に対応しています。これは入力ファイルとして渡す必要があるスクリプトの一覧です。これらのファイルは、ローカルストレージの場所を使用して参照でき、バックグラウンドで Azure Blob Storage にアップロードされます (ジョブの送信前にアップロードが行われますが、同じ呼び出しで行われます)。また、スクリプトの名前と最後にジョブを実行するインスタンスの数を含むパラメーターがアップロードされます。\n<pre class=\"prettyprint\">var job = await client.Jobs.SubmitAsync(jobSpec);</pre>\n最後に、ジョブ送信オブジェクトが SDK の Submit 呼び出しを通じて渡され、ワークロードがポータルを使用して作成されたサービスに送信されます。 これで、ジョブは、ポータルまたはクライアント経由で監視できます。ジョブの詳細は、送信時に返されたジョブ Id を使用して取得します。\n\nそのため、簡単にクラウドで R スクリプトを実行することが簡単にできます。 ワークロードの要件に応じて、複数の仮想マシンにスケールアウトすることは簡単ではありません。 これらのアイデアを使って、フィードバック、質問、コメントをお寄せください。\n\n&nbsp;\n<h2>その他のリソース</h2>\n<a title=\"技術概要 \" href=\"https://azure.microsoft.com/en-us/documentation/articles/batch-technical-overview/\"> 技術概要</a>\n\n<a title=\".Net 用の \" href=\"https://azure.microsoft.com/en-us/documentation/articles/batch-dotnet-get-started/\"> Azure Batch ライブラリの概要 .net 用の Azure Batch ライブラリの概要</a>\n\n<a title=\"Batch 開発ライブラリとツール \" href=\"https://azure.microsoft.com/en-us/documentation/articles/batch-development-libraries-tools/\"> を入手する batch 開発ライブラリとツールを入手する</a>"
