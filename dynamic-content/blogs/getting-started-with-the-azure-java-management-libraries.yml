### YamlMime:Yaml
ms.openlocfilehash: 4f7a3d1292556b9adbaac1ad4c7b495573e72655
ms.sourcegitcommit: d03bdc7fe5447adb6530886aab848b75fe8fa8ee
ms.translationtype: MT
ms.contentlocale: ja-JP
ms.lasthandoff: 03/11/2022
ms.locfileid: "139890790"
Slug: getting-started-with-the-azure-java-management-libraries
Title: はじめに Azure Management Libraries for Java の使用
Summary: この投稿では、Java 用の管理ライブラリについて説明し、Eclipse プロジェクトを立ち上げ、実行するプロセスについて説明します。これを拡張して使用して、その中で独自の Azure サブスクリプションとリソースを作成および管理できます。
Content: "Microsoft Azure SDK for Java の 0.5.0 リリースから、Java SDK でのサービス管理のサポートが追加されました。 サービス管理は、 <a href=\"https://github.com/azure/azure-sdk-for-net\">Azure SDK for .NET</a> と <a href=\"https://github.com/azure/azure-sdk-for-node\">Azure SDK for Node.js</a> で既に豊富な領域ですが、これはリリースを楽しみにしていた Java SDK の新しい領域でした。 .NET および Node.js SDK や Storage チームの Java SDK と同様に、サービス管理用<a href=\"https://github.com/Azure/azure-storage-java\">の Java SDK</a> も GitHub 上のオープンソース<a href=\"https://github.com/azure/azure-sdk-for-java\">です</a>。 この投稿では、Java 用の管理ライブラリについて説明し、Eclipse プロジェクトを立ち上げ、実行するプロセスについて説明します。これを拡張して使用して、その中で独自の Azure サブスクリプションとリソースを作成および管理できます。\n<h2>Java 用管理ライブラリとは</h2>\n簡単に言えば、これらのライブラリを使用すると、Java アプリケーションで Azure リソースのセットアップ、削除、プロビジョニング、および日常的な管理タスクを自動化できます。 チームのマントラは非常にシンプルです。開発者が自分のコードで Azure サブスクリプションに対して操作を実行し、それ以外の場合は管理ポータルを使用して実行する必要がある機能を有効にしたいと考えます。 ライブラリを使用すると、Azure リソースの自動化が可能になります (実際には、ライブラリによって、現在、 <a href=\"https://msdn.microsoft.com/library/azure/jj554330.aspx\">独自の PowerShell</a> と <a href=\"https://github.com/Azure/azure-sdk-tools-xplat\">XPlat CLI エクスペリエンスが</a> 可能になります)。 次のような操作を行うには、チームの管理ライブラリを使用できます。\n<ul>\n <li>Web サイト、SQL データベース、クラウド サービス、スケジューラ ジョブ コレクション、仮想マシン、ストレージなどのリソースの設定を作成、削除、更新します</li>\n <li>Web サイトの開始と停止</li>\n <li>ストレージ アカウントへのデータベースのバックアップ</li>\n <li>仮想マシンの作成を自動化する</li>\n</ul>\nJava 用管理ライブラリは Maven で使用できます。そのため、最新の Java 開発ツールで簡単に利用できます。 この投稿では、Eclipse を使用した開発に重点を置いて行います。\n<h2>Eclipse Maven の作成Project</h2>\nこの投稿のこの領域では、ユーザーが Eclipse を使用して Maven と Azure ライブラリを使用して開発した経験はほとんどまたは全くない場合に、このプロセスについて説明します。また、基本的なレベルで、ゼロから始め、Java/Maven/Eclipse の経験を本当に経験している場合、この一部は子のプレイのように見える可能性があります。 Java は比較的初めてですが、長年の .NET 開発者でしたが、Azure SDK の拡張に関心を持つことで、言語を再確認する機会を得ました。 私は、この領域に関する投稿を開始する場合に最適な候補です (チームはここで楽しそうです)。\n\nこれらのチュートリアルの収集を開始するために新しいワークスペースを作成します。そのため、ここで新しいフォルダーを作成します。\n\n<a href=\"https://acom.azurecomcdn.net/80C57D/blogmedia/blogmedia/2014/09/clip_image001.png\"><img style=\"padding-top: 0px;padding-left: 0px;padding-right: 0px;border-width: 0px\" title=\"Eclipse ワークスペースの選択\" alt=\"Selecting an Eclipse Workspace\" src=\"https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/clip_image001_thumb.png\" width=\"634\" height=\"295\" border=\"0\" /></a>\n\nワークスペースが作成され、Eclipse IDE が必要な方法で設定された後、新しい Maven プロジェクトを作成します。\n\n<a href=\"https://acom.azurecomcdn.net/80C57D/blogmedia/blogmedia/2014/09/clip_image002.png\"><img style=\"padding-top: 0px;padding-left: 0px;padding-right: 0px;border-width: 0px\" title=\"新しい Eclipse Maven プロジェクトの作成\" alt=\"Creating a new Eclipse Maven project\" src=\"https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/clip_image002_thumb.png\" width=\"644\" height=\"404\" border=\"0\" /></a>\n\nアーキタイプを選択する必要はないので、この部分をスキップし、\"単純なプロジェクト\" アプローチを選択します。\n\n<a href=\"https://acom.azurecomcdn.net/80C57D/blogmedia/blogmedia/2014/09/clip_image003.png\"><img style=\"padding-top: 0px;padding-left: 0px;padding-right: 0px;border-width: 0px\" title=\"単純なプロジェクト モードを使用する\" alt=\"Going with simple project mode\" src=\"https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/clip_image003_thumb.png\" width=\"644\" height=\"404\" border=\"0\" /></a>\n\nここでは実際に Eclipse Maven プロジェクトを作成しています (Azure Maven パッケージをプルできる限り、任意の種類のプロジェクトを作成できます)。リポジトリ コンシューマーに発行するときにパッケージの動作を確認するために、アプリに関する情報を提供する必要があります。 ここでは、これがデモ コードであるというフラグをコンシューマーに設定するために、いくつかの基本的な情報を提供します。\n\n<a href=\"https://acom.azurecomcdn.net/80C57D/blogmedia/blogmedia/2014/09/15/04.png\"><img class=\"alignnone size-medium wp-image-193201\" alt=\"package-details\" src=\"https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/04-591x369.png\" width=\"591\" height=\"369\" /></a>\n\nMaven パッケージをサポートする Eclipse プロジェクトを設定したので、Azure パッケージを見つけてインストールする必要があります。\n<h2>Maven を使用した管理ライブラリのインストール</h2>\nプロジェクトが現在インストールpom.xml一覧を表示するには、ファイルをクリックします。 これは新しいプロジェクトです。 Maven パッケージをプロジェクトに追加する必要があります。そのため、ここで [追加] ボタンをクリックします。\n\n<a href=\"https://acom.azurecomcdn.net/80C57D/blogmedia/blogmedia/2014/09/clip_image005.png\"><img style=\"padding-top: 0px;padding-left: 0px;padding-right: 0px;border-width: 0px\" title=\"Eclipse の依存関係ウィンドウ\" alt=\"The Eclipse dependencies window\" src=\"https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/clip_image005_thumb.png\" width=\"644\" height=\"404\" border=\"0\" /></a>\n\nMaven と Eclipse の経験がある場合、これはお知らせではない可能性があります。 名前が Maven にあると知っていたパッケージを検索すると、何も見つからなかったことを思い出しました。 代わりに、自分のワークスペース内にあるプロジェクトのみを見つけるだけでした。\n\n<a href=\"https://acom.azurecomcdn.net/80C57D/blogmedia/blogmedia/2014/09/clip_image006.png\"><img style=\"padding-top: 0px;padding-left: 0px;padding-right: 0px;border-width: 0px\" title=\"Eclipse で Maven パッケージを検索する\" alt=\"Searching for Maven packages in Eclipse\" src=\"https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/clip_image006_thumb.png\" width=\"644\" height=\"404\" border=\"0\" /></a>\n\nローカル開発ワークステーションの中央 Maven リポジトリのインデックスを再構築すると、オンライン リポジトリでパッケージを検索する機能が修復されます。 これを行うには、Eclipse のインスタンスが見つける方法を知っている Maven リポジトリの一覧を見つける必要があります。 そこで、Eclipse で Maven リポジトリ ビューを開きます。\n\n<a href=\"https://acom.azurecomcdn.net/80C57D/blogmedia/blogmedia/2014/09/clip_image007.png\"><img style=\"padding-top: 0px;padding-left: 0px;padding-right: 0px;border-width: 0px\" title=\"Eclipse での Maven リポジトリ ビューの追加\" alt=\"Adding the Maven Repositories View in Eclipse\" src=\"https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/clip_image007_thumb.png\" width=\"644\" height=\"404\" border=\"0\" /></a>\n\n[Maven リポジトリ] ビューが開いていると、中央の Maven リポジトリが一覧に表示されます。 その項目のコンテキスト メニューで、[インデックスの再構築] 項目をクリックしてローカル インデックスを作成します。 これには時間がかかるでしょう。Maven には多数のパッケージが含まれています。検索してダウンロードする必要があります。数分かかるので、お待ちください。\n\n<a href=\"https://acom.azurecomcdn.net/80C57D/blogmedia/blogmedia/2014/09/clip_image008.png\"><img style=\"padding-top: 0px;padding-left: 0px;padding-right: 0px;border-width: 0px\" title=\"リポジトリのインデックスの再構築\" alt=\"Rebuilding a repository's index\" src=\"https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/clip_image008_thumb.png\" width=\"644\" height=\"404\" border=\"0\" /></a>\n\nインデックスが再構築された後、中央の Maven リポジトリMicrosoft Azureパッケージを確認できます。\n\n<a href=\"https://acom.azurecomcdn.net/80C57D/blogmedia/blogmedia/2014/09/clip_image009.png\"><img style=\"padding-top: 0px;padding-left: 0px;padding-right: 0px;border-width: 0px\" title=\"Eclipse に表示されるパッケージの一覧を含むリポジトリ\" alt=\"A repository with a list of packages visible in Eclipse\" src=\"https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/clip_image009_thumb.png\" width=\"644\" height=\"404\" border=\"0\" /></a>\n\nここで、Azure Maven パッケージを検索すると、結果も成功します。 後のパッケージが表示されるので、ここで基本管理パッケージを選択します。\n\n<a href=\"https://acom.azurecomcdn.net/80C57D/blogmedia/blogmedia/2014/09/clip_image010.png\"><img style=\"padding-top: 0px;padding-left: 0px;padding-right: 0px;border-width: 0px\" title=\"Azure SDK 管理基本クライアント ライブラリの選択\" alt=\"Selecting the Azure SDK management base client library\" src=\"https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/clip_image010_thumb.png\" width=\"644\" height=\"404\" border=\"0\" /></a>\n\nこれで、基本の Azure 管理パッケージが依存関係として選択されます。\n\n<a href=\"https://acom.azurecomcdn.net/80C57D/blogmedia/blogmedia/2014/09/clip_image011.png\"><img style=\"padding-top: 0px;padding-left: 0px;padding-right: 0px;border-width: 0px\" title=\"Azure Management Maven パッケージが正しく設定されている\" alt=\"The Azure management Maven package properly set up\" src=\"https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/clip_image011_thumb.png\" width=\"644\" height=\"404\" border=\"0\" /></a>\n\n新しい Java クラス ファイルをプロジェクトに追加します。 最初に記述するコードでは、Azure API を呼び出して、コードをデプロイしてそれらのリージョンの名前をコンソールに書き込む可能性のあるリージョンの一覧を取得します。 多くはありません。しかし、コードが Azure API に正しく接続され、準備ができていることを証明できます。\n<h2>Azure API にアクセスする Java コードの記述</h2>\nAzure SDK を参照しました。コードを記述する準備ができました。 まず、新しい Java クラス ファイルをプロジェクトに追加します。\n\n<a href=\"https://acom.azurecomcdn.net/80C57D/blogmedia/blogmedia/2014/09/clip_image012.png\"><img style=\"padding-top: 0px;padding-left: 0px;padding-right: 0px;border-width: 0px\" title=\"Eclipse プロジェクトへの Java クラスの追加\" alt=\"Adding a Java class to an Eclipse project\" src=\"https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/clip_image012_thumb.png\" width=\"644\" height=\"404\" border=\"0\" /></a>\n\n新しいクラス ダイアログが開いたら、静的な void main チェック ボックスをオンにします。これにより、書いているアプリケーションへのエントリ ポイントを提供するメイン メソッドが Java クラスに追加されます (ここでも、単純ですが、Azure API を正しく認証して接続しているという確信を得るだけです)。\n\n<a href=\"https://acom.azurecomcdn.net/80C57D/blogmedia/blogmedia/2014/09/clip_image013.png\"><img style=\"padding-top: 0px;padding-left: 0px;padding-right: 0px;border-width: 0px\" title=\"Java クラス構造の指定\" alt=\"Specifying the Java class structure\" src=\"https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/clip_image013_thumb.png\" width=\"644\" height=\"404\" border=\"0\" /></a>\n\n次のインポートを ファイルに追加して、必要な機能に適した名前空間を確実に取得します。 ここで取り込む名前空間を使用すると、Azure API エンドポイントを使用するために管理ライブラリ内のクラスにアクセスできます。\n<pre class=\"prettyprint\">import java.io.IOException;\nimport java.net.URI;\nimport java.net.URISyntaxException;\nimport java.util.ArrayList;\nimport javax.print.event.PrintJobAttributeEvent;\nimport javax.xml.parsers.ParserConfigurationException;\nimport org.xml.sax.SAXException;\nimport com.microsoft.windowsazure.core.utils.KeyStoreType;\nimport com.microsoft.windowsazure.exception.ServiceException;\nimport com.microsoft.windowsazure.management.*;\nimport com.microsoft.windowsazure.Configuration;\nimport com.microsoft.windowsazure.management.configuration.ManagementConfiguration;\nimport com.microsoft.windowsazure.management.models.LocationsListResponse;\nimport com.microsoft.windowsazure.management.models.LocationsListResponse.Location;</pre>\nこれで、適切な名前空間をすべて含め、API を使用して管理ライブラリを認証するために使用できる管理証明書をサブスクリプションに設定します。\n<h2>証明書を使用した Azure API への認証</h2>\nJava SDK を使用すると、API を呼び出すのが非常に簡単です。 サブスクリプションに対して機能するために API を提供するために必要な情報がいくつかあります。 API を提供するために必要な属性の 1 つは、管理証明書です。 ポータルのスクリーン ショットに示すように、CER ファイルが Azure サブスクリプションに既にアップロードされています。\n\n<a href=\"https://acom.azurecomcdn.net/80C57D/blogmedia/blogmedia/2014/09/16.png\"><img style=\"padding-top: 0px;padding-left: 0px;padding-right: 0px;border: 0px\" title=\"16\" alt=\"16\" src=\"https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/16_thumb.png\" width=\"644\" height=\"368\" border=\"0\" /></a>\n\nまた、ローカル開発ワークステーションでクライアント証明書を表す PFX ファイルも取得しました。 その PFX を JKS ファイルに変換する必要があります。これは、Java が証明書を介して認証するために使用するファイルです。 この変換を実行するには、JDK がインストールされているマシンで次のコマンドを実行します。\n<pre class=\"prettyprint\">c:\\java\\bin\\keytool.exe -importkeystore -srckeystore c:\\certificates\\AzureJavaDemo.pfx -destkeystore c:\\certificates\\AzureJavaDemo.jks -srcstoretype pkcs12 -deststoretype JKS</pre>\nデスクトップに JKS ファイルを取得したら、管理ライブラリを使用して Azure API にアクセスするコード内のそのファイルのパスを使用できます。 この定型コードを次に示します。 コメントに注意してください。これは、先に作成した JKS ファイルに固有の領域を強調表示します。 他の変数を一度に設定します。\n<pre class=\"prettyprint\">public class Program {\n  static String uri = \"https://management.core.windows.net/\";\n  static String subscriptionId = \"\";\n  static String keyStoreLocation = \"c:\\\\certificates\\\\AzureJavaDemo.jks\";\n  static String keyStorePassword = \"my-cert-password\";\n\n  public static void main(String[] args) \n    throws IOException, URISyntaxException, ServiceException, ParserConfigurationException, SAXException {\n    Configuration config = ManagementConfiguration.configure(\n      new URI(uri), \n        subscriptionId,\n        keyStoreLocation, // the file path to the JKS\n        keyStorePassword, // the password for the JKS\n        KeyStoreType.jks // flags that I'm using a JKS keystore\n    );\n  }\n}</pre>\n現在、Java SDK は管理証明書を介して Azure API に認証を提供していますが、今後のリリースの Java SDK で Active Directory 認証を有効にするように Azure Active Directory チームと作業しています。 Java SDK の 0.6.0 リリースでは、認証方法は管理証明書です。\n<h2>Azure API を呼び出してリージョンの一覧を取得する</h2>\n次に、自分のコードで subscriptionId フィールドの値を設定するコードを追加し、地理的リージョンの一覧を取得するために実際に Azure への API 呼び出しを行う追加の Java コードを作成します。 その一覧が表示された後は、単にリージョンの名前をコンソールに出力します。 これにより、Azure Management API に対して正常に認証され、いくつかの作業が行われたことを示します。\n<pre class=\"prettyprint\">public class Program {\n  static String uri = \"https://management.core.windows.net/\";\n  static String subscriptionId = \"XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX\";\n  static String keyStoreLocation = \"c:\\\\certificates\\\\AzureJavaDemo.jks\";\n  static String keyStorePassword = \"my-cert-password\";\n\n  public static void main(String[] args) throws IOException, URISyntaxException, ServiceException, ParserConfigurationException, SAXException {\n    Configuration config = ManagementConfiguration.configure(\n      new URI(uri), \n      subscriptionId,\n      keyStoreLocation, // the file path to the JKS\n      keyStorePassword, // the password for the JKS\n      KeyStoreType.jks // flags that I'm using a JKS keystore\n    );\n\n    // create a management client to call the API\n    ManagementClient client = ManagementService.create(config);\n\n    // get the list of regions\n    LocationsListResponse response = client.getLocationsOperations().list();\n    ArrayList locations = response.getLocations();\n\n    // write them out\n    for( int i=0; i&lt;locations.size(); i++){\n      System.out.println(locations.get(i).getDisplayName());\n    }\n  }\n}</pre>\nEclipse でコードをデバッグすると、期待される出力が表示され、すべてが動作する順序で、必要に応じて機能することが確認されます。 これは、サブスクリプションから管理証明書を JKS 形式に正常に変換し、アプリケーションのランタイムに読み込み、管理ライブラリを使用して API に呼び出せたことを証明します。\n\n<a href=\"https://acom.azurecomcdn.net/80C57D/blogmedia/blogmedia/2014/09/clip_image015.png\"><img style=\"padding-top: 0px;padding-left: 0px;padding-right: 0px;border-width: 0px\" title=\"clip_image015\" alt=\"clip_image015\" src=\"https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/clip_image015_thumb.png\" width=\"644\" height=\"413\" border=\"0\" /></a>\n<h2>概要と次のステップ</h2>\nこの投稿では、Maven 経由で Java SDK を取得し、それを使用して Azure の API まで認証し、簡単な作業を行う簡単さを示します。 SDK は、単なるリージョンの一覧表示以外にも多くのことを実行できます。その後、Eclipse Java Toolkit を使用してコードをデプロイできるクラウド サービス、開発者ワークステーションまたは自己管理サーバーとして使用する仮想マシン、Java コードを実行できる Web サイト、ストレージ アカウントなど、すべての機能を格納できます。 Azure ブログの Java SDK で使用できるオプションの一部については、数週間後に調査します。0.6.0 をお楽しみにしてください。 SDK リリースには、Azure サービスの自動化とプロビジョニングに役立つ新機能が非常に多く含まれています。\n\nStorage SDK for Java および Azure ホーム ページで利用できる一連の他の SDK と共に、Azure での Java 開発の機会が進化し続けているのを簡単に確認できます。 これらの新しいツールと SDK をお試しいただきありがとうございます。フィードバックがある場合は、お知らせください。\n\nコーディングをお楽しみください!"
