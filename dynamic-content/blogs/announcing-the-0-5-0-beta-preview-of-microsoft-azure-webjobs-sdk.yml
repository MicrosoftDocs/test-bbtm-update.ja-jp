### YamlMime:Yaml
ms.openlocfilehash: 6b314ee1e35d9b958f794c3056041bf3f5db0dc5
ms.sourcegitcommit: d03bdc7fe5447adb6530886aab848b75fe8fa8ee
ms.translationtype: MT
ms.contentlocale: ja-JP
ms.lasthandoff: 03/11/2022
ms.locfileid: "139890895"
Slug: announcing-the-0-5-0-beta-preview-of-microsoft-azure-webjobs-sdk
Title: Microsoft Azure web ジョブ SDK の 0.5.0-ベータプレビューの発表
Summary: Microsoft Azure web ジョブ SDK の別のプレビューをリリースしています。これは、Scott selman によって導入されました。 前のプレビューの詳細については、こちらのお知らせ投稿を参照してください。
Content: "Microsoft Azure web ジョブ SDK の別のプレビューをリリースしています。これは、 <a href=\"https://www.hanselman.com/blog/IntroducingWindowsAzureWebJobs.aspx\">Scott selman によって導入</a>されました。 前のプレビューの詳細については、こちらの <a href=\"https://azure.microsoft.com/blog/2014/08/21/announcing-the-0-4-0-beta-preview-of-microsoft-azure-webjobs-sdk/\">お知らせ投稿</a>を参照してください。\n\nこのリリースには、0.4.0 と同じ一般的な機能セットと、いくつかの新しい魅力的な機能があります。\n<h2><strong>このリリースのダウンロード</strong></h2>\nweb ジョブ SDK は NuGet ギャラリーからダウンロードできます。 これらのパッケージは、次のように NuGet パッケージマネージャーコンソールを使用して NuGet ギャラリーからインストールまたは更新できます。\n<pre>Install-Package Microsoft.Azure.WebJobs –Pre</pre>\nMicrosoft Azure Service Bus トリガーを使用する場合は、次のパッケージをインストールします。\n<pre>Install-Package Microsoft.Azure.WebJobs.ServiceBus -Pre</pre>\n<h4></h4>\n<h2><strong>Web ジョブ SDK とは</strong></h2>\nMicrosoft Azure web サイトの<a href=\"https://azure.microsoft.com/en-us/documentation/articles/web-sites-create-web-jobs/\">web ジョブ</a>機能により、web サイトでサービスやバックグラウンドタスクなどのプログラムを簡単に実行できるようになります。 <i>.exe</i>、 <i>.cmd</i>、 <i>.bat</i>ファイルなどの実行可能ファイルを web サイトにアップロードして実行しながら、トリガーまたは連続 web ジョブとして実行できます。 Web ジョブ SDK を使用しない場合、バックグラウンドタスクを接続して実行するには、複雑なプログラミングが必要です。 SDK には、最小限のコードを記述して一般的なタスクを実行できるフレームワークが用意されています。\n\nweb ジョブ SDK には、Microsoft Azure Storage の blob、キュー、テーブル、Service Bus で動作するバインドとトリガーシステムがあります。 バインディングシステムを使用すると、Microsoft Azure Storage オブジェクトの読み取りまたは書き込みを行うコードを簡単に記述できます。 トリガーシステムは、キューまたは blob で新しいデータを受信するたびに、コード内の関数を呼び出します。\n<h2><strong>このプレビューの更新プログラム</strong></h2>\n<h3><strong>パブリッククラスで定義されているパブリック関数だけにインデックスが作成されます。</strong></h3>\nこのリリース以降、SDK はパブリッククラスで定義されているパブリック関数のみを検索します。 パブリックでない関数がある場合、またはパブリックでないクラスで定義されている場合、関数にはインデックスが作成されず、SDK はこれらの関数を呼び出すことができません。\n\n有効な関数定義を次に示します。\n<pre class=\"prettyprint\">public class Functions\n{\n    public static void ProcessQueue([QueueTrigger(\"input\")] string input)\n    {\n    }\n}</pre>\n次のは、含んでいるクラスがパブリックでないため、機能しません。\n<pre class=\"prettyprint\">class Functions\n{\n    public static void ProcessQueue([QueueTrigger(\"input\")] string input)\n    {\n    }\n}</pre>\n<h3><strong>キューを使用した並列実行</strong></h3>\n非同期関数のサポートは、SDK の0.4.0 ベータリリースで追加されました。 このリリースの一部として、さまざまなキューでリッスンする関数が並列でトリガーされる可能性がある並列処理が SDK によって追加されました。\n\nこのリリースでは、QueueTrigger 内でキューのメッセージを並列でフェッチするためのサポートを追加しました。 つまり、次に示すように、関数がキューでリッスンしている場合、このキューに対しては、16 (既定) のキューメッセージのバッチが同時に返されます。 関数も並列で実行されます。\n<pre class=\"prettyprint\">public class Program\n{\n    static void Main()\n    {        \n        JobHost host = new JobHost();\n        host.RunAndBlock();\n    }\n    public static void ProcessQueue([QueueTrigger(\"input\")] string input)\n    {\n    }\n}</pre>\n&nbsp;\n\n次のコードは、0.4.0 に含まれていたのと同じ機能を追加します。 次のように、JobHostConfiguration クラスを使用してバッチサイズを構成できます。\n\n&nbsp;\n<pre class=\"prettyprint\">public class Program\n{\n    static void Main()\n    {\n        JobHostConfiguration config = new JobHostConfiguration();\n        config.Queues.BatchSize= 1;\n        JobHost host = new JobHost(config);\n        host.RunAndBlock();\n    }\n}</pre>\n&nbsp;\n<h3><strong>BlobTriggers は1回だけ処理されます</strong></h3>\n以前のリリースでは、BlobTriggers は、新しい Blob 出力が存在するまで常に再処理されていました。 これは、場合によっては、blob が再処理されることを意味します。\n\nこのリリースの SDK では、新しい blob が検出された場合、または既存の blob が更新された場合にのみ、BlobTrigger が処理されるようになります。\n\n次のコードは、blob が作成または更新されたときに関数をトリガーする方法を示しています。\n<pre class=\"prettyprint\">public class Program\n{\n    static void Main()\n    {  \n        JobHost host = new JobHost();\n        host.RunAndBlock();\n    }\n\n    public static void ProcessBlob([BlobTrigger(\"test/{name}\")] string input)\n    {\n    }\n}</pre>\nこれらの変更により、BlobTrigger が処理されたときに、が blob をキューベースのワークフローに対して開始することもできます。 次のコードは、BlobTrigger が処理されたときにキューメッセージを書き込む方法を示しています。\n<pre class=\"prettyprint\">public class Program\n{\n    static void Main()\n    {\n        JobHost host = new JobHost();\n        host.RunAndBlock();\n    }\n\n    public static void BlobToQueue(\n        [BlobTrigger(\"test/{name}\")] string input,string name,\n        [Queue(\"newblob\")] out string message)\n    {\n        message = name;\n    }\n}</pre>\nSdk は、\"web ジョブ\" という名前のコンテナーを Azure ストレージアカウント (AzureWebJobsStorage で指定) に追加します<em>。 </em>\n\n処理された各 blob の blob 受信確認。このコンテナーを使用して、各 blob の処理状態を保持します。\n\nBlob 受信には、処理された特定の Blob に関する次の情報が含まれています。\n<ul>\n <li>この Blob (FunctionId) に対してトリガーされた関数</li>\n <li>container name</li>\n <li>blob の種類</li>\n <li>blob 名</li>\n <li>ETag – blob のバージョン。</li>\n</ul>\nBlob の再処理を強制的に実行する場合は、\"web ジョブ\" コンテナーから特定の blob の blob 受信を削除するだけです。\n\n次の図は、\"web ジョブ\" コンテナーを示しています。これは、処理された blob の blob 受信を示しています。\n\n<a href=\"https://acom.azurecomcdn.net/80C57D/blogmedia/blogmedia/2014/09/blobreceipt.png\"><img style=\"border-width: 0px;\" title=\"blobreceipt\" alt=\"blobreceipt\" src=\"https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/blobreceipt_thumb.png\" width=\"1020\" height=\"304\" border=\"0\" /></a>\n\n&nbsp;\n<h4><strong>Blob の再試行とエラー処理</strong></h4>\nこの SDK のリリースでは、blob の処理中にエラーが発生した場合に、関数の再試行がサポートされるようになりました。 BlobTrigger は、指定された最大再試行回数 (既定では5回) まで処理されます。\n\nしきい値に達すると、関数が5回実行されると、SDK は \"web ジョブ\" という名前のメッセージをキューに配置します。 このキューで QueueTrigger を使用して関数をトリガーし、メッセージのカスタムエラー処理を実行できます。 キューメッセージには、JSON でシリアル化された文字列として次の情報が含まれています。\n<ul>\n <li>FunctionId: blob が処理された関数の Id。</li>\n <li>BlobType – PageBlob または BlockBlob などの Blob の種類</li>\n <li>Blob の ContainerName</li>\n <li>BlobName</li>\n <li>ETag –障害の原因となった blob のバージョン。</li>\n</ul>\n次の関数は、blob のエラー処理を処理する方法を示しています。\n<pre class=\"prettyprint\">public class Program\n{\n    static void Main()\n    {  \n        JobHost host = new JobHost();\n        host.RunAndBlock();\n    }\n\n    public static void ProcessBlob([BlobTrigger(\"test/{name}\")] string input)\n    {\n        throw new Exception();\n    }\n    public static void BlobErrorHandler(\n        [QueueTrigger(\"webjobs-blobtrigger-poison\")] BlobTriggerErrorMessage message)\n    {\n\n    }\n    public class BlobTriggerErrorMessage\n    {\n        public string FunctionId { get; set; }\n        public string BlobType { get; set; }\n        public string ContainerName { get; set; }\n        public string BlobName { get; set; }\n        public string ETag { get; set; }\n    }\n}</pre>\nまた、このサンプルでは、メッセージが JSON でシリアル化された文字列であり、SDK を使用して JSON でシリアル化されたオブジェクトを POCO (Plain Old CLR Object) にバインドできるため、BlobTriggerPosionMessage というクラスにキューメッセージを厳密に型指定する方法も示しています。\n\n次のコードは、blob を処理するための再試行回数を構成する方法を示しています。 これは、キューの有害メッセージを処理するために使用される構成オブジェクトと同じです。 つまり、この設定は、blob またはキューを処理している関数の再試行回数を制御します。\n<pre class=\"prettyprint\">public class Program\n{\n    static void Main()\n    {  \n        JobHostConfiguration config = new JobHostConfiguration();\n        config.Queues.MaxDequeueCount = 2;\n        JobHost host = new JobHost(config);\n        host.RunAndBlock();\n    }\n}</pre>\n<h2><strong>サンプル</strong></h2>\nWeb ジョブ SDK のサンプルは、 <a href=\"https://github.com/Azure/azure-webjobs-sdk-samples\">https://github.com/Azure/azure-webjobs-sdk-samples</a>\n<ul>\n<ul>\n <li>Blob、テーブル、キュー、および Service Bus のトリガーとバインドの使用方法については、サンプルを参照してください。</li>\n <li>PhluffyShuffy という名前のサンプルがあります。これは、顧客が画像をアップロードして、その画像を blob storage から処理するように関数をトリガーする画像をアップロードできる Web サイトです。</li>\n</ul>\n</ul>\n<h2><strong>ドキュメント</strong></h2>\n<ul>\n<ul>\n <li><a href=\"https://www.asp.net/aspnet/overview/developing-apps-with-windows-azure/getting-started-with-windows-azure-webjobs\">チュートリアル: Windows Azure WebJobs SDK を使用したはじめに</a></li>\n <li><a href=\"https://channel9.msdn.com/Shows/Web+Camps+TV/Making-Your-Jobs-Easier-With-Windows-Azure-WebJobs-SDK\">Windows Azure WebJobs SDK を使用して仕事を簡単にする Channel 9 ビデオ</a></li>\n <li><a href=\"https://www.hanselman.com/blog/IntroducingWindowsAzureWebJobs.aspx\">Scott マン Selman による Web ジョブと SDK の概要</a></li>\n <li>web ジョブを使用して構築された web サイトモニターと<a href=\"https://twitter.com/bradygaster\">Brady</a>の ASP.NET</li>\n <li><a href=\"https://www.asp.net/aspnet/overview/developing-apps-with-windows-azure/azure-webjobs-recommended-resources\">Azure WebJobs-推奨されるリソース</a></li>\n <li><a href=\"https://channel9.msdn.com/Tags/azurefridaywebjobs\">Azure 金曜の Web ジョブビデオシリーズ</a></li>\n</ul>\n</ul>\n<h2></h2>\n<h2><strong>SDK を使用して Web ジョブを Azure Websites にデプロイする</strong></h2>\nazure SDK 2.4 での Visual Studio 2013 Update 3 には、web ジョブを azure Websites に発行するためのツールサポート Visual Studio 追加されました。 詳細については、「 <a href=\"https://azure.microsoft.com/en-us/documentation/articles/websites-dotnet-deploy-webjobs/\">Azure Websites に Azure WebJobs をデプロイする方法</a>」を参照してください <a name=\"how-to-deploy-azure-webjobs-to-azure-websites\"></a> 。\n<h2></h2>\n<h2><strong>0.4.0 から0.5.0 への移行に関する既知の問題</strong></h2>\n<h3><strong>パブリッククラスで定義されているパブリック関数だけにインデックスが作成されます。</strong></h3>\nこのリリース以降、SDK はパブリッククラスで定義されているパブリック関数のみを検索します。 プライベート関数がある場合、またはプライベートクラスで定義されている場合、関数にはインデックスが作成されず、SDK はこれらの関数を呼び出すことができません。\n<h2><strong>フィードバックを提供してヘルプを得る</strong></h2>\nMicrosoft Azure Web サイトと Microsoft Azure web ジョブ SDK の<a href=\"https://azure.microsoft.com/en-us/documentation/articles/web-sites-create-web-jobs/\">web ジョブ</a>機能はプレビュー段階です。 このエクスペリエンスを改善するためのフィードバックは常に歓迎されます。\n\nチュートリアルに直接関係のない質問がある場合は、 <a href=\"https://azure.microsoft.com/en-us/support/forums/\">Azure フォーラム</a>、 <a href=\"https://forums.asp.net/1247.aspx\">ASP.NET フォーラム</a>、または<a href=\"https://stackoverflow.com/\">StackOverflow.com</a>に投稿できます。 <a href=\"https://twitter.com/search?q=AzureWebJobs\">#AzureWebJobs</a> SDK for Twitter と、stackoverflow のタグ Azure-WebJobsSDK を使用します。"
