### YamlMime:Yaml
ms.openlocfilehash: 5345c17351ae9ca90db395361cbabe208c6a8eea
ms.sourcegitcommit: d03bdc7fe5447adb6530886aab848b75fe8fa8ee
ms.translationtype: MT
ms.contentlocale: ja-JP
ms.lasthandoff: 03/11/2022
ms.locfileid: "139903674"
Slug: azure-storage-performance-checklist
Title: Azure Storageパフォーマンスチェックリスト
Summary: 'パフォーマンス ガイダンスを 1 つの使いやすいドキュメントに統合する Azure Storage パフォーマンス チェックリストを、見つけやすい 1 つの場所にリリースしました。 '
Content: "Azure Storage を使用してパフォーマンスを向上させる方法は、TechEd と Build での話し合い中、フォーラムのスレッド、ブログ、および対人的な話を何度も行ったトピックです。 アプリケーションのパフォーマンスを可能な限り高め、非常に情熱を注ぐのは、常に楽しい作業です。\n\nこの目標をさらに支援するために、Azure Storage パフォーマンス チェックリストをリリースしました。この<a href=\"https://azure.microsoft.com/en-us/documentation/articles/storage-performance-checklist/\"></a>チェックリストでは、パフォーマンス ガイダンスを使いやすい 1 つのドキュメントに統合し、1 つの場所を見つけやすくしました。 これは、開発者が約 30 分以内に読み取る必要がある短いドキュメント (約 15 ページ) であり、チェックリストとして構成された 40 を超える実証済みプラクティスの詳細が含まれています。これは、アプリケーションのパフォーマンスを向上させるのに役立ちます。 チェックリストの小さな選択を次に示します。\n<table border=\"1\" cellspacing=\"0\" cellpadding=\"0\">\n<tbody>\n<tr>\n<td valign=\"top\" width=\"47\">\n<p style=\"text-align: center;\"><b>完了</b></p>\n</td>\n<td valign=\"top\" width=\"60\">\n<p style=\"text-align: center;\"><b>領域</b></p>\n</td>\n<td valign=\"top\" width=\"134\">\n<p style=\"text-align: center;\"><b>カテゴリ</b></p>\n</td>\n<td valign=\"top\" width=\"382\">\n<p style=\"text-align: center;\"><b>質問</b></p>\n</td>\n</tr>\n<tr>\n<td valign=\"top\" width=\"47\"></td>\n<td valign=\"top\" width=\"60\">\n<p style=\"text-align: center;\">BLOB</p>\n</td>\n<td valign=\"top\" width=\"134\">\n<p style=\"text-align: center;\">メタデータの使用</p>\n</td>\n<td valign=\"top\" width=\"382\"><a href=\"https://azure.microsoft.com/en-us/documentation/articles/storage-performance-checklist/#subheading20\">頻繁に使用されるメタデータを BLOB メタデータに格納して、各 BLOB をダウンロードして各 BLOB を抽出する必要を回避していますか?</a></td>\n</tr>\n<tr>\n<td valign=\"top\" width=\"47\"></td>\n<td valign=\"top\" width=\"60\">\n<p style=\"text-align: center;\">BLOB</p>\n</td>\n<td valign=\"top\" width=\"134\">\n<p style=\"text-align: center;\">迅速なアップロード</p>\n</td>\n<td valign=\"top\" width=\"382\"><a href=\"https://azure.microsoft.com/en-us/documentation/articles/storage-performance-checklist/#subheading21\">1 つの BLOB を高速でアップロードするには、ブロックを並列でアップロードしていますか?</a></td>\n</tr>\n<tr>\n<td valign=\"top\" width=\"47\"></td>\n<td valign=\"top\" width=\"60\">\n<p style=\"text-align: center;\">テーブル</p>\n</td>\n<td valign=\"top\" width=\"134\">\n<p style=\"text-align: center;\">構成</p>\n</td>\n<td valign=\"top\" width=\"382\"><a href=\"https://azure.microsoft.com/en-us/documentation/articles/storage-performance-checklist/#subheading25\">テーブル要求に JSON を使用していますか?</a></td>\n</tr>\n<tr>\n<td valign=\"top\" width=\"47\"></td>\n<td valign=\"top\" width=\"60\">\n<p style=\"text-align: center;\">テーブル</p>\n</td>\n<td valign=\"top\" width=\"134\">\n<p style=\"text-align: center;\">返されるデータの限定</p>\n</td>\n<td valign=\"top\" width=\"382\"><a href=\"https://azure.microsoft.com/en-us/documentation/articles/storage-performance-checklist/#subheading33\">不要なプロパティを取得しないようにプロジェクションを使用していますか?</a></td>\n</tr>\n<tr>\n<td valign=\"top\" width=\"47\"></td>\n<td valign=\"top\" width=\"60\">\n<p style=\"text-align: center;\">キュー</p>\n</td>\n<td valign=\"top\" width=\"134\">\n<p style=\"text-align: center;\">更新メッセージ</p>\n</td>\n<td valign=\"top\" width=\"382\"><a href=\"https://azure.microsoft.com/en-us/documentation/articles/storage-performance-checklist/#subheading43\"><b>UpdateMessage を使用して</b>メッセージの処理の進行状況を格納し、処理コンポーネントでエラーが発生した場合に最初から再処理する必要がないか。</a></td>\n</tr>\n<tr>\n<td valign=\"top\" width=\"47\"></td>\n<td valign=\"top\" width=\"60\">\n<p style=\"text-align: center;\">キュー</p>\n</td>\n<td valign=\"top\" width=\"134\">\n<p style=\"text-align: center;\">アーキテクチャ</p>\n</td>\n<td valign=\"top\" width=\"382\"><a href=\"https://azure.microsoft.com/en-us/documentation/articles/storage-performance-checklist/#subheading44\">実行時間の長いワークロードをクリティカル パスから外し、個別にスケーリングすることで、キューを使用してアプリケーション全体の拡張性を高めしていますか?</a></td>\n</tr>\n</tbody>\n</table>\n開発者は、このチェックリストを使用して、新しいアプリケーションを設計したり、既存の設計を検証したりするのに役立ちます。また、すべての推奨事項がすべてのアプリケーションに関連しているとは言え、各推奨事項は、ほとんどのアプリケーションが次の利点を得る広範に適用される方法です。\n\nより実証済みのプラクティスを特定し、新しい機能を導入するときに追加するときに、このチェックリストを最新Azure Storageします。 現在のチェックリストに表示されていない実証済みのプラクティスに関する推奨事項がある場合は、お知らせください。\n<h4>シナリオ例</h4>\nチェックリストの推奨事項の多くは、コードで簡単に実装できます。 次の 3 つの例を示します。これらの例は、適切なコンテキストでアプリケーションを適用すると、アプリケーションのパフォーマンスに大きな影響を与える可能性があります。\n\n<b>シナリオ 1: キュー: 構成</b>\n\n<a href=\"https://azure.microsoft.com/en-us/documentation/articles/storage-performance-checklist/#subheading40\">小さな要求のパフォーマンスを上げるために、Nagle をオフにしていますか?</a>\n\nNagle アルゴリズムは既定で有効になっています。 キュー エンドポイントに対して無効にするには、次のコードを使用できます。 このコードは、キュー エンドポイントを呼び出す前に実行する必要があります。\n<pre class=\"prettyprint\">var storageAccount = CloudStorageAccount.Parse(connStr);\nServicePoint queueServicePoint = \n  ServicePointManager.FindServicePoint(storageAccount.QueueEndpoint);\nqueueServicePoint.UseNagleAlgorithm = false; \nCloudQueueClient queueClient = storageAccount.CreateCloudQueueClient();</pre>\n<b>シナリオ 2: BLOB: BLOB のコピー</b>効率的な方法で \n\n<a href=\"https://azure.microsoft.com/en-us/documentation/articles/storage-performance-checklist/#subheading17\">BLOB をコピーしていますか?</a>\n\nあるストレージ アカウント内のコンテナーから別のストレージ アカウント内のコンテナーに BLOB データをコピーするには、まず、次に示すようにデータをダウンロードしてアップロードします。\n<pre class=\"prettyprint\">CloudBlockBlob srcBlob = srcBlobContainer.GetBlockBlobReference(\"srcblob\");\nsrcBlob.DownloadToFile(@\"C:\\Temp\\copyblob.dat\",System.IO.FileMode.Create);\n\nCloudBlockBlob destBlob = destBlobContainer.GetBlockBlobReference(\"destblob\");\ndestBlob.UploadFromFile(@\"C:\\Temp\\copyblob.dat\", System.IO.FileMode.Open);</pre>\nただし、次に示すように、 <b>StartCopyFromBlob</b> などのコピー BLOB メソッドのいずれかを使用する方が、はるかに効率的な方法です。\n<pre class=\"prettyprint\">CloudBlockBlob srcBlob = srcBlobContainer.GetBlockBlobReference(\"srcblob\");\nCloudBlockBlob destBlob = destBlobContainer.GetBlockBlobReference(\"destblob\");\ndestBlob.StartCopyFromBlob(GenerateSASUri(srcBlob));</pre>\n<blockquote>この例では、ソース コンテナー内Shared Access Signature BLOB にアクセスするために、ソース BLOB (SAS) を使用します。</blockquote>\n<b>シナリオ 3: BLOB: Fast</b> のアップロード1 つの BLOB をすばやくアップロードしようとしている場合、ブロックを並列\n\n<a href=\"https://azure.microsoft.com/en-us/documentation/articles/storage-performance-checklist/#subheading21\">でアップロードしていますか?</a>\n\n.NET Storage クライアント ライブラリを使用している場合は、並列ブロックのアップロードを管理できます。 次のコード サンプルは、 <b>BlobRequestOptions</b> クラスを使用して、並列ブロックアップロードに使用するスレッドの数を指定する方法を示しています (この例では 4 つ)。\n<pre class=\"prettyprint\">CloudBlockBlob blob = srcBlobContainer.GetBlockBlobReference(\"uploadinparallelblob\");\nbyte[] buffer = ...\n\nvar requestOptions = new BlobRequestOptions()\n{\n  ParallelOperationThreadCount = 4\n};\nblob.UploadFromByteArray(buffer, 0, buffer.Length, null, requestOptions);</pre>\n<blockquote>Storage クライアント ライブラリでは、複数のブロック アップロードではなく、1 つの BLOB アップロードとして小さな BLOB をアップロードできます。<b>BlobRequestOptions</b> クラスの <b>SingleBlobUploadThresholdInBytes</b> プロパティは、Storage クライアント ライブラリがブロックアップロードを使用するサイズしきい値を超えるサイズしきい値を設定します。<b></b></blockquote>\n<h4>行動の概要と呼び出し</h4>\nさまざまなソースから集<a href=\"https://azure.microsoft.com/en-us/documentation/articles/storage-performance-checklist/\">Azure Storage</a> 40 を超える実証済みプラクティスを含むパフォーマンスチェックリストを開発しました。 このチェックリストは、サービスを使用するアプリケーションのパフォーマンスに大きな違いを生み出Azure Storageします。\n\n現時点では、チェックリストを見て印刷し、<a href=\"https://azure.microsoft.com/en-us/documentation/articles/storage-performance-checklist/\"></a>アプリケーションのパフォーマンスを向上させるために何が可能かを確認する必要があります。 より実証済みのプラクティスがチェックリストに組み込まれていますので、定期的に更新プログラムを確認する必要があります。\n\nJeff Irwin Azure Storage Program Manager"
