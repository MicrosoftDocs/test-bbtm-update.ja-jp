### YamlMime:Yaml
ms.openlocfilehash: 1ce51aa5708f0f75db01dffa28108108b3ccd6f2
ms.sourcegitcommit: d03bdc7fe5447adb6530886aab848b75fe8fa8ee
ms.translationtype: MT
ms.contentlocale: ja-JP
ms.lasthandoff: 03/11/2022
ms.locfileid: "139893661"
Slug: an-introduction-to-eai-bridges
Title: EAI ブリッジの概要
Summary: Service Bus の 2011 年 12 月のラボの一環として、ブリッジ (一般にパイプラインと呼ばれます) を含む EAI (Enterprise アプリケーション統合) 機能の新しいセットを追加,...
Content: '<p><a href="https://azure.microsoft.com/en-us/home/tour/service-bus/?WT.mc_id=cmp_pst001_blg_post0024" target="_blank">Service Bus</a> の 2011 年 12 月のラボの一部として、ブリッジ (一般にパイプラインと呼ばれる)、変換、ハイブリッド接続を含む EAI (Enterprise アプリケーション統合) 機能の新しいセットが追加されます。 一連のブログ記事で機能の完全なセットを紹介しますが、まず、EAI ブリッジと、その背後にある基本的な概念について説明します。 この投稿では、ブリッジの必要性について説明 &amp; し、単純な XML ブリッジのデプロイとそれを介したメッセージの送信を構成する方法について説明します。</p>  <p>ブリッジという用語 &lsquo;は、&rsquo; 2 つのエンド ポイントを接続する何かをすぐに思い出します。 ここでは、情報システムのコンテキストで、2 つ以上の異なるシステムを接続するブリッジについて説明します。 サンプル シナリオを使用して、これをよりよく理解しましょう。 新しい従業員が誘導されるたびに従業員管理システムと人事システムが対話する組織内のシナリオや、銀行口座などの従業員の変更の詳細について考えます。 従業員の mgmt と人事システムは、SQL、Oracle、SAP など、複数のシステムにできます。</p>  <p>これらのシステムは、理解できる形式で (メッセージを交換して) 給与支払いシステムと対話します。 給与計算システムは、別の単位として、3 つ目のインフラストラクチャを使用して実装できます。 これらのシステムは、それぞれのメッセージ形式を引き続き使用できるが、引き続き相互に通信できる方法で接続する必要があります。 給与計算システムは、他の 2 つのシステムからメッセージを受信するたびに、一般的な一連の操作を実行します。 これらの一連の操作は、ブリッジと呼ばれる共通ユニットに統合できます。</p>  <p><img src="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/6036.EAIBridges1.png" alt="" border="0"></p>  <h1>Bridge の理由</h1>  <h2>プロトコル ブリッジ</h2>  <p>アプリケーション 1 がアプリケーション 2 と話し合うシナリオについて考えます。 ただし、アプリケーション 1 は REST/POX プロトコルを使用してのみメッセージを送信しますが、アプリケーション 2 は SOAP プロトコルでのみメッセージを受信できます。 これを実現するには、アプリケーションの 1 つを変更して、コストの高い演習であり、ほとんどの場合は許容できないソリューションを他のアプリケーションが理解する形式で話す必要があります。 このシナリオは、ブリッジをメディアとして使用することで簡単に解決できます。 ブリッジは REST/POX を使用してメッセージを受け取りますが、SOAP を使用して送信されます。 ブリッジは、異なるプロトコル上にある 2 つのアプリケーションを適切に接続するのに役立ちます。&nbsp;</p>  <p><img src="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/3716.EAIBridges2.png" alt="" border="0"></p>  <h2>構造正規化またはデータ コントラクト変換</h2>  <p>次の図では、左側のアプリケーションが特定の構造でメッセージを送信しています。 受信側アプリケーションでは、別の構造で同じデータが必要です。 構造的な変換は、相互に通信できるよう、2 つの間で行う必要があります。 ブリッジは、この構造的正規化/変換の実現に役立ちます。</p>  <p><img src="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/3704.EAIBridges3.png" alt="" border="0"></p>  <p>この状況は、複数の異なるアプリケーションが特定のアプリケーションにメッセージを送信するシナリオにさらに拡張できます。 受信側のアプリケーション/プロセスは、すべての受信メッセージを共通の形式に正規化し、応答メッセージに対してその逆を理解し、その逆を行うブリッジを付加できます。 このプロセスは一般に正規化と呼ばれます。</p>  <h2>メッセージ/コントラクトの検証</h2>  <p>プロセス/アプリケーションが、1 つ以上の形式に準拠するメッセージのみを受信し、それ以外のメッセージを拒否することを許可する単純な状況を考えます。 これを実現するには、複雑でコストの高い検証ロジックを記述する必要がある場合があります。 EAI ブリッジを使用すると、いくつかの非常に基本的な構成手順でこれを実現できます。 ブリッジでは、1 つ以上のスキーマに対してすべての受信メッセージを検証できます。 メッセージが指定されたスキーマの 1 つに準拠している場合にのみ、メッセージがアプリケーションに送信されます。 それ以外の場合は拒否され、アプリケーション/クライアントを送信するメッセージに適切な応答が送信されます。</p>  <h2>コンテンツ ベースのルーティング</h2>  <p>多くの場合、アプリケーションはメッセージメタデータ/コンテキストに基づいて別のアプリケーションにメッセージをルーティングする必要があります。 たとえば、ローン &gt; 処理シナリオで金額が 10,000 ドルの場合は、メッセージを application1 に送信し、それ以外の場合は application2 に送信します。 このコンテンツ ベースのルーティングは、ブリッジを使用して実行できます。 ブリッジは、送信メッセージ メタデータに対する単純なルーティング規則を使用してこれを実現するのに役立ちます。 メッセージは、任意のエンド ポイント/アプリケーション (クラウドまたはオンプレミスなど) に送信できます。</p>  <p><img src="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/3683.EAIBridges4.png" alt="" border="0"></p>  <p>上記の各機能について個別に説明したが、分離して発生することはほとんどない。 上記の 1 つ以上を組み合わせて、1 つ以上の EAI ブリッジを使用して解決できます。 ブリッジは、要件に従ってチェーンまたは並列で使用したり、モジュール性や保守容易性を実現したりするためにも使用できます。</p>  <h1>構成、デプロイ、コード</h1>  <h3>アカウントとサブスクリプションService Busサインアップする</h3>  <p>EAI&rsquo; ブリッジの使用を開始する前に、まず、ポータル内の Service Bus アカウントにサインアップService Busがあります。&nbsp;アカウントに関連付けられる Windows Live ID (WLID) を使用してサインインService Busされます。 完了したら&rsquo;、新しいサブスクリプションを作成Service Busできます。 今後、WLID でログインするたびに、アカウントに関連付けられているすべての Service Bus サブスクリプションにアクセスできます。</p>  <h3>名前空間の作成</h3>  <p>サブスクリプションを作成したら、新しいサービス名前空間を作成できます。 すべての&rsquo;アカウントで新しい一意のサービス名前空間を指定Service Busがあります。 各サービス名前空間は、一連のエンティティのコンテナー Service Busします。 次のスクリーンショットは、Harish-Blog サービス名前空間 &ldquo;を作成するときにインターフェイスがどうなるかを&rdquo; 示しています。</p>  <p><img src="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/1614.EAIBridges5.png" alt="" border="0"></p>  <p>アカウントの設定と名前空間の作成に関する詳細については、12 月の CTP リリースに付随するユーザー ガイドを参照してください。</p>  <h3>ブリッジの構成とデプロイ</h3>  <p>一部として提供されている単純な UI デザイナー 画面を使用してブリッジを構成Microsoft Visual Studio。 このエクスペリエンスを有効にするには、ここから SDK をダウンロードします。 SDK をインストールした後、Visual Studioに移動し、新しい EAI プロジェクトを作成します。このプロジェクトは、Visual C# -&gt; ServiceBus にあります。 この後、 <a href="https://msdn.microsoft.com/en-us/library/windowsazure/hh689797.aspx" target="_blank">こちら</a>&nbsp; (XML One-Way Bridge の場合)&nbsp; またはこちら (XML Request-Reply Bridge の場合) に記載されている手順に従って、ブリッジを構成してデプロイします。&nbsp;</p>  <p>次のスナップショットは、Service Bus キュー (Queue1)、Service Bus リレー (OneWayRelay1)、およびクラウドでホストされている一方通行のサービス (OneWayExternalService1) に接続された一方通行ブリッジ (bridge1) を示しています。 ブリッジに送信されるメッセージが処理され、これらの 3 つのエンド ポイントの 1 つにルーティングされます。</p>  <p><img src="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/3240.EAIBridges6.png" alt="" style="border-style: initial; border-color: initial;" border="0"></p>  <p>次のスナップショットは、要求応答ブリッジに関連するさまざまなステージを示し、ブリッジを構成できるサーフェスを形成します。</p>  <p><img src="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/2251.EAIBridges-7.png" alt="" border="0"></p>  <h3>ブリッジへのメッセージの送信</h3>  <p>ブリッジを構成してデプロイしたら、メッセージをブリッジに送信します。 単純な Web クライアントまたは WCF クライアントを使用して、ブリッジにメッセージを送信できます。 また、REST/POX または SOAP を使用して送信できます。 サンプルのダウンロードの一環として、メッセージの送信に使用できるサンプル クライアントが用意されています。 クライアントを送信するこれらのメッセージを使用するには、ここからサンプルをダウンロードします。</p>  <h1>フィードバックのラッピングと要求</h1>  <p>この投稿では、新しい 12 月の CTP で導入される EAI ブリッジ機能の使用を開始する方法を示Service Bus。 ここで&rsquo;見たのは、iceberg のチップのみです。 今後&rsquo;の投稿では、さらに詳しい情報と機能について説明します。</p>  <p>最後に、CTP リリースの主な目標の 1 つは、サービスとその機能に関するフィードバックを得るという点を思い出してください。 これらの&rsquo;統合機能についてご意見をお聞かしいと思います。 ブリッジの構成とデプロイ のエクスペリエンス、およびこれまでに公開されているその他のさまざまな機能について、お客様の意見を得るのを特に望みです。</p>  <p>その他の提案、コメント、称賛、質問については、ラボ フォーラムでお知 <a href="https://social.msdn.microsoft.com/forums/en-US/servicebuslabs" target="_blank">らせください</a>。 フィードバックは、お客様や他のユーザーのサービスの改善に役立ちます。&nbsp;</p>'
