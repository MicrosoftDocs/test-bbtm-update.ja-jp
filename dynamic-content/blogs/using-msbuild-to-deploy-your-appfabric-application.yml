### YamlMime:Yaml
ms.openlocfilehash: df0bc461f2939dc0e94ce04623785bc32ea85b46
ms.sourcegitcommit: d03bdc7fe5447adb6530886aab848b75fe8fa8ee
ms.translationtype: MT
ms.contentlocale: ja-JP
ms.lasthandoff: 03/11/2022
ms.locfileid: "139895252"
Slug: using-msbuild-to-deploy-your-appfabric-application
Title: MSBuild を使用した AppFabric アプリケーションのデプロイ
Summary: Justin 氏によるこの投稿は、AppFabric チームのブログで公開されています。  アプリケーションのホスティングはローカルステージング環境からクラウドに移行するため、必要な領域の1つです...
Content: "<p><em><a target=\"_blank\" href=\"https://social.msdn.microsoft.com/profile/justin%20beckwith/\">Justin 氏</a>によるこの投稿は、AppFabric チームのブログで<a target=\"_blank\" href=\"https://blogs.msdn.com/b/appfabric/archive/2011/07/20/using-msbuild-to-deploy-your-appfabric-application.aspx\">公開</a>されています。</em></p>  <p>アプリケーションのホスティングがローカルステージング環境からクラウドに移行するにつれて、改善が必要な領域の1つは、自動ビルドプロセスにデプロイを含めることができることです。 &nbsp; &nbsp;Visual Studio は、6月の CTP appfabric ビットを使用して、開発者が AppFabric アプリケーションを設計、構築、デプロイできるようにする優れたジョブです。 &nbsp;ただし、現在のツールでは、これらのツールを標準的な反復可能なビルドプロセスに統合する方法は提供されていません。 &nbsp;この記事の目的は、自動化された AppFabric デプロイをビルドプロセスに統合するために必要な手順を説明し、アプリケーションマネージャーに組み込まれているいくつかの REST API 機能 &rsquo; を紹介することです。</p>  <p>作業を開始する前に、このサンプルで使用しているツール &rsquo; の一覧から実行してみましょう &rsquo; 。</p>  <ul>  <li>Visual Studio 2010 .NET Framework 4.0</li>  <li><a target=\"_blank\" href=\"https://www.microsoft.com/download/en/details.aspx?displaylang=en&amp;id=17691\">Windows Azure AppFabric SDK CTP &ndash; 6 月の更新プログラム</a>  <ul>  <li>AppFabric のサンプル</li>  <li>AppFabric SDK</li>  <li>Visual Studio 用 AppFabric ツール</li>  <li><a target=\"_blank\" href=\"https://github.com/AzureAppManager/MSBuildTask\">この投稿のサンプルコード</a></li>  </ul>  </li>  </ul>  <p>この記事の目的は MSBuild を使用して AppFabric アプリケーションをデプロイすること &rsquo; であるため、ラボサイトでアカウントの登録を行う必要があります。 &nbsp;CTP へのアクセスを要求するには、次の手順を実行します。</p>  <ul>  <li>で <a target=\"_blank\" href=\"\"><span style=\"text-decoration: underline;\"></span></a> AppFabric 管理ポータルにサインインします。</li>  <li>画面左側の [AppFabric &rdquo; ] ノードの &ldquo; 下にある [アプリケーション &rdquo; ] という &ldquo; エントリを選択します。</li>  <li>画面の上部にあるツールバーの [要求の &ldquo; 名前空間 &rdquo; ] ボタンをクリックします。</li>  <li>名前空間を要求する前に、いくつかの質問に答えるように求められます。</li>  <li>要求は承認されるまで保留中 &rdquo; の状態に &ldquo; なり、CTP 機能の使用を開始できます。</li>  </ul>  <h4>&nbsp;REST API の使用</h4>  <p>AppFabric アプリケーションマネージャーには、アプリケーションマネージャーで使用できるほとんどのタスクを自動化するための便利な RESTful API が用意されています。 &nbsp;ここでは、アプリケーションのライフサイクル (開始、停止、デプロイなど) を利用して、カスタムタスクを記述します。 &nbsp;API の使用を開始するために、AtomPub プロトコルを使用して行った呼び出し &rsquo; の一部を抽象化するために、 <b>resourceaccessor .cs</b>クラスをまとめまし &rsquo; た。 &nbsp; &nbsp;たとえば、アプリケーションの詳細を取得するには、名前空間と管理キーを使用してクラスをインスタンス化します。</p>  <table border=\"1\" cellpadding=\"0\" cellspacing=\"0\">  <tbody>  <tr>  <td valign=\"top\" width=\"562\">  <p>&nbsp;アプリケーションマネージャー REST API ラッパーの新しいインスタンスを作成する</p>  <p>ResourceAccessor appManagerAPI = 新しい ResourceAccessor (this.名前空間、this。ManagementKey);</p>  <p>アプリケーションの詳細を取得する</p>  <p>ApplicationResource ar = appManagerAPI. GetApplication (\"myApplicationName\");</p>  </td>  </tr>  </tbody>  </table>  <p>このサンプルでは、に <a target=\"_blank\" href=\"\"></a> 既存のアカウントがあり、既に名前空間が作成されていることを前提としています。 &nbsp; &nbsp;名前空間の管理キーを取得するには、ポータルの右側にある [プロパティ] パネルにある [表示 &rsquo; ] ボタンをクリック &lsquo; し、キーをクリップボードにコピーします。</p>  <p><img src=\"https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/8713.SS1.png\" alt=\"\" height=\"273\" width=\"398\" border=\"0\"></p>  <p>ここでは、ほとんどの場合、シャットダウン、展開解除、インポート、デプロイ、アプリケーションの再起動の自動化について説明 &rsquo; します。 &nbsp; たとえば、アプリケーションを起動するには、 <b>SendCommand</b> 呼び出しを発行します。</p>  <table border=\"1\" cellpadding=\"0\" cellspacing=\"0\">  <tbody>  <tr>  <td valign=\"top\" width=\"479\">  <p>アプリケーションを起動しようとしました</p>  <p>LogMessage (MessageImportance. Normal、\"アプリケーションを開始しています...\");</p>  <p>SendCommand (this.ApplicationName, LifecycleCommand);</p>  </td>  </tr>  </tbody>  </table>  <p>&rsquo;他のアプリケーションコマンドの自動化に関心がある場合は、ここで紹介 &rsquo; したサンプルによって、頭を始めることができます。</p>  <h4>&nbsp;MSBuild タスクのビルド</h4>  <p>REST API を使い慣れた &rsquo; ので、 &rsquo; 今度はカスタム MSBuild タスクの作業を開始します。 &nbsp;これは比較的簡単であり、特にドキュメント化されています。</p>  <p><a target=\"_blank\" href=\"https://msdn.microsoft.com/en-us/library/t9883dzc.aspx\">https://msdn.microsoft.com/en-us/library/t9883dzc.aspx</a></p>  <p>カスタムタスク用の新しい .NET クラスライブラリプロジェクトを作成する必要があります。 &nbsp;このサンプルでは、タスク &rsquo; から &lsquo; 継承するクラスを実装し、 <b>Execute</b>メソッドをオーバーライドします。</p>  <table border=\"1\" cellpadding=\"0\" cellspacing=\"0\">  <tbody>  <tr>  <td valign=\"top\" width=\"235\">  <p>public クラス AppManagerDeploy: Task</p>  <p>{</p>  <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public override bool Execute ()</p>  <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</p>  <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ...</p>  <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</p>  <p>}</p>  </td>  </tr>  </tbody>  </table>  <p>カスタムパッケージをデプロイするために、 <b>Execute</b> メソッドは、REST API ラッパーを使用して実行中のアプリケーションを停止し、アプリケーションの展開を解除してから、新しいパッケージをアップロードします。</p>  <table border=\"1\" cellpadding=\"0\" cellspacing=\"0\">  <tbody>  <tr>  <td valign=\"top\" width=\"630\">  <p>&nbsp;/// &lt;概要&gt;</p>  <p>これは、カスタム MSBuild タスクを作成するときに実行される主な関数です。 &nbsp;これ</p>  <p>関数は、指定された *. afpkg ファイルをアプリケーションにアップロードする役割を担います。</p>  <p>マネージャー API。</p>  <p>/// &lt;/summary&gt;</p>  <p>/// &lt;戻り値を返し &gt; &lt; ます&gt;</p>  <p>public override bool Execute ()</p>  <p>{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</p>  <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;デバッグ情報を MSBuild コンソールに出力する</p>  <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ...</p>  <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; アプリケーションマネージャー API の新しいインスタンスを作成する</p>  <p>ResourceAccessor appManagerAPI = 新しい ResourceAccessor (this.名前空間、this。ManagementKey);</p>  <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 要求されたアプリケーションがアップロードに対して有効な状態であるかどうかを確認します</p>  <p>操作 (停止、展開解除済み)</p>  <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ...</p>  <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 指定された *. afpkg ファイルを Application Manager 展開サービスにアップロードします。</p>  <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; appManagerAPI. UploadPackage (this.これは ApplicationName です。PackagePath);</p>  <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; アプリケーションを展開しようとしています</p>  <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; LogMessage (MessageImportance. Normal、\"アプリケーションの配置...\");</p>  <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; crResult = appManagerAPI (this.ApplicationName、LifecycleCommand);</p>  <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; アプリケーションを起動しようとしました</p>  <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; LogMessage (MessageImportance. Normal、\"アプリケーションを開始しています...\");</p>  <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; crResult = appManagerAPI (this.ApplicationName, LifecycleCommand);</p>  <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; LogMessage (MessageImportance. 高、\"配置の完了!\");</p>  <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; true を返します。</p>  <p>}</p>  </td>  </tr>  </tbody>  </table>  <p>&nbsp;完全なソースについては、 <a target=\"_blank\" href=\"https://github.com/AzureAppManager/MSBuildTask\">GitHub</a>を参照してください。</p>  <h4>&nbsp;Azure AppFabric アプリケーションへの MSBuild タスクのアタッチ</h4>  <p>カスタム MSBuild タスクが完了したら、現在のアプリケーション * .csproj ファイルにタスクをアタッチします。 &nbsp;6月の CTP サンプルで利用可能な Stock ティッカーアプリケーションを使用することを選択しました。このソリューションの変更されたバージョンは、この投稿のソースコードで入手できます。 &nbsp;* .Csproj ファイルを変更するには、次のことを行う必要があります。</p>  <ul>  <li>AppFabric アプリケーションソリューションファイルを開きます (例については、 アプリケーション .sln)</li>  <li>app.config を含む AppFabric Project を右クリックし、プロジェクトをアンロードします。</li>  <li>アンロードされたプロジェクトを右クリックし、* .csproj ファイルを編集します。</li>  <li>* .Csproj ファイルの一番下までスクロールし、/project &gt; タグのすぐ上 &lt; にこのターゲットを追加します。</li>  </ul>  <table border=\"1\" cellpadding=\"0\" cellspacing=\"0\">  <tbody>  <tr>  <td valign=\"top\" width=\"641\">  <p>&lt;UsingTask TaskName = \"AppManagerDeploy\"</p>  <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; AssemblyFile = \"C: \\& lt;サンプル &gt; へのパス\\AFDeployTask\\bin\\Debug\\Microsoft.Samples.AppFabric.MSBuildTask.dll \"</p>  <p>/&gt;</p>  <p>&nbsp;&lt;Target Name = \"DeployToAppFabric\" AfterTargets = \"Build\" Condition = \"' $ (Configuration) | $ (Platform) ' = = ' Release |AnyCPU ' \"&gt;&nbsp;</p>  <p>&lt;メッセージテキスト = \"AppFabric ポータルへの Project の展開\" 重要度 = \"高\"/&gt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</p>  <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;Appmanagerdeploy</p>  <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Namespace = \"ジャスト be\"</p>  <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ManagementKey = \"jmjMPi0GvG97U/eISgswcdt/K3zlrr + MyPS8 + DQhlqk =\"</p>  <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ApplicationName = \"stockticker\"&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</p>  <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; PackagePath = \"$ (MSBuildProjectDirectory) \\bin\\release\\publish\\StockTickerApp.afpkg\"</p>  <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /&gt;</p>  <p>&lt;/Target&gt;</p>  </td>  </tr>  </tbody>  </table>  <p>ビルドと配置の方法の一部としてこのタスクを実装する場合、GAC に Microsoft.Samples.AppFabric.MSBuildTask.dll アセンブリを登録して、毎回 * .dll へのパスが参照されないようにすることができます。 &nbsp;<b>UsingTask</b>コマンドは、新しいアセンブリをビルドにアタッチし、先ほど作成した AppManagerDeploy タスクを使用できるようにします。 &nbsp;AppManagerDeploy タスクは、次のフィールドを受け入れます。</p>  <ul>  <li><b>名前空間</b> &ndash; Azure portal で生成されるアプリケーションの名前空間</li>  <li><b>Managementkey</b> &ndash; 名前空間管理キーは、Azure portal でアクセスできます。</li>  <li><b>ApplicationName</b> &ndash; AppFabric アプリケーションマネージャーでのアプリケーションの名前</li>  <li><b>PackagePath</b> &ndash; ビルド中に生成された *. afpkg ファイルへの相対パス。</li>  </ul>  <p>このターゲットは、<b>リリース</b>モード構成を使用する場合にのみ実行するように構成されています。 &nbsp;デプロイコマンドを使用してビルドを実行する2つの方法が用意され &nbsp; ました。これは、リリースモードを使用して Visual Studio でビルドするか、コマンドプロンプトで MSBuild コマンドを発行することによって行い &nbsp; ます。ここでは、自動化されたビルドの MSBuild タスクを作成する点から、Visual Studio コマンドプロンプトでビルドを実行する手順を説明 &rsquo; します。 &nbsp;まず、アプリケーション * .sln ファイルが格納されているパスに移動します。 &nbsp;次に、コマンドを実行してプロジェクトをビルドします。</p>  <p><img src=\"https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/7510.SS2.png\" alt=\"\" height=\"160\" width=\"400\" border=\"0\"></p>  <p>注意してください。これには、実行に時間がかかることがあります。 &nbsp; ただし、デプロイが完了すると、コンソールに成功メッセージが表示されます。</p>  <p><img src=\"https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/4314.SS3.png\" height=\"204\" width=\"399\"></p>  <p>展開タスクの実行を許可したら、アプリケーションマネージャーの管理者ログを確認して、実行されたすべてのコマンドを確認します。</p>  <p><img src=\"https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/5811.SS4.png\" alt=\"\" height=\"368\" width=\"394\" border=\"0\"></p>  <h4>その他の例</h4>  <p>Windows Azure AppFabric アプリケーションマネージャー REST API を使用するその他の例については、6月の CTP で PowerShell のサンプルを確認してください。 Azure AppFabric の使用に関するその他の優れたリソースについては、のブログ <a target=\"_blank\" href=\"https://blogs.msdn.com/b/appfabric/\">https://blogs.msdn.com/b/appfabric/</a> を参照してください。</p>  <p><iframe src=\"https://www.facebook.com/plugins/like.php?href= https://blogs.msdn.com/b/windowsazure/archive/2011/07/20/using-msbuild-to-deploy-your-appfabric-application.aspx;layout=box_count&amp;show_faces=false&amp;width=300&amp;action=like&amp;font=segoe+ui&amp;colorscheme=light&amp;height=50\" style=\"overflow: hidden; width: 300px; height: 50px;\" frameborder=\"0\" scrolling=\"no\"></iframe><br>ツイートします  <script type=\"text/javascript\"></script>  </p>"
