### YamlMime:Yaml
ms.openlocfilehash: bee6206fac474042e9e079dfab58a756b6fb5a43
ms.sourcegitcommit: d03bdc7fe5447adb6530886aab848b75fe8fa8ee
ms.translationtype: MT
ms.contentlocale: ja-JP
ms.lasthandoff: 03/11/2022
ms.locfileid: "139904779"
Slug: how-to-sync-sql-server-data-with-azure-search
Title: Azure Search を使用SQL Serverデータを同期する方法
Summary: 'このブログ記事では、統合 SQL Server と呼ばれる SQL Server Change Tracking の機能を使用して、SQL Server から Azure Search にデータの変更を効率的に同期する方法について説明します。 '
Content: >-
  Azure Search で受け取る一般的な要求は、データベース内のデータを Azure Search SQL Server拡張する方法です。これは、フルテキスト ワークロードをオンプレミスの SQL Server データベースからクラウドにオフロードしたい、または単に Azure Search の高度な検索機能を利用する必要がある可能性があります。


  多くの状況では、データの変更をリアルタイム レベルに近いレベルで検索エンジンに反映する必要があります。変更された行を追跡すると、適切に行われなき場合、計算コストが高いタスクになる可能性があります。これは困難なタスクになる可能性があります。このブログ記事では、<a href="https://technet.microsoft.com/en-us/library/cc280462(v=SQL.105).aspx">integrated Change Tracking</a> と呼ばれる SQL Server の機能を使用して、SQL Server から Azure Search にデータの変更を効率的に同期する方法について説明します。 変更の追跡は、ユーザー テーブルSQL Serverされた変更 (挿入、更新、および削除) を追跡できる、変更の内部機能です。また、データベースのパフォーマンスに対する影響が非常に低い変更を追跡および検索する非常に効率的な方法です。


  このブログ記事では、 で Codeplex にあるサンプルを <a href="https://go.microsoft.com/fwlink/?LinkID=517876">利用します</a>。


  &nbsp;

  <h3><strong>必要条件</strong></h3>

  このチュートリアルでは、以下にアクセスできるユーザーを想定しています。

  <ul>
   <li>SQL Server 2008 以上
  <ul>
   <li><b>メモ：</b> 既定のデータベース構成を使用し、SQL Server Management Studioを使用している場合は、(LocalDB)\v11.0 としてサーバー インスタンスに接続します。</li>
  </ul>

  </li>
   <li>Azure Search サービス (詳細については <a href="https://azure.microsoft.com/en-us/documentation/articles/search-get-started/">、こちらを参照</a>)</li>
   <li>Visual Studio 2012 以上</li>
   <li>サンプルのソース <a href="https://go.microsoft.com/fwlink/?LinkID=517876">コード</a></li>
  </ul>

  &nbsp;

  <h3><strong>Azure Search SQL Serverサンプルの構成</strong></h3>

  この時点で、サンプル プロジェクトをダウンロードし、そのサンプル プロジェクトを Visual Studio。サンプル のプロジェクトVisual Studio、Azure リソースの接続情報を追加する必要Search Service。また、データベースを変更する必要がある場合は、SQL Serverの接続情報もメモしてください。


  app.config を開き、SearchServiceName と SearchServiceApiKey の値を変更して、 <a href="https://portal.azure.com/">Azure portal</a> で確認できる Azure Search Service と Azure Search Service API キーを反映します。


  &nbsp;

  <h3><strong>データベースChange TrackingへのSQL Server追加</strong></h3>

  このアプリケーションを起動すると、"AzureSearchSyncTest" という名前の新しいデータベースと、Products というテーブルにデータが設定されます。このテーブルが作成されると、Change Trackingのテーブルが有効になります。

  <p style="padding-left: 30px;"><strong>省略</strong>可能: 独自の SQL Server データベースでこれを試す場合は、使用できる \sql フォルダーに 2 つのスクリプトがあります。 または、ファイル内の接続情報をapp.configインスタンスを指SQL Serverします。</p>

  確認する価値のあるファイルの 1 つは、add_change_tracking.sql フォルダーにある add_change_tracking.sql ファイルです。 このテーブルに対して統合SQLを有効にするには、2 つのコマンドChange Tracking必要です。

  <blockquote>

  <p style="padding-left: 30px;"><em>ALTER DATABASE SyncTest SET CHANGE_TRACKING = ON</em></p>

  <p style="padding-left: 30px;"><em>(CHANGE_RETENTION = 2 日、AUTO_CLEANUP = ON)。</em></p>

  <p style="padding-left: 30px;"><em>ALTER TABLE Products ENABLE CHANGE_TRACKING</em></p>

  <p style="padding-left: 30px;"><em>WITH (TRACK_COLUMNS_UPDATED = OFF);</em></p>

  </blockquote>

  最初のコマンドは、データベースの変更の追跡をオンにし、変更情報を 2 日間保持する SQL Server に指示します。その後、データベース領域が多すぎるのを防ぎ、変更データが削除されます。2 番目のコマンドは、追跡SQL Serverテーブルを指定します。 このデモでは、変更された行SQL Server追跡し、列固有の更新を追跡しな<span style="text-decoration: underline;"></span>きことを示しました。


  別の方法として、列の変更追跡を有効にすることもできます。 変更された行全体ではなく、変更された列を送信する方が理にかなっている場合は、これを行う必要があります。これにより、変更の追跡に割り当てられるストレージの量が増加する可能性があります。ただし、大量のデータ変更を行い、変更が通常は 1 行の数列に制限されている場合は、価値がある場合があります。


  &nbsp;

  <h3><strong>動作のしくみ</strong></h3>

  このコンソール アプリケーションを詳しく見てみよう。このアプリケーションは、Azure Search SQL Server同期を実行します。前の手順では、 でアプリケーションを開Visual Studio。まだ開いていない場合は、今すぐ開きます。


  &nbsp;

  <h3><strong>変更の検出</strong></h3>

  このアプリケーションの重要なポイントは、SQL Server変更を効率的に検出する機能です。Program.cs ファイルを開き、Main(string[] args) 関数に移動します。最初に書き込む行は次の場所です。

  <p style="padding-left: 30px;">_lastVersion = -1;</p>

  SQL Server統合Change Trackingでは、追跡されるテーブルの 1 つに変更が行われた場合に毎回増分される変更バージョンが使用されます。この変更バージョンを使用すると、特定SQL Server変更バージョン以降に発生した変更を返送する必要があります。この_lastVersion変数は、前の同期が正常に完了した時点で使用されたバージョンの変更を追跡するために使用されます。この場合、アプリを初めて実行します。そのため、最初の同期のためにすべてのデータを同期する -1 に設定します。


  このアプリケーションに対して行えるオプションの拡張機能は、この値をどこか_lastVersion格納し、アプリケーションの実行時に読み込む方法です。そうすることで、アプリケーションを閉じても、離れ離れした場所を選択できます。


  この関数の次の行では、SQL Server データベースで変更の追跡を初期化し、データを受信する Azure Search インデックスを作成します。


  while (true) ループに移動すると、このアプリケーションによって 5 秒ごとに変更がチェックされる [Thread.Sleep(5000)] が表示されます。


  このループ内で、ChangeEnumeratorSql が作成されているのを確認できます。これは、初めて Azure Search から Azure Search へのデータの完全SQL Server実行するために使用されるクエリです。


  次に、changeEnumerator.ComputeChangeSet(_lastVersion) が呼び出されます。この呼び出しは、ChangeEnumerator.cs ファイルを開いて ComputeChangeSet(Int64 lastVersion) 関数に移動した場合に確認できる非常に多くの作業を行います。


  最初に、GetChangeSetVersion(con) を呼び出します。これは、最新SQL Serverバージョンとは何かを確認します。次にこれを実行する場合は、この値を使用して、この時点以降に発生した変更を見つけたいので、これを覚えています。


  次に、すべてのデータ変更を IEnumerableDictionary&lt;&gt; に収集する EnumerateUpdatedDocuments(con, lastVersion) の呼び出しが表示されます。この EnumerateUpdatedDocuments 関数にドリルダウンすると、最初に (_lastVersion が -1) 初めてデータの完全な選択を行うのが気付くでしょう。指定した_lastVersion &gt; -1 の場合、変更だけが取得されます。変更を取得するには、テーブル CHANGETABLE が重要であるのが分かっているのが分かっているのが分かっているのです。このテーブルは、テーブルによって管理される内部テーブルSQL Server。また、Products テーブルに対して発生した挿入と更新のみを取得する必要があるという次の行にも気付く場合があります。

  <blockquote>

  <p style="padding-left: 30px;">sqlCmd += "and (CT.SYS_CHANGE_OPERATION = 'U' ";</p>

  <p style="padding-left: 30px;">sqlCmd += "or CT.SYS_CHANGE_OPERATION = 'I') ";</p>

  </blockquote>

  削除を同期する機能を追加する場合は、CT を要求するのと同様の方法でこのテーブルを呼び出します。SYS_CHANGE_OPERATION = 'D'。


  SQL Azureは現在統合 Change Tracking をサポートしていないので、別の変更追跡メソッド (rowversions + tombstones など) を実装するには、このアプリケーションを変更する必要があります。


  &nbsp;

  <h3><strong>Azure Search への変更のプッシュ</strong></h3>

  変更を取得するために使用されるメソッドを確認しました。次に、Program.cs の Main(string[] args) 関数の while (true) ループに戻ります。終了した場所を選択すると、ApplyChanges(変更) の呼び出しが表示されます。 これにより、Azure Search にアップロードされるデータの ChangeSet が受信されます。この関数にドリルダウンすると、999 のバッチで変更がアップロードされるのが表示されます。また、"mergeOrUpload" というアクションも使用します。これにより、ドキュメント キーが存在しない場合は受信しているデータを挿入し、キーが存在する場合は対応するドキュメントの値を更新する必要があるというメッセージが Azure Search に表示されます。キー フィールドは、Azure Search でドキュメントを一意に識別するために使用されます。この場合、フィールド productID はキー フィールドとして を使用します。


  必要に応じて、新しい行をアップロードし、新しい行を確実にアップロードする場合は、merge と mergeOrUpload よりもアップロードの方が高速である必要があります。


  &nbsp;

  <h3><strong>同期のスケジュール設定</strong></h3>

  これは、while ループを使用して 5 秒ごとに変更を確認し、実行される非常にシンプルなコンソール アプリケーションです。オンプレミスの実稼働環境では、これを Windows サービスにするか、何らかのスケジュール ジョブを実装する必要があります。これをクラウド (SQL Server VM に対してなど) で実行している場合、この機能を実装するには、Web ジョブまたは WebRole が最適な方法である可能性があります。


  &nbsp;

  <h3><strong>アプリケーションを実行して、アップロードから Azure Search へのSQL Server変更を処理する</strong><!--?xml:namespace prefix = "o" ns = "urn:schemas-microsoft-com:office:office" /--></h3>

  この時点で、アプリケーションを起動する準備ができました。Program.cs ファイル内にある Main 関数にブレークポイントを追加して、アプリケーションをステップ実行できます。コンソールに次のようにテキストが表示されます。

  <p style="padding-left: 30px;">同期処理が開始されました...</p>

  <p style="padding-left: 30px;">Products SQL Serverを使用したデータベースの作成...</p>

  <p style="padding-left: 30px;">Products テーブルの変更の追跡を有効にする...</p>

  <p style="padding-left: 30px;">294 の変更のアップロード...</p>

  <p style="padding-left: 30px;">同期が完了し、5 秒待機しています。...</p>

  <p style="padding-left: 30px;">同期が完了し、5 秒待機しています。...</p>

  アプリケーションの最初の実行で 294 行すべてがアップロードされた方法に注意してください。アプリケーションは、5 秒間隔で変更を確認し、アップロードします。


  行の 1 つを変更し、何が起こるかを見てみましょう。アプリケーションを実行し続けながら、AzureSearchSyncTest データベースSQL Server接続し、次のコマンドを実行します。

  <p style="padding-left: 30px;">UPDATE [Products] set Color = 'Green' where ProductID = 680</p>

  コンソールウィンドウに戻ると、次のメッセージが表示されます。

  <p style="padding-left: 30px;">1つの変更をアップロードしています...</p>

  アプリケーションによって1つの更新プログラムが検出され、Azure Search にアップロードされました。これは、新しい行を挿入する場合にも機能します。統合 Change Tracking は行の削除も追跡しますが、このサンプルには追加されていないことに注意してください。

  <h3>Azure Search インデックスのデータを検証する</h3>

  これで、Azure Search インデックスにデータを同期させることができました。次に、インデックスをクエリし、すべてのデータが存在することを確認します。これを行うには、 <a href="https://www.telerik.com/download/fiddler">Fiddler</a>を使用します。

  <ul>
   <li>Fiddler から、[Composer] タブを選択し、[解析済み] タブを選択します。</li>
   <li>コンボボックスで [: GET] を選択します。</li>
   <li>URL に次のように入力し、を Azure Search サービス名に置き換えます。は、 <a href="https://[AZURESEARCH_SERVICENAME].search.windows.net/indexes/catalog/docs('680')?api-version=2014-07-31-Preview">https://[AZURESEARCH_SERVICENAME]。 Search. windows. net/indexes/catalog/docs (' 680 ')? api-version = 2014-07-31-Preview</a></li>
   <li>[要求ヘッダー] セクションで、次のように入力します。 api キーの値を有効な API キーに置き換えます。</li>
   <li>Execute を押す</li>
  </ul>

  <a href="https://acom.azurecomcdn.net/80C57D/blogmedia/blogmedia/2014/10/24/fiddler.png"><img class="alignnone size-medium wp-image-208551" alt="fiddler" src="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/fiddler-636x139.png" width="636" height="139" /></a>


  左側のサイドバーに、次のような行が表示されます。


  <a href="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/fiddler_response.png"><img class="alignnone size-full wp-image-208571" alt="fiddler_response" src="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/fiddler_response.png" width="306" height="93" /></a>

  <p style="padding-left: 30px;">この行をダブルクリックすると、この行の JSON 結果を表示するウィンドウが開いたことを確認できます。</p>

  この行がどのように存在し、緑色の色もアップロードされていることに注目してください。


  <a href="https://acom.azurecomcdn.net/80C57D/blogmedia/blogmedia/2014/10/24/fiddler_json.png"><img class="alignnone size-medium wp-image-208561" alt="fiddler_json" src="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/fiddler_json-636x308.png" width="636" height="308" /></a>


  この時点で、SQL Server と Azure Search 間で同期が実行されています。

  <h3>サンプルに対するオプションの機能強化</h3>

  このサンプルには、次のような拡張が必要になる場合があります。

  <ol>
   <li>Azure Search に削除をアップロードするためのサポートを追加します。Azure Search で削除を実行する方法の詳細については、 <a href="https://msdn.microsoft.com/en-us/library/azure/dn798930.aspx">このトピックの AZURE SEARCH API</a>に関するドキュメントを参照してください。</li>
   <li>アプリケーションが起動するたびに、_lastVersion 値が-1 に設定されます。これにより、アプリケーションは、データ変更の完全なアップロードを Azure Search に実行するように指示されます。最後に成功した変更バージョンをデータベースに格納し、アプリケーションを起動した時点でアプリケーションが中断した場所からアプリケーションを取得できるようにすることができます。</li>
   <li>このコンソールアプリケーションを Windows サービスに変更することを検討してください。</li>
  </ol>

  &nbsp;


  <a href="https://feedback.azure.com/forums/263029-azure-search/suggestions/6328649-localization">ご意見</a>をお寄せください。


  Liam Cavanagh は、彼のブログまたは <a href="https://twitter.com/liamca" target="_blank">twitter</a>からアクセスできます。
