### YamlMime:Yaml
ms.openlocfilehash: aa473afbd2fbd1505d0f09ca391e30da1cd4ff78
ms.sourcegitcommit: d03bdc7fe5447adb6530886aab848b75fe8fa8ee
ms.translationtype: MT
ms.contentlocale: ja-JP
ms.lasthandoff: 03/11/2022
ms.locfileid: "139910036"
Slug: azure-documentdb-bids-fond-farewell-to-self-links
Title: Azure DocumentDB では、fond farewell が Self-Links に入札されるようになります。
Summary: DocumentDB での新しい id ベースのルーティングの概要について説明します。
Content: "<p>そうです、自己リンクが完全に排除されていないため &rsquo; 、タイトルが誤解を招くことになります。 &rsquo;詳細については後ほど説明しますが、まず、DocumentDB が最初の場所で自己リンクを使用する方法と理由について、しばらくの間一時停止してみましょう &rsquo; 。 <a href=\"https://azure.microsoft.com/en-us/services/documentdb/\" target=\"_blank\">Azure DocumentDB</a>は、Microsoft Azure でホストされる完全に管理された JSON ドキュメントデータベースサービスであり、REST インターフェイスを介してアクセスできます。 REST サービスとして、DocumentDB のすべてのリソースは、Uri (uniform resource identifier) によってアドレス指定できます。 <a href=\"https://azure.microsoft.com/documentation/articles/documentdb-resources/\">DocumentDB リソースモデル</a>は、すべてのリソースが相互にどのように関連しているか、およびこのリソースモデルに従ってこれらの uri がどのように構造化されるかを説明します。 リソース id は、システムによって生成される一意の不変の値です。 DocumentDB のリソースを調べると、アンダースコア ( &ldquo; _ &rdquo; ) 文字で識別されるシステムプロパティがいくつか表示されます。 これらのシステムプロパティの1つである _rid は、このリソース id です。 <img alt=\"JSON document with system properties\" border=\"0\" height=\"185\" src=\"https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/doc-frag.png\" style=\"border-width: 0px; padding-top: 0px; padding-right: 0px; padding-left: 0px; margin-right: auto; margin-left: auto; float: none; display: block; background-image: none;\" title=\"システムプロパティを含む JSON ドキュメント\" width=\"610\"> システムプロパティのもう1つは、このリソースの自己リンクである _self です。 自己リンクは、db/ {1} {2} {0} &rdquo; /の &ldquo; 形式で記述された Uri です。ここ {0} で、はデータベース _rid {1} 、はドキュメントコレクション {2} の _rid、はドキュメントの _rid を示しています。 DocumentDB を操作したことがある場合は、次のような Uri を使用するのが一般的です。データベース内の任意のリソースに対して任意の操作を行うときに使用されます。 自己リンクのような Uri を使用してリソースをアドレス指定できることは、リソースのアドレス指定に使用できる安定した Uri を提供するため、非常に便利です。 では、なぜ削除されるのでしょうか。 それでは、自己リンクを削除しまし &rsquo; た。 必ずしもそうではありません。 &rsquo;多くのお客様から、これらの _rid ベースの自己リンクは、リソース id がどのようなものであるかがわからないため、作業が困難になっています。 そのリソースに対して何かを実行する前に、リソースを照会して自己リンクを取得する必要があります。 すべての &ldquo; リソースに id が割り当てられているので、リソースの作成時に設定したので、リソースのアドレス指定時にその id を使用でき &rsquo; ないのはなぜですか。 &rdquo; &nbsp;このセンチメントに同意します。この分野で大きな変化が発表さ &rsquo; れています。 ドキュメントには依然として _self プロパティがありますが &rsquo; 、ここでは、_rid ではなく、id に基づくリソースへの代替リンクを作成する機能を追加しました。 (注: リソースで既存の自己リンクを使用する機能は引き続きサポートされています)。これは、次の Uri が、前に見たドキュメントを参照する有効な方法であることを意味します。 db/<strong>MyDatabaseId</strong><strong>S/</strong><strong>MyDocumentId</strong> <strong>NB-この URI の末尾が &#39;/&#39; 文字ではないことに注意してください。これは微妙ですが、重要な違いです。</strong> この点について簡単に確認できるだけでなく、この Uri の一部としてリソースを作成するときに指定した id を使用できるようになりました。 これまでは、ドキュメントを削除するなどの単純な操作を行う場合、次のようなコードを記述する必要がありました。</p>\n\n<pre class=\"prettyprint\">\n// Get a Database by querying for it by id\nDatabase db = client.CreateDatabaseQuery()\n                    .Where(d =&gt; d.Id == &quot;SalesDb&quot;)\n                    .AsEnumerable()\n                    .Single();\n\n// Use that Database&#39;s SelfLink to query for a DocumentCollection by id\nDocumentCollection coll = client.CreateDocumentCollectionQuery(db.SelfLink)\n                                .Where(c =&gt; c.Id == &quot;Catalog&quot;)\n                                .AsEnumerable()\n                                .Single();\n\n// Use that Collection&#39;s SelfLink to query for a DocumentCollection by id\nDocument doc = client.CreateDocumentQuery(coll.SelfLink)\n                     .Where(d =&gt; d.Id == &quot;prd123&quot;)\n                     .AsEnumerable()\n                     .Single();\n\n// Now that we have a doc, use it&#39;s SelfLink property to delete it\nawait client.DeleteDocumentAsync(doc.SelfLink);</pre>\n\n<p>&rsquo;多くのコードが含まれているので、多くのコードは、必要な自己リンクを取得するためにリソースを参照する単純な定型コードです。 このコードスニペットには、必要な操作を実行する前に、サービスへの3つの呼び出しと、要求ユニットとネットワークラウンドトリップをそれぞれコストがかかることがあります。 このリリースでは、そのコードを次の2行のコードに置き換えることができます。</p>\n\n<pre class=\"prettyprint\">\n// Build up a link manually using ids\n// If you are building up links manually, ensure that \n// the link does not end with a trailing &#39;/&#39; character\nvar docLink = string.Format(&quot;dbs/{0}/colls/{1}/docs/{2}&quot;, \n     &quot;SalesDb&quot;, &quot;Catalog&quot;, &quot;prd123&quot;);\n\n// Use this constructed link to delete the document\nawait client.DeleteDocumentAsync(docLink);</pre>\n\n<p>これによって、記述と保守を行うコードが少なくなるだけでなく、ドキュメントの作成などのより重要なことを目的として、これらの Ru を離れるデータベース操作も少なくなります。 上記のコードでも、リソースモデルから Uri を正しく作成する方法を理解している必要があります。 また、有効な Uri があることを確認するために、空白のエスケープや特殊文字のエンコードなどを行う必要があります。そのため、SDK でもう1つの手順を実行し、単純なヘルパーファクトリ &nbsp; を追加しています。</p>\n\n<pre class=\"prettyprint\">\n// Use UriFactory to build the DocumentLink\nUri docUri = UriFactory.CreateDocumentUri(&quot;SalesDb&quot;, &quot;Catalog&quot;, &quot;prd123&quot;);\n\n// Use this constructed Uri to delete the document\nawait client.DeleteDocumentAsync(docUri);</pre>\n\n<p>この新しい UriFactory クラスを使用すると、必要な Uri の種類と適切な id を把握しておく必要があります。 これらの変更を利用し、UriFactory クラスにアクセスするには、 <a href=\"https://www.nuget.org/packages/Microsoft.Azure.DocumentDB/1.4.0\">.NET SDK のバージョン</a>を使用するようにアプリケーションを更新する必要があります。 Node.js、Python、および Java Sdk では、更新プログラムは必要ありません。新しい代替リンクを作成してお楽しみください。 この ID ベースのルーティングの使用方法を示す、より包括的なサンプルが必要な場合は、 <a href=\"https://portalcontent.blob.core.windows.net/samples/IdBasedRoutingSamples.zip\">このプロジェクト</a> をまとめてみてください。 <a href=\"https://feedback.azure.com/forums/263030-documentdb\">フィードバックフォーラム</a>を使用して、お客様にとって最も重要な機能についてのフィードバックをお寄せください。 &rsquo;このフィードバックは、このような更新プログラムを使用してサービスを改善するのに役立ちます。 最新の DocumentDB のニュースと機能については、Twitter <a href=\"https://twitter.com/DocumentDB\">@DocumentDB</a> をフォローしてください。 &rsquo;まだ DocumentDB を使用していない場合は、<a href=\"https://azure.microsoft.com/en-us/services/documentdb/\">こちら</a>からお試しください。お客様の方法をお試しいただくために、お使いのブラウザーを<a href=\"https://azure.microsoft.com/en-us/documentation/learning-paths/documentdb/\">ラーニングパス</a>で参照してください。</p>"
