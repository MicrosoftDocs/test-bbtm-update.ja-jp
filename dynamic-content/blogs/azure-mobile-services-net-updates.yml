### YamlMime:Yaml
ms.openlocfilehash: fa5ff8c1981dce410bf047d02d3342c58807a6f1
ms.sourcegitcommit: d03bdc7fe5447adb6530886aab848b75fe8fa8ee
ms.translationtype: MT
ms.contentlocale: ja-JP
ms.lasthandoff: 03/11/2022
ms.locfileid: "139890231"
Slug: azure-mobile-services-net-updates
Title: Azure Mobile Services .NET 更新プログラム
Summary: カスタム認証、AAD、CORS のサポートなど、Azure Mobile Services .NET の最新の更新バッチ。
Content: >-
  次のような Azure Mobile Services <a href="https://azure.microsoft.com/mobile/">.NET 用の新しい機能セットをリリース</a>しました。

  <ul>
   <li><a href="https://msdn.microsoft.com/en-us/magazine/dn532203.aspx">ASP.NET Web API CORS</a> を使用した CORS のサポートにより、サービス単位、コントローラー単位、またはアクションごとのレベルで CORS ポリシーを指定するためのファースト クラスのサポートが可能になります。</li>
   <li>モバイル サービス クライアントで使用できる認証メカニズムを制御できる拡張可能な認証モデル。 たとえば、Azure Active Directory、Twitter、Facebook、Google、Microsoft アカウントの既定のサポートに加えて、または代わる独自の認証メカニズムを追加できます。</li>
   <li>サーバー側Azure Active Directoryを使用した認証のサポートにより、クライアント認証が大幅に簡素化されます。</li>
  </ul>

  &nbsp;


  Azure Mobile Services .NET を初Mobile Services場合は、この大<a href="https://azure.microsoft.com/blog/2014/07/11/azure-mobile-services-why-should-asp-net-developers-care/"></a>きな概要を確認してください。<a href="https://azure.microsoft.com/mobile/"></a>一般的な Azure Mobile Servicesの詳細については、こちらを参照してください。


  <a href="https://social.msdn.microsoft.com/Forums/windowsazure/en-US/home?forum=azuremobile">MSDN</a> フォーラムを通じていつでもご自分の考えをお知らせください。または、 をツイートしてください<a href="https://twitter.com/frystyk">@frystyk</a>。

  <h3>更新プログラムの取得</h3>

  Mobile Service クイック スタートから始める場合でも Visual Studio Project から開始する場合でも、NuGet から更新プログラム (バージョン 1.0.342) <a href="https://nuget.org">を取得できます</a>。 NuGet パッケージ マネージャー プロジェクトの <strong>NuGet パッケージ マネージャー</strong> に移動しVisual Studio[更新] を選択し、検索<strong></strong>ウィンドウに<strong>「windowszure.mobileservices</strong>」と入力します。 次のようになります。


  <img style="float: none; padding-top: 0px; padding-left: 0px; margin-left: auto; padding-right: 0px; margin-right: auto; border-width: 0px;" title="Azure Mobile Services バージョン 1.0.342 への更新" alt="Updating to Azure Mobile Services version 1.0.342" src="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/NuGet342.png" width="610" height="423" border="0" />


  <strong>windowsazure.mobileservices</strong> <strong>を</strong>検索してMobile Services更新プログラムをインストールすると、準備が整います。 これらのパッケージには、必要な他の更新プログラムが含まれるので、他のパッケージを手動で更新しない必要があります。

  <h3>CORS のサポート</h3>

  最初に、CORS nuget パッケージで提供されるサポートを利用する <a href="https://www.nuget.org/packages/Microsoft.AspNet.WebApi.Cors/">CORS ASP.NET Web APIサポートが組み込まれています</a>。 <strong>EnableCorsAttribute</strong> を使用して設定を制御する方法など、ASP.NET Web API での CORS の概要については、ASP.NET Web API <a href="https://msdn.microsoft.com/en-us/magazine/dn532203.aspx">2 の CORS</a> サポートに関するブログを参照してください。


  既定では、Azure Mobile Services、CORS 要求を許可しない既定のポリシーを使用して CORS を有効にできます。 許可されているオリジン ドメインの一覧を設定するだけの場合は、ポータルを使用するか、または<a href="https://manage.windowsazure.com/"></a>コンマ区切りのオリジンの値を持つ <strong>MS_CrossDomainOrigins</strong> アプリ設定を使用して構成を使用して行います。次に例を示します。

  <pre class="prettyprint">&lt;add key="MS_CrossDomainOrigins" value="https://testhost, https://sample" /&gt;</pre>

  これにより、2 つのオリジンからのアクセスとhttps://testhosthttps://sample、任意の HTTP メソッドと任意の HTTP ヘッダーの使用が可能になります。


  サービスの構成に使用される <strong>ConfigOptions</strong> インスタンスを変更することで、完全に異なる既定のポリシーを設定できます。 次のようなことを行うポリシーを設定します。

  <pre class="prettyprint">public static class WebApiConfig

  {
      public static void Register()
      {
          // Use this class to set configuration options for your mobile service
          ConfigOptions options = new ConfigOptions();
          options.CorsPolicy =
              new System.Web.Http.Cors.EnableCorsAttribute("*", "*", "*");
          ...
      }
  }</pre>

  もちろん、コントローラーごとに、またはアクションごとに特定の CORS ポリシーを設定することもできます。そのため、CORS の使い方を柔軟に変更できます。

  <h3>拡張認証モデル</h3>

  Azure Mobile Servicesは、Azure Active Directory、Twitter、Facebook、Google、Microsoft アカウント全体で共通の認証モデルを提供します。 ただし、これらのログイン プロバイダーに加えて、独自のログイン プロバイダーを追加したり、既定のプロバイダーを変更または削除したりすることができます。


  たとえば、カスタム認証に関するドキュメントの説明に従って、カスタム認証の <a href="https://azure.microsoft.com/en-us/documentation/articles/mobile-services-dotnet-backend-get-started-custom-authentication/">概要追加できます</a>。 他の OWIN 認証プロバイダーを利用して、追加の ID プロバイダーのサポートを追加できます。 <strong>LoginProvider を作成するには</strong>、<a href="https://www.nuget.org/packages/Owin.Security.Providers/">Owin.Security.Providers</a> パッケージを使用して <a href="https://developer.linkedin.com/documents/authentication">LinkedIn</a> のサポートを追加する方法を示して、以下に示す 4 つの手順NuGetがあります。


  まず、次の 3 つのタスクを実行する LinkedIn ミドルウェアを対象とする   <strong>aLoginProvider</strong> の実装を作成します。

  <ul>
   <li><strong>認証</strong> に参加できるよう LinkedIn OWIN ミドルウェアを登録する</li>
   <li><strong>LinkedIn から取得</strong> したアクセス トークンをシリアル化する</li>
   <li><strong>アクセス トークンを再度</strong> 逆シリアル化する</li>
  </ul>

  コードは次のように表示されます。

  <pre class="prettyprint">public class LinkedInLoginProvider : LoginProvider

  {
      internal const string ProviderName = "LinkedIn";

      public LinkedInLoginProvider(IServiceTokenHandler tokenHandler)
          : base(tokenHandler)
      {
      }

      public override string Name
      {
          get { return ProviderName; }
      }

      public override void ConfigureMiddleware(IAppBuilder appBuilder,
          ServiceSettingsDictionary settings)
      {
          LinkedInAuthenticationOptions options = new LinkedInAuthenticationOptions
          {
              ClientId = settings["LinkedInClientId"],
              ClientSecret = settings["LinkedInClientSecret"],
              AuthenticationType = this.Name,
              Provider = new LinkedInLoginAuthenticationProvider()
          };
          appBuilder.UseLinkedInAuthentication(options);
      }

      public override ProviderCredentials CreateCredentials(
          ClaimsIdentity claimsIdentity)
      {
          Claim name = claimsIdentity.FindFirst(ClaimTypes.NameIdentifier);
          Claim providerAccessToken = claimsIdentity
              .FindFirst(ServiceClaimTypes.ProviderAccessToken);

          LinkedInCredentials credentials = new LinkedInCredentials
          {
              UserId = this.TokenHandler.CreateUserId(this.Name, name != null ?
                  name.Value : null),
              AccessToken = providerAccessToken != null ?
                  providerAccessToken.Value : null
          };

          return credentials;
      }

      public override ProviderCredentials ParseCredentials(JObject serialized)
      {
          return serialized.ToObject&lt;LinkedInCredentials&gt;();
      }
  }</pre>

  ローカル Web.config ファイルで直接設定できる 2 つの新しいカスタム アプリケーション設定 (<strong>LinkedInClientId</strong> と <strong>LinkedInClientSecret</strong>) を利用して、構成を通じて LinkedIn クライアント ID とシークレットを設定できます。詳細については後で説明します。


  2 番目の手順は、LinkedIn アクセス トークンが ID へのクレームとして追加されるのを確認します。

  <pre class="prettyprint">public class LinkedInLoginAuthenticationProvider : LinkedInAuthenticationProvider

  {
      public override Task Authenticated(LinkedInAuthenticatedContext context)
      {
          context.Identity.AddClaim(
              new Claim(ServiceClaimTypes.ProviderAccessToken, context.AccessToken));
          return base.Authenticated(context);
      }
  }</pre>

  3 番目の手順では、アクセス トークンをパブリック プロパティとして含む <strong>ProviderCredentials</strong> クラスを定義します。

  <pre class="prettyprint">public class LinkedInCredentials : ProviderCredentials

  {
      public LinkedInCredentials()
          : base(LinkedInLoginProvider.ProviderName)
      {
      }

      public string AccessToken { get; set; }
  }</pre>

  最後の手順では、新しい <strong>LoginProvider をサービス</strong> に登録します。 これは、WebApiConfig <strong>クラスの Register</strong> <strong>メソッドで行</strong> います。

  <pre class="prettyprint">public static class WebApiConfig

  {
      public static void Register()
      {
          ConfigOptions options = new ConfigOptions();
          options.LoginProviders.Add(typeof(LinkedInLoginProvider));

          HttpConfiguration config = ServiceConfig.Initialize(
              new ConfigBuilder(options));
          ...
      }
  }</pre>

  クライアント ID とクライアント シークレットのアプリ設定をローカル ファイルに追加web.configします。

  <pre class="prettyprint">&lt;add key="LinkedInClientId" value="your value here" /&gt;

  &lt;add key="LinkedInClientSecret" value="your value here" /&gt;</pre>

  Visual Studio でローカルでサービスを実行し、リダイレクト後に次のようなページが提供される <strong>/login/linkedin</strong> アドレスをブラウザーに指定できます。


  <img style="float: none; padding-top: 0px; padding-left: 0px; margin-left: auto; padding-right: 0px; margin-right: auto; border-width: 0px;" title="LinkedIn LoginProvider" alt="Using the LinkedIn LoginProvider on service running locally." src="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/LinkedInLogin.png" width="311" height="360" border="0" />


  LinkedIn 資格情報を使用してログインすると、次のような最終的な URI にリダイレクトされます: https://localhost:31475/login/done#token=&lt;token&gt;。 クライアントから新しい <strong>LoginProvider</strong> を使用するには、単に文字列 "LinkedIn" を使用してそれを指します。

  <pre class="prettyprint">private async Task AuthenticateAsync()

  {
      while (user == null)
      {
          string message;
          try
          {
              user = await App.MobileService.LoginAsync("linkedin");
              message = string.Format("You are now logged in - {0}", user.UserId);
          }
          catch (InvalidOperationException)
          {
              message = "You must log in. Login Required";
          }

          var dialog = new MessageDialog(message);
          dialog.Commands.Add(new UICommand("OK"));
          await dialog.ShowAsync();
      }
  }</pre>

  <h3>Azure Active Directory 認証</h3>

  <a name="authenticate-your-app-with-active-directory-authentication-library-single-sign-on"></a>Azure Mobile Services .NET では、<a href="https://azure.microsoft.com/en-us/documentation/articles/mobile-services-windows-store-dotnet-adal-sso-authentication/">Active Directory 認証ライブラリ</a> シングル サインオンを使用した認証が既にサポートされますが、現在 Active Directory 認証ライブラリ でサポートされていないクライアント プラットフォームに必要なサーバー フローはサポートされていませんでした。


  既定のAzure Active Directory <strong>LoginProvider</strong> では、Active Directory 認証ライブラリ によって提供されるクライアント側フローがサポートされますが、これは、そのライブラリがサポートされているクライアント プラットフォームでのみ機能します。


  Azure Mobile Services でサポートされている任意のクライアントで動作するサーバー側フローを有効にするには、最初に <a href="https://www.nuget.org/packages/WindowsAzure.MobileServices.Backend.Security">Microsoft Azure Mobile Services .NET Backend Security Extension</a> Nuget プレビュー パッケージをサーバー プロジェクトにインストールします。 次に、WebApiConfig Azure Active Directory Register メソッドで次の手順を実行して、<strong>LoginProvider</strong> の既定の値<strong>を置き換</strong>える必要があります。<strong></strong>

  <pre class="prettyprint">public static class WebApiConfig

  {
      public static void Register()
      {
          ConfigOptions options = new ConfigOptions();
          options.LoginProviders.Remove(typeof(AzureActiveDirectoryLoginProvider));
          options.LoginProviders.Add(typeof(AzureActiveDirectoryExtendedLoginProvider));

          HttpConfiguration config = ServiceConfig.Initialize(
              new ConfigBuilder(options));
          ...
      }
  }</pre>

  <strong>AzureActiveDirectoryExtendedLoginProvider</strong> クラスは、クライアント フローとサーバー フローの両方をサポートしており、それぞれのクライアント プラットフォームに最適な機能を使用できます。


  <a name="get-started-with-authentication-in-mobile-services"></a>一般的な認証モデルの詳細についてはMobile Servicesの認証に関する概要<a href="https://azure.microsoft.com/en-us/documentation/articles/mobile-services-dotnet-backend-xamarin-ios-get-started-users/">トピックを参照Mobile Services</a>。


  これで完了です。 これらの機能が役に立ちます。他に表示する機能がある場合は、お知らせください。


  お楽しみください!


  ヘンリック
