### YamlMime:Yaml
ms.openlocfilehash: 0e265e8a1b5963bcd1f93c4b3e3a41c3cfcdc364
ms.sourcegitcommit: d03bdc7fe5447adb6530886aab848b75fe8fa8ee
ms.translationtype: MT
ms.contentlocale: ja-JP
ms.lasthandoff: 03/11/2022
ms.locfileid: "139889059"
Slug: querying-remote-databases-in-azure-sql-db
Title: Azure SQL Database 内の複数のデータベースにまたがるクエリ
Summary: このブログでは、Azure SQL Database の新しいクロスデータベースクエリ機能に加え、エラスティックデータベースクエリのその他の機能強化についても解説します。
Content: "<h4 style=\"background: rgb(238, 238, 238); padding: 5px 10px; border: 1px solid rgb(204, 204, 204); border-image: none;\">注: <a href=\"https://docs.microsoft.com/en-us/azure/sql-database/sql-database-elastic-query-overview\">Azure SQL Database エラスティッククエリの概要 (プレビュー)</a>のドキュメントには、エラスティックデータベースクエリに関する最新の関連情報が含まれています。</h4>\n\n<p>Azure SQL Database では、<a href=\"https://azure.microsoft.com/en-us/documentation/articles/sql-database-elastic-query-overview/?wt.mc_id=WW_CE_DM_OO_BLOG_NONE\">エラスティックデータベースクエリ</a>の大幅な改善点がいくつか発表されています。 特に、エラスティックデータベースクエリでは、Azure SQL Database 内の複数のデータベースに対するクエリがサポートされるようになりました。 これにより、リモートテーブルからローカルテーブルへの選択など、一般的な複数データベースのクエリ処理が可能になります。</p>\n\n<p><img alt=\"Cross-database queries in Azure SQL Database\" border=\"0\" height=\"436\" src=\"https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/1f82097d-56e9-46c7-8c6a-5d557d8753f5.png\" style=\"border-width: 0px; padding-top: 0px; padding-right: 0px; padding-left: 0px; margin-right: auto; margin-left: auto; float: none; display: block; background-image: none;\" title=\"Azure SQL Database 内の複数のデータベースにまたがるクエリ\" width=\"610\"></p>\n\n<p>また、次の図に示すような高度なリモートデータベースクエリトポロジを使用することもできます。このトポロジでは、複数のデータベースが他のテーブルにアクセスする必要があります。</p>\n\n<p><img alt=\"Querying remote databases in Azure SQL Database\" border=\"0\" height=\"436\" src=\"https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/f598f588-f8ae-4e89-b1c3-21e2e025907b.png\" style=\"border-width: 0px; padding-top: 0px; padding-right: 0px; padding-left: 0px; margin-right: auto; margin-left: auto; float: none; display: block; background-image: none;\" title=\"Azure SQL Database でのリモートデータベースのクエリ\" width=\"610\"></p>\n\n<p>この新しいクロスデータベースクエリ機能により、次の図に示すように、行方向のパーティション分割 (シャーディング) &nbsp; の既存のサポートが補完されます。</p>\n\n<p><img alt=\"HorizontalPartitioning\" border=\"0\" height=\"248\" src=\"https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/fed8945e-4213-40c3-a514-4a608d4c67f4.png\" style=\"border-width: 0px; margin: 0px auto; padding-top: 0px; padding-right: 0px; padding-left: 0px; float: none; display: block; background-image: none;\" title=\"水平パーティション分割\" width=\"610\"><br>\nオンプレミス SQL Server とは対照的に、Azure SQL Database のエラスティックデータベースクエリでは、垂直方向と水平方向の両方のパーティション分割が1つの一般的な概念と同じセキュリティ面で統合されるようになりました。</p>\n\n<p>エラスティックデータベースクエリプレビューの最新の更新には次のような機能があります。</p>\n\n<ul>\n <li>シャーディングが関係しない &nbsp; 一般的なクロスデータベースクエリのシナリオのサポートが向上しました。</li>\n <li>エラスティッククエリは、Standard とプレミアムの両方のパフォーマンスレベルで使用できるようになりました。</li>\n <li>柔軟な DDL で、スキーマとテーブル名の別名がリモートデータベーステーブルを表すことができるようになりました。</li>\n <li>リモートテーブルを参照するときに、T SQL パラメーターを含むクエリのパフォーマンスが大幅に向上しました。</li>\n <li>リモートデータベースから大量の行を取得するクエリのパフォーマンスが向上しました。</li>\n <li>Sp_execute_fanout プロシージャでのパラメーターのサポート。</li>\n</ul>\n\n<p>これらの拡張機能の詳細については、次の段落を参照してください。</p>\n\n<h1>リモートデータベースに対するクエリ</h1>\n\n<p>エラスティックデータベースクエリでは、外部データソースおよび外部テーブル用の DDL の単純な拡張機能を使用して、リモートの Azure SQL データベース内のテーブルにアクセスできるようになりました。 たとえば、データ層のすべてのデータベース間で共有される参照データを格納するリモートデータベースへのアクセスを提供する外部データソースを定義できます。 INSERT INTO... を使用して、リモートデータベースから別のテーブルにテーブルの内容を簡単にコピーすることもできます。SELECT ステートメント。</p>\n\n<p>1つのリモートデータベースを参照する外部データソースは、次の DDL ステートメントの TYPE 句で RDBMS オプションを使用して識別されます。</p>\n\n<pre class=\"prettyprint\">\nCREATE EXTERNAL DATA SOURCE RemoteReferenceData\nWITH\n(\n TYPE=RDBMS,\n LOCATION=&#39;myserver.database.windows.net&#39;,\n DATABASE_NAME=&#39;ReferenceData&#39;,\n CREDENTIAL= SqlUser\n);\n</pre>\n\n<p>この外部データソースに基づいて、ReferenceData データベースにある郵便番号テーブルへのリモートアクセスを提供する外部テーブルを定義できるようになりました。</p>\n\n<pre class=\"prettyprint\">\nCREATE EXTERNAL TABLE [dbo].[zipcode](\n [zc_id] int NOT NULL,\n [zc_cityname] nvarchar(256) NULL,\n [zc_zipcode] nvarchar(20) NOT NULL,\n [zc_country] nvarchar(5) NOT NULL\n)\nWITH\n(\n DATA_SOURCE = RemoteReferenceData\n);\n</pre>\n\n<p>この単純な1回限りのセットアップを実行すると、外部データソースと外部テーブルが定義されている任意の Azure SQL Database から、クエリからリモートの郵便番号テーブルにアクセスできるようになります。</p>\n\n<h1>複数のパフォーマンスレベルでの可用性</h1>\n\n<p>エラスティックデータベースクエリは、Azure SQL Database の標準パフォーマンスレベルでも使用できるようになりました。 これにより、複数のデータベースにまたがるクエリとパーティション分割のシナリオのための Azure SQL Database のコストが大幅に削減されます。 Standard レベルでは DTU の制限が少ないため、最初のリモートデータベースクエリを実行すると、エラスティックデータベースクエリの初期化に最大で1分かかることがあります。 エラスティックデータベースクエリの初期化待機時間は、積極的に作業している領域です。 このエクスペリエンスは、今後数か月の間に改善されます。</p>\n\n<h1>より柔軟な名前付け</h1>\n\n<p>いくつかの重要なシナリオでは、外部テーブルに、リモートデータベースの元のテーブルとは異なる名前を指定する機能が必要です。 リモートテーブルと同じ名前のローカルテーブルが既に存在している場合は、その例を示します。 これらのすべてのシナリオでは、リモートテーブル名に別名を使用する必要があります。</p>\n\n<p>たとえば、外部テーブル定義で、水平方向にパーティション分割された (シャード化) データ層に対して DMV (動的管理ビュー) を集計する場合を考えてみます。 以前は、リモートデータベースのビューを使用し、外部テーブル定義からビューを参照することにより、DMV の名前を効果的に変更するなどの複雑な回避策が必要でした。 DMV 名またはカタログ名は既にローカルに存在しており、外部テーブル名として直接使用できないため、この設定が必要になりました。</p>\n\n<p>これで、外部テーブルの名前として任意の名前を使用し、外部テーブル DDL の新しい OBJECT_SCHEMA および OBJECT_NAME 句を使用して、基になるリモートテーブルを識別できるようになりました。 これにより、次の例に示すように、スケールアウトされたデータ層の Dmv またはカタログビュー間でクエリを簡単に実行できるようになります。 次の DDL (データ定義言語) では、外部データソースと外部テーブルの1回限りの設定が実行されます。 外部テーブルの定義では、OBJECT_SCHEMA 句と OBJECT_NAME 句を使用することに注意してください。</p>\n\n<pre class=\"prettyprint\">\nCREATE EXTERNAL DATA SOURCE MyExtSrc\nWITH\n(\n TYPE=SHARD_MAP_MANAGER,\n LOCATION=&#39;myserver.database.windows.net&#39;,\n DATABASE_NAME=&#39;ShardMapDatabase&#39;,\n CREDENTIAL= SMMUser,\n SHARD_MAP_NAME=&#39;ShardMap&#39;\n);\n</pre>\n\n<p>&nbsp;</p>\n\n<pre class=\"prettyprint\">\nCREATE EXTERNAL TABLE [dbo].[all_dm_exec_requests](\n [session_id] smallint NOT NULL,\n [request_id] int NOT NULL,\n [start_time] datetime NOT NULL, \n [status] nvarchar(30) NOT NULL,\n [command] nvarchar(32) NOT NULL,\n [sql_handle] varbinary(64),\n [statement_start_offset] int,\n [statement_end_offset] int,\n [cpu_time] int NOT NULL\n)\nWITH\n(\n DATA_SOURCE = MyExtSrc,\n SCHEMA_NAME = &#39;sys&#39;,\n OBJECT_NAME = &#39;dm_exec_requests&#39;,\n DISTRIBUTION=ROUND_ROBIN\n);\n</pre>\n\n<p>次のような単純なエラスティックデータベースクエリを使用して、データ層全体で最も負荷の高い要求を取得できます。</p>\n\n<pre class=\"prettyprint\">\nSELECT TOP 10 \n [request_id],\n [start_time]\n [status],\n [command]\nFROM all_dm_exec_requests\nORDER BY [cpu_time] DESC\n</pre>\n\n<h1>Sp_execute_fanout の新しい署名</h1>\n\n<p>エラスティックデータベースクエリでは、ストアドプロシージャ sp_execute_fanout を使用して、リモートデータベースでストアドプロシージャと関数を呼び出すことができます。 Azure SQL Database の最近の機能強化により、sp_execute_fanout のシグネチャが sp_executesql の使い慣れた署名に揃えられるようになりました。 これにより、通常の SQL パラメーターを sp_execute_fanout の呼び出しに渡すことができるようになり、来週の初期の使用が可能になります。</p>\n\n<h1>パフォーマンスの向上</h1>\n\n<p>以前は、エラスティックデータベースクエリでは、パラメーター化された操作をリモートデータベースにプッシュできませんでした。 その結果、大きな行セットは、これらの操作を評価するために、不必要にローカルに配置されなければならないことがありました。 最近の機能強化により、パラメーター化された操作をリモートデータベースにプッシュし、リモートで評価できるようになりました。 外部テーブルに対するクエリと、次のようなローカルテーブルに対するクエリの場合、リモートデータベースの WHERE 句で選択的フィルターを評価することによって、何百万もの行の転送を回避できるようになりました。</p>\n\n<pre class=\"prettyprint\">\nDECLARE @low int\nDECLARE @high int\nSET @low = 100\nSET @high = 200\n\nSELECT c.CustomerId, c.Name, count(OrderId) \nFROM remote_customers c\nJOIN local_orders o\nON c.CustomerId = o.CustomerId \nWHERE c.CustomerId &gt; @low and c.CustomerId &lt; @high\nGROUP BY c.CustomerId, c.Name\n</pre>\n\n<p>上記のクエリのクエリプランを簡単に確認すると、WHERE 句の customer ID の範囲述語によってリモートクエリ演算子が正常に作成されたことが確認されます。</p>\n\n<p><img alt=\"Improved performance for parameterized remote operations\" border=\"0\" height=\"269\" src=\"https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/2031353a-5130-4eb2-82c0-6477802ad9ac.png\" style=\"border-width: 0px; margin: 0px auto; padding-top: 0px; padding-right: 0px; padding-left: 0px; float: none; display: block; background-image: none;\" title=\"パラメーター化されたリモート操作のパフォーマンスの向上\" width=\"610\"></p>\n\n<p>さらに、エラスティックデータベースクエリを使用して多数の小さな行を転送する方が効率的になりました。 Microsoft のテストでは、10万行以上を転送するときに、外部テーブルに対するクエリのパフォーマンスが5倍を超えています。</p>\n\n<p>上で説明したすべての機能強化の詳細については、 <a href=\"https://azure.microsoft.com/en-us/documentation/articles/sql-database-elastic-query-overview/?wt.mc_id=WW_CE_DM_OO_BLOG_NONE\">エラスティックデータベースクエリ</a> の概要に関するページを参照してください。</p>"
