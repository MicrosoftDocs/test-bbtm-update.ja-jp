### YamlMime:Yaml
ms.openlocfilehash: 69669462ebd91a548e614f9955a21a547b2554d0
ms.sourcegitcommit: d03bdc7fe5447adb6530886aab848b75fe8fa8ee
ms.translationtype: MT
ms.contentlocale: ja-JP
ms.lasthandoff: 03/11/2022
ms.locfileid: "139889661"
Slug: previewing-azure-sdks-following-new-azure-sdk-api-standards
Title: 新しい Azure SDK API 標準に従った Azure SDK のプレビュー
Summary: '現在、Java、Python、JavaScript、TypeScript、および .NET で Azure Storage、Azure Cosmos DB、Azure Key Vault、および Azure Event Hubs を操作する新しいライブラリ セットを共有できます。 これらのライブラリは、新しいサービス機能へのアクセスを提供し、Azure SDK 全体に新しい標準セットを適用する最初のステップを表します。これは、ライブラリを学習し、ソフトウェアに統合しやすくなります。 '
Content: >-
  <p>&rsquo;本日は、Java、Python、JavaScript、TypeScript、および .NET で Azure Storage、Azure Cosmos DB、Azure Key Vault、および Azure Event Hubs&nbsp; を操作する新しいライブラリ のセットを共有できます。 これらのライブラリは、新しいサービス機能へのアクセスを提供し、Azure SDK 全体に新<a href="https://aka.ms/azure-sdk-site" target="_blank"></a>しい標準セットを適用する最初のステップを表します。これは、ライブラリを学習し、ソフトウェアに統合しやすくなります。 お気に入りのパッケージ マネージャーからこれらのライブラリを今すぐ取得できます。お気に入りのパッケージ マネージャーに関するフィードバックをお寄せください<a href="https://github.com/Azure/azure-sdk" target="_blank">GitHub。</a> 開始するには、以下にリンクされている手順に従います。</p>


  <ul>
      <li><a href="https://aka.ms/azure-sdk-preview1-python" target="_blank">Python リリース ノート</a></li>
      <li><a href="https://aka.ms/azure-sdk-preview1-java" target="_blank">Java リリース ノート</a></li>
      <li><a href="https://aka.ms/azure-sdk-preview1-js" target="_blank">JavaScript リリース ノート</a></li>
      <li><a href="https://aka.ms/azure-sdk-preview1-net" target="_blank">.NET リリース ノート</a></li>
  </ul>


  <h2>なぜこれを行うのですか?</h2>


  <p>ソフトウェアをクライアントまたはオンプレミスからクラウドに移行することはパラダイムシフトと同様に、Azure&rsquo; の機能の急速なイノベーションの時代を過ごし、開発者に公開する最善の方法について学習しました。 一部の Azure サービスが成熟し、ビジネスクリティカルなエンタープライズ アプリケーションに採用されたので、これらのサービスに関する開発者の生産性にとって重要なパターンとプラクティスを学習しました。 さらに、フィードバックに&rsquo;耳&rsquo;を傾け、新しい取り組みによって提案や要求が組み込まれたものにしました。 最後に、一貫性、使いやすさ、および検出可能性は、Azure SDK の使用に関して特定されたパターンにとって同じように重要である点を理解しています。</p>


  <h2>どのような&rsquo;違いがありますか?</h2>


  <p>チームは、フォローアップブログの投稿で説明する内容の多くについて説明しますが、開始するために、大きな変更は、フィードバックに基づいて定義した一連の目標から生み出されました。 これらは次の条件です。</p>


  <ul>
      <li>言語エコシステムの最適なライブラリと同じ生産性を備え、使いやすい API を作成します。</li>
      <li>使用されている言語とエコシステムに慣用的な API を提供します。</li>
      <li>時間の経過と共に、非常に互換性のある方法で進化します。</li>
      <li>API と同様に、ドキュメントとサンプルに重点を置く必要があります。</li>
      <li>ライブラリをコアとして作成する方法を変更します。</li>
  </ul>


  <h2>使いやすさと生産性</h2>


  <p>生産性は多面的なトピックですが、その 2 つの主要な要素は一貫性と使いやすさです。</p>


  <p>一貫性を確保するために、Azure 開発者と一緒に作業する際に学んだことを一連の API 設計ガイドラインに分け合いました。 ガイドライン自体は<a href="https://github.com/Azure/azure-sdk" target="_blank">、GitHub</a> リポジトリの open に組み込まれています。この領域にアプローチする方法の詳細を説明する原則のセクション、一連の一般的なガイドライン、Java、Python、.NET、JavaScript に関する言語固有のガイドラインで構成されています。 ガイドラインを適用することで、これらのライブラリの方が使いやすく、学習しやすくなります。 1 つのライブラリでパターンまたは API シェイプを学習すると、他のライブラリでも同じことをカウントできる必要があります。</p>


  <p>使いやすさを向上するために、ユーザー フィードバックを収集する方法を調整しました。 プレビューのリリース、プロジェクトの開発者との直接の作業、さまざまなコミュニティ フォーラムでの問題への対応など、業界の標準プラクティスの多くを引き続き行っていますが、次の手順はライブラリの使いやすさテストでした。 現在リリースするライブラリごとに、開発者をラボに取り込み、観察しながらさまざまな使用事例を通して作業を行いました。 そのフィードバックは、ガイドラインとライブラリの API シェイプの両方を形成するためにインストルメントでした。</p>


  <h2>慣用ライブラリ</h2>


  <p>開発者と話している&rsquo;間に聞いたフィードバックの重要な部分は、API が常に言語に対して好感を持つとは限らなかったという点でした。 この問題を解決するために、作成するライブラリは、その言語のパターンに従う必要があるという主要な原則の 1 つとして明示的に確立しました。 &rsquo;さらに、各サービス ライブラリをガイドラインに従って更新する際に、Java、Python、JavaScript、.NET の各言語でこれらのサービスのライブラリを常にリリースします。</p>


  <h2>互換性</h2>


  <p>互換性は常に Microsoft の価値でした。 開発者はソリューションに多大な時間とコストを費やし、引き続き作業を行える必要があります。 ここにはテンションが上がっています。 場合によっては、より良い基盤を構築するために、壊れる変更を加える必要があります。 その基盤に沿&rsquo;って調整すると、上記の生産性目標を達成するのに役立つと考えています。設定が完了したら、高い互換性を提供する予定です。 &rsquo;互換性に関する最後のメモとして、私たちが取った依存関係を確認し、それらを可能な限り最小限に抑えるために、将来の非互換性とバージョン管理の複雑さを軽減しました。ライブラリをアップグレードし、これらのライブラリと共に他のソフトウェアを使用しやすくする必要があります。</p>


  <h2>ドキュメント</h2>


  <p>優れたドキュメントとサンプルを持つことは生産性の側面と見なされる可能性がありますが、多くの開発者がそれを使用するテクノロジを選択する上で最も重要な要素と評価されるので、それを独自の目標として呼び出したいと考えています。 API 自体で&rsquo;行っている使いやすさの調査と同様に、新しい開発者が Azure サービスの実験を迅速に開始できるよう、Azure クイック スタートでも同じことを行っています。 また、API リファレンスのコード スニペットとサンプルの両方が古いというフィードバックも聞かされました。また、api Reference コード スニペットとサンプルを GitHub から定期的にビルドし、ドキュメントに公開するツールを構築しています。</p>


  <h2>ビルド方法を変更する</h2>


  <p>また、作業方法を変更し、コミュニティに参加し、それを基に何を構築する必要があるのかも確認しました。 その結果、開発作業を&rsquo;再構築し、いくつかの重要なリポジトリに一元化する作業を開始しました。</p>


  <ul>
      <li><a href="https://github.com/Azure/azure-sdk" target="_blank">Azure-sdk</a>: 最初の中央の場所として、および設計ガイドラインなどの高レベルのトピックの場所です。</li>
      <li>各言語のリポジトリ: <ul>
          <li><a href="https://github.com/Azure/azure-sdk-for-python" target="_blank">azure-sdk-for-python</a></li>
          <li><a href="https://github.com/Azure/azure-sdk-for-java" target="_blank">azure-sdk-for-java</a></li>
          <li><a href="https://github.com/Azure/azure-sdk-for-js" target="_blank">azure-sdk-for-js</a></li>
          <li><a href="https://github.com/Azure/azure-sdk-for-net" target="_blank">azure-sdk-for-net</a></li>
      </ul>
      </li>
  </ul>


  <p>最後に、ID と認証、同期 API と非同期 API、ログ記録、エラー処理、ネットワーク再試行など、すべてのライブラリで一般的な機能を提供できる新しいコア ライブラリを構築しました。</p>


  <h2>どうすればよいですか。</h2>


  <p>上で説明した多くの原則に準拠した新しい Azure ライブラリのプレビュー リリースを共有して、非常にうろしく思います。 今すぐ新しい SDK をダウンロードして試してみたいと思います。 &rsquo;各ライブラリの新機能、パッケージを取得する方法、およびプレビューに固有の GitHub の問題をファイルする方法について説明するリリース ノートを提供しています。</p>


  <ul>
      <li><a href="https://aka.ms/azure-sdk-preview1-python" target="_blank">Python リリース ノート</a></li>
      <li><a href="https://aka.ms/azure-sdk-preview1-java" target="_blank">Java リリース ノート</a></li>
      <li><a href="https://aka.ms/azure-sdk-preview1-js" target="_blank">JavaScript リリース ノート</a></li>
      <li><a href="https://aka.ms/azure-sdk-preview1-net" target="_blank">.NET リリース ノート</a></li>
  </ul>


  <p>問題を提出するGitHubに加えて、 に従ってツイートしてください<a href="https://twitter.com/azuresdk" target="_blank">@AzureSDK</a>。 ライブラリを改善し、Azure に関する問題を簡単に作成し、問題を解決できるよう、フィードバックをお待ちしております。</p>
