### YamlMime:Yaml
ms.openlocfilehash: 72c13ea8d2c8b17cdab6f8e02df3e09d93417a31
ms.sourcegitcommit: d03bdc7fe5447adb6530886aab848b75fe8fa8ee
ms.translationtype: MT
ms.contentlocale: ja-JP
ms.lasthandoff: 03/11/2022
ms.locfileid: "139891111"
Slug: deep-dive-visual-studio-2013-update-2-rc-and-azure-sdk-2-3
Title: '詳細情報: Visual Studio 2013 Update 2 RC および Azure SDK 2.3'
Summary: >-
  前の投稿では、Visual Studio 2013 Update 2 RC と Azure SDK 2.3 for .NET のリリースを発表しました。この投稿では、Azure 開発用の次の機能について詳しい説明します。


  Visual Studio 20...
Content: "前の投稿では、Visual Studio 2013 Update 2 RC と Azure SDK 2.3 for .NET のリリースを発表しました。この投稿では、Azure 開発用の次の機能について詳しい説明します。\n\nVisual Studio 2013 Update 2 RC [<a href=\"https://aka.ms/vs2013update2rc\">ダウンロード</a>]\n<ul>\n <li><strong><a href=\"#DevTest\">開発/テスト</a></strong>: Web アプリ用の開発/テスト環境 (Azure Web サイトまたは VM) を作成し、自動 PowerShell デプロイ スクリプトを生成する</li>\n <li><strong><a href=\"#JSONEditor\">JSON エディター</a></strong>: テンプレートを編集するときに IntelliSense をサポートするResource Managerエディター</li>\n <li><strong><a href=\"#MobileServices\">Mobile Services</a></strong>: リモート デバッグを含む .NET のサポート</li>\n <li><strong><a href=\"#NotificationHubs\">Notification Hubs</a></strong>: テスト通知を送信する</li>\n</ul>\nAzure SDK 2.3 for .NET [<a href=\"https://azure.microsoft.com/en-us/develop/net/\">ダウンロード</a>]\n\nAzure SDK 2.3 の追加インストールでは、次の機能を利用することもできます。\n<ul>\n <li><strong><a href=\"#VirtualMachines\">Virtual Machines</a></strong>: ネイティブ コードまたはマネージド コードをリモート デバッグし、仮想マシンを サーバー エクスプローラー</li>\n <li><strong><a href=\"#WebSites\">Web サイト</a></strong>: Web の発行エクスペリエンスを改善して、リモート ファイルとログを表示および編集し、Web アプリを簡単に発行できます</li>\n <li><strong><a href=\"#CloudServices\">Cloud Services</a></strong>: 標準ユーザーとして実行Emulator Express &amp; の一般提供では、ネイティブ コードのリモート デバッグがサポートされます</li>\n <li><strong><a href=\"#Storage\">Storage</a></strong>: クライアント 3.0 Storage Emulator &amp; Storage新しいプロジェクトに含まれる更新</li>\n <li><strong><a href=\"#PowerShell\">PowerShell</a>、X-Plat CLI、.NET Automation </strong>(Azure SDK <a href=\"https://azure.microsoft.com/en-us/downloads/\"></a> 2.3 とは別のダウンロード): Resource Manager の使用のサポート、および Web サイト、Cloud Services、VM などの自動化のための多くの新しいコマンド</li>\n</ul>\n&nbsp;\n<h2>開発/テスト: Web アプリケーションの開発とテストに Web サイトと VM を使用する</h2>\nAzure Web サイトを簡単に作成し、Virtual Machines の新しい ASP.NET アプリケーションをVisual Studio開発およびテスト環境として使用できます。 さらに、これらのリソースを作成するときに、PowerShell スクリプトと JSON 構成ファイルがソリューションに追加され、リソースの追加インスタンスのプロビジョニングと Azure へのアプリケーションのデプロイが可能になります。これらのスクリプトは、Visual Studio から編集したり、開発者のデスクトップで実行したり、TFS ビルド定義から使用したり、PowerShell を使用する他のリリース管理ツールで使用できます。\n\nこの新しい機能は、次の [新しい ASP.NET ダイアログProject確認できます。\n\n<a href=\"https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/1750/4405.DevTest1.png\"><img alt=\"\" src=\"https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/1750/4405.DevTest1.png\" border=\"0\"></a>\n\n[Web サイト] を選択した場合は、Web サイトとリンクされたデータベースを作成できます。\n\n<a href=\"https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/1750/3465.DevTest2.png\"><img alt=\"\" src=\"https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/1750/3465.DevTest2.png\" border=\"0\"></a>\n\n[仮想マシン] を選択した場合は、MSDN イメージ (MSDN サブスクライバー専用)、Windows Server 2012 などのプラットフォーム イメージ、またはサブスクリプションで使用できる独自のカスタム イメージを使用して VM を作成できます。\n\nWeb 開発用に仮想マシンを自動的に構成するオプションも用意されています。 仮想マシンにリモート デスクトップを使用する代わりに、IIS、ASP.NET、デバッグ、トレース、および Web 配置 を自動的に構成して発行を自動化できます。 アプリがオンプレミスでも Azure でも、Web 開発に必要Visual Studio VM を作成して構成できます。\n\n<a href=\"https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/1750/6403.DevTest3.png\"><img alt=\"\" src=\"https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/1750/6403.DevTest3.png\" border=\"0\"></a>\n\nアプリケーションがデプロイされた後は、オンプレミス アプリケーションの場合と同じ方法でデバッガーをアタッチできます。 詳細についてはVirtual Machines: リモート デバッグに関するページを参照してください。\n\nPowerShell を活用して開発/テスト環境を作成する方法をVisual Studio\n\nリソースの作成にVisual Studio、Web サイトまたは VM を作成してデプロイするための PowerShell スクリプトと JSON 構成ファイルが提供されます。\n\n<a href=\"https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/1750/3480.DevTest4.png\"><img alt=\"\" src=\"https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/1750/3480.DevTest4.png\" border=\"0\"></a>\n\n次の図に示すように、Visual Studio によって提供される構成ファイルを簡単に複製して、Web サイトまたは VM の異なるインスタンスを作成したり、Azure Web サイトのステージング機能を利用したりすることもできます。 これらの JSON ファイルの編集は、Update 2 RC の一部として、新しい JSON エディター Visual Studio 2013で実行できます。 詳細については、以下の「JSON エディター」セクションを参照してください。\n\n<a href=\"https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/1750/1362.DevTest5.png\"><img alt=\"\" src=\"https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/1750/1362.DevTest5.png\" border=\"0\"></a>\n\nPowerShell の色付け用の新しいサポートを使用して、Visual Studio IDE 内で PowerShell スクリプトを編集することもできます。\n\n<a href=\"https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/1750/3731.DevTest6.png\"><img alt=\"\" src=\"https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/1750/3731.DevTest6.png\" border=\"0\"></a>\n\nWeb 更新プログラムの発行\n\nこのリリースでは、Web サイトを Azure 仮想マシンに直接発行する機能など、Web 発行ダイアログにいくつかの新機能が追加されました。 また、Web サイトを作成し、最初のダイアログにVirtual Machinesすることで、Azure に発行するユーザー エクスペリエンスも簡素化されました。\n\n<a href=\"https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/1750/8400.DevTest7.png\"><img alt=\"\" src=\"https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/1750/8400.DevTest7.png\" border=\"0\"></a>\n\nAzure Web サイトまたは仮想マシンに発行するには、対応するボタンをクリックします。 インポートする .publishsettings ファイルがある場合は、引き続き [インポート] ボタンを使用できます。 その他のシナリオでは、[カスタム] ボタンを使用して設定を手動 <strong>で指定</strong> できます。\n<h2>JSON エディター</h2>\nVisual Studio 2013 Update 2 RC のリリースには、JSON スキーマをサポートする JSON エディターが含まれています。JSON ファイルを使用する場合、Visual Studio キーワードで指定された場所からスキーマ ファイルが<strong>自動的に$schema</strong>されます。これにより、プロジェクトやファイルを更新することなく、JSON ファイルの最新の IntelliSense を取得Visual Studio。\n\nAzure <a href=\"https://azure.microsoft.com/en-us/documentation/articles/azure-preview-portal-using-resource-groups/\">Resource Manager</a> テンプレートは <strong>$schema</strong> キーワードを含む JSON ファイルです。そのため、Visual Studio は(エディターの上部にあるドロップダウンに示すように) スキーマを自動的にダウンロードし、これらのファイルを編集するときに IntelliSense を提供します。この例では、サーバー上のプロパティの IntelliSense をAzure SQL Databaseできます。\n\n<a href=\"https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/1750/3324.json1.png\"><img alt=\"\" src=\"https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/1750/3324.json1.png\" border=\"0\"></a>\n<h2>Mobile Services: .NET のサポートとリモート デバッグ</h2>\nVisual Studio 2013 Update 2 RC では、.NET と ASP.NET Web API フレームワークを使用してバックエンド モバイル サービス ロジックを作成するための完全なサポートも提供されています。\n\n.NET アプリの使用を簡単に開始Mobile Services。 [新<strong></strong>しいアプリケーション] <strong>ダイアログ</strong><strong>Project (</strong> -&gt; -&gt;[ファイルの<strong>新規] Project</strong>) に移動し、[Web] ノードの下にある <strong>[ASP .NET Web アプリケーション</strong>] プロジェクト テンプレート<strong>を選択</strong>します。 次に、[新<strong>しいサービス] ダイアログで [Azure Mobile Service</strong>] を ASP.NET Projectします。\n\n<a href=\"https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/1750/6562.Mobile1.png\"><img alt=\"\" src=\"https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/1750/6562.Mobile1.png\" border=\"0\"></a>\n\n.NET プロジェクトMobile Services表示されます。これは、追加の Mobile Service ASP.NET Web API パッケージとサンプル コントローラーが含まれるカスタマイズされた NuGet プロジェクトです。\n\nモバイル サービスをローカルで実行する\n\n他の Web プロジェクトと同様に、.NET Mobile Service プロジェクトをローカルで実行できます。 プロジェクトでサンプルの TodoItemController.cs を開きます。 コントローラーは、このコントローラーで提供される組み込みの TableControllerT&lt;&gt; .NET クラスを使用する方法Mobile Services。 GetAllTodoItems() メソッド内にブレークポイントを設定し、Visual Studio F5 キーを押して、モバイル サービスをローカルで実行します。\n\nMobile Services API を表示およびテストするためのヘルプ ページが含まれています。 ヘルプ ページで、[試してみる] リンク <strong>を </strong>クリックし、[ <strong>GET tables/TodoItem] リンクをクリック</strong> します。 次に<strong>、[試してみる] をクリック</strong><strong>し、[</strong>GET tables/TodoItem] ページで送信します<strong>。 </strong>予想したように、前に設定したブレークポイントにヒットします。\n\n<a href=\"https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/1750/7127.Mobile3.png\"><img alt=\"\" src=\"https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/1750/7127.Mobile3.png\" border=\"0\"></a>\n\nスキャフォールディングの追加\n\n[スキャフォールディングの追加] ダイアログを使用して、Web API、<strong></strong>OData、または Mobile Service スキャフォールディングを<strong></strong>追加できます ( -&gt;プロジェクトを右クリックし、新しいスキャフォールディングされた項目の<strong>追加..</strong>.) を選択します。\n\nAzure にMobile Servicesプロジェクトを発行する\n\nモバイル サービスの開発が完了したら、Azure に発行できます。 プロジェクトを右クリックし、[発行] コマンド <strong>を選択</strong> します。 発行ウィザードを使用して、新規または既存のモバイル サービスに発行できます。\n\nリモート デバッグ\n\nWeb サイトCloud Services、Virtual Machinesサイトと同様に、Azure でモバイル サービスをライブでリモート デバッグできます。 モバイル サービスのリモート デバッグを有効にするには、モバイル サービスを再度発行し、発行ウィザード<strong></strong>で [構成] を <strong>[デバッグ</strong>] に設定します。\n\nモバイル サービスが発行され、クラウドで実行された後、ローカル ソース コードにブレークポイントを設定し、サーバー エクスプローラー を使用してデプロイされたモバイル サービス インスタンスを選択し、右クリックして [デバッガー<strong></strong>のアタッチ] を選択します。 デバッガーがモバイル サービスにアタッチされた後、Visual Studio の堅牢なデバッグ機能を使用して、クラウドで実行されているアプリをデバッグできます。\n\n<a href=\"https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/1750/5037.Mobile4.png\"><img alt=\"\" src=\"https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/1750/5037.Mobile4.png\" border=\"0\"></a>\n<h2>Notification Hubs: テスト通知を送信する</h2>\n以前の Mobile Services ランタイム リリースでは、新しい Notification Hub を作成し、Notification Hubs Mobile Service と統合することで、メインストリーム モバイル開発で Notification Hubs を有効にしました。 このリリースでは、このリリースでテスト メッセージを送信できる便利なトラブルシューティング ツールが追加Visual Studio。 テスト メッセージを送信するには、サーバー エクスプローラー を開き、[通知ハブ] ノードで通知<strong></strong>ハブを選択し、右クリックして [テスト通知の送信<strong>] を選択します</strong>。\n\n<a href=\"https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/1750/7077.NotificationHubs1.png\"><img alt=\"\" src=\"https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/1750/7077.NotificationHubs1.png\" border=\"0\"></a>\n\n通知ハブ ウィンドウでは、特定のタグまたはすべて (ブロードキャスト) に、10 個のランダムな登録にメッセージを送信できます。 カスタム テンプレートを使用して、Windows Store、Windows Phone、Android、iOS、クロスプラットフォーム メッセージなど、さまざまなテンプレートから選択できます。 [送信] <strong>をクリック</strong>すると、メッセージが正常に送信された場合の診断に役立つメッセージ結果がすぐに表示されます。\n\n<a href=\"https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/1750/0511.NotificationHubs2.png\"><img alt=\"\" src=\"https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/1750/0511.NotificationHubs2.png\" border=\"0\"></a>\n<h2>Virtual Machines: Virtual Machinesからサーバー エクスプローラー</h2>\nまた、 から直接Virtual Machinesを作成サーバー エクスプローラー。ノードの <strong>コンテキスト メニューから</strong> [仮想マシンの作成] Virtual Machinesします。\n\n<a href=\"https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/1750/5141.VM1.png\"><img alt=\"\" src=\"https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/1750/5141.VM1.png\" border=\"0\"></a>\n\n新しい仮想マシンの作成ウィザードでは、仮想マシンを作成するためのより詳細な一連の手順について説明します。ウィザードの最初のページで、VM の作成時に使用するサブスクリプションを選択できます。[サブスクリプション] ドロップダウンには、現在サインインしている資格情報でアクセスできるすべてのサブスクリプションが一覧表示されます。別<strong>の&lt;資格情報セットで&gt;</strong>サインインする場合は、サブスクリプションのドロップダウンから [管理] を選択します。\n\n<a href=\"https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/1750/5710.VM2.png\"><img alt=\"\" src=\"https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/1750/5710.VM2.png\" border=\"0\"></a>\n\nウィザードの次のページで、VM の作成に使用するイメージを選択できます。[イメージ <strong>の種類] ドロップダウン</strong> を使用すると、プラットフォーム イメージ、MSDN イメージ、または独自のカスタム イメージのセットから選択できます。 選択した画像の詳細が右側に表示されます。\n\n<a href=\"https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/1750/0535.VM3.png\"><img alt=\"\" src=\"https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/1750/0535.VM3.png\" border=\"0\"></a>\n\n使用するイメージを選択すると、ウィザードのページが 3 つ追加されます。\n<ul>\n <li><strong>マシン設定</strong> -名前、サイズ、管理者のユーザー名とパスワードなどの基本的な VM 設定を指定します。</li>\n <li><strong>クラウド サービス</strong> - VM をインターネットに公開する方法を選択します。サブスクリプションにクラウド サービスが既にある場合は、この仮想マシンを既存のクラウド サービスに追加することを選択できます。これにより、1 つのクラウド サービスから複数の VM にトラフィックを負荷分散できます。既存のクラウド サービスを選択した場合、仮想マシンは、そのクラウド サービス内の他の仮想マシンと同じネットワーク内に作成されます。この場合、Virtual Network フィールドとサブネット フィールドは無効になります。必要に応じて、新しいクラウド サービスを作成することもできます。ストレージ アカウントと同様に、既存のストレージ アカウントを選択するか、新しいストレージ アカウントを作成できます。ストレージ アカウントは、VM に関連付けられている VHD を格納するために使用され、VM と同じリージョンまたはアフィニティ グループにある必要があります。必要に応じて、単一障害点を回避するために、特定の可用性セット内に仮想マシンを作成することができます。</li>\n <li><strong>エンドポイント</strong> – 仮想マシンに必要なエンドポイントを指定します。既定では、リモート デスクトップと PowerShell エンドポイントが追加され、VM に接続してリモート PowerShell コマンドを実行できます。非標準ポートを使用する場合は、これらのエンドポイントのポートを変更するか、必要に応じて削除することができます。VM で実行している可能性のある他のサービスに対して、エンドポイントを追加できます。これを行うには、[ポート名] の一覧からサービスの種類を選択し、[追加] ボタンをクリックします。エンドポイントを追加したら、名前、ポート、またはプロトコルを変更できます (名前とポートは一意である必要があります)。</li>\n</ul>\nエンドポイントの構成が完了したら、[作成] をクリック <strong>して</strong> 仮想マシンを作成します。アクティビティ ウィンドウに進行状況が表示され、VM が作成されると、新しい VM が [仮想マシン] にサーバー エクスプローラー。\n\n<a href=\"https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/1750/4606.VM4.png\"><img alt=\"\" src=\"https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/1750/4606.VM4.png\" border=\"0\"></a>\n\n<a href=\"https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/1750/3858.VM5.png\"><img alt=\"\" src=\"https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/1750/3858.VM5.png\" border=\"0\"></a>\n<h2>Virtual Machines: リモート デバッグ</h2>\nまた、2.3 SDK の新機能は、仮想マシンをリモートでデバッグする機能です。 仮想マシンの特定のインスタンスのデバッグは、仮想マシンのコンテキスト メニューから有効サーバー エクスプローラー。\n\n<a href=\"https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/1750/5658.VM6.png\"><img alt=\"\" src=\"https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/1750/5658.VM6.png\" border=\"0\"></a>\n\nVM でリモート デバッグ拡張機能が有効になっていると、アクティビティ ウィンドウに進行状況が表示されます。リモート デバッグを有効にするためにそれ以上の構成は必要ありません。\n\n<a href=\"https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/1750/1362.VM7.png\"><img alt=\"\" src=\"https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/1750/1362.VM7.png\" border=\"0\"></a>\n\nVM でデバッグ拡張機能が有効になると、デバッグ拡張機能をアタッチするか、コンテキスト メニューからデバッグ拡張機能サーバー エクスプローラー無効にできます。\n\n<a href=\"https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/1750/7331.VM8.png\"><img alt=\"\" src=\"https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/1750/7331.VM8.png\" border=\"0\"></a>\n\n[デバッガーのアタッチ <strong>] を選択</strong>すると、次のコマンドが表示されます。 メニュー項目の [プロセスにアタッチ] ダイアログが表示され、デバッグする仮想マシンでプロセスを選択できます。[選択] ボタンをクリックして、デバッグするコードの種類 (マネージド、ネイティブ、または両方) を <strong>選択</strong> することもできます。\n\n<a href=\"https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/1750/1134.VM9.png\"><img alt=\"\" src=\"https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/1750/1134.VM9.png\" border=\"0\"></a>\n\nリモート デバッグを有効にすると、リモート デバッグ エージェントと対話するために Visual Studioによって使用される VM 上の追加のエンドポイントが表示されます。\n\n<a href=\"https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/1750/0743.VM10.png\"><img alt=\"\" src=\"https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/1750/0743.VM10.png\" border=\"0\"></a>\n<h2>Web サイト: リモート ビューと編集</h2>\n以前のリリースでは、Azure Web サイトを表示および管理するためのサポートが、サーバー エクスプローラー。 このリリースでは、Web サイト のファイルとログ ファイルをリモートで表示サーバー エクスプローラー。 発行する必要なく、サイトに変更を保存し戻す方法もあります。 これは、ローカル プロジェクトを変更せずに、サイトに対して行う一時的な変更 (customErrors モード =\"off\" を使用した Web.config の更新など) に便利です。\n\nこのサーバー エクスプローラー Web サイトを展開すると、ファイルとログ ファイルのノードが表示されます。 下の画像を参照してください。\n\n<a href=\"https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/1750/0284.Web1.png\"><img alt=\"\" src=\"https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/1750/0284.Web1.png\" border=\"0\"></a>\n\nファイルをダブルクリックすると、ファイルがダウンロードされ、Visual Studio。 変更を Azure Web サイトに保存する準備ができたら、[保存] ボタンを <strong>クリック</strong> します。 次の図に示す確認ダイアログが表示されます。\n\n<a href=\"https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/1750/8468.Web2.png\"><img alt=\"\" src=\"https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/1750/8468.Web2.png\" border=\"0\"></a>\n\n[もう一度確認 <strong>しない] チェック ボックスをオン</strong> にすると、確認ダイアログを表示しません。\n\nファイルをダブルクリックすることで、ログ ファイルを簡単に表示することもできます。 ファイルを編集すると、ローカルに保存されます。 ログ ファイルをリモートで編集Visual Studio。\n<h2>Cloud Services: Express を使用したローカル Emulatorデバッグ</h2>\nSDK 2.3 のリリースにより、Emulator Express の一般提供が発表され、新しいクラウド サービス プロジェクトの既定のコンピューティング エミュレーターになります。 Emulator Express を使用すると、クラウド サービス プロジェクトを通常のユーザーとしてローカルで実行できます。つまり、管理者として Visual Studio を実行することなく、クラウド サービスを作成してデプロイできます。\n\nSDK 2.1 のプレビューとしてリリースされたこの軽量エミュレーターでは、完全なエミュレーターよりも使用されるリソースが少なく、マルチロールの単一インスタンス シナリオがサポートされています。\n<h2>Cloud Services: リモート デバッグ</h2>\nまた、アプリケーションのリモート デバッグの一般提供もCloud Services。 このリリースでは、ロールまたはインスタンス上の任意のプロセスにアタッチする機能や、ネイティブおよび相互運用性 (マネージドおよびネイティブ) デバッグのサポートなど、デバッグ機能にさらに機能を追加しました。 発行プロセスの一Cloud Services発行ダイアログで、アプリケーションのリモート デバッグが有効な場合も引き続き有効になります。\n\nクラウド サービスが発行された後は、デバッグを開始する場所からコードのブレークポイントを設定し、次のコードから [デバッガー<strong></strong>のアタッチ] を選択サーバー エクスプローラー。 ロール レベルまたはインスタンス レベルから [デバッガーのアタッチ] を選択できます。\n\n<a href=\"https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/1750/3582.CloudServices1.png\"><img alt=\"\" src=\"https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/1750/3582.CloudServices1.png\" border=\"0\"></a>\n\nこれにより、新しい [プロセスにアタッチ] ダイアログが表示されます。 仮想マシンのデバッグと同様に、 [プロセスにアタッチ] ダイアログには、 インスタンスで実行されているすべてのプロセスが表示されます。 デバッガーをアタッチするプロセスを選択します。この場合は Web アプリケーションなので、 を選択<strong>w3wp.exe。 </strong> デバッグするコードの種類を選択できます。この例では、相互運用性のデバッグを有効にして、マネージド (v4.5、v4.0) とネイティブを有効にする必要があります。\n\n<a href=\"https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/1750/5367.CloudServices2.png\"><img alt=\"\" src=\"https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/1750/5367.CloudServices2.png\" border=\"0\"></a>\n\nブレークポイントにヒットしたら、デバッガーとそのすべての一般的な機能 (コードのステップ実行や [自動設定] ウィンドウなど) の使用を開始できます。\n\n<a href=\"https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/1750/5355.CloudServices3.png\"><img alt=\"\" src=\"https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/1750/5355.CloudServices3.png\" border=\"0\"></a>\n\nマネージド コードがプロジェクトで参照されているネイティブ コードで関数を呼び出す場合は、次に示すように、マネージド コードからネイティブ コードにステップ インし、ネイティブ コードのデバッグを続行できます。\n\n<a href=\"https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/1750/4571.CloudServices4.png\"><img alt=\"\" src=\"https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/1750/4571.CloudServices4.png\" border=\"0\"></a>\n<h2>Storage: クライアント 3.0 Emulator &amp; Storageプロジェクトに含まれる更新</h2>\n以前は NuGet でのみリリースされていた .NET バージョン 3.0 のストレージ クライアント ライブラリは、Azure SDK 2.3 に含まれています。 このライブラリでは、テーブルを使用する場合の JSON プロトコルのサポートと、読み取りアクセス Geo-Redundant Storage (RA-GRS) など、2013 年 11 月にリリースされた新機能との互換性が追加されています。 また、ストレージ エミュレーターは、JSON や CORS など、2013 年 11 月の REST 機能もサポートするようになりました。 詳細については、「クライアント ライブラリ 3 Azure Storage」を参照してください。\n<h2>PowerShell の機能強化</h2>\nまた、0.8.0 Azure PowerShell最近出荷されました (これは別の<a href=\"https://go.microsoft.com/?linkid=9811175&amp;clcid=0x409\">ダウンロードです</a>)。 Azure PowerShell頻繁に出荷されます。SDK 2.2 以降、多くのリリースがあります。完全な変更ログは、こちらを参照 <a href=\"https://github.com/WindowsAzure/azure-sdk-tools/blob/master/ChangeLog.txt\">してください</a>。 2.2 以降の機能強化の一部を次に示します。最新のバージョンAzure PowerShellされています。\n<ul>\n <li>Azure <a href=\"https://azure.microsoft.com/en-us/documentation/articles/azure-preview-portal-using-resource-groups/\">Resource Manager</a> サポート</li>\n <li>ExpressRoute のサポート</li>\n <li>HDInsight のサポート</li>\n <li>Scheduler のサポート</li>\n <li>Virtual Machines: 新しい拡張機能コマンドレット</li>\n <li>Cloud Services: 新しい拡張コマンドレット</li>\n <li>Web サイト\n<ul>\n <li>ステージ発行のサポート</li>\n <li>Web ジョブのサポート</li>\n</ul>\n</li>\n <li>Storage\n<ul>\n <li>新しいメトリックとログコマンドレット</li>\n <li>新しい SAS トークン コマンドレット</li>\n</ul>\n</li>\n <li>ネットワーク\n<ul>\n <li>新予約済み IPコマンドレット</li>\n <li>新しい静的 IP コマンドレット</li>\n <li>Azure Pack VM のサポート</li>\n</ul>\n</li>\n</ul>\n<h2>PowerShell: Resource Manager サポート</h2>\n最新の PowerShell 0.8.0 リリースと <a href=\"https://github.com/WindowsAzure/azure-sdk-tools-xplat/releases\">X-Plat CLI</a> および <a href=\"https://www.nuget.org/packages?q=windowsazureofficial&amp;prerelease=true&amp;sortOrder=relevance\">.NET</a> クライアント ライブラリには、すべて新しい Resource Manager のサポートが含<a href=\"https://azure.microsoft.com/en-us/documentation/articles/azure-preview-portal-using-resource-groups/\">まれます。</a>PowerShell のサポートについては、以下で説明します。\n\nPowerShell で Resource Managerを使用するには、PowerShell コンソールを開き、\n<pre class=\"prettyprint\">Switch-AzureMode AzureResourceManager</pre>\nこれにより、このAzure PowerShellを使用Resource Manager。 アプリケーションを使用するように再び切り替える場合Service Management API <strong>Switch-AzureMode AzureServiceManagement を実行します</strong>。\n\nその後、次のコマンドレットを使用して、使用しているすべてのResource Managerを検出できます。\n<pre class=\"prettyprint lang-ps1\">help azure</pre>\nローカル JSON テンプレート ファイルからリソース グループを作成する\n\nテンプレートを使用してリソース グループを作成するには、次のコマンドレットを使用できます。\n<pre class=\"prettyprint\">PS C:\\&gt; New-AzureResourceGroup \n -Name testrg -Location \"West US\" -TemplateFile .\\WebSiteAndSQLDatabase.json -StorageAccountName teststorage -siteName testsite\n -hostingPlanName testplan -siteLocation \"West US\" -sku Free -workerSize 0 -serverName testsql serverLocation \"West US\"\n -databaseName db -collation SQL_Latin1_General_CP1_CI_AS -administratorLogin scottgu -Verbose</pre>\n<pre class=\"prettyprint nocode\"> cmdlet New-AzureResourceGroup at command pipeline position 1\n Supply values for the following parameters:\n (Type !? for Help.)\n administratorLoginPassword: ***********</pre>\nリソース グループの作成中に状態が表示されます。\n<pre class=\"prettyprint nocode\">VERBOSE: 3:31:36 PM - Create resource group 'testrg' in location 'West US'\nVERBOSE: 3:32:03 PM - Uploading template 'Microsoft.WebSiteSQLDatabase.0.1.0-preview1.json' to https://teststorage.blob.core.test-cint.azure-test.net/deployment-templates/20140324_223203_WebSiteAndSQLDatabase.json?sv=2013-08-15&amp;sr=b&amp;sig=lchiNTgZZpVH/FDgbQderQYv+UL/dqpD5ZbB24d5A+M=&amp;st=2014-03-24T22:27:03Z&amp;se=2014-03-25T22:32:03Z&amp;sp=r.\nVERBOSE: 3:32:04 PM - Template is valid.\nVERBOSE: 3:32:05 PM - Create template deployment WebSiteAndSQLDatabase' using template https://teststorage.blob.core.test-cint.azure-test.net/deployment-templates/20140324_223203_WebSiteAndSQLDatabase.json?sv=2013-08-15&amp;sr=b&amp;sig=lchiNTgZZpVH/FDgbQderQYv+UL/dqpD5ZbB24d5A+M=&amp;st=2014-03-24T22:27:03Z&amp;se=2014-03-25T22:32:03Z&amp;sp=r.\nVERBOSE: 3:32:24 PM - Resource Microsoft.Sql/servers 'testsql' provisioning status in location 'westus' is Succeeded\nVERBOSE: 3:32:24 PM - Resource Microsoft.Web/serverFarms 'testplan' provisioning status in location 'westus' is Succeeded\nVERBOSE: 3:32:30 PM - Resource Microsoft.Sql/servers/databases 'testsql/db' provisioning status in location 'westus' is Succeeded\nVERBOSE: 3:32:30 PM - Resource Microsoft.Sql/servers/firewallrules 'testsql/AllowAllWindowsAzureIps' provisioning status in location 'westus' is Succeeded\nVERBOSE: 3:32:37 PM - Resource Microsoft.Web/Sites 'testsite' provisioning status in location 'westus' is Succeeded\nVERBOSE: 3:32:45 PM - Resource Microsoft.Web/Sites/config 'testsite/web' provisioning status in location 'westus' is Succeeded\n\nResourceGroupName : testrg\nLocation          : West US\nProvisioningState : Succeeded\nResources         :\n                    Name             Type                        Location\n                    ==========  =========================        ========\n                    testsql     Microsoft.Sql/servers            westus\n                    testsql/db  Microsoft.Sql/servers/databases  westus\n                    testplan    Microsoft.Web/serverFarms        westus\n                    testsite    Microsoft.Web/sites              westus</pre>\n\"siteName\" のようなパラメーターは、指定したテンプレート ファイルに基づいて動的にコマンドレットに追加されます。 コマンドレットは、テンプレートを解析し、パラメーター名、型、および許可される値を把握するのに十分なスマートです。その結果、タブ補完や構文チェックなど、すべての PowerShell の良さが得られます。さらに、資格情報を安全に指定できるよう、型が \"securestring\" のテンプレート内のすべてのパラメーターを PowerShell SecureString として扱います。\n\n動的パラメーターの代わりに、 <strong>TemplateParameterObject</strong> を使用してパラメーター ハッシュ テーブルを指定するか、 <strong>TemplateParameterFile</strong> を使用してパラメーター ファイルを指定することもできます。\n\nギャラリーからリソース グループを作成する\n\nローカル テンプレート ファイルの使用に加え、ギャラリーから直接テンプレートを簡単に使用することもできます。 次のコマンドレットを使用して、使用またはカスタマイズする適切なギャラリー テンプレートを検索/ダウンロードできます。\n<pre class=\"prettyprint\"># List all the gallery templates published by Microsoft\nGet-AzureResourceGroupGalleryTemplate -Publisher Microsoft\n\n# Get detail information of a particular template\nGet-AzureResourceGroupGalleryTemplate -Identity Microsoft.WebSiteSQLDatabase.0.1.0-preview1\n\n# Download a particular template\nSave-AzureResourceGroupGalleryTemplate -Identity Microsoft.WebSiteSQLDatabase.0.1.0-preview1</pre>\nまたは、<strong>New-AzureResourceGroup</strong> コマンドレットの <strong>GalleryTemplateIdentity</strong> パラメーターを使用して、ギャラリー テンプレートを使用してリソース グループを直接作成することもできます。 もちろん、この場合は動的パラメーターも機能します。\n\nリソース グループを作成したら、 <strong>Get-AzureResourceGroup</strong> を使用してリソース グループの情報を表示できます。 <strong>Get-AzureResourceGroupDeployment</strong> を使用して、テンプレートのデプロイ履歴の詳細を確認できます。 <strong>Get-AzureResourceGroupLog</strong> を使用して、すべての操作の詳細ログを取得することもできます。これは診断に非常に便利です。\n<h2>まとめ</h2>\n<a href=\"https://aka.ms/vs2013update2rc\">Visual Studio 2013 2 RC</a> と Azure SDK 2.3 を使用すると、豊富なクラウド アプリケーションの開発をこれまで以上に簡単に開始できます。 開発作業をガイドする <a href=\"https://www.windowsazure.com/en-us/develop/net/\">Azure デベロッパー センターの拡大する .NET</a> 開発者リソースのセットに加え、Azure SDK 2.3 リリースでは、開発エクスペリエンスをより楽しく効率的にする必要があります。\n\nAzure アカウントをまだ持ってない場合は、無料試用版にサインアップして、上記のすべての<a href=\"https://www.windowsazure.com/en-us/pricing/free-trial/\"></a>機能の使用を開始できます。その後、 <a href=\"https://www.windowsazure.com/\">Azure デベロッパー センターにアクセス</a> して、アプリをビルドする方法の詳細を確認します。"
