### YamlMime:Yaml
ms.openlocfilehash: 565ef0e67a7901731429bd7f5201ef6ee3fb5c89
ms.sourcegitcommit: d03bdc7fe5447adb6530886aab848b75fe8fa8ee
ms.translationtype: MT
ms.contentlocale: ja-JP
ms.lasthandoff: 03/11/2022
ms.locfileid: "139910080"
Slug: azure-cosmos-db-a-polymorphic-database-for-an-expanding-data-universe
Title: Azure Cosmos DB –拡張データ universe のポリモーフィックなデータベース
Summary: 最近、データベースの世界で広く普及している議論の種類を聞いているかもしれません。 データベース管理者と NoSQL の開発者は、彼らの懸念を出し、次のことを確認しています。
Content: >-
  <p>現時点では、データの世界で頻繁に発生する議論があります。これは、リレーショナル理論 (Oracle や SQL Server など) に基づく従来のデータベースと、一般に NoSQL &rdquo; データベースと &ldquo; 呼ばれるプラットフォームの最新の波との比較を中心としています。 どちらの種類のデータベースからも、支持者は紛争になる傾向がありますが、 &ldquo; どのデータベースが最適でしょうか。 &rdquo; ただし、これは不適切の競合ポイントになる可能性があります。 その理由を理解するために、履歴をさかのぼって追跡し、NoSQL データベースが最初にこうし突出にどのように rose されるかについて説明します。</p>


  <p>過去15年間、データベーステクノロジは、前述のように、物理的な類似性を使用して、データ領域の初期条件における特異点として、リレーショナルデータベースを使用したトランザクション処理という点を超えて、大幅に拡張されています。 この拡張は、強化されたテクノロジと導入により、より多くのデータを処理する必要があると同時に、さまざまな種類のデータを処理できるようになりました。 データ交換では、ソーシャルメディアと携帯電話によってよりされています。 これにより、さまざまな一時的、柔軟なストレージメディア、および <a href="https://en.wikipedia.org/wiki/XML" target="_blank">XML</a> や <a href="https://en.wikipedia.org/wiki/JSON" target="_blank">JSON</a>などのプロトコルの人気が高まっています。 これらは、さまざまな形式の web 発行とメッセージングにおいて事実上標準になってきましたが、アプリケーションを構築する方法も発展し、成熟しています。 アプリケーションでのオブジェクト指向のデザインは、 <a href="https://en.wikipedia.org/wiki/Object-relational_impedance_mismatch" target="_blank">オブジェクトリレーショナルのインピーダンスの不一致</a>が増加しているため、人気が高まっています。 これにより、リレーショナルデータベースを使用してアプリケーションを構築および管理する方法がさらに調整されています。 さらに、さまざまな種類の非構造化データ、ログファイル、バイナリイメージ、テキスト、sensory データなどの格納を開始しました。 これにより、 <a href="https://en.wikipedia.org/wiki/Apache_Hadoop" target="_blank">Hadoop</a> や <a href="https://en.wikipedia.org/wiki/Apache_Spark" target="_blank">Spark</a> のような分散コンピューティングアーキテクチャは、デザイン時に <a href="https://en.wikipedia.org/wiki/Database_schema" target="_blank">スキーマ</a> などの構造を適用することなく、大規模なデータセットに対して大きなクエリを実行できるようになりました。 つまり、現在管理する必要のあるさまざまなデータ構造が大幅に変更されています。</p>


  <p>これらの変更によって、柔軟性を高めるための需要に対応してデータをモデリングするアプローチは、あらゆる種類のデータを格納するアプリケーションを構築する際に、構造的な整合性と機敏性/生産性との間の新たなトレードオフと考えることができます。 これは、 <a href="https://www.techopedia.com/definition/30153/schema-on-read" target="_blank">読み取り時にスキーマ</a>として知られているパラダイムとして、より柔軟なものにする必要があります。 データ構造は自己記述型または <a href="https://en.wikipedia.org/wiki/Semi-structured_data" target="_blank">半構造化</a>型にすることができます。したがって、データに意味を適用するためのスキーマは、デザイン時にデータベースに緊密に結合されるのではなく、コンシューマー/クライアントコード内で有効な場合があります。 これにより、データベースのデータの取り込み方法がより柔軟になります。</p>


  <p>より柔軟なデータ構造に対するコンシューマーの需要の変化に並列して、データベースで処理するデータの量と速度が非常に大きくなっています。 これにより、トランザクションの整合性と、物理的な可用性、待機時間、同時実行性とのバランスを取る必要がなくなりました。 処理されるデータの量が非常に大きくなるため、従来のリレーショナルデータベースでは、エンドユーザーが要求する全体的なパフォーマンスレベルを提供することが困難になることがあります。 <a href="https://en.wikipedia.org/wiki/ACID_(computer_science)" target="_blank">Acid</a>トランザクションの場合、これは、同時実行性を高めるために acid セマンティクスの<a href="https://en.wikipedia.org/wiki/Isolation_(database_systems)" target="_blank">分離</a>要素を緩和する一般的な方法になりました。 可用性と待機時間が発生した場合、 <a href="https://en.wikipedia.org/wiki/Distributed_database" target="_blank">分散データベース</a> アーキテクチャの登場が増えることになります。そのため、 <a href="https://en.wikipedia.org/wiki/PACELC_theorem" target="_blank">整合性 (レプリカ) と可用性</a>のバランスを取る必要があります。 詳細については、 <a href="https://en.wikipedia.org/wiki/CAP_theorem" target="_blank">CAP 定理</a> と <a href="https://en.wikipedia.org/wiki/PACELC_theorem" target="_blank">pacelc 定理</a>に関するページを参照してください。&nbsp;</p>


  <p>使用するデータベースエンジンの種類を決定する際には、データの格納と永続化のための spectrums の新しいセットが、データ領域の拡大 &rdquo; に &ldquo; 対応するようになりました。 次の図はこのことを示しています。ここでは、solidifying されている差し迫っパラダイムをどこに配置するかを示します。</p>


  <p><a href="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/756ba395-dd20-4abe-8162-195837b57774.png"><img alt="Data Universe" border="0" height="1280" src="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/ae77e6a0-02b1-40f6-9455-dae4291438d3.png" style="border: 0px currentcolor; border-image: none; display: inline; background-image: none;" title="データ Universe" width="2043"></a></p>


  <p>最終的に、これらの spectrums は、現代のアプリケーションが処理する必要があるデータのさまざまな種類、速度、量を増やし、solidified しています。また、これらのデータをサポートするテクノロジも強化されています。</p>


  <p>ACID データベースでの分離トレードオフはしばらく知られています。 <a href="https://en.wikipedia.org/wiki/CAP_theorem" target="_blank">CAP 定理</a> / <a href="https://en.wikipedia.org/wiki/PACELC_theorem" target="_blank">pacelc 定理</a>は、分散データベースでのレプリケーションの一貫性の範囲に関連するトレードオフの一部を公開するために最近押したことを多数受け取りました。 データ構造の範囲が登場することは、おそらくあまり説明されていませんが、データベースの世界での変化パラダイムを理解する上で重要です。 このようにデータパラダイムが急増することは、データベーステクノロジについて質問すると、実際にビジネスユースケースを中心にする必要があるということです。このような spectrums は、最適な方法を決定するのではなく、適切なパラダイムを適用することで最適に処理されます。 現在、データ領域の拡大 &rdquo; に &ldquo; 対応しています。これには、すべてのデータ構造またはデータ永続化のシナリオに最適な1つのパラダイムがありません。</p>


  <p>もちろん、これらの拡張および成熟したパラダイム全体の他のデータベースよりも、Microsoft &rsquo; のポリモーフィックな<a href="https://azure.microsoft.com/en-us/services/cosmos-db/" target="_blank">Azure Cosmos DB</a>!</p>


  <p><a href="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/79638658-e160-40fb-a7a4-bd5b438cd2f4.png"><img alt="Azure Cosmos DB" border="0" height="858" src="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/90f6ddc2-a037-4e6a-a9be-8d2fbb73da8c.png" style="border: 0px currentcolor; border-image: none; margin-right: auto; margin-left: auto; float: none; display: block; background-image: none;" title="Azure Cosmos DB" width="1650"></a></p>


  <h2>データ構造のスペクトラム</h2>


  <p>データ構造のスペクトラムでは、Azure Cosmos DB は、atom レコードシーケンス (分) と呼ばれる革新的な共通型システムを提供します。 これにより、API およびワイヤプロトコルレベルの複数のデータモデルが容易になり、それぞれが前の図に示したさまざまなデータモデルを表します。 これらのモデルは互いに関連性がないと思われるかもしれませんが、それぞれの面では、概念に沿ってポイントを獲得しています。各モデルは、デザイン時とクエリ時のデータに構造/意味を適用するか、または読み取り/書き込みと読み取りの両方のレベルでトレードオフを適用します。 <a href="https://en.wikipedia.org/wiki/Column_family" target="_blank">列ファミリ</a>の場合は、左から右に、オープンソースの<a href="https://docs.microsoft.com/en-us/azure/cosmos-db/cassandra-introduction" target="_blank">Cassandra API</a>の形式で指定されます。 <a href="https://en.wikipedia.org/wiki/Document-oriented_database" target="_blank">ドキュメントデータモデル</a>の場合、ユーザーはネイティブ<a href="https://docs.microsoft.com/en-us/azure/cosmos-db/sql-api-introduction" target="_blank">SQL api</a>と、 <a href="https://docs.microsoft.com/en-us/azure/cosmos-db/mongodb-introduction" target="_blank">MongoDB api</a>のオープンソース Azure Cosmos DB のどちらかを選択できます。 <a href="https://en.wikipedia.org/wiki/Graph_database" target="_blank">グラフ</a>データの場合、ユーザーは、<a href="https://docs.microsoft.com/en-us/azure/cosmos-db/graph-introduction" target="_blank">グリーン mlin API</a>を採用できます。 最後に、 <a href="https://en.wikipedia.org/wiki/Key-value_database" target="_blank">キーと値</a> のストアの場合、ユーザーは <a href="https://docs.microsoft.com/en-us/azure/cosmos-db/table-introduction" target="_blank">Table API</a>を選択できます。</p>


  <h2>データ永続化 spectrums</h2>


  <p>データの永続化の範囲においても、Azure Cosmos DB は、レプリケーションのターンキー化を<a href="https://blogs.technet.microsoft.com/uktechnet/2018/03/20/azure-cosmos-db-tunable-consistency/" target="_blank">使用して複数の整合性の抽象化</a>を提供する、1つの要求ごとに上書きできる、世界中の唯一のデータベースの1つです。 Azure Cosmos DB には、<a href="https://docs.microsoft.com/en-us/azure/cosmos-db/programming#database-program-transactions" target="_blank">スナップショット分離で ACID トランザクション</a>を実行する機能も用意されています。</p>


  <p>前の図に示されているように、レプリケーションの一貫性を保つために、データの永続化に関するすべてのポイントがサポートされており、実際には Cosmos DB で明確に定義された抽象化として一意に開拓されていました。 各整合性設定の利点とユースケース、および実際の例を使用した説明については、ブログの<a href="https://blogs.technet.microsoft.com/uktechnet/2018/03/20/azure-cosmos-db-tunable-consistency/" target="_blank">Azure Cosmos DB &ndash; </a> &rdquo; タイトル &ldquo; を参照してください。各整合性設定の利点とユースケースについては、「」を参照してください。 Cosmos DB 用に作成したデータ整合性モデルの詳細な調査については、<a href="https://discover.microsoft.com/apps-for-cats/" target="_blank">電子ブックを参照</a>してください。</p>


  <h2>グローバルな分散と Sla</h2>


  <p>これらのすべての高まる spectrums にわたるこの広い範囲に加えて、Azure Cosmos DB も、世界中で唯一の<a href="https://docs.microsoft.com/en-us/azure/cosmos-db/distribute-data-globally-turnkey" target="_blank">ターンキーグローバル分散型データベース</a>の1つであるだけでなく、シームレスなレプリケーションと<a href="https://docs.microsoft.com/en-us/azure/cosmos-db/enable-multi-master" target="_blank">マルチマスターの書き込みリージョン</a>機能を通じて、geo 分散アプリケーションでの読み取りと書き込みの両方で非常に短い待機時間を実現し、<a href="https://docs.microsoft.com/en-us/azure/cosmos-db/multi-master-conflict-resolution" target="_blank">自動競合解決</a>を行います。 クラウドネイティブのソフトウェアアーキテクチャによって実現される厳密に制御されたリソースガバナンスモデルにより、 <a href="https://azure.microsoft.com/en-us/support/legal/sla/cosmos-db/v1_0/" target="_blank">整合性、可用性、待機時間、スループット</a>に関して、経済的にサポートされる sla も提供されます。</p>


  <h2>柔軟なオプション</h2>


  <p>Azure Cosmos DB を使用すると、各範囲の異なるポイント間で情報に基づいた決定を行う必要がなく、場合によっては、リレーショナルデータベースなどの別のデータベースプラットフォームを完全に選択する必要がなくなります。 ただし、上記の図に示すように、拡張されたデータ &rdquo; 領域では、成長を続ける使いやすさと効率性を備えた幅広い点で &ldquo; 、非常に広い範囲のサポートを提供しています。 このため、非常に多くの現実世界のビジネスユースケースに対して優れたカバレッジを提供できるようになります。</p>
