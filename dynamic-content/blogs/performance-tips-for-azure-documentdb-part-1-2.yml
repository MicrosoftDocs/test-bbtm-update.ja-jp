### YamlMime:Yaml
ms.openlocfilehash: 9123bac3710592a8c0583e628496b97bda68c8ea
ms.sourcegitcommit: d03bdc7fe5447adb6530886aab848b75fe8fa8ee
ms.translationtype: MT
ms.contentlocale: ja-JP
ms.lasthandoff: 03/11/2022
ms.locfileid: "139892788"
Slug: performance-tips-for-azure-documentdb-part-1-2
Title: Azure DocumentDB ヒントパフォーマンスの向上 - パート 1
Summary: Azure DocumentDB のパフォーマンスに影響を与えるいくつかの領域について説明する 2 部構成のブログ投稿シリーズを準備しました。
Content: "<p><strong>2016 年 8 月 5 日の更新:</strong> パフォーマンスに関するヒントは、DocumentDB のパフォーマンスに関するヒントに関 <em><a href=\"https://azure.microsoft.com/documentation/articles/documentdb-performance-tips/\">するドキュメント記事で文書化および</a></em> 更新されました。</p>\n\n<p><b>Azure DocumentDB &ndash; ヒント第 1</b> 部<a href=\"https://azure.com/docdb\">の Azure DocumentDB</a> のパフォーマンスパフォーマンスを向上することで、アプリケーションのニーズに最適にデータベースのパフォーマンスを最適化できます。&nbsp;Azure&rsquo; DocumentDB のパフォーマンスに影響を与える多くの領域について説明する 2 部構成のブログ投稿シリーズを準備しました。 パート 1 では、DocumentDB で使用できるネットワークと SDK の構成オプションと、パフォーマンスへの影響について説明します。 パート <a href=\"https://azure.microsoft.com/blog/2015/01/27/performance-tips-for-azure-documentdb-part-2/\">2 では</a> 、インデックス作成ポリシー、スループットの最適化、整合性レベルについて説明します。&nbsp; パフォーマンス チューニングに関する推奨事項と同様に、これらのヒントの 1 つ一つが使用事例に当てはめられない場合がありますが、この情報をガイドとして使用して、アプリケーションに対して適切な設計上の選択を行う際に役立ててください。</p>\n\n<h1>ネットワーク</h1>\n\n<p><b>ネットワーク ヒント #1 接続ポリシー - パフォーマンスを向上させる直接接続モードを使用する</b> まず、接続&rsquo;ポリシーを確認します。 クライアントが Azure DocumentDB に接続する方法は、特に監視対象となるクライアント側の待機時間の観点から、パフォーマンスに重要な影響を及ぼします。 クライアント接続ポリシーの接続モードと接続プロトコルを構成するには、2 &ndash; <i>つの主要</i> な構成設定 <i>を使用できます</i>。&nbsp; 次の 2 つのモードを使用できます。</p>\n\n<ol>\n <li>ゲートウェイ モード (既定値)</li>\n <li>直接モード</li>\n</ol>\n\n<p>DocumentDB は分散ストレージ システムであり、コレクションやドキュメントのような DocumentDB リソースは多数のマシンにパーティション分割され、各パーティションは高可用性のためにレプリケートされます。 論理アドレスから物理アドレスへの変換は、リソースとして内部的に使用できるルーティング テーブルに保持されます。 ゲートウェイ モードでは、DocumentDB ゲートウェイ コンピューターがこのルーティングを実行します。これにより、クライアント コードを簡潔にすることができます。 クライアント アプリケーションは、要求を DocumentDB ゲートウェイ コンピューターに発行します。このコンピューターは、要求内の論理 URI をバックエンド ノードの物理アドレスに変換し、要求を適切に転送します。&nbsp;逆に、ダイレクト モードでは、クライアントは&ndash;&ndash;、このルーティング テーブルのコピーを保守し、定期的に更新してから、バックエンド DocumentDB ノードに直接接続する必要があります。 ゲートウェイ モードは、すべての SDK プラットフォームでサポートされ、構成された既定値です。&nbsp; 厳密なファイアウォール制限がある企業ネットワーク内でアプリケーションを実行する場合は、標準の HTTPS ポートと単一のエンドポイントを使用するゲートウェイ モードが最適な選択肢です。 ただし、パフォーマンスのトレードオフは、データが DocumentDB に読み取りまたは書き込まれるごとに、ゲートウェイ モードに追加のネットワーク ホップが含まれるという問題です。&nbsp;&nbsp; このため、ダイレクト モードでは、ネットワーク ホップが少なによりパフォーマンスが向上します。 <i>ダイレクト モードは現在、.NET SDK でのみサポート</i>されますが、後続の SDK 更新で他のプラットフォームで使用できます<i>。&nbsp;クライアント接続オプションの詳細については、こちらを<a href=\"https://azure.microsoft.com/en-us/documentation/articles/documentdb-interactions-with-resources/\">参照してください</a>。</i> <b>ネットワークヒント #2 接続ポリシー - パフォーマンスを向上させる TCP プロトコルを使用する</b> ダイレクト モードを利用する場合は、次の 2 つのプロトコル オプションを使用できます。</p>\n\n<ol>\n <li>TCP</li>\n <li>HTTPS</li>\n</ol>\n\n<p>DocumentDB は、HTTPS を介したシンプルなオープン RESTful プログラミング モデルを提供します。 さらに、通信モデルでは RESTful で、.NET クライアント SDK を通じて利用できる効率的な TCP プロトコルも提供されます。 最適なパフォーマンスを実現するために、可能であれば TCP プロトコルを使用します。 接続モードは、ConnectionPolicy パラメーターを使用して DocumentClient インスタンスの作成時に構成されます。 直接モードを使用する場合、ConnectionPolicy パラメーター内でプロトコルも設定できます。</p>\n\n<pre class=\"prettyprint\">\n            var serviceEndpoint = new Uri(&quot;https://contoso.documents.net&quot;);\n            var authKey = new &quot;your authKey from Azure Mngt Portal&quot;;\n            DocumentClient client = new DocumentClient(serviceEndpoint, authKey, \n            new ConnectionPolicy\n            {\n                ConnectionMode = ConnectionMode.Direct,\n                ConnectionProtocol = Protocol.Tcp\n            });</pre>\n\n<p><i>TCP は直接モードでのみサポートされます。ゲートウェイ モードが使用されている場合、HTTPS プロトコルは常にゲートウェイとの通信に使用され、ConnectionPolicy の Protocol 値は無視されます。</i> <a href=\"https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/ConnectionPolicy.png\"><img alt=\"ConnectionPolicy\" height=\"338\" src=\"https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/ConnectionPolicy.png\" width=\"623\"></a><em></em>接続ポリシーに示されているネットワーク ヒント <b>#3: OpenAsync</b> を呼び出して最初の要求での起動待機時間を回避する 既定では、アドレス ルーティング テーブルをフェッチする必要があるため、最初の要求の待機時間が長くなります。 最初の要求でこのスタートアップ待機時間を回避するには、初期化中に次のように OpenAsync() を 1 回呼び出す必要があります。</p>\n\n<pre class=\"prettyprint\">\nawait client.OpenAsync();</pre>\n\n<p><b>ネットワークヒント #4: パフォーマンスのために同じ Azure リージョンにクライアントを照合する</b> DocumentDB に要求を行い、応答を受信する間のネットワーク待機時間が長くなる可能性があります。 この待機時間は、クライアントから Azure データセンターの境界への要求によって実行されるルートに応じて、要求によって異なる可能性があります。 可能な限り短い待機時間を実現するには、呼び出し元のアプリケーションがプロビジョニングされた DocumentDB エンドポイントと同じ Azure リージョン内に確保されます。 <a href=\"https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/DeploymentConsiderations.png\"><img alt=\"DeploymentConsiderations\" height=\"279\" src=\"https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/DeploymentConsiderations.png\" width=\"517\"></a><em> デプロイに関する考慮事項を示します</em></p>\n\n<h1>SDK の使用例</h1>\n\n<p><b>SDK 使用法のヒント #1: アプリケーションの有効期間中にシングルトン DocumentDB クライアントを使用する</b> 各 DocumentClient インスタンスはスレッド セーフであり、ダイレクト モードで動作するときに効率的な接続管理とアドレス キャッシュを実行します。 DocumentClient による効率的な接続管理とパフォーマンスの向上を実現するために、アプリケーションの有効期間中は、AppDomain ごとに DocumentClient の単一のインスタンスを使用することをお勧めします。 <b>SDK 使用法のヒント #2: 読み取り待機時間を短縮するドキュメントとコレクションの SelfLinks をキャッシュする</b> Azure DocumentDB では、各ドキュメントにはシステムによって生成された selfLink があります。 これらの selfLink は、ドキュメントの有効期間中は一意であり、変更できないと保証されます。 selfLink を使用して 1 つのドキュメントを読み取る方法は、1 つのドキュメントを取得する最も効率的な方法です。 selfLink の不使性のため、読み取りパフォーマンスを最適化するために、可能な限り selfLinks をキャッシュする必要があります。</p>\n\n<pre class=\"prettyprint\">\nDocument document = await client.ReadDocumentAsync(&quot;/dbs/1234/colls/1234354/docs/2332435465&quot;);</pre>\n\n<p>ただし、&rsquo;読み取りシナリオでアプリケーションがドキュメント selfLink&rsquo; を使用できるとは限りない場合があります。この場合、ドキュメントを取得する次に最も効率的な方法は、ユーザーが指定した Id&nbsp; プロパティを使用してドキュメントを照会することです。例えば：</p>\n\n<pre class=\"prettyprint\">\nIDocumentQuery&lt;Document&gt; query = (from doc in client.CreateDocumentQuery(colSelfLink) where doc.Id == &quot;myId&quot; select document).AsDocumentQuery(); \n            Document myDocument = null;\n            while (query.HasMoreResults)\n            {\n                FeedResponse&lt;Document&gt; res = await query.ExecuteNextAsync&lt;Document&gt;();\n                if (res.Count != 0) {\n                    myDocument = res.Single();\n                    break;\n                }\n           }</pre>\n\n<p><b>SDK 使用法のヒント #3: パフォーマンス</b>を向上させるクエリ/読み取りフィードのページ サイズを調整する読み取りフィード機能 (ReadDocumentFeedAsync など) を使用してドキュメントの一括読み取りを実行する場合、または DocumentDB SQL クエリを発行する場合、結果セットが大きすぎる場合、結果はセグメント化された方法で返されます。 既定では、100 項目または 1 MB (先に達した方) のチャンク単位で結果が返されます。 該当する結果を取得するために必要なネットワーク ラウンド トリップの数を減らすには、x-ms-max-item-count 要求ヘッダーを使用してページ サイズを最大 1000 に増やします。 ユーザー インターフェイスまたはアプリケーション API が一度に返す結果が 10 個だけである場合など、いくつかの結果のみを表示する必要がある場合は、読み取りとクエリに使用されるスループットを減らすために、ページ サイズを 10 に減らすることもできます。 使用可能な DocumentDB SDK を使用してページ サイズを設定することもできます。&nbsp; 例えば：</p>\n\n<pre class=\"prettyprint\">\nIQueryable&lt;dynamic&gt; authorResults =\nclient.CreateDocumentQuery(documentCollection.SelfLink, &quot;SELECT p.Author FROM Pages p WHERE p.Title = &#39;About Seattle&#39;&quot;, new FeedOptions { MaxItemCount = 1000 });</pre>\n\n<h1>まとめ</h1>\n\n<p>これらのヒントの 1 つ以上が、DocumentDB の使用に役立ち、適用できるものに見つかったと思います。&nbsp;この<a href=\"https://azure.microsoft.com/blog/2015/01/27/performance-tips-for-azure-documentdb-part-2/\">ブログ シリーズのパート 2</a> では、引き続き説明し、インデックス作成ポリシー、スループットの最適化、整合性レベルについて説明します。&nbsp;さらに、DocumentDB&rsquo; の機能と最も価値のあるエクスペリエンスについてお聞かしいと思います。&nbsp;DocumentDB フィードバック フォーラムのMicrosoft Azureを<a href=\"https://feedback.azure.com/forums/263030-documentdb?filter=top&amp;page=1\">送信してください</a>。&nbsp;DocumentDB をまだ&rsquo;試していない場合は、ここから始<a href=\"https://azure.microsoft.com/en-us/services/documentdb/\">めましょう</a>。</p>"
