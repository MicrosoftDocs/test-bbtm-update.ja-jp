### YamlMime:Yaml
ms.openlocfilehash: 668785ba88f126b9428fff1f7ccfc744c1044a33
ms.sourcegitcommit: d03bdc7fe5447adb6530886aab848b75fe8fa8ee
ms.translationtype: MT
ms.contentlocale: ja-JP
ms.lasthandoff: 03/11/2022
ms.locfileid: "139904944"
Slug: basic-monitoring-with-batch-powershell-2
Title: Batch PowerShell を使用した基本的な監視
Summary: Azure PowerShell SDK の 0.8.15 リリースでは、4 つの新しい BatchPowerShell コマンドレットが配布されています。
Content: "昨年 10 月に、新しい Azure Batch サービスと共に、ほとんどのタスクの実行に役立つ PowerShell コマンドレットをリリースしました。 Azure PowerShell SDK の 0.8.15 リリースでは、<strong>Get-AzureBatchPool</strong>、<strong>Get-AzureBatchWorkItem</strong>、<strong>Get-AzureBatchJob</strong>、<strong>Get-AzureBatchTask</strong> の 4 つの新しい BatchPowerShell コマンドレットが配布されています。 これらのコマンドレットを使用して、Batch ワークロードの状態を監視できます。\n\n&nbsp;\n<h4>作業の開始</h4>\nSDK のインストール<a href=\"https://blogs.technet.com/b/windowshpc/archive/2014/10/28/using-azure-powershell-to-manage-azure-batch-account.aspx\" target=\"_blank\">と Batch</a> アカウントの作成については、Azure PowerShellの投稿を参照してください。 アカウントを作成したら、Get-AzureBatchAccountKeys コマンドレットを呼び出し、出力 BatchAccountContext を変数に格納します。\n<pre class=\"prettyprint\">$context = Get-AzureBatchAccountKeys \"&lt;account&gt;\"</pre>\n&nbsp;\n\nこの BatchAccountContext オブジェクトには、アカウント名とキーが格納されます。 Batch サービスと対話するコマンドレットには、この BatchAccountContext オブジェクトを渡す必要がある –BatchContext パラメーターがあります。 既定では、認証に主キーが使用されますが、BatchAccountContext の KeyInUse プロパティを変更することで、使用するキーを明示的に選択できます。\n<pre class=\"prettyprint\">$context.KeyInUse = \"Secondary\"</pre>\n<h4></h4>\n&nbsp;\n<h4>データのクエリ</h4>\n次のGet-AzureBatchWorkItem使用して、WorkItems を表示します。 他のパラメーターを指定せずに BatchAccountContext オブジェクトを渡すだけの場合は、アカウントのすべての WorkItem を照会します\n<pre class=\"prettyprint\">Get-AzureBatchWorkItem -BatchContext $context</pre>\n&nbsp;\n\n–Filter 引数を使用して OData フィルターを指定して、関心のある WorkItem のみを取り戻す方法も可能です。\n<pre class=\"prettyprint\">$filter = \"startswith(name,'myWork') and state eq 'active'\"\n\nGet-AzureBatchWorkItem -Filter $filter -BatchContext $context \n</pre>\n&nbsp;\n\n–Name パラメーターを使用して、名前で特定の WorkItem のクエリを実行することもできます。\n<pre class=\"prettyprint\">Get-AzureBatchWorkItem -Name \"myWorkItem\" -BatchContext $context</pre>\n&nbsp;\n\nWorkItem を作成したら、次のコマンドレットをGet-AzureBatchJobジョブのクエリを実行できます。 Get-AzureBatchWorkItem の出力を Get-AzureBatchJob にパイプ処理する場合は、WorkItem の下のジョブに対してクエリを実行し、OData フィルターを指定することもできます。\n<pre class=\"prettyprint\">Get-AzureBatchWorkItem -Name \"myWorkItem\" -BatchContext $context | Get-AzureBatchJob -Filter \"state eq 'active'\" -BatchContext $context</pre>\n&nbsp;\n\nWorkItem とジョブ名を直接指定することで、特定のジョブを取得することもできます。\n<pre class=\"prettyprint\">Get-AzureBatchJob -WorkItemName \"myWorkItem\" -Name \"job-0000000001\" -BatchContext $context</pre>\n&nbsp;\n\n同様に、ジョブの出力Get-AzureBatchJobパイプGet-AzureBatchTaskジョブの下のタスクを照会できます。\n<pre class=\"prettyprint\">Get-AzureBatchJob -WorkItemName \"myWorkItem\" -Name \"job-0000000001\" -BatchContext $context | Get-AzureBatchTask -BatchContext $context</pre>\n&nbsp;\n\n特定のタスクを取得するには、WorkItem、Job、および Task の名前を指定します。\n<pre class=\"prettyprint\">Get-AzureBatchTask \"myWorkItem\" \"job-0000000001\" \"task1\" -BatchContext $context</pre>\n\n<h4></h4>\n<h4>最大カウント</h4>\n既定では、各コマンドレットは最大 1,000 オブジェクトを返します。 この制限が発生した場合は、フィルターを調整して返されるオブジェクトを少なくするか、–MaxCount パラメーターを使用して最大カウントを明示的に設定できます。 上限を削除するには、MaxCount を 0 以下に設定します。\n<pre class=\"prettyprint\">Get-AzureBatchWorkItem -MaxCount 2500 -BatchContext $context \n</pre>"
