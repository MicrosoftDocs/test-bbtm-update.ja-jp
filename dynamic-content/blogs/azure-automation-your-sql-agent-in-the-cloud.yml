### YamlMime:Yaml
ms.openlocfilehash: e63e8c893234c56190a4db827db8ed49463ca78e
ms.sourcegitcommit: d03bdc7fe5447adb6530886aab848b75fe8fa8ee
ms.translationtype: MT
ms.contentlocale: ja-JP
ms.lasthandoff: 03/11/2022
ms.locfileid: "139909342"
Slug: azure-automation-your-sql-agent-in-the-cloud
Title: 'Azure Automation: クラウド内の SQL エージェント'
Summary: このブログでは、Azure Automation サービスを利用して、特定のデータベースが最大サイズの容量に近づくときにテーブルを切り捨てるという顧客の要求シナリオを実現する方法について説明します。  特定のシナリオを対象としますが、強調表示されている例では、通常は SQL Server エージェントを実行する必要がある、数え切れないほどの Azure SQL DB シナリオを実現するためのフレームワークが提供されています。
Content: "定期的なメンテナンスまたは管理ジョブをスケジュールする機能により、1 つ以上のデータベースを管理するユーザーの生活が大幅に容易になります。SQL Serverエージェントは、オンプレミスまたは Azure 上の仮想マシンSQL Serverを利用するユーザーにこの機能を提供します。ただし、Azure SQL Database の PaaS オファリングを好むユーザーの場合、SQL Server エージェントが使用可能な機能ではないと認識しても時間はかから\" られません。その結果、多くの人<a href=\"https://feedback.azure.com/forums/217321-sql-database/suggestions/1079035-add-sql-server-agent-or-its-ability-to-create-cust\">から</a> <a href=\"https://social.msdn.microsoft.com/Forums/windowsazure/en-US/62127a81-8078-4926-9395-2ed7b5e07f4a/how-to-create-a-scheduled-task-for-sql?forum=ssdsgetstarted\"></a> <a href=\"https://social.msdn.microsoft.com/Forums/windowsazure/en-US/e86f3cab-2c08-410e-837c-34c5566ae45d/monitoring-schema-size-in-sql-azure?forum=ssdsgetstarted\"></a>、さまざまなフォーラムでこの機能を提供したいという願望が示されています。\n\n最近 <a href=\"https://blogs.technet.com/b/in_the_cloud/archive/2014/04/15/announcing-the-microsoft-azure-automation-preview.aspx\">パブリック プレビュー</a> サービス <a href=\"https://account.windowsazure.com/PreviewFeatures?fid=automation\">として</a>導入された <a href=\"https://azure.microsoft.com/en-us/services/automation/\">Azure</a> <a href=\"https://azure.microsoft.com/en-us/documentation/services/automation/\">Automation</a> は、強力で必要な PowerShell ワークフロー実行サービスを Azure プラットフォームに提供します。これらの困難なメンテナンス タスクを自動化し、一般的なサービス エクスペリエンス内に便利にカプセルAzure portalしました。単純に PowerShell ワークフロー (Azure Automation では \"Runbook\" と呼ばれる) を作成し、クラウドにアップロードして、Runbook を実行するスケジュールを設定します。 これは簡単です。\n\nこのコンテキストを考えると、Azure Azure Automation DB 用の SQL Server Agent の役割を果たSQLされますか?簡単な答えとしては \"はい\" になります。このブログでは、Azure Automation サービスを利用して、特定のデータベースが最大サイズの容量に近づく<a href=\"https://social.msdn.microsoft.com/Forums/en-US/62127a81-8078-4926-9395-2ed7b5e07f4a/how-to-create-a-scheduled-task-for-sql?forum=ssdsgetstarted\"></a>ときにテーブルを切り捨てるという顧客の要求シナリオを実現する方法について説明します。特定のシナリオを対象としますが、強調表示されている例では、通常は SQL Server エージェントを実行する必要がある、数え切れないほどの Azure SQL DB シナリオを実現するためのフレームワークが提供されています。\n\nAzure Automation の使用開始ガイド<a href=\"https://azure.microsoft.com/en-us/documentation/articles/automation-create-runbook-from-samples/\"></a> <a href=\"https://blogs.technet.com/b/keithmayer/archive/2014/04/04/step-by-step-getting-started-with-windows-azure-automation.aspx\"></a> <a href=\"https://blogs.technet.com/b/cbernier/archive/2014/04/08/microsoft-azure-automation.aspx\"></a>がいくつかあるので、追跡に切り取ります (Azure Automation 固有の質問がある場合は、ここに投稿<a href=\"https://social.msdn.microsoft.com/Forums/windowsazure/en-US/home?forum=azureautomation&amp;filter=alltypes&amp;sort=lastpostdesc\">してください</a>)。\n\n次に示すのは、特定の論理サーバーのデータベースを反復処理し、データベース名の配列と現在のサイズを取得する Runbook の例です (Runbook はこちら [<a href=\"https://gallery.technet.microsoft.com/scriptcenter/Azure-Automation-Your-SQL-30f8736b\">リンク</a>] からダウンロードできます)。その後、Runbook はそれぞれのデータベースに対して最大サイズのクエリを実行し、データベースのサイズが最大サイズの指定した範囲内にある場合、Runbook は指定されたテーブルを切り捨てる必要があります。\n<pre class=\"prettyprint\">workflow Remove-DataFromSqlDbTable \n{\n    param\n    (\n        # Fully-qualified name of the Azure DB server \n        [parameter(Mandatory=$true)] \n        [string] $SqlServerName,\n\n        # Credentials for $SqlServerName stored as an Azure Automation credential asset\n        # When using in the Azure Automation UI, please enter the name of the credential asset for the \"Credential\" parameter\n        [parameter(Mandatory=$true)] \n        [PSCredential] $Credential\n    )\n\n    inlinescript\n    {\n\n        # Setup credentials   \n        $ServerName = $Using:SqlServerName\n        $UserId = $Using:Credential.UserName\n        $Password = ($Using:Credential).GetNetworkCredential().Password\n\n        # Setup threshold for % of maximum DB size\n        $Threshold = 0.8\n\n        # Create connection to Master DB\n        $MasterDatabaseConnection = New-Object System.Data.SqlClient.SqlConnection\n        $MasterDatabaseConnection.ConnectionString = \"Server = $ServerName; Database = Master; User ID = $UserId; Password = $Password;\"\n        $MasterDatabaseConnection.Open();\n\n        # Create command to query the current size of active databases in $ServerName\n        $MasterDatabaseCommand = New-Object System.Data.SqlClient.SqlCommand\n        $MasterDatabaseCommand.Connection = $MasterDatabaseConnection\n        $MasterDatabaseCommand.CommandText = \n            \"\n                SELECT \n                       database_name,\n                       storage_in_megabytes [SizeMB]\n                FROM \n                       [sys].[databases] as db\n                INNER JOIN\n                       [sys].[resource_usage] as rs\n                ON\n                       rs.database_name = db.name\n                WHERE\n                       [time] = (SELECT Max([time]) FROM [sys].[resource_usage] WHERE database_name = db.name)\n                GROUP BY \n                       database_name, storage_in_megabytes\n            \"\n        # Execute reader and return tuples of results &lt;database_name, SizeMB&gt;\n        $MasterDbResult = $MasterDatabaseCommand.ExecuteReader()\n\n        # Proceed if there is at least one database\n        if ($MasterDbResult.HasRows)\n        {\n            # Create connection for each individual database\n            $DatabaseConnection = New-Object System.Data.SqlClient.SqlConnection\n            $DatabaseCommand = New-Object System.Data.SqlClient.SqlCommand\n\n            # Iterate through each database under $ServerName\n            while($MasterDbResult.Read())\n            {\n                $DbName = $MasterDbResult[0]\n                $DbSize = $MasterDbResult[1]\n\n                # Apply conditions for user databases (i.e., not master DB)\n                if($DbName -ne \"Master\")\n                {\n                    # Setup connection string for $DbName\n                    $DatabaseConnection.ConnectionString = \"Server=$ServerName; Database=$DbName; User ID=$UserId; Password=$Password;\"\n                    $DatabaseConnection.Open();\n\n                    # Create command for a specific database $DBName\n                    $DatabaseCommand.Connection = $DatabaseConnection\n                    $DatabaseCommand.CommandText = \"SELECT DATABASEPROPERTYEX ('$DbName','MaxSizeInBytes')\"\n\n                    # Execute query and return single scalar result \n                    $DbResultBytes = $DatabaseCommand.ExecuteScalar()\n                    $MaxDbSizeMB = $DbResultBytes/(1Mb)\n\n                    # Calculate $TargetDbSize\n                    $TargetDbSize = $MaxDbSizeMB * $Threshold\n\n                    # When the current $DbSize is greater than a percentage ($Threshold) of the $MaxDbSizeMB\n                    # then perform a certain action, in this example, truncate a table on that database\n                    if($DbSize -gt $TargetDbSize) \n                    {\n                        Write-Output \"Perform action on $DbName ($DbSize MB &gt; $TargetDbSize MB)\"\n\n                        # ExampleTable is a place holder for a table that holds a large volume of less important and expendable data\n                        # that can be truncated to save space on the database.\n\n                        $DatabaseCommand.CommandText = \"TRUNCATE TABLE [dbo].[ExampleTable]\"\n                        $NonQueryResult = $DatabaseCommand.ExecuteNonQuery()\n                    }\n                    else\n                    {\n                        Write-Output \"Do not perform action on $DbName ($DbSize MB &lt;= $TargetDbSize MB)\"\n                    }\n\n                    # Close connection to $DbName\n                    $DatabaseConnection.Close()        \n                }\n            }\n        } \n\n        # Close connection to Master DB\n        $MasterDatabaseConnection.Close() \n    }    \n}</pre>\nアプリにアップロードAzure Automation Runbook は、変更、テスト、オンデマンドでの実行、またはスケジュールへのリンクが可能です。実際、Runbook 全体は Azure Portal で開発できます。Azure Automation、IntelliSense、構文の色分け、およびテキスト検索機能を備え、便利な作成エクスペリエンスを提供します。次のスクリーンショットに示すのは、前述の Runbook を毎日午前 0 時に実行するスケジュールです。\n\n<a href=\"https://acom.azurecomcdn.net/80C57D/blogmedia/blogmedia/2014/06/Screenshot.png\"><img style=\"padding-top: 0px; padding-left: 0px; padding-right: 0px; border-width: 0px;\" title=\"Screenshot\" alt=\"Screenshot\" src=\"https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/Screenshot_thumb.png\" width=\"1028\" height=\"225\" border=\"0\" /></a>\n\nご覧のように、Azure Automationは、非常に拡張可能な PowerShell ワークフロー実行エンジンとジョブ スケジューラを提供します。既に示した機能を超えて、Azure Automation に出荷されている Azure PowerShell コマンドレットを使用して、Azure Automation Runbook 内から新しいデータベースや SQL サーバーのプロビジョニングなど、より高いレベルの SQL DB タスクを実行することもできます。データベースのプロビジョニング、容量管理、インデックスのメンテナンス、データベースのパフォーマンス レベルの増減など、Azure Automation の機能を組み合わせて使用すると、Azure SQL DB の管理タスクとメンテナンス タスクを自動化するために必要なプリミティブをクラウド開発/運用できます。\n\nまだAzure Automationユーザーではありませんか? <a href=\"https://account.windowsazure.com/PreviewFeatures?fid=automation\">プレビューにサインアップし</a> 、次のガイド <a href=\"https://azure.microsoft.com/en-us/documentation/articles/automation-create-runbook-from-samples/\">はじめにしてください</a>。"
