### YamlMime:Yaml
ms.openlocfilehash: 8dbe37dd714ab571463f580f09de64d277b8f290
ms.sourcegitcommit: d03bdc7fe5447adb6530886aab848b75fe8fa8ee
ms.translationtype: MT
ms.contentlocale: ja-JP
ms.lasthandoff: 03/11/2022
ms.locfileid: "139893760"
Slug: windows-authentication-in-service-fabric-and-asp-net-core-2-0
Title: Service Fabric および ASP.NET Core 2.0 での Windows 認証
Summary: 最近では、お客様のチームは、ASP.NET Core 2.0 framework 上に構築された既存の reliable (ステートレス) サービスに対して、セキュリティで保護された通信機能を構成する必要がありましたが、Service Fabric のソリューションに取り組んでいました。 この記事では、重要な側面について説明し、これらの要件を考慮して、Service Fabric (SF) Reliable service ステートレスサービスを適切に構成する方法について説明します。
Content: "<p>最近では、お客様のチームは、ASP.NET Core 2.0 framework 上に構築された既存の reliable (ステートレス) サービスに対して、セキュリティで保護された通信機能を構成する必要がありましたが、Service Fabric のソリューションに取り組んでいました。 具体的には、 <strong>Windows 認証</strong>機能を構成し、web サーバーとして<strong>WebListener</strong>を選択して、リモート Windows クライアントからの HTTP 要求を処理する必要がありました。</p> <p>一部の ASP.NET パッケージとライブラリの名前にわずかな違いがあることがわかります。また、以前のバージョン (1.x) に関して、ASP.NET の最新バージョンを使用して、ステートレスサービスで weblistener を構成する方法についても説明します。 この記事では、これらの要件を考慮して、Service Fabric (SF) Reliable service ステートレスサービスを適切に構成する方法について説明します。</p> <p>Service Fabric SDK for Windows (v 5.7.198) の最新リリースで提供される機能、機能強化、およびサポートを活用します。</p> <p>他にも、次の機能に重点を置いておきます。</p> <ul> <li><strong>ASP.NET Core 2.0</strong>の <code>Microsoft.ServiceFabric.AspNetCore.</code> * サポート:NuGet パッケージは、最新のクラウド対応 web アプリケーションを構築するためのオープンソースおよびクロスプラットフォームフレームワークの最新メジャーバージョンである ASP.NET Core 2.0 をサポートするようになりました。 </li></ul> <p>完全にドキュメント化されたリリースノートのページについては、 <a href=\"https://blogs.msdn.microsoft.com/azureservicefabric/2017/08/09/release-of-sdk-2-7-198-and-runtime-5-7-198-for-windows\">Azure Service Fabric チームのブログ</a>を参照してください。</p> <p>次のセクションでは、Visual Studio によって提供される<strong>ステートレス ASP.NET Core</strong>プロジェクトテンプレートを使用して、ステートレスサービスとしてパッケージ化された単純な ASP.NET Core 2.0 アプリケーションを構築します。 次に、Windows 認証された呼び出しを実行するようにアプリケーションのセキュリティを構成します。</p> <p>前提条件:</p> <ul> <li>このサンプルはローカル SF クラスターに構築およびデプロイされているため、SF SDK と Runtime の最新バージョンが Web Platform Installer を使用してローカルコンピューターにインストールされていること、およびクラスターが1ノード/5 ノード構成で開始されていることを確認してください。  <li>最新の<a href=\"https://www.microsoft.com/net/core\" target=\"_blank\"> .NET Core SDK </a>がインストールされている (v 2.0.0)  <li>ASP.NET Core 2.0 をサポートする Visual Studio 2017 がインストールされています (v 15.3) </li></li></li></ul> <h2>Service Fabric アプリケーション</h2> <p>1.管理者として Visual Studio を開きます。<br>2.Service Fabric アプリケーションを作成し、 <strong>MyApplication</strong>という名前を指定します。</p> <p><a href=\"https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/ba05be9b-4b35-474e-9286-e0d65e4fa76f.jpg\"><img title=\"service fabric-アプリケーション\" style=\"background-image: none; float: none; margin-left: auto; display: block; margin-right: auto; border-image: none\" border=\"0\" alt=\"service-fabric-application\" src=\"https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/f9993162-fe74-4c40-bbcd-323c203487e5.jpg\" width=\"1024\" height=\"709\"></a><br>3.ステートレス ASP.NET Core サービスを作成し、 <strong>MyAspNetService</strong>という名前を指定します。</p> <p><a href=\"https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/de8d1f8d-f48d-4e42-9a57-f66675141c72.jpg\"><img title=\"マイ asp.net-サービス\" style=\"background-image: none; float: none; margin-left: auto; display: block; margin-right: auto; border-image: none\" border=\"0\" alt=\"my-asp-net-service\" src=\"https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/eb27a399-6ed5-404c-957b-f98a94740c22.jpg\" width=\"1020\" height=\"768\"></a><br>4.次のダイアログで<strong>ASP.NET Core 2.0</strong>を選択していることを確認します。 この例では、 <strong>空</strong> のプロジェクトテンプレートを使用し、認証方法として認証を使用し <strong>ませんでし</strong> た (プログラムによって設定します)。</p> <p><a href=\"https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/27800507-89d7-41ba-be1a-d3029ef7c348.png\"><img title=\"指定\" style=\"background-image: none; float: none; margin-left: auto; display: block; margin-right: auto; border-image: none\" border=\"0\" alt=\"empty\" src=\"https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/1b3703f5-fcf2-421b-8b49-9c15901cfc40.png\" width=\"1024\" height=\"668\"></a></p> <p>Visual Studio によってアプリケーションとサービスプロジェクトがセットアップされるまで待ってから、MyAspNetService ファイルに移動します。このファイルには、目的で使用した SF ステートレスサービスを表すクラスが含まれています。</p> <p>次に、メソッドの <code>CreateServiceInstanceListeners(…)</code> シグネチャと本文を示します。開発者はこれをオーバーライドして、このサービスインスタンスに対してさまざまなリスナーを作成できます。カスタムのリスナーも作成できます。</p><pre class=\"prettyprint\">protected override IEnumerable&lt;ServiceInstanceListener&gt; CreateServiceInstanceListeners()\n{\nreturn new ServiceInstanceListener[]\n{\nnew ServiceInstanceListener(serviceContext =&gt;\nnew KestrelCommunicationListener(serviceContext, \"ServiceEndpoint\", (url, listener) =&gt;\n{\nServiceEventSource.Current.ServiceMessage(serviceContext, $\"Starting Kestrel on {url}\");\n\n新しい WebHostBuilder () を返します。UseKestrel ()。ConfigureServices (services = &gt; services    \n                                            .AddSingleton &lt; StatelessServiceContext &gt; (serviceContext))。UseContentRoot (ディレクトリ。 GetCurrentDirectory ())。UseStartup &lt; スタートアップ &gt; ()。UseServiceFabricIntegration (リスナ, ServiceFabricIntegrationOptions)。UseUrls (url)。Build ();} ) ) };}\n</pre>\n\n\n<p>ご覧のように、 <strong>Kestrel</strong> に基づく通信リスナーは、構成されている <code>(ServiceEndpoint)</code> 唯一のサービスエンドポイントの既定のリスナーとして既に設定されています。 ASP.NET Core には、次に簡単に説明する2つのサーバー実装が用意されています。 Windows 認証がサポートされているため、web サーバーとして<strong>WebListener</strong>を選択しました。</p>\n<h3>Kestrel</h3>\n<p>Kestrel は、クロスプラットフォームアーキテクチャでの非同期 i/o 操作のために、 <strong>libuv</strong> ライブラリに基づくクロスプラットフォーム HTTP サーバーです。 前に示したように、kestrel は ASP.NET Core 新しいプロジェクトテンプレートに既定で含まれる web サーバーです。</p>\n<p>次の機能をサポートしています。</p>\n<ul>\n<li>HTTPS\n<li>Websocket を有効にするために使用される非透過的なアップグレード\n<li>Nginx の背後にある高パフォーマンスの UNIX ソケット </li></li></li></ul>\n<h3>WebListener</h3>\n<p>WebListener は、カーネルモードドライバーに <code>Http.</code> <code>Sys</code> 基づく Windows の HTTP サーバーです。</p>\n<p>WebListener は、次の機能をサポートします。</p>\n<ul>\n<li>Windows 認証\n<li>ポート共有\n<li>SNI を使用する HTTPS\n<li>HTTP/2 over TLS (Windows 10)\n<li>直接ファイル伝送\n<li>応答キャッシュ\n<li>WebSocket (Windows 8)\n<li>サポートされている Windows バージョン:\n<ul>\n<li>Windows 7 および Windows Server 2008 R2 以降 </li></ul></li></li></li></li></li></li></li></li></ul>\n<p><a href=\"https://docs.microsoft.com/en-us/aspnet/core/fundamentals/servers/weblistener\" target=\"_blank\">WebListener の web サーバー実装の詳細については、ASP.NET Core を</a>参照してください。</p>\n<p>次のようにメソッド <code>CreateServiceInstanceListeners(…)</code> を変更します。</p><pre class=\"prettyprint\">protected override IEnumerable&lt;ServiceInstanceListener&gt; CreateServiceInstanceListeners()\n{\nreturn new ServiceInstanceListener[]\n{\nnew ServiceInstanceListener(serviceContext =&gt;\nnew WebListenerCommunicationListener(serviceContext, \"ServiceEndpoint\", (url, listener) =&gt;\n{\nServiceEventSource.Current.ServiceMessage(serviceContext, $\"Starting WebListener on {url}\");\nreturn new WebHostBuilder()\n.UseHttpSys(\noptions =&gt;\n{\noptions.Authentication.Schemes = AuthenticationSchemes.Negotiate; // Microsoft.AspNetCore.Server.HttpSys\n                                                  options.Authentication.AllowAnonymous = false;\n                                                  /* Additional options */\n                                                  //options.MaxConnections = 100;\n                                                  //options.MaxRequestBodySize = 30000000;\n                                                  //options.UrlPrefixes.Add(\"https://localhost:5000\");\n                                              }\n                                      )\n                                      .ConfigureServices(\n                                           services =&gt; services\n                                               .AddSingleton&lt;StatelessServiceContext&gt;(serviceContext))\n                                      .UseContentRoot(Directory.GetCurrentDirectory())\n                                      .UseStartup&lt;Startup&gt;()\n.UseServiceFabricIntegration(listener, ServiceFabricIntegrationOptions.None)\n                                      .UseUrls(url)\n                                      .Build();\n}\n)\n)\n};\n}\n</pre>\n\n<p>ビルドを成功させるには、次の NuGet パッケージが必要です。</p>\n<ul>\n<li><code>Microsoft.ServiceFabric.AspNetCore.WebListener (v2.7.198)</code> \n<li><code>Microsoft.AspNetCore.Server.</code><code>HttpSys</code><code> (v2.0.0)</code> </li></li></ul>\n<p>使用領域を次に示します。</p><pre class=\"prettyprint\">using Microsoft.AspNetCore.Hosting;\nusing Microsoft.AspNetCore.Server.HttpSys;\nusing Microsoft.Extensions.DependencyInjection;\nusing Microsoft.ServiceFabric.Services.Communication.AspNetCore;\nusing Microsoft.ServiceFabric.Services.Communication.Runtime;\nusing Microsoft.ServiceFabric.Services.Runtime;\nusing System.Collections.Generic;\nusing System.Fabric;\nusing System.IO;</pre>\n<h2>考慮事項</h2>\n<ul>\n<li>パッケージ <code>Microsoft.AspNetCore.Server.WebListener</code> と <code>Microsoft.Net.Http.Server</code> は、前述の新しいパッケージ <code>Microsoft.AspNetCore.Server.</code> <code>HttpSys</code> に<strong>マージ</strong>されています。 一致するように名前空間が更新されました。 これは、の <code>UseWebListener()</code> 代わりに拡張メソッドを呼び出す <code>UseHttpSys()</code> と反映されます。 </li></ul>\n<ul>\n<li>Windows 認証は、次のように設定することにより、 <strong>httpsys オプション</strong>によって実行されます。 </li></ul>\n<p><code>options.Authentication.Schemes </code>列挙型に <code> AuthenticationSchemes.Negotiate</code></p>\n<p><code>options.Authentication.AllowAnonymous </code>none になります。</p>\n<p>HTTP.sys web サーバーの実装の詳細については ASP.NET Core を参照してください。</p>\n<ul>\n<li>次のように、コードに追加のオプション (コメント) を提供しました。\n<ul>\n<li>最大クライアント接続数\n<li>要求本文の最大サイズ\n<li>Url とポートの構成オプション </li></li></li></ul></li></ul>\n<h2>発行とテスト</h2>\n<p>アプリケーションを発行し、サービスインスタンスがローカルクラスター環境で稼働している場合は、サービスプロジェクトの ServiceManifest.xml で構成されたエンドポイントに対する HTTP 要求をシミュレートできます (この例では、 https://localhost:8234) )。</p>\n<p>クラスター: </p>\n<p><a href=\"https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/411f4d44-d952-404e-a119-1971237cc159.jpg\"><img title=\"クラスター\" style=\"background-image: none; float: none; margin-left: auto; display: block; margin-right: auto; border-image: none\" border=\"0\" alt=\"cluster\" src=\"https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/f38f33e2-3bd9-4797-807a-81c8b7d2bdf0.jpg\" width=\"1024\" height=\"432\"></a></p><pre class=\"prettyprint\">Snippet from ServiceManifest.xml:\n\n&lt;?xml version=\"1.0\" encoding=\"utf-8\"?&gt;\n&lt;ServiceManifest Name=\"MyAspNetServicePkg\"\n                 Version=\"1.0.0\"\n                 xmlns=\"\"\n                 xmlns:xsd=\"https://www.w3.org/2001/XMLSchema\"\n                 xmlns:xsi=\"https://www.w3.org/2001/XMLSchema-instance\"&gt;\n  &lt;ServiceTypes&gt;\n    &lt;!-- This is the name of your ServiceType. \n         This name must match the string used in RegisterServiceType call in Program.cs. --&gt;\n    &lt;StatelessServiceType ServiceTypeName=\"MyAspNetServiceType\" /&gt;\n  &lt;/ServiceTypes&gt;\n\n  &lt;!-- Code package is your service executable. --&gt;\n  &lt;CodePackage Name=\"Code\" Version=\"1.0.0\"&gt;\n    &lt;EntryPoint&gt;\n      &lt;ExeHost&gt;\n        &lt;Program&gt;MyAspNetService.exe&lt;/Program&gt;\n        &lt;WorkingFolder&gt;CodePackage&lt;/WorkingFolder&gt;\n      &lt;/ExeHost&gt;\n    &lt;/EntryPoint&gt;\n  &lt;/CodePackage&gt;\n\n  &lt;!-- Config package is the contents of the Config directoy under PackageRoot that contains an \n       independently-updateable and versioned set of custom configuration settings for your service. --&gt;\n  &lt;ConfigPackage Name=\"Config\" Version=\"1.0.0\" /&gt;\n\n  &lt;Resources&gt;\n    &lt;Endpoints&gt;\n      &lt;!-- This endpoint is used by the communication listener to obtain the port on which to \n           listen. Please note that if your service is partitioned, this port is shared with \n           replicas of different partitions that are placed in your code. --&gt;\n      &lt;Endpoint Protocol=\"http\" Name=\"ServiceEndpoint\" Type=\"Input\" Port=\"8234\" /&gt;\n    &lt;/Endpoints&gt;\n  &lt;/Resources&gt;\n&lt;/ServiceManifest&gt;</pre>\n\n<p><a href=\"https://github.com/alessandro-avila/azure-service-fabric-aspnetcore20-getting-started\" target=\"_blank\">GitHub リポジトリ</a>の完全に動作する例に進むことができます。 -AA</p>"
