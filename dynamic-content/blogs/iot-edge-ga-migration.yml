### YamlMime:Yaml
ms.openlocfilehash: 4c57f02dc166e71bcce4c06d1a85c47b43fb3ad2
ms.sourcegitcommit: d03bdc7fe5447adb6530886aab848b75fe8fa8ee
ms.translationtype: MT
ms.contentlocale: ja-JP
ms.lasthandoff: 03/11/2022
ms.locfileid: "139909762"
Slug: iot-edge-ga-migration
Title: 新しいIoT Edge GA への移行
Summary: お使IoT Edgeソリューションを GA ビットに今すぐ移行しましょう。
Content: >-
  <p>2018 年 6 月 27 日 (水) に、<a href="https://azure.microsoft.com/en-us/blog/azure-iot-edge-generally-available-for-enterprise-grade-scaled-deployments"></a>Azure IoT Edge の一般提供を発表しました。 このリリースでは、パブリック プレビュー ビットを既に使用しているユーザーに多くの新機能が追加されています。 Edge を使用したことがないAzure IoTは、<a href="https://docs.microsoft.com/en-us/azure/iot-edge/quickstart-linux">Linux</a> から始めるか、クイック スタート<a href="https://docs.microsoft.com/en-us/azure/iot-edge/quickstart">Windows</a>できます。 プレビュー ビットでプロジェクトを開始したユーザーは、最新のビットにアップグレードし、壊れる変更を統合する必要があります。&nbsp; これらの両方のプロセスの詳細を以下に示します。</p>


  <h2>最新のビットにアップグレードする</h2>


  <h3>プレビュー ビットをアンインストールする</h3>


  <p>次のコマンドを実行して、iotedgectl を使用して Edge デバイスからプレビュー ビットをアンインストールします。 プレビュー ビットを実行したことがないデバイスまたは VM に GA ビットをインストールする場合は、この手順をスキップできます。</p>


  <pre>

  iotedgectl uninstall</pre>


  <h3>プレビュー ランタイム コンテナー イメージを削除する</h3>


  <p>Docker &ldquo;rmi を使用&rdquo; して、Edge デバイスからプレビュー バージョンの Edge エージェントと Edge Hub のコンテナー イメージを削除します。 プレビュー ビットを実行したことがないデバイスまたは VM に GA ビットをインストールする場合は、この手順をスキップできます。</p>


  <h3>デプロイでプレビュー コンテナー イメージへの参照を削除する</h3>


  <p>IoT Edge セキュリティ デーモンには、Edge デバイスで使用される Edge エージェントと Edge Hub のバージョンをユーザーが指定できる機能が含まれています。 これにより、デバイス上のビットが更新される時間を制御できます。 これらのランタイム コンポーネントのバージョンは、デプロイで指定されます。 プレビュー中に作成されたデプロイには、プレビュー コンテナー イメージへの参照が含まれます。 GA コンテナー イメージを参照するために変更する必要があります。セキュリティ デーモンによってマシンがプレビュー ビットにダウングレードされていないことを確認します。 デプロイ スニペットの例を次に示します。</p>


  <pre>

  &quot;systemModules&quot;: {
       &quot;edgeAgent&quot;: {
           &quot;type&quot;: &quot;docker&quot;,
           &quot;settings&quot;: {
               &quot;image&quot;: &quot;<s>microsoft/azureiotedge-agent:1.0-preview</s>mcr.microsoft.com/azureiotedge-agent:1.0&quot;,
               &quot;createOptions&quot;: &quot;{}&quot;
           }
       },
       &quot;edgeHub&quot;: {
           &quot;type&quot;: &quot;docker&quot;,
           &quot;settings&quot;: {
               &quot;image&quot;: &quot;<s>microsoft/azureiotedge-hub:1.0-preview</s>mcr.microsoft.com/azureiotedge-hub:1.0&quot;,
               &quot;createOptions&quot;: &quot;{}&quot;
           },
           &quot;status&quot;: &quot;running&quot;,
           &quot;restartPolicy&quot;: &quot;always&quot;
       }
  },</pre>


  <h2>GA ビットのインストール</h2>


  <p><a href="https://docs.microsoft.com/en-us/azure/iot-edge/quickstart">Linux</a> および Windowsのクイック スタートでは<a href="https://docs.microsoft.com/en-us/azure/iot-edge/quickstart"></a>、これらの新しいインフラストラクチャ コンポーネントを使用IoT Edgeデバイスを設定する手順について説明します。 クイックスタートは、セキュリティ デーモンと呼ばれる GA で導入されたコンポーネントをインストールIoT Edge気づくと思います。 これは、エッジのセキュリティ保護に役立つ一連のコンポーネントである Edge Security Manager <a href="https://docs.microsoft.com/en-us/azure/iot-edge/quickstart">の一部です</a>。</p>


  <p>Edge IoT Edgeが起動し、IoT Edge エージェントを開始するごとに、セキュリティ デーモンが起動します。 つまり、デバイスを操作するときに iotedgectl が不要IoT Edgeされます。</p>


  <p>Hsmlib は、Security Manager の新しいコンポーネントの一部IoT Edgeコンポーネントです。 hsmlib の異なるバージョンは、デバイス固有のハードウェアと統合され、セキュリティ デーモンIoT Edge機能を実行できます。 高度な種類のハードウェアを使用IoT Edge革新的なセキュリティと機能を提供できます。 たとえば、ハードウェア セキュリティ モジュールがあるデバイス (例: TPM) は、Device Provisioning Service を介してプロビジョニングできます。</p>


  <p><a href="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/0c0a09fb-4836-4638-88e0-821a1293f5b4.png"><img alt="SecurityManager" border="0" height="467" src="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/9e4d754b-80e3-4c75-800b-3991b0d8dcf0.png" style="margin: 0px auto; border: 0px currentcolor; border-image: none; float: none; display: block; background-image: none;" title="SecurityManagerA" width="892"></a> の既定のバージョンの hsmlib は、セキュリティ デーモンIoT Edgeインストールされます。 このバージョンの hsmlib では、シークレットの格納に Edge デバイス&rsquo; ファイル システムを使用する標準のセキュリティ保証と、/tpm0 での TPM を使用したセキュリティで保護されたエンクレーブの保証がサポートされています。</p>


  <h2>壊れる変更を統合する</h2>


  <p>機能の追加の大部分は、下位互換性のある方法で行われ、プロジェクトを GA ビットに簡単に移行できます。 パブリック&rsquo; プレビューで製品を作成して非常に多くのことを学び、ユーザーからのフィードバックに基づいていくつかの小さな大きな変更を行っています。 これらの変更は可能な限り小さく、製品に使いやすさの向上を提供します。</p>


  <h2>クライアント SDK の分割</h2>


  <h3>Change</h3>


  <p>モジュールの書き込みに使用IoT Edge DeviceClient オブジェクトは、DeviceClient と ModuleClient の 2 つのオブジェクトに分割されます。</p>


  <h3>影響</h3>


  <p>小さなコード変更。 モジュール コード内のすべての DeviceClient オブジェクトのクラス名を ModuleClient に変更する必要があります。 また&#39;ModuleClients を作成するためのファクトリ クラスも導入しました。 このヘルパー クラスは、セキュリティ デーモンを使用して正しく統合IoT Edge非表示にします。</p>


  <h4>変更前</h4>


  <pre>

  DeviceClient deviceClient = DeviceClient.CreateFromConnectionString(connStr, transportSettings);</pre>


  <h4>クリック後</h4>


  <pre>

  ModuleClient moduleClient =

  ModuleClient.CreateFromEnvironment(transportSettings);</pre>


  <p>さらに、ModuleClient の API サーフェスは、モジュールで現在サポートされている機能にのみ縮小されます。 これらの API は機能しなく、既存のモジュール コードには影響しません。</p>


  <h4>変更理由</h4>


  <p>デバイスとモジュールで使用できる機能は若干異なります。 次に例を示します。</p>


  <ul>
   <li>モジュールは入力/出力から読み取り/書き込みを行えますが、デバイスは入力または出力に対して書きIoT Hub。</li>
   <li>モジュールができない間、デバイスは C2D メッセージを受信できます。</li>
   <li>モジュールが実行できない間、デバイスは FileUpload を実行できます。</li>
   <li>クライアントを分離すると、デバイスとモジュールで使用できる機能がクリーンに示されます。</li>
  </ul>


  <h2>ダイレクト メソッド呼び出し</h2>


  <h3>Change</h3>


  <p>ServiceClient クラスは、モジュール ID がダイレクト メソッドを呼び出すのを許可しなくなりました。 この機能は、上で詳しく説明したクライアント SDK 分割の一部として ModuleClient クラスに移動されました。</p>


  <h3>影響</h3>


  <p>ModuleClient クラスを使用して、ServiceClient ではなくモジュール ID のメソッドを呼び出す必要があります。</p>


  <h4>変更前</h4>


  <pre>

  // assumes the use of a module connection

  ServiceClient serviceClient = ServiceClient.CreateFromConnectionString(connStr, transportSettings);

  string.serviceClient.InvokeDeviceMethodAsync(&quot;DeviceId&quot;, &quot;ModuleId&quot;, new CloudToDeviceMethod(&quot;MethodName&quot;));</pre>


  <h4>クリック後</h4>


  <pre>

  ModuleClient moduleClient = ModuleClient.CreateFromEnvironment(transportSettings);

  moduleClient.InvokeMethodAsync(&quot;DeviceId&quot;, &quot;ModuleId&quot;, new DirectMethodRequest(&quot;MethodName&quot;)) ;</pre>


  <h4>変更理由</h4>


  <p>メソッドの呼び出しは、ユーザーが 2 番目のオブジェクトをインスタンス化する代わりに、ModuleClient で実行できると予想されるアクションです。 ModuleClient にメソッド呼び出しを追加すると、開発者がコードに ServiceClient を含める必要がなくなったので、モジュール コードのサイズが小さくなります。</p>


  <h2>Edge Hub がリッスンするポートを構成する</h2>


  <h3>Change</h3>


  <p>Edge Hub は、ポート 8883 とポート 443 でダウンストリーム デバイスからの接続をリッスンするために使用されます。 ここで、開発者は、これらの接続に使用するホスト ポートを指定する必要があります。</p>


  <h3>影響</h3>


  <p>JSON を使用してデプロイ を手動で作成する場合は、Edge Hub で&#39;する必要があります。 以下の JSON では、以前と同様に動作する Edge Hub が構成されています (ポート 8883 および 443 でリッスン)。</p>


  <pre>

  &quot;{\&quot;HostConfig\&quot;:{\&quot;PortBindings\&quot;:{\&quot;8883/tcp\&quot;:[{\&quot;HostPort\&quot;:\&quot;8883\&quot;}],\&quot;443/tcp\&quot;:[{\&quot;HostPort\&quot;:\&quot;443\&quot;}]}}}&quot;</pre>


  <p>Azure portal 拡張機能を使用してデプロイを&#39;する場合は、変更を加えるVS Codeではありません。 これらのツールは、Edge Hub が 8883 と 443 で接続をリッスンするポート転送オプションを自動的に設定します。</p>


  <h3>変更理由</h3>


  <p>一部のお客様は、Edge デバイスが 443 または 8883 以外のポートでダウンチーム デバイス接続をリッスンする必要がある場合があります。これらのポートは別の目的で使用できます。 たとえば、お客様は 443 で HTTPS サーバーを実行できます。</p>
