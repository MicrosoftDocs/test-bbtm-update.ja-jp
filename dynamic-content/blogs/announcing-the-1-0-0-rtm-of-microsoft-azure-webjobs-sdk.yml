### YamlMime:Yaml
ms.openlocfilehash: ed75ebba06badc03eb0c9c70a0638a663129ec15
ms.sourcegitcommit: d03bdc7fe5447adb6530886aab848b75fe8fa8ee
ms.translationtype: MT
ms.contentlocale: ja-JP
ms.lasthandoff: 03/11/2022
ms.locfileid: "139890888"
Slug: announcing-the-1-0-0-rtm-of-microsoft-azure-webjobs-sdk
Title: Microsoft Azure web ジョブ SDK の 1.0.0 RTM の発表
Summary: NuGet ギャラリーから web ジョブ SDK をダウンロードし、NuGet パッケージマネージャーコンソールを使用して、NuGet ギャラリーからこれらのパッケージをインストールできるようになりました。
Content: >-
  <h2>このリリースでダウンロード</h2>

  SDK は Visual Studio 2013 Update 4 RC に同梱されている Azure web ジョブプロジェクトテンプレートにプレインストールされています


  NuGet ギャラリーから web ジョブ SDK をダウンロードし、次のように NuGet パッケージマネージャーコンソールを使用して、NuGet ギャラリーからこれらのパッケージをインストールできます。

  <blockquote>Install-Package Web ジョブ</blockquote>

  Microsoft Azure Service Bus トリガーを使用する場合は、次のパッケージをインストールします。

  <blockquote>Web ジョブを Install-Package します。</blockquote>

  <h2>Web ジョブ SDK とは</h2>

  Microsoft Azure web サイトの<a href="https://azure.microsoft.com/en-us/documentation/articles/web-sites-create-web-jobs/">web ジョブ</a>機能により、web サイトでサービスやバックグラウンドタスクなどのプログラムを簡単に実行できるようになります。 <i>.exe</i>、 <i>.cmd</i>、 <i>.bat</i>ファイルなどの実行可能ファイルを web サイトにアップロードして実行しながら、トリガーまたは連続 web ジョブとして実行できます。 Web ジョブ SDK を使用しない場合、バックグラウンドタスクを接続して実行するには、複雑なプログラミングが必要です。 SDK には、最小限のコードを記述して一般的なタスクを実行できるフレームワークが用意されています。


  web ジョブ SDK には、Microsoft Azure Storage の blob、キュー、テーブル、Service Bus で動作するバインドとトリガーシステムがあります。 バインディングシステムを使用すると、Microsoft Azure Storage オブジェクトの読み取りまたは書き込みを行うコードを簡単に記述できます。 トリガーシステムは、キューまたは blob で新しいデータを受信するたびに、コード内の関数を呼び出します。

  <h2>Web ジョブ SDK のシナリオ</h2>

  ここでは、Azure Web ジョブ SDK を使用してより簡単に処理できる標準的なシナリオをいくつか取り上げます。

  <ul>
   <li><b>画像処理</b> または CPU を集中的に使用する作業。</li>
   <li>電子メールの送信など、バックグラウンドスレッドで実行する実行 <b>時間の長いタスク</b> 。 これまでは、アプリがしばらくの間アイドル状態になった場合、IIS はアプリをリサイクルするため、ASP.NET でこれを行うことができませんでした。 Azure Websites の <a href="https://weblogs.asp.net/scottgu/archive/2014/01/16/windows-azure-staging-publishing-support-for-web-sites-monitoring-improvements-hyper-v-recovery-manager-ga-and-pci-compliance.aspx">Always On</a> を使用すると、アプリがアイドル状態のときに web サイトがリサイクルされるのを防ぐことができます。 <a href="https://weblogs.asp.net/scottgu/archive/2014/01/16/windows-azure-staging-publishing-support-for-web-sites-monitoring-improvements-hyper-v-recovery-manager-ga-and-pci-compliance.aspx">Always On</a> によって、サイトがスリープ状態にならないことが保証されます。つまり、Web ジョブと web ジョブ SDK を使用して、実行時間の長いタスクやサービスを実行できます。</li>
   <li><b>キューの処理</b>。 Web フロントエンドがバックエンド サービスと通信する一般的な方法は、キューを使用することです。 これは、一般的なプロデューサー–コンシューマーパターンです。</li>
   <li><b>RSS 集計</b>。 RSS フィードのリストを維持するサイトがある場合は、フィードからのすべての記事をバックグラウンド プロセスにプルすることができます。</li>
   <li><b>ファイルのメンテナンス</b>(ログファイルの集計やクリーンアップなど)。</li>
   <li>CSV リーダーなどの<b>受信、ログ</b>の解析、テーブルへのデータの格納。</li>
  </ul>

  <h2>SDK の目標</h2>

  <ul>
   <li>バックグラウンド処理の作業を行うときに、Azure Storage の使用を容易にする方法を提供します。</li>
   <li>SDK を使用すると、Azure Storage の操作が簡単になります。 ストレージから読み取り/書き込みを行うコードを記述する必要はありません。</li>
   <li>診断やログ記録のコードを記述しなくても、豊富な診断機能と監視機能を提供します。</li>
  </ul>

  <h2>SDK の機能</h2>

  <h3>トリガー</h3>

  関数は、キューまたは blob で新しい入力が検出されたときに実行されます。

  <h3>バインド</h3>

  SDK は、バインドをサポートして、C# プリミティブ型と Azure storage (Blob、テーブル、キュー、Service Bus など) との間のモデルバインディングを提供します。 これにより、開発者は blob、テーブル、キューから簡単に読み取り/書き込みを行うことができます。 これには、次のような利点があります。

  <ul>
   <li><b>便宜上</b>。 使用するのに最も有用な型を選択できます。 Web ジョブ SDK は、グルーコードを処理します。 Blob に対して文字列操作を行う場合は、TextWriter に変換する方法を気にせずに、TextReader/TextWriter に直接バインドすることができます。</li>
   <li><b>フラッシュと終了</b>: web ジョブ SDK は、未処理の出力を自動的にフラッシュして閉じます。</li>
   <li><b>単体テスト</b>。 SDK を使用すると、てではなく TextWriter のようなプリミティブ型をモックすることができるため、コードの単体テストが可能になります。</li>
   <li><b>診断</b>モデルバインドはダッシュボードと連携して、パラメーターの使用に関するリアルタイムの診断を提供します。</li>
  </ul>

  現在、次のバインドがサポートされています: <b>Stream、TextReader/Writer、および String。</b>Storage SDK からカスタム型およびその他の型にバインドするためのサポートを追加することもできます。

  <h2>Azure キュー</h2>

  SDK を使用すると、キューの新しいメッセージに対して関数をトリガーできます。 SDK を使用すると、String、Poco (Plain old CLR object)、byte []、および Azure storage SDK 型にバインドできるので、メッセージの内容に簡単にアクセスできます。 キューで使用できるその他の主要な機能を次に示します。


  詳細については、 <a href="https://azure.microsoft.com/blog/2014/09/06/announcing-the-0-5-0-beta-preview-of-microsoft-azure-webjobs-sdk/">0.5.0</a>、 <a href="https://azure.microsoft.com/blog/2014/08/21/announcing-the-0-4-0-beta-preview-of-microsoft-azure-webjobs-sdk/">0.4.0</a> 、 <a href="https://azure.microsoft.com/blog/2014/06/18/announcing-the-0-3-0-beta-preview-of-microsoft-azure-webjobs-sdk/">v0.3.0</a> の各発表投稿をお読みください。

  <ul>
   <li>関数をトリガーし、メッセージの内容を String、Poco (Plain old CLR object)、byte []、および CloudQueueMessage にバインドします。</li>
   <li>1つまたは複数のメッセージをキューに送信します。</li>
   <li>キューを使用した並列実行: SDK は、QueueTrigger 内でキューのメッセージを並列でフェッチします。 つまり、次に示すように、関数がキューでリッスンしている場合、SDK はこのキューに対して 16 (既定) のキューメッセージのバッチを同時に取得します。 関数は並列でも実行されます。</li>
   <li>Azure キューでの有害メッセージの処理</li>
   <li>キューの DequeueCount プロパティにアクセスします</li>
   <li>Azure キューのポーリングロジックの向上: SDK はランダムな指数バックオフアルゴリズムを実装して、ストレージトランザクションコストに対するアイドルキューポーリングの影響を軽減します。</li>
   <li>高速パス通知: SDK を使用して複数のキューにメッセージを送信する場合は、SDK によってメッセージが高速に追跡されます。</li>
   <li>キューポーリングの構成オプション: SDK では、キューのポーリング動作を構成できるいくつかのノブが公開されています。
  <ul>
   <li>MaxPollingInterval は、キューが空の場合に、メッセージを確認する前に待機する最長時間を指定します。 既定値は1分です。</li>
   <li>キューメッセージが有害キューに移動されるときに使用される MaxDequeueCount。 既定値は5です。</li>
  </ul>

  </li>

  </ul>

  <h3>Azure BLOB</h3>

  新しい blob が検出されたとき、または既存の blob が更新されたときに、SDK を使用して関数をトリガーできます。 SDK では、Stream、String、Poco (Plain old CLR object)、byte []、TextReader、TextWriter、および Azure storage SDK 型にバインドできるようにすることで、blob の内容にアクセスできます。


  詳細については、 <a href="https://azure.microsoft.com/blog/2014/09/06/announcing-the-0-5-0-beta-preview-of-microsoft-azure-webjobs-sdk/">0.5.0</a>、 <a href="https://azure.microsoft.com/blog/2014/08/21/announcing-the-0-4-0-beta-preview-of-microsoft-azure-webjobs-sdk/">0.4.0</a> 、 <a href="https://azure.microsoft.com/blog/2014/06/18/announcing-the-0-3-0-beta-preview-of-microsoft-azure-webjobs-sdk/">v0.3.0</a> の各発表投稿をお読みください。

  <ul>
   <li>BlobTriggers は、新しい blob が検出された場合、または既存の blob が更新された場合にのみトリガーされます。</li>
   <li>Blob の再試行とエラー処理: このリリースの SDK では、blob の処理中にエラーが発生した場合に、関数の再試行がサポートされるようになりました。 BlobTrigger は、指定された最大再試行回数 (既定では5回) まで処理されます。 しきい値に達すると、関数が5回実行されると、SDK は "web ジョブ" という名前のメッセージをキューに配置します。 このキューで QueueTrigger を使用して関数をトリガーし、メッセージのカスタムエラー処理を実行できます。</li>
  </ul>

  <h3>Azure Storage テーブル</h3>

  SDK を使用すると、テーブルにバインドし、読み取り、書き込み、更新、削除の各操作を実行できます。


  詳細については、 <a href="https://blogs.msdn.com/b/webdev/archive/2014/09/12/announcing-the-0-6-0-beta-preview-of-microsoft-azure-webjobs-sdk.aspx">0.6.0</a>、  <a href="https://azure.microsoft.com/blog/2014/09/06/announcing-the-0-5-0-beta-preview-of-microsoft-azure-webjobs-sdk/">0.5.0</a>、  <a href="https://azure.microsoft.com/blog/2014/08/21/announcing-the-0-4-0-beta-preview-of-microsoft-azure-webjobs-sdk/">0.4.0</a> 、および <a href="https://azure.microsoft.com/blog/2014/06/18/announcing-the-0-3-0-beta-preview-of-microsoft-azure-webjobs-sdk/">v0.3.0</a> の各発表に関する投稿をお読みください。


  受信は、blob に格納されているファイルを解析し、その値を CSV リーダーなどのテーブルに格納する場合の一般的なシナリオです。 このような場合、受信関数は大量の行 (<i>場合によっては100万</i>) を書き込む可能性があります。


  Web ジョブ SDK を使用すると、この機能を簡単に実装でき、テーブルに書き込まれた行の数などのリアルタイムの監視機能を追加して、受信関数の進行状況を監視することができます。

  <h3>Azure Service Bus</h3>

  Azure キューと同様に、SDK を使用すると Service Bus キューまたはトピックに新しいメッセージが送信されたときに関数をトリガーできます。 SDK を使用すると、String、Poco (Plain old CLR object)、byte []、BrokeredMessage にバインドできるため、メッセージの内容に簡単にアクセスできます。


  詳細については <a href="https://azure.microsoft.com/blog/2014/06/18/announcing-the-0-3-0-beta-preview-of-microsoft-azure-webjobs-sdk/">、v0.3.0-beta</a> に関するこの発表の投稿をお読みください。

  <h3>全般</h3>

  SDK のその他の機能の一部を次に示します。

  <ul>
   <li><b>非同期のサポート: </b>SDK では、非同期関数がサポートされています。</li>
   <li><b>Cancellationtoken: </b>関数は関数で CancellationToken パラメーターを受け取ることができ、関数はホストからキャンセル要求を受け取ることができます。</li>
   <li><b>NameResolver: </b>SDK には、キュー名または blob 名のソースを指定できる機能拡張レイヤーが用意されています。 たとえば、この機能を使用して、構成ファイルからキュー名を取得できます。 この <a href="https://github.com/Azure/azure-webjobs-sdk-samples/tree/master/BasicSamples/MiscOperations">サンプル</a>を参照してください。</li>
   <li><b>Web ジョブシャットダウン通知: </b>Web ジョブには、Web ジョブが停止したときに通知を生成する正常なシャットダウン通知機能があります。 この SDK では、Web ジョブがシャットダウンされたときに通知することで、Web ジョブでのこのグレースフルシャットダウンがサポートされています。 この情報は、CancellationToken を使用して関数にフローされます。 次の関数は、Web ジョブの停止時に取り消し要求を受け取る CancellationToken を受け取ります。</li>
  </ul>

  <h2>Web ジョブを監視するダッシュボード</h2>

  Web ジョブを実行すると、リアルタイムで監視できます。 その状態 (実行中、停止、正常に完了)、最終実行時刻、および特定の実行のログを確認できます。 次のスクリーンショットは、Web サイトで実行されているすべての Web ジョブのビューを示しています。


  SDK を使用して Web ジョブを作成すると、プログラム内の関数の診断と監視エクスペリエンスが得されます。 たとえば、次のフローを持つ "ImageResizeAndWaterMark" という名前の Image processing WebJob があるとします。


  ユーザーが "images-input" という名前の BLOB コンテナーにイメージをアップロードすると、SDK によって Resize 関数がトリガーされます。 サイズ変更によって画像が処理され、Watermark 関数がトリガーされる "images2-output" コンテナーに書き込まれます。 Watermark 関数を使用すると、イメージのサイズが変更され、"images3-output" BLOB コンテナーに書き込まれます。 次のコードは、上記の Web ジョブを示しています。

  <pre class="prettyprint">public class ImageProcessing
      {
          public static void Resize(
              [BlobTrigger(@"images-input/{name}")] WebImage input,
              [Blob(@"images2-output/{name}")] out WebImage output)
          {
              var width = 80;
              var height = 80;
              output = input.Resize(width, height);
          }

          public static void WaterMark(
              [BlobTrigger(@"images2-output/{name}")] WebImage input,
              [Blob(@"image3-output/{name}")] out WebImage output)
          {
              output = input.AddTextWatermark("WebJobs", fontSize: 6);
          }
      }

      public class WebImageBinder : ICloudBlobStreamBinder&lt;WebImage&gt;
      {
          public Task&lt;WebImage&gt; ReadFromStreamAsync(Stream input, System.Threading.CancellationToken cancellationToken)
          {
              return Task.FromResult&lt;WebImage&gt;(new WebImage(input));
          }

          public Task WriteToStreamAsync(WebImage value, Stream output, System.Threading.CancellationToken cancellationToken)
          {
              var bytes = value.GetBytes();
              return output.WriteAsync(bytes, 0, bytes.Length);
          }
      }</pre>
  Azure で WebJob を実行すると、Windows Azure Websites ポータルの [WEBJOBS] タブにある [ImageResizeAndWaterMark] のログ リンクをクリックして、Web ジョブ ダッシュボードを表示できます。


  <a href="https://acom.azurecomcdn.net/80C57D/blogmedia/blogmedia/2014/10/23/portal.png"><img style="border-width: 0px;" title="ポータル" alt="portal" src="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/portal_thumb.png" width="637" height="130" border="0" /></a>


  ダッシュボードは SiteExtension です。url: に移動してアクセスできます  <a href="https://mysite.scm.azurewebsites.net/azurejobs">https://mysite。<b>scm.azurewebsites.net/</b> <b>azurejobs</b></a><a href="https://mysite.scm.azurewebsites.net/azurejobs">。</a>  SiteExtension にアクセスするには、デプロイ資格情報が必要です。 サイト拡張機能へのアクセスの詳細については、Kudu プロジェクトのドキュメントを参照してください。 <a href="https://github.com/projectkudu/kudu/wiki/Accessing-the-kudu-service">https://github.com/projectkudu/kudu/wiki/Accessing-the-kudu-service</a>

  <h3>関数の実行の詳細</h3>

  この "ImageResizeAndWaterMark" WebJob の特定の実行を監視している場合は、次のようなプログラム内の関数に関する呼び出しの詳細を表示できます。

  <ul>
   <li>この関数のパラメーターは何ですか?</li>
   <li>関数の実行にどのくらいの時間がかかっています。</li>
   <li>BLOB からの読み取りにかかる時間と、読み取り/書き込まれたバイト数。</li>
  </ul>

  <a href="https://acom.azurecomcdn.net/80C57D/blogmedia/blogmedia/2014/10/23/function_details.png"><img style="border-width: 0px;" title="function_details" alt="function_details" src="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/function_details_thumb.png" width="529" height="397" border="0" /></a>

  <h3>再生を呼び出 &amp; す</h3>

  上の例では、何らかの理由で WaterMark 関数が失敗した場合は、新しいイメージと Replay WaterMark 関数をアップロードできます。この関数を使用すると、実行チェーンがトリガーされ、Resize 関数も呼び出されます。 これは、関数をまとめてチェーンするための複雑なグラフがある場合に、問題を診断してデバッグするのに役立ちます。 ダッシュボードから関数を呼び出す方法も可能です。

  <h3>関数の因果関係</h3>

  上の例では、WaterMark 関数が BLOB に書き込むときに Resize 関数がトリガーされるのを知っています。 ダッシュボードには、関数間のこの因果関係が表示されます。 新しい入力が検出されるとトリガーされる多数の関数をチェーンしている場合は、この因果関係グラフを表示すると便利です。

  <h3>BLOB の検索</h3>

  [BLOB の検索] をクリックすると、その BLOB に対して何が起こったかについての情報を取得できます。 たとえば、ImageResizeAndWaterMark の場合、WaterMark 関数が実行されたため、BLOB が書き込まれます。 検索 BLOB の詳細については、この投稿を参照 <a href="https://blogs.msdn.com/b/jmstall/archive/2014/02/19/who-wrote-that-blob.aspx">してください</a>。

  <h2>サンプル</h2>

  WebJobs SDK のサンプルについては、以下を参照してください。 <a href="https://github.com/Azure/azure-webjobs-sdk-samples">https://github.com/Azure/azure-webjobs-sdk-samples</a>

  <ul>
   <li>BLOB、テーブル、キュー、およびテーブルのトリガーとバインドを使用する方法に関するサンプルService Bus。</li>
   <li><b>PhluffyShuffy</b> は、顧客が BLOB ストレージから画像を処理する関数をトリガーする画像をアップロードできる画像処理 Web サイトです。</li>
   <li><b>PhluffyLogs</b> は、WebJob がアプリによって生成されたログ ファイルを解析し、ログ ファイルをアーカイブする例です。</li>
  </ul>

  <h2>ドキュメント</h2>

  <ul>
   <li><a href="https://channel9.msdn.com/Shows/Web+Camps+TV/Making-Your-Jobs-Easier-With-Windows-Azure-WebJobs-SDK">Channel 9 のビデオ「ジョブを SDK を使用してジョブを簡単Windows Azure WebJobsする</a></li>
   <li><a href="https://www.hanselman.com/blog/IntroducingWindowsAzureWebJobs.aspx">Scott Hanselman による WebJobs と SDK の概要</a></li>
   <li>WebJobs を使用して構築され、<a href="https://twitter.com/bradygaster">Brady Gaster によって ASP.NET Web サイト モニター</a></li>
   <li><a href="https://www.asp.net/aspnet/overview/developing-apps-with-windows-azure/azure-webjobs-recommended-resources">Azure WebJobs – 推奨されるリソース</a></li>
   <li><a href="https://channel9.msdn.com/Tags/azurefridaywebjobs">Azure Friday の WebJobs ビデオ シリーズ</a></li>
   <li>Magnus M magrtensson によるビデオ シリーズ</li>
   <li><a href="https://www.asp.net/aspnet/overview/developing-apps-with-windows-azure/getting-started-with-windows-azure-webjobs">チュートリアル: WebJobs SDK のMicrosoft Azureする</a></li>
  </ul>

  <h2>SDK を使用した WebJobs の Azure Web サイトへのデプロイ</h2>

  Visual Studio 2013 Update 3 と Azure SDK 2.4 が追加され、Visual Studio WebJobs を Azure Websites に発行するサポートが追加されました。 詳細については、「<a href="https://azure.microsoft.com/en-us/documentation/articles/websites-dotnet-deploy-webjobs/">Azure Web サイトにアプリをデプロイAzure WebJobs方法」を参照してください。</a> <a name="how-to-deploy-azure-webjobs-to-azure-web"></a>

  <h2>フィードバックを送信し、ヘルプを得る</h2>

  質問がある場合は、<a href="https://azure.microsoft.com/en-us/support/forums/">Azure</a> フォーラム、ASP.NET フォーラム、または StackOverflow.com で<a href="https://stackoverflow.com/">質問 StackOverflow.com</a>。<a href="https://forums.asp.net/1247.aspx"></a> <a href="https://twitter.com/search?q=AzureWebJobs">Twitter# 用の AzureWebJobs</a> SDK と StackOverflow Azure-WebJobsSDKタグを使用します。
