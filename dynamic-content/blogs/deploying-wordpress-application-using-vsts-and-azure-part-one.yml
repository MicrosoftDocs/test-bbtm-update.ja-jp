### YamlMime:Yaml
ms.openlocfilehash: 8ccef03ef2cf0011a39852217839fa57ec0ccde0
ms.sourcegitcommit: d03bdc7fe5447adb6530886aab848b75fe8fa8ee
ms.translationtype: MT
ms.contentlocale: ja-JP
ms.lasthandoff: 03/11/2022
ms.locfileid: "139896483"
Slug: deploying-wordpress-application-using-vsts-and-azure-part-one
Title: Visual Studio Team Services と Azure を使用した WordPress アプリケーションのデプロイ - パート 1
Summary: この投稿は、Azure WebApp for Containers と Azure Database for MySQL を使用して Docker 化されたカスタム WordPress Web サイトをデプロイするために VSTS を使用して CI/CD パイプラインを設定する方法を説明する 2 つのブログ記事の最初の部分です。
Content: >-
  <p>この投稿は、Azure WebApp for Containers と Azure Database for MySQL を操作する Docker 化されたカスタム WordPress Web サイトをデプロイするために Visual Studio Team Services (VSTS) を使用して CI/CD パイプラインを設定する方法を説明する 2 つのブログ投稿の最初の部分です。</p>


  <h2>動機</h2>


  <p>WordPress CI/CD パイプラインを構築する主な動機は、異なる環境間での簡単な変更を可能にするための動的構成のサポートが WordPress に制限されているという事実です。 一部の値は、WordPress MySQL データベースにハードコーディングされます。 この制限により、時間のかかるタスクが発生し、迅速かつ頻繁にデプロイする機能が制限されます。</p>


  <h2>アイデア</h2>


  <p>ローカル、開発、テスト、および実稼働の 4 つの環境があります。 ローカル環境は、Docker イメージをローカルで実行し、必要な変更をコミットし、作業が完了したらマスター ブランチにコードをプッシュする開発者向けです。 プッシュ アクションによって CI プロセスが開始されます。このプロセスでは、新しい Docker イメージがビルドされ、Azure Container Registry。 この Docker イメージの基本イメージは、Docker ハブからの WordPress イメージです。 dockerfile の一部として、新しいコンテンツを新しい Docker イメージにコピーするコピー アクションが実行されます。</p>


  <p>CI プロセスが完了すると、CD プロセスが自動的に開始され、wordPress DB Azure Database for MySQLを使用して、各環境に個別のデータベースが作成されます。 ハードコーディングされた値 DB を更新するために、以前の環境から新しいスクリプト ファイルに DB SQLします。 検索置換を&amp;実行すると、新しいSQLが次の環境 DB に復元されます。 また、このプロセスの一部として、ログ<a href="https://github.com/Microsoft/ApplicationInsights-WordPress" target="_blank">Azure アプリケーション インサイト目的で WordPress</a> プラグインを使用します。</p>


  <h2>前提条件</h2>


  <ul>
   <li><a href="https://azure.microsoft.com/en-us/free/" target="_blank">次のサービスを使用して Azure</a> アカウントを作成します。

   <ul>
    <li>の 1 つのインスタンスAzure Container Registry。</li>
    <li>5 つの空の DB Azure Database for MySQLの 1 つのインスタンス。</li>
    <li>各環境の Azure WebApp for Containers の 3 つのインスタンス:dev、test、production、1 つのスロット ステージング。</li>
    <li>環境ごとに 4 つの Application インサイトインスタンス(ローカル、開発、テスト、実稼働)</li>
   </ul>
   </li>
   <li>Visual Studio Marketplace から Docker Integration 拡張機能がインストールされた <a href="https://go.microsoft.com/fwlink/?LinkId=307137" target="_blank">VSTS</a> アカウントを開きます。 Team Services アカウント&rsquo;にまだVisual Studio場合は、今すぐ開きます。</li>
  </ul>


  <p><strong>VSTS&rsquo; で ARM デプロイ タスクを使用して、上記のすべての Azure リソースを作成できます。</strong></p>


  <h2>コード構造</h2>


  <p>サンプル ソース コード <a href="https://github.com/yaprigal/WordPressVSTS" target="_blank">を見つけ、</a>新しい VSTS プロジェクトを作成し、このプロジェクトの master ブランチにコードをアップロードできます。</p>


  <p>コード リポジトリの構造は次のように表示されます。</p>


  <p><a href="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/b029f13a-557b-4643-85fb-90e393dc14f9.png"><img alt="image" border="0" height="137" src="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/bd82c3a3-708f-49f3-b2e3-41ed47e3c86a.png" style="border: 0px currentcolor; border-image: none; margin-right: auto; margin-left: auto; float: none; display: block; background-image: none;" title="イメージ" width="624"></a></p>


  <ul>
   <li><strong>Html フォルダー</strong> &ndash; サンプル WordPress ファイル。</li>
   <li><strong>Db フォルダー</strong> &ndash; サンプル WordPress スクリプト DB ファイル。このファイルに復元する必要Azure Database for MySQL (このブログでは WordPress5000 と呼ばれます)。</li>
   <li><strong>Application-insights フォルダー</strong> &ndash;には、Application インサイト plugin フォルダーが含まれている。</li>
   <li><strong>Dockerfile</strong> &ndash; Docker イメージをビルドする場合は 。</li>
  </ul>


  <p>ローカル コンピューターで次の docker コマンドを実行して、サンプルの WordPress をローカルで実行できます。 Azure 上の MySQL DB に接続します。このインスタンスのファイアウォール規則に IP を追加する必要がある場合があります。</p>


  <p>docker run -e DB_ENV_HOST=[your mysql db url]:[your mysql port number] -e DB_ENV_USER=[your mysql db user name] -e DB_ENV_PASSWORD=[your mysql db password] -e DB_ENV_NAME=[your mysql database name] -p 5000:80 -d [docker image name]</p>


  <h2>VSTS ビルド &ndash; フェーズ</h2>


  <p>次に、新しいビルド定義を作成します。 関連するソース リポジトリを選択し、ビルド プロセスのベースラインとして空のテンプレートを選択します。 エージェント キュー <strong>として [Hosted Linux Preview</strong> ]を選択します。</p>


  <p><a href="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/c0de364b-7457-4b8f-a159-caabc2d92446.png"><img alt="image" border="0" height="209" src="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/15302e8c-f9fe-40ca-bf52-6128bf0feab0.png" style="border: 0px currentcolor; border-image: none; margin-right: auto; margin-left: auto; float: none; display: block; background-image: none;" title="イメージ" width="624"></a></p>


  <p>2 つの新しい Docker タスクを追加します。</p>


  <p>最初の Docker タスクは、 <strong>次の値を使用してイメージ</strong> をビルドします。</p>


  <ul>
   <li>Container Registry型Azure Container Registry &ndash; 。</li>
   <li>Azure サブスクリプションでは、 &ndash; 関連する Azure サブスクリプションを選択します。</li>
   <li>&ndash; Azure Container Registryを選択Azure Container Registry。</li>
   <li>アクション &ndash; イメージをビルドします。</li>
   <li>Docker ファイル リポジトリ &ndash; から dockerfile を選択します。</li>
   <li>[既定の <strong>ビルド コンテキストを使用する] オプションを</strong> オンにします。</li>
   <li>イメージ名 &ndash; [イメージ名、すべての文字は小文字にする必要があります]: $(Build.BuildId)。</li>
   <li>[イメージ名 <strong>の修飾] オプションをオン</strong> にします。</li>
  </ul>


  <p>2 つ目の Docker タスクは、 <strong>イメージをプッシュします。次</strong> を選択します。</p>


  <ul>
   <li>Container Registry型Azure Container Registry &ndash; 。</li>
   <li>Azure サブスクリプションでは、 &ndash; 関連する Azure サブスクリプションを選択します。</li>
   <li>&ndash; Azure Container Registryを選択Azure Container Registry。</li>
   <li>アクション イメージ &ndash; をプッシュします。</li>
   <li>イメージ名 最初 &ndash; のタスクと同じ名前。</li>
   <li>[イメージ名 <strong>の修飾] オプションをオン</strong> にします。</li>
  </ul>


  <p>[トリガー<strong>] タブで継続的インテグレーション</strong>-を有効にします。</p>


  <p><a href="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/60c31264-1f48-4c10-8871-5daf814d9356.png"><img alt="image" border="0" height="192" src="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/21541374-0360-4c7f-83c6-31321a8119a4.png" style="border: 0px currentcolor; border-image: none; margin-right: auto; margin-left: auto; float: none; display: block; background-image: none;" title="イメージ" width="624"></a></p>


  <p>次に、ビルドを確認する必要があります。</p>


  <p>プロジェクト ファイルの 1 つで小さな変更を行い、新しいバージョンをマスター ブランチにプッシュする必要があります。新しいビルド プロセスが開始されます。 ここでは&rsquo;、この記事では、新しい Docker 化されたカスタム WordPress イメージを作成して Azure Container Registry にプッシュするための VSTS と Docker 統合を使用して CI プロセスを簡単に作成する方法について説明しました。 完全な CI/CD パイプラインを作成するための取り扱いを続けるパート 2 をお待ちください。</p>


  <h2>リソース</h2>


  <ul>
   <li><a href="https://docs.microsoft.com/en-us/vsts/build-release/" target="_blank">VSTS 概要 CI/CD を使用する方法</a></li>
   <li><a href="https://azure.microsoft.com/en-us/services/app-service/containers/" target="_blank">Azure Web App for Containers</a></li>
   <li><a href="https://azure.microsoft.com/en-us/services/container-registry/" target="_blank">Azure Container Registry</a></li>
   <li><a href="https://docs.microsoft.com/en-us/vsts/build-release/apps/containers/build" target="_blank">VSTS コンテナーのビルド</a></li>
   <li><a href="https://docs.microsoft.com/en-us/vsts/build-release/apps/cd/deploy-docker-webapp" target="_blank">Azure Web App for Containers にデプロイする</a></li>
   <li><a href="https://azure.microsoft.com/en-us/services/mysql/" target="_blank">Azure Database for MySQL</a></li>
   <li><a href="https://azure.microsoft.com/en-us/services/application-insights/" target="_blank">Azure Application Insights</a></li>
  </ul>
