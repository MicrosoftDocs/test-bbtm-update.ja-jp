### YamlMime:Yaml
ms.openlocfilehash: 952f2f7c5d932d13f2399be3035972c314e67834
ms.sourcegitcommit: d03bdc7fe5447adb6530886aab848b75fe8fa8ee
ms.translationtype: MT
ms.contentlocale: ja-JP
ms.lasthandoff: 03/11/2022
ms.locfileid: "139910129"
Slug: announcing-powershell-v5-support-azure-automation
Title: PowerShell v5 のサポートの発表 (Azure Automation
Summary: ご存知のように、PowerShell バージョン 5 がリリースされ、その後、多くの新しい PowerShell 機能がリリースされました。 これで、Runbook と DSC 構成でこれらの新しい PowerShell v5 機能を活用Azure Automation。
Content: "<p>既にお知りのように、PowerShell バージョン 5 がリリースされ、それを使用して、多くの <a href=\"https://technet.microsoft.com/en-us/library/hh857339.aspx?f=255&amp;MSPPError=-2147217396#BKMK_new50\">新しい PowerShell 機能が追加されました</a>。 最も重要な機能の一部を次に示します。</p>\n\n<ul>\n <li>PowerShell クラス</li>\n <li>PowerShell ワークフローのパフォーマンスの向上</li>\n <li>PowerShell モジュールのサイド バイ サイド バージョン管理</li>\n <li>一連の新しいコマンドレット (例: Convert-String)</li>\n <li>PowerShell DSC の一連の機能強化 (例: PSRunAsCredential)</li>\n</ul>\n\n<p>これで、Runbook と DSC の構成で、これらの同じ大きな PowerShell v5 機能を利用Azure Automation。</p>\n\n<p>&rsquo;Azure Automation &ndash; で PowerShell v5 機能を使用する作業はありません。ただし、ハイブリッド Runbook worker を使用し、そこで実行する Runbook で PowerShell v5 機能を利用する場合は、それらのハイブリッド worker マシンに WMF5 をインストールしてください。</p>\n\n<p>では&rsquo;、PowerShell&rsquo; v5 の新しい機能の一部を使用する方法について説明Azure Automation。</p>\n\n<h2>PowerShell クラス</h2>\n\n<p><a href=\"https://blogs.technet.com/b/heyscriptingguy/archive/2015/08/31/introduction-to-powershell-5-classes.aspx\">PowerShell クラスでは</a> 、PowerShell にオブジェクト指向プログラミングが導入され、新しい種類のオブジェクトの定義、インスタンス化、メソッドの呼び出しが簡単になります。</p>\n\n<p>PowerShell v5 と同Azure Automationで PowerShell クラスを使用できます。 次に例を示すネイティブ PowerShell Runbook を使用します。</p>\n\n<pre class=\"prettyprint\">\nclass Coffee {\n    # Property: Holds the current size of the coffee.\n    [Uint32] $Size;\n    \n    # Property: Holds the name of the coffee&#39;s owner.\n    [String] $Owner;\n\n    # Constructor: Creates a new Coffee object, with the specified size and owner.\n    Coffee([UInt32] $NewSize, [String] $NewOwner) {\n        # Set the Coffee size\n        $this.Size = $NewSize;\n        \n        # Set the Coffee name\n        $this.Owner = $NewOwner;\n    }\n\n    # Method: Drink the specified amount of coffee.\n    # Parameter: $Amount = The amount of coffee to drink.\n    [void] Drink([UInt32] $Amount) {\n        $this.Size = $this.Size - $Amount;\n    }\n}\n\n# Create a new coffee object, with a size of 16 ounces, and &#39;Joe&#39; as its owner\n$MyCoffee = New-Object Coffee -ArgumentList 16, &quot;Joe&quot;\n\n# Drink 10 ounces\n$MyCoffee.Drink(10)\n\n# Output the object\n$MyCoffee \n</pre>\n\n<p>このテストを Azure Automationすると、次の結果が返されます。</p>\n\n<p><img alt=\"Announcing PowerShell v5 support in Azure Automation\" border=\"0\" height=\"244\" src=\"https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/bc0caa87-0ef5-4ca6-b7ba-5ad17704e947.png\" style=\"border-left-width: 0px; border-right-width: 0px; border-bottom-width: 0px; float: none; margin-left: auto; display: block; border-top-width: 0px; margin-right: auto\" title=\"PowerShell v5 のサポートの発表 (Azure Automation\" width=\"360\"></p>\n\n<p>PowerShell クラスは、PowerShell ワークフロー ベースの Runbook でも使用できますが、InlineScript ブロック内でのみ使用できます。</p>\n\n<h2>PowerShell モジュールのサイド バイ サイド バージョン管理</h2>\n\n<p>PowerShell のサイド バイ サイドのモジュール バージョン管理では、PowerShell 内で複数のバージョンのモジュールを使用できます。 これは、PowerShell モジュールの特定のバージョンに対して動作するようにテストされた古いスクリプトがあるが、同じ PowerShell モジュールの新しいバージョンを必要とする他のスクリプトがある場合に便利です。</p>\n\n<p>複数のバージョンを含む PowerShell モジュールの構築は簡単です。 通常どおりモジュール フォルダーを作成し、使用するモジュールのバージョンごとにこのモジュール フォルダー内にフォルダーを作成します。 ここでは&rsquo;、作成した TestModule モジュールの例を示します。 ご覧のように、1.0.0 と 2.0.0 の 2 つのバージョンが提供されています。</p>\n\n<p><img alt=\"Announcing PowerShell v5 support in Azure Automation\" border=\"0\" height=\"246\" src=\"https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/2c3ef265-a708-46a7-bfa3-c6cd8e471ed8.png\" style=\"border-left-width: 0px; border-right-width: 0px; border-bottom-width: 0px; float: none; margin-left: auto; display: block; border-top-width: 0px; margin-right: auto\" title=\"PowerShell v5 のサポートの発表 (Azure Automation\" width=\"360\">&nbsp;</p>\n\n<p>これらの各バージョン フォルダー &ldquo;内には、&rdquo; モジュールを構成する通常の PowerShell PSM1、PSD1、DLL ファイルを置くだけです。 ここでは&rsquo;、作成したモジュールのバージョン 1.0.0 の場合の外観を示します。</p>\n\n<p><img alt=\"Announcing PowerShell v5 support in Azure Automation\" border=\"0\" height=\"254\" src=\"https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/2dbd3ed1-8be3-40dc-b35e-3ba57369c8c3.png\" style=\"border-left-width: 0px; border-right-width: 0px; border-bottom-width: 0px; float: none; margin-left: auto; display: block; border-top-width: 0px; margin-right: auto\" title=\"PowerShell v5 のサポートの発表 (Azure Automation\" width=\"360\"></p>\n\n<p>もちろん、このモジュールを&rsquo; Azure Automation 内で使用する場合は、インポートするために zip 圧縮する必要があります。 PowerShell モジュールの使用に関する詳細についてはAzure Automationを参照 <a href=\"https://azure.microsoft.com/en-us/blog/authoring-integration-modules-for-azure-automation/\">してください</a>。</p>\n\n<p>圧縮して&rsquo;モジュールをインポートすると、次のモジュール内の他のモジュールと同様にAzure Automation。</p>\n\n<p><img alt=\"Announcing PowerShell v5 support in Azure Automation\" border=\"0\" height=\"480\" src=\"https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/4831cc96-2dbc-42b2-852b-17a9fbf1d826.png\" style=\"border-left-width: 0px; border-right-width: 0px; border-bottom-width: 0px; float: none; margin-left: auto; display: block; border-top-width: 0px; margin-right: auto\" title=\"PowerShell v5 のサポートの発表 (Azure Automation\" width=\"352\"></p>\n\n<p><b>メモ： </b>Azure Automation では、モジュールの最新 (最高バージョン番号) バージョンがインポートされた場合にのみ表示されます。一方、モジュール パッケージがサイド バイ サイド バージョンのモジュールに含まれている場合は、実際に Runbook 内ですべて使用できます。 ただし、UI には、現在、同じパッケージ内のモジュールの以前のバージョンは表示されません。</p>\n\n<p><img alt=\"Announcing PowerShell v5 support in Azure Automation\" border=\"0\" height=\"360\" src=\"https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/f8efbf70-7acd-4780-bb1c-0e272dc8c691.png\" style=\"border-left-width: 0px; border-right-width: 0px; border-bottom-width: 0px; float: none; margin-left: auto; display: block; border-top-width: 0px; margin-right: auto\" title=\"PowerShell v5 のサポートの発表 (Azure Automation\" width=\"313\"></p>\n\n<p><b>注 #2: </b>同じパッケージ内にサイド バイ サイド バージョンを含むモジュールをサポートしますが、モジュール パッケージのインポート間でのモジュールの複数のバージョンの使用はサポートされていません。</p>\n\n<p>たとえば、バージョン 1 とバージョン 2 を含むモジュール A を Azure Automation にインポートした後、バージョン 3 と 4 を含むモジュール A を Azure Automation にインポートした場合、バージョン 3 と 4 だけが DSC 構成の Runbook 内で使用できます。 バージョン 1、2、3、4 を使用したい場合は、インポートするパッケージにバージョン 1、2、3、4 が含まれている必要があります。</p>\n\n<p>side-by-side バージョンを含むモジュールをインポートしたら、次のように特定のバージョンを読み込みます。</p>\n\n<p>PowerShell スクリプト Runbook:</p>\n\n<blockquote>\n<p><i>Import-Module &ndash;Name &lt;ModuleName&gt; -RequiredVersion &lt;バージョン&gt;</i></p>\n</blockquote>\n\n<p>PowerShell ワークフロー Runbook (InlineScript ブロック内):</p>\n\n<blockquote>\n<p><i>Import-Module &ndash;Name &lt;ModuleName&gt; -RequiredVersion &lt;バージョン&gt;</i></p>\n</blockquote>\n\n<p>DSC 構成:</p>\n\n<ul>\n <li>DSC リソースの使用:</li>\n</ul>\n\n<blockquote>\n<p><i>Import-DscResource -ModuleName &lt;ModuleName&gt; -ModuleVersion &lt;バージョン&gt;</i></p>\n</blockquote>\n\n<ul>\n <li>モジュールの使用:</li>\n</ul>\n\n<blockquote>\n<p><i>Import-Module &ndash;Name &lt;ModuleName&gt; -RequiredVersion &lt;バージョン&gt;</i></p>\n</blockquote>\n\n<p>UI と同様に、既定では、モジュールの最新バージョンが実行時に使用されます。 たとえば、TestModule モジュールには、モジュールのバージョンを出力する Get-MyVersion というコマンドレットが含まれているとします。 次の Runbook:</p>\n\n<blockquote>\n<p><i>Get-MyVersion</i></p>\n</blockquote>\n\n<p>次の出力が表示されます。</p>\n\n<p><img alt=\"Announcing PowerShell v5 support in Azure Automation\" border=\"0\" height=\"259\" src=\"https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/72c644de-3c64-417d-b06e-9ba02ca23405.png\" style=\"border-left-width: 0px; border-right-width: 0px; border-bottom-width: 0px; float: none; margin-left: auto; display: block; border-top-width: 0px; margin-right: auto\" title=\"PowerShell v5 のサポートの発表 (Azure Automation\" width=\"360\">&nbsp;</p>\n\n<p>ただし、Runbook でモジュールのバージョン 1.0.0 を明示的に読み込む場合:</p>\n\n<blockquote>\n<p><i>Import-Module &ndash;Name TestModule -RequiredVersion 1.0.0</i></p>\n</blockquote>\n\n<blockquote>\n<p><i>Get-MyVersion</i></p>\n</blockquote>\n\n<p>次の出力が表示されます。</p>\n\n<p><em><img alt=\"Announcing PowerShell v5 support in Azure Automation\" border=\"0\" height=\"266\" src=\"https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/4b5402f2-a195-40b1-b965-feb2b77ae410.png\" style=\"border-left-width: 0px; border-right-width: 0px; border-bottom-width: 0px; float: none; margin-left: auto; display: block; border-top-width: 0px; margin-right: auto\" title=\"PowerShell v5 のサポートの発表 (Azure Automation\" width=\"360\"> </em></p>\n\n<p>安全を確保&rsquo;するために、Runbook 間で同じモジュールの異なるバージョンを使用する場合は、必ず Import-Module を使用して Runbook で使用するバージョンを宣言する必要があります。 使用するバージョンが最新バージョンであってもそうです。 これは、Runbook のジョブが同じサンドボックスで実行される可能性があるためです。 サンドボックスが特定のバージョン番号のモジュールを既に明示的に読み込んだ場合 (そのサンドボックス内の以前のジョブが読み込まれているため)、そのサンドボックス内の今後のジョブでは、そのモジュールの最新バージョンが自動的に読み込まれません (一部のバージョンが既に読み込まれているため)。</p>\n\n<h2>まとめ</h2>\n\n<p>ご覧のように、PowerShell v5 には多くの大きな新機能があります。 これらの機能は、次の方法で利用Azure Automation。</p>\n\n<p>次のAzure Automation? このサービスについては、こちらを <a href=\"https://aka.ms/Q2p1ap\">参照し</a>、 <a href=\"https://twitter.com/AzureAutomation\">Twitter Azure Automation最新</a> および最大の情報を確認してください。</p>"
