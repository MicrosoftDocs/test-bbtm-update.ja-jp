### YamlMime:Yaml
ms.openlocfilehash: cdbfd93347b22f0f37140c35cb5255e46d4275f2
ms.sourcegitcommit: d03bdc7fe5447adb6530886aab848b75fe8fa8ee
ms.translationtype: MT
ms.contentlocale: ja-JP
ms.lasthandoff: 03/11/2022
ms.locfileid: "139904227"
Slug: conversational-ai-updates-for-march-2019
Title: 2019 年 3 月の会話型 AI の更新
Summary: 'Bot Framework SDK バージョン 4.3 のリリースを共有し、この機会を利用して、Microsoft からの Conversational AI リリースの追加の更新プログラムを提供してください。 '
Content: >-
  <p>Bot Framework SDK バージョン 4.3 のリリースを共有し、この機会を利用して、Microsoft からの Conversational AI リリースの追加の更新プログラムを提供してください。</p>


  <h2>新しい LINE チャネル</h2>


  <p>Microsoft Bot Frameworkを使用すると、ユーザーがどこにいてもユーザーと接続できます。 Skype、Microsoft Teams、Slack、Facebook Messenger、Telegram、Kik などの一般的なメッセージング アプリなど、13 のサポートされているチャネルを提供しています。 開発者コミュニティに耳を &ndash; 傾け、新しいチャネルとして LINE を追加する最も頻繁に要求される機能の 1 つに対処しました。 LINE は、日本、台湾、タイ、インドネシア、その他の国で数億人のユーザーを持つ人気のあるメッセージング アプリです。</p>


  <p>新しいチャネルでボットを有効にするには&ldquo;、ボット<a href="https://docs.microsoft.com/en-us/azure/bot-service/bot-service-channel-connect-line" target="_blank">から LINE</a>&rdquo; へのConnect手順に従います。 また、次のページでボットにAzure portal。 [チャネル] ブレードに移動し、LINE アイコンをクリックして、そこに記載されている手順に従います。</p>


  <p><a href="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/5f294b94-e530-4390-a189-20de85bd6d24.png"><img alt="Channels blade in the Microsoft Azure portal " border="0" height="958" src="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/f5306a35-7f16-499e-aa03-814032652478.png" style="border: 0px currentcolor; border-image: none; display: inline; background-image: none;" title="[チャネル] ブレード " width="1418"></a></p>


  <h2>SDK 4.3</h2>


  <p>4.3 リリースでは、チームはメッセージとアクティビティの処理の改善と簡素化に重点を置いて取り組んでいます。 アクティビティ <a href="https://github.com/Microsoft/BotBuilder/blob/master/specs/botframework-activity/botframework-activity.md" target="_blank">Bot Frameworkは、</a> ボットの相互作用モデルを定義するために使用される基になるスキーマです。 4.3 リリースでは、Bot Framework アクティビティ スキーマの一部のアクティビティの種類の処理を効率化し、単純な On* メソッドを公開して、このようなアクティビティの使用を簡略化しました。 アクティビティ処理の機能強化に加え、C# では MVC サポートが追加され、開発者は標準の ASP.NET コア アプリケーションと ApiController を使用できます。 リリースと同様に、多くのバグ<a href="https://github.com/Microsoft/botbuilder-dotnet/issues?utf8=%E2%9C%93&amp;q=is%3Aissue+label%3A4.2+label%3Abug" target="_blank"></a>を修正し、LUIS と QnA の統合を改善し続け、エンジニアリング プラクティスをさらにクリーンにしました。 言語、プロンプトとダイアログ、コネクタとアダプターなど、他の領域にも追加の更新プログラムが追加されています。</p>


  <ul>
   <li>詳細な変更ログで、4.3 に加えたすべての変更 <a href="https://github.com/Microsoft/botbuilder-dotnet/releases/tag/4.3" target="_blank">を確認します</a>。</li>
   <li>すべての問題の現在の <a href="https://github.com/Microsoft/botbuilder-dotnet/issues?utf8=%E2%9C%93&amp;q=is%3Aissue+label%3A4.2+label%3Abug" target="_blank">一覧を最新の状態にしてください</a>。</li>
  </ul>


  <h3>アクティビティ メッセージの処理を簡略化する</h3>


  <p>このリリースでは、ActivityHandler と呼ばれる新しいクラスを介して受信メッセージを処理する新しい <strong>方法が導入されました</strong>。 ActivityHandler は、Bot Framework&rsquo; アクティビティ スキーマで定義されている受信アクティビティを受け取り、各アクティビティの処理を、アクティビティの種類や他のプロパティに基づいて 1 つ以上のハンドラー関数に委任します。 たとえば、ActivityHandler は次のようなメソッドを公開します。</p>


  <ul>
   <li>OnMessage &ndash; すべての受信メッセージを処理する場合</li>
   <li>OnMembersAdded &ndash; 追加されるメンバーを表すメッセージを処理する場合</li>
   <li>OnEvent &ndash; 汎用イベント アクティビティの場合</li>
  </ul>


  <p>すべてのメソッドは、 <a href="https://github.com/Microsoft/botbuilder-js/blob/master/libraries/botbuilder-core/src/activityHandler.ts" target="_blank">ActivityHandler.ts</a> (JavaScript の場合) と <a href="https://github.com/Microsoft/botbuilder-dotnet/blob/master/libraries/Microsoft.Bot.Builder/ActivityHandler.cs" target="_blank">ActivityHandler.cs</a> (.NET の場合) で確認できます。</p>


  <p>開発者は ActivityHandler を使用して、受信メッセージ、アプリケーション イベント、およびさまざまな会話更新イベントのイベントを処理できます。 これにより、あいさつを送信する、ユーザーを歓迎するなどの一般的なボットの動作を簡単に作成できます。</p>


  <p>このクラスは、イベント駆動型の方法で受信アクティビティを処理するための拡張可能なベースを提供します。 JavaScript と TypeScript では、次のコード例に示すメイン アクティビティ ハンドラーとして、基本 ActivityHandler クラスを直接使用できます。 開発者は、そこからサブクラスを派生して、コア機能を拡張することもできます。</p>


  <p>小さな JavaScript コード スニペットの例を次に示します。</p>


  <pre>

  // Import the class from botbuilder sdk

  const { ActivityHandler } = require(&#39;botbuilder&#39;);

  // Create the bot &ldquo;controller&rdquo; object

  const bot = new ActivityHandler();

  server.post(&#39;/api/messages&#39;, (req, res) =&gt; {
        adapter.processActivity(req, res, async (context) =&gt; {
            // Route incoming activities to the ActivityHandler via the run() method
            await bot.run(context);
        });
  });

  // bind a handler for all incoming activities of type message

  bot.onMessage(async (context, next) =&gt; {
        // do stuff
        await context.sendActivity(`Echo: ${ context.activity.text }`);
        // proceed with further processing
        await next();
  });

  // say hello when new members join

  bot.onMembersAdded(async(context, next) =&gt; {

  await context.sendActivity(&#39;Hello! I am a bot!&#39;);

  await next();

  });

  </pre>


  <h3>.NET 開発者向けの Web API 統合</h3>


  <p>このチームのコア テナントBot Framework、.NET と JS の実装全体でパリティを実現します。 その中で、 <a href="https://github.com/Microsoft/botbuilder-dotnet/blob/master/libraries/Microsoft.Bot.Builder/ActivityHandler.cs" target="_blank">ActivityHandler.cs</a> の .NET 実装では、指定された特別なプログラム言語機能で同じ機能が公開されます。 ただし、ASP.NET Core Web API をサポートする豊富なインフラストラクチャ セットが提供され、ボット開発者が簡単に統合して使用できます。 そのため、アクティビティ処理の機能強化に加えて、C# では Web API サポートが追加され、開発者は標準の ASP.NET コア アプリケーションと ApiController を使用できます。</p>


  <p>次に示すのは、ASP.NET Web API Controller のコード スニペットです。&nbsp;</p>


  <pre>

  [Route(&quot;api/messages&quot;)]
       [ApiController]
       public class BotController : ControllerBase
       {
           private IBotFrameworkHttpAdapter _adapter;
           private IBot _bot;

          public BotController(IBotFrameworkHttpAdapter adapter, IBot bot)
           {
               _adapter = adapter;
               _bot = bot;
           }

          [HttpPost]
           public async Task PostAsync()
           {
               // Delegate the processing of the HTTP POST to the adapter.
               // The adapter will invoke the bot.
               await _adapter.ProcessAsync(Request, Response, _bot);
           }
       }
  </pre>


  <p>に渡される_botに注意_adapter。ProcesAsync メソッドは実際のボット実装であり、上記の JS サンプルと非常に似たコードを持つアダプターから送信されたアクティビティを処理します。</p>


  <h2>QnA MakerとLanguage Understanding</h2>


  <p>QnA Maker Active <a href="https://azure.microsoft.com/en-au/blog/qna-maker-simplifies-knowledge-base-management-for-your-q-a-bot/" target="_blank">ラーニングが</a>リリースされました。これは、開発者が実際の使用状況に基づいてナレッジ ベースを向上させるのに役立ちます。 アクティブ ラーニングは、質問のバリエーションを特定して推奨するのに役立ち、ユーザーがナレッジ ベースに簡単に追加できます。</p>


  <p><a href="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/ec3bdad8-9564-4b88-8eaf-2d3fb863de99.png"><img alt="QnA Maker Active Learning" border="0" height="390" src="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/ac725942-b5c6-4b28-8ccf-c3062c541933.png" style="border: 0px currentcolor; border-image: none; display: inline; background-image: none;" title="QnA Maker Active ラーニング" width="1429"></a></p>


  <p>ユーザー クエリの場合、信頼QnA Maker差が低い上位 N の回答が返された場合、アクティブなクエリラーニングトリガーされます。 ユーザー間の集合的なフィードバックに基づいて、QnA Makerナレッジ ベースで代替の質問に対する提案が表示されます。</p>


  <p>Active QnA Maker の動作ラーニング方法&ldquo;の詳細については、「アクティブ ラーニングを使用してナレッジ ベースを向上させる」のドキュメント<a href="https://docs.microsoft.com/en-us/azure/cognitive-services/qnamaker/how-to/improve-knowledge-base" target="_blank">を参照してください</a>。&rdquo;</p>


  <h2>テンプレートと Virtual Assistant ソリューション アクセラレータ</h2>


  <p>テンプレートとソリューション アクセラレータは、会話型 AI、音声、およびより広範な Azure プラットフォームの高成長の機会を特定するメカニズムを提供します。 そのため、お客様とパートナーは、通常、可能な限り見なされない高度で変革的な会話エクスペリエンスの提供を加速したり、高品質のエクスペリエンスを提供するために多くの労力を必要としたりすることができます。</p>


  <p>この最新リリースでは、テンプレートと新しいソリューションを大幅に更新Virtual Assistantしました。 変更の概要については、リリース ノート <a href="https://github.com/Microsoft/AI/releases/tag/0.3" target="_blank">を参照してください</a>。</p>


  <p><a href="https://github.com/Microsoft/AI/tree/master/templates/Enterprise-Template/src/typescript/generator-botbuilder-enterprise" target="_blank">JavaScript (Typescript)</a> バージョンの Enterprise テンプレートの可用性を Yeoman ジェネレーターと共に共有できます。 作業は、同じアプリケーションに対して開始Virtual Assistant。 また&rsquo;、テンプレートによって作成されたすべてのボットにコード化された単体テストを追加しました。ダイアログの単体テストを自動化する方法と、テレメトリ機能と関連する PowerBI ダッシュボードのさらなる機能強化が提供されています。</p>


  <p>また&rsquo;、スキルをすばやく作成して Virtual Assistant に追加できる新しいテンプレートを含む、Virtual Assistant と Skills に幅広い変更を加えました。 また、プロアクティブ エクスペリエンスの新しいサポートが追加され、アシスタントとスキルがユーザーに事前に連絡したり、実行時間の長い非同期操作を実行したりすることができます。</p>


  <p>また、このリリースでは、電子メール、カレンダー、To Do&nbsp; などの生産性スキルの広範な改善と、Point of Interest Skill への FourSquare サポートの追加、および強化された WebChat テスト エクスペリエンスも提供されています。</p>


  <h2>Web チャット 4.3</h2>


  <p>Web チャットは、開発者が Web サイトまたはモバイル アプリでボットのメッセージング インターフェイスを追加できる一般的なコンポーネントです。 Web チャット 4.3 リリースでは、残りのアクセシビリティの問題と一般的な機能要求に対応しています。たとえば、ネットワーク接続が不十分なユーザーの接続状態をよりよく示します。</p>


  <p><a href="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/d073d165-69ae-4e45-a086-d4c17937b433.png"><img alt="Chat box in Web Chat 4.3" border="0" height="73" src="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/c6f35a88-8fff-47a8-87fe-95720528980c.png" style="border: 0px currentcolor; border-image: none; margin-right: auto; margin-left: auto; float: none; display: block; background-image: none;" title="Web チャット 4.3" width="359"></a></p>


  <p>4.3 Web チャット試す場合は、コード サンプルの作成または<a href="https://github.com/Microsoft/BotFramework-WebChat/" target="_blank">GitHub手順に</a><a href="https://github.com/Microsoft/BotFramework-WebChat/blob/master/SAMPLES.md" target="_blank">従ってください</a>。</p>


  <h2>はじめに</h2>


  <p>会話型 AI ツールとフレームワークの改善を続ける中で、お客様のためにどのような会話エクスペリエンスを構築するのかを楽しみにしています。 <a href="https://docs.microsoft.com/en-us/azure/bot-service/?view=azure-bot-service-4.0" target="_blank">概要今日!</a></p>
