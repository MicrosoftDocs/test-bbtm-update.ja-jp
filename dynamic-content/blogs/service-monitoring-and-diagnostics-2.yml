### YamlMime:Yaml
ms.openlocfilehash: c671edc2db74cb9d2075cf3df59f366bd00e2144
ms.sourcegitcommit: d03bdc7fe5447adb6530886aab848b75fe8fa8ee
ms.translationtype: MT
ms.contentlocale: ja-JP
ms.lasthandoff: 03/11/2022
ms.locfileid: "139892539"
Slug: service-monitoring-and-diagnostics-2
Title: サービスの監視と診断
Summary: 'メトリックを高く維持するには、常にメトリックを測定する必要があります。 このキーはテレメトリです。アプリのパフォーマンスに関して収集されるデータです。 '
Content: >-
  企業は、ソフトウェアおよびソフトウェアの実行ビジネスを実行します。 コードは、銀行や書店を作成または破損させる可能性があります。 また、停止したり、パフォーマンスが悪かったりすると、顧客が他の場所に移動する際に、停止中だけでなく、その後も失われる可能性があります。 ユーザーが Web サイトで問題を抱えている場合は、すぐに知る必要があります。また、ほとんどの顧客が気付く前に、問題をピン留めして修正する必要があります。


  これは、単に可用性の高い可用性に関するだけの問題ではない。 はい。サイトがダウンした場合は非常に悪く、一般的な SLA では 99.999% の可用性が必要です。 しかし、応答性も問題です。 <a href="https://www.fastcompany.com/1825005/how-one-second-could-cost-amazon-16-billion-sales">ある調査では、</a> 1s の低下は Amazon $1.6B のコストがかかるのに対し、0.4 は Google 8M クエリを失います。 このようなサイトでは、あらゆる種類の戦術を使用して、認識される応答時間を高く保ちます。データ センターの冗長性、コンテンツ配信ネットワーク、非同期レンダリングなどです。


  メトリックを高く維持するには、常にメトリックを測定する必要があります。 このキーはテレメトリです。アプリのパフォーマンスに関して収集されるデータです。 分析ツールを使用すると、アプリの実行方法とユーザーが実行している操作に関するあらゆる種類のグラフが表示され、特定のインシデントにドリルダウンできます。 また、アプリがスローする例外の数が多すぎる場合、実行速度が遅い場合、または完全に消えた場合に、発生するアラートを設定できます。


  一般的な <a href="https://en.wikipedia.org/wiki/Create,_read,_update_and_delete">SCRUD アプリケーションの監視シナリオ</a> には、主に次の 2 種類があります。

  <blockquote><span style="text-decoration: underline;">可用性</span>:

  <ul>
   <li><b>アップしていますか?</b> – お客様がサービスにアクセスできない場合は、すぐにパニックに陥ります。</li>
   <li><b>信頼性 –</b> パイプラインでデータが失われることはありませんか?</li>
  </ul>

  可用性は、エンド ユーザーへの影響に関連するパブリック サービス レベル アグリーメントに影響します。 "I just paid and your system down - you done with my money?" (支払ったばかりで、システムがダウンしました-私のお金で何をしましたか?) または "これらのチケットを取得する必要がありますが、システムがダウンしています。"


  <span style="text-decoration: underline;">パフォーマンス</span>:

  <ul>
   <li><b>応答： </b>ユーザーがページ (検索) を実際に使用できるまでどのくらいの時間が必要ですか|読み取り操作)?</li>
   <li><b>遅延：</b> ユーザーがデータを処理して格納するラウンド トリップの期間 (作成|更新|削除)?</li>
  </ul>

  </blockquote>

  <blockquote>通常、パフォーマンスは運用レベル アグリーメントに影響します。 たとえば、データ アクセス層チームは、クエリの &lt; 99% に対して 1 秒の応答を保証できます。</blockquote>

  では、テレメトリを使用する方法を説明します。 3 つのプロセス (検出、トリアージ、診断) のパイプラインについて説明します。

  <h2>Detect</h2>

  問題検出はアートです。 完全に自動化することは困難ですが、一般的な目標は、すべてのライブ サイト インシデント (LSIs) の 80% を自動的に検出することです。 他の 20% は、データを分析する場合や、顧客からのフィードバックに基づいて見つけた並べ替えです。


  自動検出は、製品と組織の成熟度の進行に従います。

  <ul>
   <li><b>サイトの</b>可用性: ping テストは、世界中のポイントから定期的にサイトに要求を送信し、応答時間、リターン コード、および場合によってはいくつかのコンテンツを測定します。 3 つのテストが 1 行に失敗すると、重大なことが発生している可能性があります。</li>
   <li><b>リソースの</b>可用性: より詳細な Web テストでは、項目の選択や購入など、主なユーザー ストーリーをシミュレートします。 これらのテストでは、バック エンド サービスが実行されている状態が確認されます。 しかし、一方で、実際のデータを混乱さしたくないので、すべてをテストする必要があります。</li>
   <li><b>ユーザーの</b>可用性: 実際のユーザー要求の応答時間と失敗率は、サーバーおよびクライアント アプリケーションでのインストルメンテーションを使用して測定できます。 これにより、実際のユーザー エクスペリエンスを示す方がはるかに優れたものになります。 それでも、結果を慎重に調べる必要があります。 すべての HTTP 要求の 1% が失敗した場合、それはあまり悪く聞こえない可能性があります。[Click here to pay]/(ここをクリックして支払いを行う)" ボタンが失敗しているのが検出されるまで。</li>
  </ul>

  しかし、80% の自動化が目標です。これは開始する場所では "ない" です。 まず、テレメトリを手動で探索し、システムの通常の動作 (負荷の下で応答時間がどのように変化するか、例外が発生する頻度、要求が最も遅い、または最もエラーが発生しやすいか) を理解します。 この期間中は、異常な動作について学習します。 ライブ サイト インシデントが発生すると、変更されたメトリックを分析できます。そのため、パターンの認識を自動化し、将来その種類の問題を検出する方法を理解できます。

  <h2>トリアージ</h2>

  LSIs は、タイルの読み込みが遅く、完全な停止が発生した場合に発生する可能性があります。 まず、悪いことを見つける必要があります。 誰もホーム ページを見ていけない場合、それは障害です。 一部のユーザーに "最近表示された項目" が表示されない場合、それはバグです。 問題の規模によって修正に費やされるリソースが決め、早期トリアージは運用コストに大きな影響を与えます。 そのため、すべての主要なビジネス シナリオを完了できない顧客の数を知る必要があります。 ユーザー可用性レベルでの自動化により、影響を受けるユーザーの数をカウントするために必要なインストルメンテーションが提供されます。


  重大度スコアは、LSI を検出する自動化によって最初に割り当て、その後、調査する DevOpsチームによって確認できます。 顧客への影響は、失敗した要求に関連付けられている一意のユーザーの数をカウントすることで決定できます。


  システムがログインしたユーザーにサービスを提供している場合は、ログを分析して、問題の影響を受けたユーザーを特定し、ユーザー全体に問題をエスカレートすることなく、そのユーザーとの緊密な通信ループを維持できます。 多くのユーザーは、バグを含めないサービスを持つことよりも、問題に関する良好なコミュニケーションを評価しています。

  <h2>診断</h2>

  これで、原因のハントが開始されます。 診断はバグ修正と全く同じではありません。 すべての問題がコードの欠陥によって発生する場合はありません。 構成、ストレージ、その他のリソースに関する問題や、使用する他のサービスの問題があります。


  そして、それが誰の問題なのかを知る必要があります。 フロントエンド開発者は、キューに入っている注文を確認すると要求し、ワーカー開発者は、受け取った注文が正常に処理されると言います。 ただし、顧客は注文を行えないので、どこかで問題が発生している必要があります。


  通信境界上の正確なテレメトリは、調査を続ける必要があるユーザーを特定するのに役立つことを理解する必要があります。


  この問題を見つけるのに役立つ、このテレメトリは非常に効果的です。

  <ul>
   <li><strong>要求の監視</strong> では、要求とエラー応答がカウントされ、応答時間が測定されます。 要求の頻度が上がると、応答時間が急激に増加する場合は、メモリや他のリソースの問題が疑われる可能性があります。</li>
   <li><strong>容量</strong> – メモリ、I/O レート、CPU を測定するパフォーマンス カウンター。リソースの使用状況を直接表示できます。</li>
   <li><strong>依存関係の監視</strong>。外部サービス (データベース、REST サービスなど) の呼び出しをカウントし、各呼び出しの成功または失敗と応答にかかる時間をログに記録します。 要求の処理に 4.2 秒かかり、その 4 がウェアハウス サーバー内にある場合は、問題の場所がわかっています。</li>
   <li><strong>ログ トレース イベント</strong><strong>は</strong>、プロセス内の重要なポイントを記録する場合と、内部インターフェイスで問題をトレースする場合に特に重要です。 ユーザーが注文できない場合、これはフロントエンドまたはバック エンドの問題ですか?</li>
   <li><strong>展開</strong><strong>レコードは</strong>、システムの更新を問題の突然の発生と関連付けるのに役立ちます。</li>
  </ul>

  &nbsp;


  <a href="https://azure.microsoft.com/en-us/documentation/articles/app-insights-monitor-performance-live-website-now/"><img style="background-image: none; padding-top: 0px; padding-left: 0px; display: inline; padding-right: 0px; border-width: 0px;" title="clip_image001" src="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/clip_image001.png" alt="clip_image001" width="504" height="152" border="0" /></a>


  診断の役割は、これが、修正、テスト、リリースを ASAP で行う必要があるコードの欠陥であるかどうかを特定することです。または、スケールアップによって対処できるリソースの問題。または外部サービスに関する問題。

  <h2>まとめ</h2>

  ライブで成功したサービスの運用は、楽しく困難な作業です。 非効率性を排除し、機敏性を向上させるためには、プロセスの分野とツールが必要です。 組織が継続的なデプロイ、A/B テスト、その他のアジャイル プラクティスを採用する場合、アプリケーション ライフサイクル管理とアプリケーション パフォーマンス管理の各分野を継続的な DevOps プロセスにまとめるソリューションが必要になります。


  Microsoft には、<a href="https://azure.microsoft.com/en-us/documentation/articles/app-insights-start-monitoring-app-health-usage/">IDE (Visual Studio</a>、<a href="https://azure.microsoft.com/en-us/documentation/articles/app-insights-java-eclipse/">Eclipse</a> など) から始まる開発サイクルの最初から .<a href="https://azure.microsoft.com/en-us/documentation/articles/app-insights-platforms/">NET/Java/Node.JS/Python/Ruby/PHP/ObjectiveC</a>、Azure プラットフォーム (<a href="https://azure.microsoft.com/en-us/documentation/articles/insights-perf-analytics/">Azure Web サイト、VM</a>、モバイル、および Cloud Services) および監視 (アプリケーション <a href="https://azure.microsoft.com/en-us/services/application-insights/">インサイト</a>) までを統合するのに役立つオファリングがあります。


  <strong>詳細については、以下を参照してください。 </strong>分散システムの監視に関する Netflix の優れたブログと、<a href="https://blogs.msdn.com/b/bharry/archive/2013/10/14/how-do-you-measure-quality-of-a-service.aspx">QoS</a> の監視に関する Brian Harry のブログ
