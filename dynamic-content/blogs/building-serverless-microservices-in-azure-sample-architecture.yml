### YamlMime:Yaml
ms.openlocfilehash: ff179753c7c0db96c5b812b02d577dcc5ec151d7
ms.sourcegitcommit: d03bdc7fe5447adb6530886aab848b75fe8fa8ee
ms.translationtype: MT
ms.contentlocale: ja-JP
ms.lasthandoff: 03/11/2022
ms.locfileid: "139890861"
Slug: building-serverless-microservices-in-azure-sample-architecture
Title: Azure でのサーバーレス マイクロサービスの構築 - サンプル アーキテクチャ
Summary: " 現在、サーバーレス マイクロサービスの構築がイベント駆動型のシナリオに最適である方法と、Azure Serverless プラットフォームを使用する方法に焦点を当てました。"
Content: >-
  <p>分散アプリケーションでは、クラウドでの生活をフルに活用してグローバルに実行し、ボトルネックを回避し、常に世界中のユーザーが利用できます。 これには、適切なインフラストラクチャをデプロイする必要があるだけでなく、これらの特性を持つアプリケーションと従来のモノリシックアプローチを使用した分離アーキテクチャのサポートも必要です。 これが、ほとんどの <a href="https://azure.com/cloudnative">クラウド ネイティブ アプリケーション</a> で、これをグローバルな規模で実現するのに役立つマイクロサービス アーキテクチャを使用している理由です。</p>


  <p><a href="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/31a72923-c587-4e9f-ad41-efe14442d6dd.png"><img alt="Microservices benefits slide including independent modules, isolated points of failure, autonomous scalability, tech flexibility, and faster value delivery." src="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/0bfe4093-3217-4076-8864-ba6a3eb4642a.png" style="border: 0px currentcolor; margin-right: auto; margin-left: auto; display: block; background-image: none; width: 511px; height: 343px;" title="マイクロサービスは、独立したモジュール、分離された障害点、自律的なスケーラビリティ、技術の柔軟性、価値の提供の高速化など、スライドの利点を得ることができます。"></a></p>


  <p>マイクロサービス アーキテクチャを使用する<a href="https://azure.com/microservices"></a>利点は、これらのアプリケーションがクラウドに構築されている場合に最大化され、マイクロサービスの約束を簡単に実現できるさまざまなマネージド サービスが用意されています。 これらのサービスがインフラストラクチャとスケーリングを管理し、デプロイやそれらのソリューションの監視などの重要なプロセスを実行する方法を改善することで、サイクルごとに提供される価値の量を最大化できます。</p>


  <p><a href="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/65351aa8-6c78-424f-ad64-e0f04c015483.png"><img alt="Services to build microservices in Azure like Service Fabric, Azure Kubernetes Service, Azure Functions, and API Management." src="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/5f29deb2-e5df-43c0-9ebe-3b1ac752d112.png" style="border: 0px currentcolor; margin-right: auto; margin-left: auto; display: block; background-image: none; width: 517px; height: 235px;" title="Azure でマイクロサービスを構築するためのサービス (Service Fabric、Azure Kubernetes Service、Azure Functions、API Management など)。"></a></p>


  <p>さまざまなパターンを探索する必要があります。それぞれのパターンが特定のシナリオに適合します。 現在、&rsquo;サーバーレス マイクロサービスの<a href="https://aka.ms/serverless-microservices-webinar"></a>構築がイベント駆動型のシナリオに最適である方法と、Azure Serverless プラットフォームを使用する方法に焦点を当てました。</p>


  <h2>サーバーレスのイベント 駆動型マイクロサービスの構築</h2>


  <p>シナリオと解決する問題を適合するときに、マイクロサービスベースのアプリケーションを構築するためのイベント駆動型のアプローチを採用すると、より従来のアプローチの一部の問題を軽減するのに役立ちます。</p>


  <ul>
   <li><b>コンピューティング リソース</b>のスケーリング:&rsquo;&rsquo; サーバーレス プラットフォームによって提供される実際の需要に基づく自動化された柔軟なスケーリングにより、スケーリングがどのように行されるか、またはアプリケーションのコードで処理する方法について心配する必要はありません。</li>
   <li><b>操作の依存関係:</b> マイクロサービス ベースのソリューションをデプロイする場合、通常、デプロイと実行のためにインフラストラクチャ リソースを割り当てる運用チームには、最初と各増分変更の両方に対する強い依存関係があります。 フル マネージド サービスを使用してサーバーレスアプローチを使用すると、基になるインフラストラクチャはすべてプラットフォームによって管理されるので、その必要性が取り除かされます。</li>
   <li><b>ホスティングのコスト:</b> 従来のデプロイでは、コストは各ホスティング ノードに対して支払う必要がある量によって決まります。通常は、リソースの割り当てが過剰に行い、ホスティングの支出が増加します。 イベント駆動型のアプローチでは、使用量ベースの価格モデルでサービスを使用すると、価格は要求または操作の数によって決定され、ホスティングのコストはソリューションの実際の使用状況に合わせて調整されます (通常は低くなります)。</li>
   <li><b>サービス検出:</b> サービスの統合、通信、および相互作用の管理は、分散アプリケーションに関する一般的な問題です。 各サービスは単一の責任の原則に従って非常に具体的なアクションを実行しています。多くの場合、サービスが目標を達成するために他のサービスと通信する必要はありません。 実際の課題は、これらの接続を可能な限りシンプル&nbsp;にし、完全に分離されたサービスを維持することです。 イベント駆動型のアプローチでは、次の両方を利用できます。 <ul style="list-style-type: disc;">
    <li>pub-sub モデルを使用してイベントを介してサービスを通信する一元的で統一された方法で、Azure Event Grid。</li>
    <li>Azure Functions と Logic Apps が提供するイベント駆動型コンピューティングのエクスペリエンスなど、さまざまなサービスにシームレスに接続および統合するために、トリガーに基づく統合プログラミング モデル。</li>
   </ul>
   </li>
  </ul>


  <h2>サーバーレス マイクロサービスのサンプル アーキテクチャ</h2>


  <p>Relecloud という名前の架空の会社の乗車共有アプリケーションのサンプル アーキテクチャでは、マイクロサービスベースのアプリケーションのアーキテクチャ設計の詳細を確認できます。<a href="https://aka.ms/serverless-microservices"></a> このサンプルでは、Azure Serverless プラットフォームのフル マネージド サービスを使用して、次のようなマイクロサービス ソリューションの主要な構成要素を構築します。</p>


  <ol>
   <li><b>API ゲートウェイ:</b> クライアント API Managementを使用してバックエンド サービスのエンドポイントを公開し、クライアント アプリケーションがそれらを安全に使用できます。 これは、クライアント&nbsp;&nbsp; 側をバックエンドから切り離す場合にも役立ちます。これは、サービスが実際にホストされている場所に対する変更を、クライアント アプリケーションに影響を与えることなくゲートウェイから簡単に管理することができるので役立ちます。</li>
   <li><b>エントリ ポイント:</b> クライアント アプリケーションが使用する公開 API。HTTP 要求に応答するAzure Functionsを利用します。</li>
   <li><b>ワークフロー オーケストレーター:</b> 公開されている API を、データ ストアや他の重要なコンポーネントに関連付されている実際のバックエンド サービスと相互接続し、クライアント側でのアクションに基づいてこれらのサービスの作業を調整する、中級レベルのサービス。</li>
   <li><b>非同期キュー:</b> サービスの相互通信を処理し、さまざまなサービス間で情報とデータを渡すメッセージング Azure Event Grid。 &rsquo;イベント駆動型のアプローチを使用することで、情報交換にはファイヤー アンド フェイルド アプローチが用意され、サービスはイベントをプッシュし、ハンドラーはイベントをプッシュし、ハンドラーはそれらのイベントをサブスクライブして処理を行うので、サービスの切り離しも好む必要があります。</li>
   <li><b>バックエンド サービス:</b> データレイヤーとソリューションの他のコンポーネントで直接動作するサービスは、残りの部分から分離され、必要に応じて簡単に交換できます (データの格納に使用されるデータベースの種類の変更など)。</li>
  </ol>


  <p><a href="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/f1a4a610-e9e1-4a6a-a4da-5898b4ac7735.png"><img alt="Sample architecture overview." src="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/f8611c6d-73bc-4491-8730-aaeab54f16c8.png" style="border: 0px currentcolor; margin-right: auto; margin-left: auto; display: block; background-image: none; width: 510px; height: 283px;" title="サンプル アーキテクチャの概要。"></a></p>


  <h2>次のステップ</h2>


  <p>- フル マネージドの Azure <a href="https://aka.ms/serverless-microservices-webinar">サービスを</a> 使用して、サーバーレス アーキテクチャを使用してマイクロサービスベースのアプリケーションを開発する方法については、このウェビナーに登録してください。</p>


  <p>- Relecloud の <a href="https://aka.ms/serverless-microservices">Rideshare サンプル</a> アーキテクチャを参照して、サンプル アプリケーションのビルド方法とソリューション設計の詳細情報に関する詳細なガイダンスを取得します。</p>


  <p>-まだお持ち<a href="https://azure.microsoft.com/free/serverless">でない</a>&rsquo;場合は、Azure 無料アカウントにサインアップし、今すぐサーバーレス アプリケーションの構築を開始してください。</p>
