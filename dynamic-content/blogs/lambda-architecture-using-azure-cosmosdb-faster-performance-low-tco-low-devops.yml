### YamlMime:Yaml
ms.openlocfilehash: 6e521ff5118aa5a7e39f2cb473726128b48d300d
ms.sourcegitcommit: d03bdc7fe5447adb6530886aab848b75fe8fa8ee
ms.translationtype: MT
ms.contentlocale: ja-JP
ms.lasthandoff: 03/11/2022
ms.locfileid: "139891514"
Slug: lambda-architecture-using-azure-cosmosdb-faster-performance-low-tco-low-devops
Title: 'Azure #CosmosDB を使用したラムダアーキテクチャ: より高速なパフォーマンス、低 TCO、低 DevOps'
Summary: Azure Cosmos DB は、インジェストとクエリの両方を処理できるスケーラブルなデータベースソリューションを提供し、開発者が低コストのラムダアーキテクチャを実装できるようにします。 ラムダ アーキテクチャを使うと、大規模なデータ セットのデータ処理を効率よく行うことができます。 ラムダ アーキテクチャは、バッチ処理、ストリーム処理、およびサービス レイヤーを使って、ビッグ データのクエリに伴う待機時間を最小限にします。
Content: >-
  <p><a href="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/2540b617-ab4c-458c-8f96-357a73c8a433.png"><img alt="image" border="0" height="210" src="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/fff93ee9-b5cd-4fe4-93c3-44028fc91737.png" style="border: 0px currentColor; border-image: none; padding-top: 0px; padding-right: 0px; padding-left: 0px; margin-right: auto; margin-left: auto; float: none; display: block; background-image: none;" title="絵" width="724"></a></p>


  <p>Azure Cosmos DB は、バッチとリアルタイムのインジェストとクエリの両方を処理できるスケーラブルなデータベースソリューションを提供し、開発者が低コストでラムダアーキテクチャを実装できるようにします。 ラムダ アーキテクチャを使うと、大規模なデータ セットのデータ処理を効率よく行うことができます。 ラムダアーキテクチャは、 <strong>バッチ処理</strong>、 <strong>ストリーム処理</strong>、および <strong>サービス層</strong> を使用して、ビッグデータのクエリに関連する待機時間を最小限に抑えます。</p>


  <p>ラムダアーキテクチャを実装するには、次のテクノロジの組み合わせを使用して、リアルタイムのビッグ Data Analytics を高速化することができます。</p>


  <ul>
   <li><a href="https://azure.microsoft.com/services/cosmos-db/">Azure Cosmos DB</a>、業界&#39;、グローバルに分散された、マルチモデルのデータベースサービスの1つです。</li>
   <li><a href="https://azure.microsoft.com/services/hdinsight/apache-spark/">Apache Spark for Azure HDInsight</a>: 大規模データ分析アプリケーションを実行する処理フレームワークです</li>
   <li>Azure Cosmos DB <a href="https://docs.microsoft.com/en-us/azure/cosmos-db/change-feed">変更フィード</a>: HDInsight が処理できるように新しいデータをバッチ レイヤーにストリームします</li>
   <li>Spark to <a href="https://docs.microsoft.com/en-us/azure/cosmos-db/spark-connector">Azure Cosmos DB コネクタ</a></li>
  </ul>


  <p>ここでは、元のマルチレイヤー設計に基づくラムダアーキテクチャの基礎と、操作を簡略化する rearchitected &quot; ラムダアーキテクチャの &quot; 利点について説明した<a href="https://docs.microsoft.com/en-us/azure/cosmos-db/lambda-architecture">詳細な記事</a>を記述しました。</p>


  <h2>ラムダ アーキテクチャとは</h2>


  <p><a href="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/f18df3c0-a5b4-4daa-a68d-d59489933256.png"><img alt="image" border="0" height="377" src="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/cfcf8e0e-98cd-42ce-9f2c-adff8e044b77.png" style="border: 0px currentColor; border-image: none; padding-top: 0px; padding-right: 0px; padding-left: 0px; margin-right: auto; margin-left: auto; float: none; display: block; background-image: none;" title="絵" width="646"></a></p>


  <p>次の図は、ラムダアーキテクチャの基本原則を示しています。</p>


  <ol>
   <li>すべての <strong>データ</strong> は、バッチレイヤーとスピードレイヤーの両方にプッシュされます。</li>
   <li><strong>バッチ レイヤー</strong>にはマスター データセット (生データの変更不能な追加専用のセット) があり、バッチ ビューを事前計算します。</li>
   <li>Ser<strong>ving 層 </strong>には、高速クエリのバッチビューがあります。</li>
   <li><strong>スピード レイヤー</strong>は、(サービス レイヤーへの) 処理時間を補償して、最新のデータのみを処理します。</li>
   <li>すべてのクエリの応答は、バッチ ビューとリアルタイム ビューの結果をマージすることで、またはそれらを個別に ping することで得られます。</li>
  </ol>


  <h2>高速レイヤー</h2>


  <p>速度レイヤーの場合は、 <a href="https://docs.microsoft.com/en-us/azure/cosmos-db/change-feed">Azure Cosmos DB change feed サポート</a>を利用して<em>バッチレイヤー</em>の状態を維持しながら、change <em>feed API</em>を使用して<em>速度レイヤー</em>の Azure Cosmos DB 変更ログを表示できます。</p>


  <p><a href="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/7301d4fd-c23c-4678-a515-30736fcddfb3.png"><img alt="image" border="0" height="412" src="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/c792860c-c3ec-4c82-9afa-212a1ad23d45.png" style="border: 0px currentColor; border-image: none; padding-top: 0px; padding-right: 0px; padding-left: 0px; margin-right: auto; margin-left: auto; float: none; display: block; background-image: none;" title="絵" width="654"></a></p>


  <p>&rsquo;これらのレイヤーで重要な点は次のとおりです。</p>


  <ol>
   <li>すべての<strong>データ</strong>は Azure Cosmos DB に対して "のみ" プッシュされるので、マルチキャストの問題を回避できます。</li>
   <li><strong>バッチ レイヤー</strong>にはマスター データセット (生データの変更不能な追加専用のセット) があり、バッチ ビューを事前計算します。</li>
   <li><strong>サービス レイヤー</strong>については次のセクションで説明します。</li>
   <li><strong>スピード レイヤー</strong>は HDInsight (Apache Spark) を利用して、Azure Cosmos DB の変更フィードを読み取ります。 これにより、データを永続化しながら、データを同時にクエリおよび処理できます。</li>
   <li>すべてのクエリの応答は、バッチ ビューとリアルタイム ビューの結果をマージすることで、またはそれらを個別に ping することで得られます。</li>
  </ol>


  <p>コード例について <a href="https://docs.microsoft.com/en-us/azure/cosmos-db/lambda-architecture#speed-layer">は、こちら</a>を参照してください。</p>


  <h2>バッチ レイヤーとサービス レイヤー</h2>


  <p>新しいデータは Azure Cosmos DB に読み込まれるので (ここでは、スピード レイヤーに対して変更フィードが使われています)、<strong>マスター データセット</strong> (生データの変更不能な追加専用のセット) はここに存在します。 この時点以降では、次の図に示すように、HDInsight (Apache Spark) を使用して、 <strong>batch レイヤー</strong> の事前計算関数を実行し、 <strong>レイヤーを提供</strong>することができます。</p>


  <p><a href="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/19cefb16-dc4c-4af7-9d42-d259f3e6b377.png"><img alt="image" border="0" height="396" src="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/c515a38e-17eb-4136-8399-d21f59128b53.png" style="border: 0px currentColor; border-image: none; padding-top: 0px; padding-right: 0px; padding-left: 0px; margin-right: auto; margin-left: auto; float: none; display: block; background-image: none;" title="絵" width="649"></a></p>


  <p>&rsquo;これらのレイヤーで重要な点は次のとおりです。</p>


  <ol>
   <li>すべての<strong>データ</strong>は、Azure Cosmos DB に対してのみプッシュされます (マルチキャストの問題を回避するため)。</li>
   <li><strong>バッチ レイヤー</strong>では、マスター データセット (生データの変更不能な追加専用のセット) が Azure Cosmos DB に格納されています。 HDI Spark を使うことで、集計を事前計算して計算済みのバッチ ビューに格納できます。</li>
   <li>ser<strong>ving レイヤー</strong>は、マスターデータセットと計算されたバッチビューのコレクションを含む Azure Cosmos DB データベースです。</li>
   <li><strong>スピード レイヤー</strong>については後で説明します。</li>
   <li>すべてのクエリは、バッチビューとリアルタイムビューの結果をマージすることによって、または個別に ping することで応答できます。</li>
  </ol>


  <p>コード例については、 <a href="https://docs.microsoft.com/en-us/azure/cosmos-db/lambda-architecture#batch-and-serving-layers">こちら</a> を参照してください。完全なコードサンプルについては、「 <a href="https://github.com/Azure/azure-cosmosdb-spark/tree/master/samples/lambda">cosmosdb-spark/ラムダ/サンプル</a> :</p>


  <ul>
   <li>ラムダアーキテクチャ Rearchitected-Batch レイヤー <a href="https://github.com/Azure/azure-cosmosdb-spark/blob/master/samples/lambda/Lambda Architecture Re-architected - Batch Layer.html">HTML</a>  |  <a href="https://github.com/Azure/azure-cosmosdb-spark/blob/master/samples/lambda/Lambda Architecture Re-architected - Batch Layer.ipynb">ipa</a></li>
   <li>ラムダアーキテクチャ Rearchitected-サービスレイヤーの<a href="https://github.com/Azure/azure-cosmosdb-spark/blob/master/samples/lambda/Lambda Architecture Re-architected - Batch to Serving Layer.html">HTML</a>  |  <a href="https://github.com/Azure/azure-cosmosdb-spark/blob/master/samples/lambda/Lambda Architecture Re-architected - Batch to Serving Layer.ipynb">ip/b</a></li>
  </ul>


  <h2>高速レイヤー</h2>


  <p>前に説明したように、Azure Cosmos DB 変更フィード ライブラリを使うと、バッチ レイヤーとスピード レイヤーの間の操作を簡素化することができます。 このアーキテクチャでは、Apache Spark (HDInsight 経由) を使って、データに対して "<em>構造化ストリーミング</em>" クエリを実行します。 他のシステムがこのデータにアクセスできるように、構造化ストリーミング クエリの結果を一時的に保持することもできます。</p>


  <p><a href="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/abd2c517-d9d9-453e-b2eb-137532797c77.png"><img alt="image" border="0" height="375" src="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/dafc8294-1fef-46b0-80b9-4722c827e1ea.png" style="border: 0px currentColor; border-image: none; padding-top: 0px; padding-right: 0px; padding-left: 0px; margin-right: auto; margin-left: auto; float: none; display: block; background-image: none;" title="絵" width="616"></a><br>

  これを行うには、別の Azure Cosmos DB コレクションを作成して、構造化ストリーミング クエリの結果を保存します。 これにより、Apache Spark だけでなく他のシステムもこの情報にアクセスできるようになります。 Azure Cosmos DB の有効期限 (TTL) 機能に加えて、設定した期間後にドキュメントを自動的に削除するように構成することができます。 Azure Cosmos DB TTL 機能の詳細については、「 <a href="https://docs.microsoft.com/en-us/azure/cosmos-db/time-to-live">time to live で Azure Cosmos DB コレクションのデータを自動的に期限切れにする</a>」を参照してください。</p>


  <h2>Azure Cosmos DB を使用したラムダアーキテクチャ: より高速なパフォーマンス、低 TCO、低 DevOps</h2>


  <p>前述のように、Azure Cosmos DB、Azure Cosmos DB Change Feed Library、HDInsight の Apache Spark、および Azure Cosmos DB 用のネイティブ Spark コネクタを使用して、元のラムダアーキテクチャ (batch、サービス、およびスピードレイヤー) を簡素化できます。</p>


  <p><a href="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/c3200245-5a6d-4c6e-bcc2-7ace3be385bf.png"><img alt="image" border="0" height="369" src="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/57491d42-77ed-4aa8-888f-af5096b2679d.png" style="border: 0px currentColor; border-image: none; padding-top: 0px; padding-right: 0px; padding-left: 0px; margin-right: auto; margin-left: auto; float: none; display: block; background-image: none;" title="絵" width="636"></a></p>


  <p>これにより、操作だけでなくデータ フローも簡略化されます。</p>


  <ol>
   <li>すべてのデータは処理のために Azure Cosmos DB にプッシュされます</li>
   <li>バッチ レイヤーにはマスター データセット (生データの変更不能な追加専用のセット) があり、バッチ ビューを事前計算します</li>
   <li>サービス レイヤーは、高速クエリのためにデータのバッチ ビューを保持しています。</li>
   <li>スピード レイヤーは、(サービス レイヤーへの) 処理時間を補償して、最新のデータのみを処理します。</li>
   <li>すべてのクエリの応答は、バッチ ビューとリアルタイム ビューの結果をマージすることで得られます。</li>
  </ol>


  <h2>次のステップ</h2>


  <p>まだ&#39;ていない場合は、spark を<a href="https://github.com/Azure/azure-cosmosdb-spark">Azure-spark</a> GitHub リポジトリから Azure Cosmos DB コネクタにダウンロードし、リポジトリ内のその他のリソースを調べます。</p>


  <ul>
   <li><a href="https://github.com/Azure/azure-cosmosdb-spark/tree/master/samples/lambda">ラムダ アーキテクチャ</a></li>
   <li><a href="https://github.com/Azure/azure-documentdb-spark/wiki/Aggregations-Examples">分散集計の例</a></li>
   <li><a href="https://github.com/Azure/azure-cosmosdb-spark/tree/master/samples">サンプル スクリプトと Notebook</a></li>
   <li><a href="https://github.com/Azure/azure-cosmosdb-spark/wiki/Structured-Stream-demos">構造化ストリーミングのデモ</a></li>
   <li><a href="https://github.com/Azure/azure-cosmosdb-spark/wiki/Change-Feed-demos">Change feed のデモ</a></li>
   <li><a href="https://github.com/Azure/azure-cosmosdb-spark/wiki/Stream-Processing-Changes-using-Azure-Cosmos-DB-Change-Feed-and-Apache-Spark">Azure Cosmos DB Change Feed および Apache Spark を使用したストリーム処理の変更</a></li>
  </ul>


  <p>また、 <a href="https://spark.apache.org/docs/latest/sql-programming-guide.html">Apache Spark SQL、dataframes およびデータセットガイド</a>と<a href="https://docs.microsoft.com/en-us/azure/hdinsight/spark/apache-spark-jupyter-spark-sql">Azure HDInsight での Apache Spark に関する</a>記事も参照してください。 <a href="https://docs.microsoft.com/en-us/azure/cosmos-db/lambda-architecture#batch-and-serving-layers">この記事の完全なバージョンは、</a>ドキュメントで公開されています。このブログで説明されている手順を使用すると、大企業から個人の開発者まで、数分で Azure Cosmos DB を含むビッグデータ用のラムダアーキテクチャを構築できるようになりました。 今すぐ<a href="https://azure.microsoft.com/try/cosmosdb/">無料の Azure Cosmos DB を試す</a>ことができます。サインアップやクレジットカードは必要ありません。 Twitter <a href="https://twitter.com/search?q=%23cosmosDB&amp;src=typd"> # CosmosDB</a>() <a href="https://twitter.com/AzureCosmosDB">@AzureCosmosDB</a> に従って、最新の Azure Cosmos DB ニュースや機能について最新情報を入手してください。</p>


  <p>-&nbsp;&nbsp;&nbsp;友人の Azure Cosmos DB</p>
