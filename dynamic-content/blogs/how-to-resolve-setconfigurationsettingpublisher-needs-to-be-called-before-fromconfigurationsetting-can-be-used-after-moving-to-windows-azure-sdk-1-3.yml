### YamlMime:Yaml
ms.openlocfilehash: c428ee12773bdf024cd9f70041d3cbfba89aef44
ms.sourcegitcommit: d03bdc7fe5447adb6530886aab848b75fe8fa8ee
ms.translationtype: MT
ms.contentlocale: ja-JP
ms.lasthandoff: 03/11/2022
ms.locfileid: "139904148"
Slug: how-to-resolve-setconfigurationsettingpublisher-needs-to-be-called-before-fromconfigurationsetting-can-be-used-after-moving-to-windows-azure-sdk-1-3
Title: Windows Azure SDK 1.3 に移行した後、fromconfigurationsetting を使用する前に setconfigurationsettingpublisher を呼び出す必要があることを解決する方法
Summary: '[このブログ投稿は、上田マルクス &rsquo; s のブログに投稿されるようになりました'
Content: '<p><em>[このブログ投稿は、上田マルクス &rsquo; s ブログ</em> <a href=""><em></em></a> に掲載されて<em>おり、ここでは表示のためにクロス投稿されています。]</em></p>  <p>&rsquo;Windows Azure sdk 1.2 から sdk 1.3 に web ロールを移行した後にこの例外を受信した場合、sdk 1.3 で導入された新しい完全な IIS モデルに関連する変更が必要になることがあります。 この投稿は、完全な IIS モデルでの変更と、その方法を正しく使用 <code>FromConfigurationSetting</code> する方法を理解するのに役立ちます。 ホストされている Web コアモデルの使用に戻る (以前の SDK リリースと同様) 場合は、それも可能です。</p>  <h2>完全な IIS モデル</h2>  <p>Azure Windows の完全な iis では、単一の web ロール内での複数の web サイトのホストや、<a href="https://msdn.microsoft.com/en-us/library/gg433059.aspx">高度な iis 構成</a>などの新機能が導入されています。 azure SDK 1.3 Windows の新しい完全な iis ホスティングモデルと、これまでに使用したホストされた web コアモデルとの違いについては、「新しい完全な iis 機能: Windows Azure ブログの「hosted web core &rdquo; との違い」を参照してください &ldquo; 。</p>  <p>この投稿の次の図は、の使用方法 <code>FromConfigurationSetting</code> に影響を与える1つの違いを示しています。</p>  <p><img height="272" width="550" src="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/2703.full-iis-app-domain-model_5F00_3.png" alt="full iis app domain model" border="0" title="完全な iis アプリドメインモデル" style="background-image: none; border-right-width: 0px; padding-left: 0px; padding-right: 0px; display: block; float: none; border-top-width: 0px; border-bottom-width: 0px; margin-left: auto; border-left-width: 0px; margin-right: auto; padding-top: 0px"></p>  <p>ホストされた web コアモデル <code><a href="https://msdn.microsoft.com/en-us/library/microsoft.windowsazure.serviceruntime.roleentrypoint.aspx">RoleEntryPoint</a></code> では、コード (例 <code>WebRole.cs</code> :) と web アプリケーションコード ( <code>Default.aspx.cs</code> ASP.NET など) が同じアプリケーションドメインで実行されました。 完全な IIS では、これらは2つの異なるアプリケーションドメインです。 これは、アプリケーションの2つの部分で静的オブジェクトが共有されなくなったことを意味します。これは、新しい完全な IIS ホスティングモデルでを使用 <code>FromConfigurationSetting</code> する方法を理解するための鍵と &rsquo; なります。</p>  <h2>Before: FromConfigurationSetting と Hosted Web Core</h2>  <p>ホストされている Web コアモデルでは、すべてが同じアプリケーションドメインで実行されるため、オブジェクトの初期 <code>CloudStorageAccount</code> 化に共通のパターンが使用されます。 SDK 1.2 のコードの一般的な記述方法を次に示します。</p>  <p>のメソッドで次の <code>WebRole.cs</code> 手順を実行し <code>OnStart</code> ます。</p>  <blockquote>  <pre class="code"><span style="color: #2b91af">CloudStorageAccount</span>.SetConfigurationSettingPublisher(<br>    (configName, configSettingPublisher) =&gt;      {          <span style="color: blue">var </span>connectionString = <br>            <span style="color: #2b91af">RoleEnvironment</span>.GetConfigurationSettingValue(configName);          configSettingPublisher(connectionString);      }  );</pre>  </blockquote>  <p>(関数はこれよりも複雑に見えますが、この記事の情報は引き続き適用されます)。その後、(または ASP.NET MVC コントローラー) で、次のように <code>Default.aspx.cs</code> なります。</p>  <blockquote>  <pre class="code"><span style="color: blue">var </span>account =<br>    <span style="color: #2b91af">CloudStorageAccount</span>.FromConfigurationSetting(<span style="color: #a31515">"MyConnectionString"</span>);</pre>  </blockquote>  <p>このコードは、への呼び出しと <code>FromConfigurationSetting</code> 同じアプリケーションドメインでの呼び出し <code>SetConfigurationSettingPublisher</code> が行われたために動作しました。 ただし、完全な IIS ホスティングモデルでは、これらは2つの異なるアプリケーションドメインです。</p>  <h2>後: FromConfigurationSetting と完全な IIS</h2>  <p>へ <code>SetConfigurationSettingPublisher</code> の呼び出しを配置するための便利な場所はメソッドです。このメソッドは、すべての web アプリケーションコードが実行されているアプリケーションドメインの一部として実行され <code>Application_Start</code> ます。 このメソッドは、に <code>Global.asax.cs</code> あります。 (まだを持っていない場合 &rsquo; は、web アプリケーションプロジェクトを右クリックし、[追加]、 &rdquo; &ldquo; [新しい項目]、 &rdquo; [グローバルアプリケーションクラス] の順 &ldquo; に選択 &ldquo; して追加できます)。 &rdquo; <code>Global.asax.cs</code></p>  <blockquote>  <pre class="code"><span style="color: blue">void </span>Application_Start(<span style="color: blue">object </span>sender, <span style="color: #2b91af">EventArgs </span>e)  {      <span style="color: #2b91af">CloudStorageAccount</span>.SetConfigurationSettingPublisher(<br>        (configName, configSettingPublisher) =&gt;          {              <span style="color: blue">var </span>connectionString =<br>                <span style="color: #2b91af">RoleEnvironment</span>.GetConfigurationSettingValue(configName);              configSettingPublisher(connectionString);          }      );  }</pre>  </blockquote>  <p>これは、web アプリケーション &rsquo; のアプリケーションドメインの一部で <code>WebRole.cs</code> ある場所 &rsquo; に移動しただけのコードとまったく同じです。</p>  <h2>代替手段</h2>  <p>と <code>FromConfigurationSetting</code> の <code>SetConfigurationSettingPublisher</code> 組み合わせによって、構成設定の場所が抽象化されます。 Windows azure の内部と外部の両方で動作するコードを記述するために使用される場合もあります。使用可能な場合は Windows azure から構成設定を読み取り、それ以外の場所に <code>web.config</code> フォールバックすることもできます。</p>  <p>&rsquo;この抽象化レイヤーが不要な場合は、構成設定からオブジェクトを初期化 <code>CloudStorageAccount</code> する別の方法を使用できます。</p>  <blockquote>  <pre class="code"><span style="color: blue">var </span>account = <span style="color: #2b91af">CloudStorageAccount</span>.Parse(<br>    <span style="color: #2b91af">RoleEnvironment</span>.GetConfigurationSettingValue(<span style="color: #a31515">"MyConnectionString"</span>));</pre>  </blockquote>  <p><iframe scrolling="no" frameborder="0" src="https://www.facebook.com/plugins/like.php?href=;layout=box_count&amp;show_faces=false&amp;width=300&amp;action=like&amp;font=segoe+ui&amp;colorscheme=light&amp;height=50" style="width: 300px; height: 50px; overflow: hidden;"></iframe><br><a data-url="" data-count="horizontal" data-via="Windowsazure" href="https://twitter.com/share" class="twitter-share-button">ツイート</a>  <script src="https://platform.twitter.com/widgets.js" type="text/javascript"></script>  </p>'
