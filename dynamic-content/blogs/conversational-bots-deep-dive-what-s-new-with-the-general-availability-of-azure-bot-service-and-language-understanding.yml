### YamlMime:Yaml
ms.openlocfilehash: 0232dbb9c10908a9a2c95fc76fbe13a33b5982e9
ms.sourcegitcommit: d03bdc7fe5447adb6530886aab848b75fe8fa8ee
ms.translationtype: MT
ms.contentlocale: ja-JP
ms.lasthandoff: 03/11/2022
ms.locfileid: "139889527"
Slug: conversational-bots-deep-dive-what-s-new-with-the-general-availability-of-azure-bot-service-and-language-understanding
Title: 会話ボットの詳細-Azure Bot Service および Language Understanding の一般提供の新機能
Summary: Microsoft では、最新の高度なチャットボット機能を開発者に提供しています。これにより、ユーザーのニーズを自然に使用しているアプリを作成することができます。
Content: >-
  <p><em>この投稿は、Azure Bot Service および Language Understanding チームによって作成されました。</em></p>


  <p>Microsoft では、最新の高度なチャットボット機能を開発&#39; 者に提供して、ユーザー &rsquo; のニーズを認識、聞く、読み上げ、理解し、解釈するアプリを作成できるようにします。自然なコミュニケーションのスタイルと方法を使用します。</p>


  <p>本日は、 &rsquo; Microsoft Cognitive Services <a href="https://azure.microsoft.com/en-us/services/cognitive-services/language-understanding-intelligent-service/" target="_blank">Language Understanding サービス (LUIS)</a>と<a href="https://azure.microsoft.com/en-us/services/bot-service/" target="_blank">Azure Bot Service</a>の2つのトップノッチ AI サービスを一般公開し、自然な方法でやり取りするデジタルエージェントを作成して、周囲の環境を理解することを<a href="https://aka.ms/ltbotluis" target="_blank">発表</a> &rsquo; しています。</p>


  <p>可能性について考えてみましょう。データサイエンスの専門知識にかかわらず、あらゆる開発者が、無数の会話チャネルを通じて、アプリケーションのリーチを強化し、対象ユーザーに拡張できる会話 AI を構築できます。 アプリは自然言語、コンテンツに関する理由を理解し、インテリジェントなアクションを実行することができます。 インテリジェントなエージェントを、データサイエンスに関する専門知識のない開発者や組織に持ち込むことは、日常の生活と企業が顧客や従業員と企業を運営する方法において、人間がコンピューターと対話する方法に悪影響を及ぼします。</p>


  <p>過去2年間のプレビュー段階では、デジタル変革を行っている数千人の顧客とのやり取りから、多くのことを学びました。 Microsoft では、一般公開の<a href="https://aka.ms/ltbotluis" target="_blank">お知らせ</a>で、お客様の事例 ( <a href="https://customers.microsoft.com/en-us/story/ups" target="_blank">UPS</a>、 <a href="https://aka.ms/csequadex">Equadex</a>など) の一部を強調表示しています。 この投稿では、Azure Bot Service と LUIS &rsquo; を使用して、これまでに学んだことと、新機能について説明します。 また、自然言語を使用した会話の作成を簡単に開始できるようにする方法についても説明します。</p>


  <h2>Azure Bot Service と LUIS を使用した会話 AI</h2>


  <p>Azure Bot Service は、任意のデバイス上の複数のチャネルにわたって顧客にリーチできる会話ボット向けのスケーラブルで統合されたボット開発およびホスティング環境を提供します。 ボットは、テキスト、音声、カード、画像など、さまざまな感覚様相でユーザー入力を受け入れる会話インターフェイスを提供します。 Azure Bot Service には、Cortana、Facebook Messenger、Skype などのユーザーと対話するための14個のチャネルのセットが用意されています。インテリジェンスは、ユーザー入力について理解し、その理由を理解するために、クラウド AI サービスを通じて Azure Bot Service で有効になります。 Bot は、入力について理解することによって、ユーザーがいくつかのタスクを完了したり、質問に回答したり、アクションハンドラーを通じてチャットしたりするのに役立ちます。 次の図は、Azure Bot Service と Cloud AI サービス (言語の理解、音声認識、Q&a &amp; メーカーなど) を通じて、会話 AI アプリケーションがどのように有効になっているかをまとめたものです。</p>


  <p><a href="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/68da163b-ff6b-4ade-b7fa-65e078762915.png"><img alt="Image 2" border="0" height="847" src="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/5588dd73-2c97-4efb-9a8e-e24ff0f31806.png" style="border: 0px currentcolor; border-image: none; margin-right: auto; margin-left: auto; float: none; display: block; background-image: none;" title="画像2" width="1575"></a></p>


  <p><strong>Language Understanding (LUIS)</strong> はボットブレインの重要な部分であり、bot は自然言語の入力と、それが適切なアクションを実行する理由を理解することができます。 すべてのビジネスシナリオでカスタマイズが不可欠であるため、Language Understanding は、データサイエンスの前の専門知識を必要とせずに、ビジネスのためのカスタムモデルを簡単に構築できます。 メッセージ交換で重要な情報を識別するように設計されており、ユーザーの目標 (インテント) を解釈し、センテンス (エンティティ) からの重要な情報をすぐして、高品質で微妙な言語モデルを作成します。</p>


  <p><strong>Language Understanding</strong>と<strong>Azure Bot Service</strong>の一般提供を通じて、より多くのユーザーの満足させるを実現するための新機能も導入&#39;ます。</p>


  <p><strong>Language Understanding：</strong></p>


  <ul>
   <li>更新されたユーザーインターフェイスを使用して、 <strong>Language Understanding サービス (LUIS)</strong>ユーザー <strong>500</strong>に対して、 &rsquo; より多くのインテントとエンティティ (文で識別されたタスクまたはアクション) と100エンティティ (文から抽出された関連情報) をアプリケーションごとに提供します。</li>
   <li>Language Understanding は7つの <strong>新しい</strong> リージョン (米国中南部、米国東部、米国西部2、東アジア、北ヨーロッパ、ブラジル南部、オーストラリア東部) で <strong>、5つの既存のリージョン</strong> (西ヨーロッパ、米国西部、東米国、米国中西部、東南アジア) で利用できるようになりました。 これにより、お客様はネットワーク待機時間と帯域幅を向上させることができます。</li>
   <li>また、Language Understanding サービスは、英語に加えて、さまざまな機能に対してより多くの言語をサポートしています。
   <ul>
    <li>以前は英語で使用できた、事前に構築されたエンティティ (数値、日付、時刻などの一般的な概念を表す) が <strong>フランス語とスペイン語</strong>で使用できるようになりました。</li>
    <li>事前構築済みのドメイン (ドメイン別にグループ化されたインテントの既製のコレクションと、アプリケーションで直接追加して使用できるエンティティ) は、 <strong>中国語</strong>でも使用できるようになりました。</li>
    <li>LUIS ドメインボキャブラリをカスタマイズする際に役立つ語句の提案は、7つの <strong>新しい言語である中国語、スペイン語、日本語、フランス語、ポルトガル語、ドイツ語、およびイタリア語</strong>で利用できます。</li>
   </ul>
   </li>
  </ul>


  <p>Azure Bot Service：</p>


  <ul>
   <li>Microsoft Bot Framework チャネル、開発ツール、およびホスティングソリューションと統合された環境を提供することで、ボット開発を高速化します。</li>
   <li>Bot Service でサポートされているチャネルを通じてコードを変更することなく、対象ユーザーと Connect します。Office 365 電子メール、GroupMe、Facebook Messenger、Kik、Skype、余裕、Microsoft Teams、Telegram、text/SMS、Twilio、Cortana、Skype for Business &ndash; 、またはアプリまたは web サイトでカスタムエクスペリエンスを提供します。</li>
   <li>Bot Service が <strong>Azure portal に統合</strong>されました。信頼性の高い Azure エコシステムで、24時間365日体制のサポート、監視機能、統合された課金などに簡単にアクセスできます。</li>
   <li>現在、9つの異なるリージョン (米国西部、米国東部、西ヨーロッパ、東南アジア) で <strong>、北ヨーロッパ、オーストラリア南東部、オーストラリア東部、ブラジル南部、および東アジアリージョン</strong>での新しいデプロイを利用できるようになりました。</li>
   <li>また、webchat や directline などの<strong>プレミアムチャネル</strong>も発表しています。プレミアムチャネルは、標準チャネルに対して固有の機能を提供し &nbsp; ます。 <ul>
    <li>パブリックチャットサービスを使用してデータを共有するのではなく、web サイトまたはアプリケーションでユーザーと通信します。</li>
    <li>オープンソースの webchat および directline クライアント。高度なカスタマイズの機会を実現します。</li>
    <li>premium チャネルの99.9% の可用性の保証</li>
   </ul>
   </li>
  </ul>


  <p>開発者は他の Azure サービスに接続してボットを強化し、Cognitive Services を追加して、ボットがより人間に見て聞いて、解釈し、対話できるようにすることができます。 たとえば、言語の上では、Computer Vision および Face Api を使用して、bot に渡される画像や顔を bot が理解できるようにすることができます。</p>


  <h2>お客様 &rsquo; の経験をラーニング</h2>


  <p>数年後、Microsoft は、特定のチャットサービスで特定のユーザーを対象とした、開発者がカスタムソリューションの他の部分を作成することを期待している汎用的なソリューションから、新しいインテリジェントな &rsquo; 会話 &hellip; を構築するために、AI の適用を開始しました。 &nbsp; この後も、このような会話アプリケーションモデルの進化が始まっています。でも、将来の考え方については、既に説明しています。</p>


  <p><strong>Bot は、ビジネスの方法を変更しています。</strong> 私たちは、ビジネスとしてのデジタル変革の重要な部分としてボットを見ているお客様に、常に優れたディスカッションを行っています。 顧客サポートエクスペリエンスを向上させたり、情報に簡単にアクセスしたり、他の方法では web サイトにアクセスできないユーザーにビジネスを公開したりする機会があります。</p>


  <p><strong>開発者は、テクノロジを選択する必要があります。</strong> オープンソーステクノロジの普及に伴って、開発者はソリューションの構築に使用するテクノロジコンポーネントを選択する必要があります。</p>


  <p><strong>優れた会話アプリケーションは複数モーダルです。</strong> Microsoft のお客様は、複数のタスクを実行する会話エクスペリエンスを構築しています。 たとえば、カスタマーサポートボットには、Q &amp; a の検索機能、サポートチケットの入力機能、問題を診断するためのガイド付きダイアログ、および最終的な確認のために人間に渡す予定スケジュールの機能があります。</p>


  <p><strong>AI プラットフォームは、ビジネスのニーズに合わせてスケーリングする必要があります。 </strong>多くの場合、ビジネスシナリオは bot に体系化されている一連の概念に基づいています。 開発者は、任意の制限を受けずにビジネスの複雑さに合わせて拡張できるように、依存するテクノロジを必要とします。</p>


  <p><strong>会話アプリのプラットフォームは信頼性が高く、準拠している必要があります。</strong> 優れた生産性シナリオを実現するために、モバイルアプリプラットフォームが堅牢で安全なプラットフォームを提供するために必要とするのと同じように、アプリケーションプラットフォームを会話します。セキュリティ、信頼性、準拠、プライバシーに関する certifiably が必要です。 さらに、プラットフォームは、開発者がそれを構築して、準拠するソリューションも簡単にビルドできるようにする必要があります。</p>


  <p><strong>企業はグローバルで多言語です。 </strong>ビジネスでは、お客様が選択した言語で世界規模の24/7 を顧客と話している必要があります。</p>


  <p><strong>優れた会話アプリケーションを構築するには、アートがあります。</strong> 多くの場合、80 &rsquo; s と 90 &rsquo; s では、ネイティブアプリの一般的なコントロールとして考えられていることと、web およびモバイル用の 2000 &rsquo; を cemented しているのと同じように、業界では、優れた会話アプリケーションとして意味を定義しています。</p>


  <h2>設計上の主な考慮事項</h2>


  <p>学習 &rsquo; &rsquo; と LANGUAGE UNDERSTANDING (LUIS) の機能を Azure Bot Service 形成するために、次の6点で設計を固定しました。</p>


  <p><strong>コード優先の方法:</strong> Azure Bot Service は、BotBuilder SDK V3 (Node.js) の上に構築されており、開発者がボット &rsquo; の会話機能を完全に制御できるようにするために、コード優先のアプローチを採用しています。 Node.JS と C# の両方で利用できます。オープンソース SDK &rsquo; には、開発者がスロット入力、ダイアログ管理、カード表現などのさまざまなタスクを行う際に役立つ、複数のダイアログの種類と会話オーケストレーションツールが用意されています。</p>


  <p><strong>さまざまなダイアログ管理のフレーバー:</strong> 開発者は、単純な質問回答ボットから、10または15個のターンにまたがる複数のソリューションに至るまで、タスクを完了できるようにするボットを構築します。 Bot 開発者が公開したいさまざまなタスクの種類に対応する、豊富なダイアログ管理のセットが用意されています。 プロンプトの組み合わせ、フォームの塗りつぶし、自然言語、独自のダイアログ管理システムを利用するボットを作成し、プロンプトなどの一部のコンポーネントを再利用することができます。</p>


  <p><strong>Open bot platform:</strong> Azure&#39;s がオープンソーステクノロジに対するコミットメントを構築しているため、SDK と LUIS を使用するアプリケーションは、任意の接続されたインフラストラクチャにデプロイし、複数のチャットチャネルで対象ユーザーをターゲットとする任意のデバイスから使用できます。 このオープン設計によって、パブリッククラウドまたはオンプレミスのインフラストラクチャを含むさまざまなデプロイプラットフォームにサービスを統合できます。</p>


  <p>グローバルおよび多言語: Azure クラウドの一部として、お客様のサービスを最大限に利用可能にするために、かなりの労力が必要になりました。 &nbsp; Azure Bot Service と Language Understanding では、メッセージ交換を理解するために、拡張された言語の一覧がサポートされます。</p>


  <p><strong>すぐに作業を開始する:</strong> Bot はどこにでもデプロイできますが、Azure では、1回のクリックでボットと AI アプリケーションをホストするための豊富な接続されたクラウドサービスを提供しています。 &nbsp; Azure Bot Service と LUIS は、数分で自然な方法でユーザーと会話できる実行中のボットを取得します。 Azure Bot Service は、開発者がビジネスロジックに専念できるように、必要なすべての Azure リソースをプロビジョニングします。 LUIS には、カレンダー、音楽、デバイスなどのカスタマイズ可能な事前構築済みアプリとエンティティディクショナリが用意されているため、ソリューションをより迅速に構築してデプロイできます。 ディクショナリは web の総合的な知識から抽出され、数十億のエントリを提供します。これにより、ユーザーの会話から価値ある情報をモデルで正しく識別できます。</p>


  <p><strong>手間のかからないカスタムモデル:</strong> すべてのビジネスシナリオでカスタマイズが不可欠であるため、LUIS は、専門家以外の機械学習開発者が効果的なカスタム言語モデルを構築できるように、機械学習の理念を活用します。 機械学習は新しいアルゴリズムを作成し、学習器の &ldquo; 精度を向上させることに重点を置いていますが、コンピューターを教育するマシンは教師 &rdquo; の &ldquo; 有効性に焦点を当て &rdquo; ます。 規範となる機械は、ソフトウェアエンジニアリングとプログラミング言語の原則に従うパラダイムシフトです。 開発者は、機械学習アルゴリズムに開発者のドメインナレッジを転送することで、機械学習モデルを構築するための一連のツールを開発者に提供します。 これは、この知識から有用なモデルを作成する Machine Learning とは対照的です。 開発者向けの知識は、スキーマ (LUIS アプリケーション内のインテントとエンティティ) と、ラベル付きの例によって LUIS で表現されます。 &nbsp; これは、プログラムで簡単に使用できるように、正規化を使用してエンティティを確実に認識するためのさまざまな手法をサポートしています。</p>


  <p><strong>常に監視し、学習し、改善します。</strong> Azure Bot Service と LUIS は、Azure 監視ツールを使用して、開発者がボットのパフォーマンスを監視できるようにします。これには、言語を理解するモデルや bot の使用状況などが含まれます。 モデルで入力の処理が開始されると、LUIS はアクティブな学習を開始し、モデルを常に更新して改善できるようにします。 これは、実際のボットトラフィックから最も有益な発話を選択して、モデルに追加し、継続的に改善するのに役立ちます。 LUIS モデルのトレーニングデータに追加するこのようなインテリジェントな選択例により、開発者は、大量のデータを必要としないが、高い精度で実行される &rsquo; コスト効果の高いモデルを構築できます。</p>


  <h2>Bot Service と Language Understanding の概要</h2>


  <p>このセクション &rsquo; では、ユーザーを理解するために Language Understanding (LUIS) を使用する Azure Bot Service を使用してボットを作成します。 自然言語を使用して bot を作成する場合、bot は、意図を特定することによってユーザーの操作を決定します。 この目的は、読み上げられた入力またはテキスト入力、または発話によって決定されます。これは、Bot 開発者がコード化したアクションにマップできます。 たとえば、メモを受け取る bot はメモを認識します。 メモを作成するための機能を呼び出すインテントを作成します。 ボットでは、発話の中の重要な言葉であるエンティティを抽出する必要もあります。 メモを受け取る bot の例として、メモがあります。 タイトルエンティティは、各ノートのタイトルを識別します。</p>


  <h3>Bot Service での Language Understanding ボットの作成</h3>


  <p>Bot を作成するには <a href="https://portal.azure.com/" target="_blank">Azure portal</a>にログインし、メニューブレードで [新しいリソースの作成] を選択し、[<strong> AI + Cognitive Services</strong>] を選択します。</p>


  <p><a href="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/0db3c822-35ef-4026-b658-0008dc1bab90.png"><img alt="AI   Cognitive Services" border="0" height="480" src="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/2847e8f3-06f5-4612-9acf-6a7080b7ac57.png" style="border: 0px currentcolor; border-image: none; margin-right: auto; margin-left: auto; float: none; display: block; background-image: none;" title="AI Cognitive Services" width="517"></a></p>


  <p>提案を参照するか、 <strong>Web アプリボット</strong>を検索することができます。</p>


  <p><a href="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/b2c7cbd4-4553-4803-abea-8057f595d71f.png"><img alt="Web App Bot" border="0" height="277" src="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/f1d486c6-9e8e-4c60-ae1b-35b1ddff62ca.png" style="border: 0px currentcolor; border-image: none; margin-right: auto; margin-left: auto; float: none; display: block; background-image: none;" title="Web アプリボット" width="640"></a></p>


  <p>選択すると、Bot サービスブレードが表示されます。これは、Azure サービスのユーザーになじみのあるものです。 &rsquo;そうでない場合は、次のように、Bot サービスが公開されている場所などのボットの作成に使用するサービスに関する情報を指定できます。 [作成] <strong>Bot Service</strong> 必要な情報を入力し、[作成] をクリックします。 これによって、ボット サービスと LUIS アプリが作成され、Azure にデプロイされます。 いくつかの興味深いフィールド:</p>


  <ul>
   <li>[ <strong>アプリ名] を</strong> ボット名に&rsquo;設定します。 この名前は、ボットがクラウドにデプロイされるときに、サブドメインとして使用されます (mynotesbot.azurewebsites.net など)。 この名前は、ボットに関連付けられる LUIS アプリの名前としても使用されます。 後で、ボットに関連付けられた LUIS アプリを探すために使用できるよう、名前をコピーしておきます。</li>
   <li>サブスクリプション、リソース グループ、ホスティング プラン、および場所を選択します。</li>
   <li>価格については、無料の価格レベルを <strong>選択できます</strong>。 さらに必要な場合は、いつでも戻って変更できます。</li>
   <li>このサンプルでは、ボット テンプレート フィールドの<strong> Language Understanding (C#)</strong> <strong>テンプレートを選択</strong> します。</li>
   <li>最後の必須フィールドで、ボット<strong>Azure Storage状態を</strong>格納する場所を&rsquo;選択します。 これは、ボットが各ユーザーが会話のどこにいるか追跡する場所と考えて考えておきます。</li>
  </ul>


  <p><a href="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/f2e6eca0-bb5c-4bfe-9371-79e0362edfb9.png"><img alt="Bot Service" border="0" height="756" src="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/82551100-22f6-46c9-99de-7e7f38c4c530.png" style="border: 0px currentcolor; border-image: none; margin-right: auto; margin-left: auto; float: none; display: block; background-image: none;" title="Bot Service" width="314"></a></p>


  <p>これで完了したら&rsquo;、[作成] をクリック <strong>できます</strong>。 Azure では、ボットの運用に必要なリソースや、自然言語モデルをホストするための LUIS アカウントなど、ボットの作成について設定します。 完了すると、アプリ&rsquo;の右上隅にあるベルを介して通知を受け取Azure portal。<br>

  次に、ボット サービスがデプロイされたと確認します。</p>


  <ul>
   <li>[通知] (Azure portal の上端にあるベル アイコン) をクリックします。 通知が、 <strong>[デプロイが開始されました]</strong> から <strong>[デプロイメントに成功しました]</strong> に変わります。</li>
   <li>通知が [デプロイに成功 <strong>しました] に変わると、</strong>その通知の [<strong> リソースに移動</strong> ] をクリックします。</li>
  </ul>


  <h3>ボットを試す</h3>


  <p>これで、動作するボットが作成されます。 試&rsquo;しに行ってみ。</p>


  <p>ボットが登録されたら、 <strong>[Test in Web Chat]\(Web チャットでのテスト\)</strong> をクリックして、Web チャット ウィンドウを開きます。 [hello &quot;] と&quot; 入力Web チャット。</p>


  <p><a href="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/d80ed715-8db8-4264-8820-17cdd08bd19f.png"><img alt="NotesBot - Test in Web Chat" border="0" height="753" src="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/ed004da1-a3c1-496d-b335-924e37b5c637.png" style="border: 0px currentcolor; border-image: none; margin-right: auto; margin-left: auto; float: none; display: block; background-image: none;" title="NotesBot - Web チャット でのテスト" width="817"></a></p>


  <p>ボットは、Greeting に到達したと &quot;言って応答します。 「hello」と言いました&quot;。 これにより、ご自身のメッセージはボットによって受信され、そのボットが作成した既定の LUIS アプリに渡されたことが確認されます。 この既定の LUIS アプリによって、あいさつの意図が検出されました。</p>


  <p><strong>メモ：</strong> 場合によっては、ボットが応答する前に、起動後の最初のメッセージまたは 2 つを再試行する必要がある場合があります。</p>


  <p>ヴィオラ！ ボットが動作しています。 既定のボットは、いくつかのことをしか知りません。これは、いくつかのあいさつだけでなく、ヘルプとキャンセルを認識します。 次のセクションでは、ボット&rsquo;の LUIS アプリを変更して、Note taking ボットの新しい意図を追加します。</p>


  <h3>LUIS アプリを変更する</h3>


  <p>Azure へのログイン <a href="https://www.luis.ai/" target="_blank">www.luis.ai</a> 同じアカウントを使用して、アカウントにログインします。 <strong>[My apps]\(マイ アプリ\)</strong> をクリックします。 すべてがうまくい&rsquo;っている場合は、アプリの一覧で、アプリの作成時に [<strong>Bot Service</strong>] ブレードから <strong></strong> [アプリ名] と同じ名前のアプリBot Service。</p>


  <p>アプリを開いて、次の 4 つの意図が表示されます:キャンセル、あいさつ、ヘルプ、およびなし。 既に説明した最初の 3 つ。 <strong>LUIS</strong> では、他のすべてをキャプチャする特別な意図 &ldquo;はありません&rdquo;。</p>


  <p>このサンプルでは、ユーザーに対&rsquo;して 3 つの意図 ( <strong>Note.Create</strong> と <strong>Note.ReadAloud) を追加します</strong>。 LUIS に関する便利な機能の 1 つは、アプリケーションをブートストラップするために使用できる事前構築済みのドメインです。そのうちの 1 つは Note です。</p>


  <ul>
   <li>ページの <strong>左下にある [事前</strong> 構築済みドメイン] をクリックします。 [メモ ドメイン <strong>] を見 </strong>つけて、[ドメインの追加 <strong>] をクリックします</strong>。</li>
   <li>このチュートリアルでは&#39;に含まれるすべての意図を使用する必要はありません。<strong></strong> [<strong>意図] ページ</strong>で、次の各意図名をクリックし、[意図の削除<strong></strong>] ボタンをクリックしてアプリから削除します。
   <ul>
    <li>Note.ShowNext</li>
    <li>Note.DeleteNoteItem</li>
    <li>Note.Confirm</li>
    <li>Note.Clear</li>
    <li>Note.CheckOffItem</li>
    <li>Note.AddToNote</li>
    <li>Note.Delete</li>
   </ul>
   </li>
   <li><strong>大事な：</strong> LUIS アプリに残す必要がある意図は、Note.ReadAloud、Note.Create、None、Help、Greeting、Cancel の各意図のみです。&nbsp; まだ存在&rsquo;する場合、アプリは引き続き動作しますが、より多くの場合、一貫性のない動作をする可能性があります。</li>
  </ul>


  <p>前述のように、ここで追加した意図&rsquo;は、ユーザーがボットに期待する操作の種類を表します。&nbsp;これらは事前に定義されている&rsquo;&rsquo;ので、モデルに対してそれ以上のチューニングを行う必要はないので、モデルのトレーニングと発行に進む必要があります。</p>


  <ul>
   <li>右上にある <strong>[トレーニング</strong> ] ボタンをクリックして、アプリをトレーニングします。&nbsp; トレーニングでは、&rsquo;意図とエンティティを作成し、発話を入力してラベルを付け、機械学習モデルを生成することで、モデルに入力したすべてのものを 1 回のクリックで取得します。&nbsp; LUIS ポータルでここでアプリを&rsquo;テストするか、ボットで使用できるよう発行に進む必要があります。</li>
   <li>上部のナビゲーション バーの <strong>[PUBLISH]\(発行\)</strong> をクリックして、 <strong>[発行]</strong> ページを開きます。 [Publish <strong></strong> <strong>to production slot]/(実稼働スロットに発行する)ボタンを</strong>クリックします。 発行に成功した後、 <strong>[Publish App]\(アプリの発行\)</strong> ページの <strong>[エンドポイント]</strong> 列に表示されている URL を、リソース名 Starter_Key で始まる行にコピーします。 後でボット コードで使用するには、この URL を&rsquo;保存します。 URL の形式は次の例のようになります。 <a href="https://westus.api.cognitive.microsoft.com/luis/v2.0/apps/xxxxxxxxxxxxxxxxx?subscription-key=xxxxxxxxxxxxxx3&amp;timezoneOffset=0&amp;verbose=true&amp;q=">https://westus.api.cognitive.microsoft.com/luis/v2.0/apps/xxxxxxxxxxxxxxxxx?subscription-key=xxxxxxxxxxxxxx3&amp;timezoneOffset=0verbose&amp;=trueq&amp;=</a></li>
  </ul>


  <p>これでLanguage Understandingアプリケーションはボットの準備が整いました。 ユーザーがメモの作成、削除、または読み取りを求める場合、Language Understanding によってそれが識別され、適切な意図がボットに返されます。 次のセクションでは、これらの&rsquo;意図を処理するロジックをボットに追加します。</p>


  <h3>ボット コードの変更</h3>


  <p>このBot Serviceは、従来の開発環境で動作するために設定されています。ソース コードを GIT と同期し、お気に入りの開発環境で動作します。 しかし、Azure Bot Serviceポータルで右に編集する機能も用意されています。これは、実験に最適です。 <strong>[Build]\(ビルド\)</strong> 、 <strong>[Open online code editor]\(オンライン コード エディターを開く\)</strong> の順にクリックします。</p>


  <p><a href="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/2e626443-f7bf-4a12-9fca-25e8072c72a7.png"><img alt="Modify the bot code" border="0" height="120" src="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/94cb0679-6430-4b0d-ae98-fcb0ebc820a9.png" style="border: 0px currentcolor; border-image: none; display: inline; background-image: none;" title="ボット コードを変更する" width="240"></a></p>


  <p>まず、いくつかのプリアンブルです。 コード エディターで BasicLuisDialog.cs を開きます。 LUIS アプリから Cancel、Greeting、Help、None の各意図を処理するためのコードが含まれている。</p>


  <p>次のステートメントを追加します。</p>


  <p>using System.Collections.Generic;</p>


  <h3>ノートを格納するクラスの作成</h3>


  <p>BasicLuisDialog コンストラクターの後に次のコードを追加します。</p>


  <pre>

  private readonly Dictionary&lt;string, Note&gt; noteByTitle = new Dictionary&lt;string, Note&gt;();


  private Note noteToCreate;


  private string currentTitle;


  // CONSTANTS


  // Name of note title entity


  public const string Entity_Note_Title = &quot;Note.Title&quot;;


  // Default note title


  public const string DefaultNoteTitle = &quot;default&quot;;


  [Serializable]


  public sealed class Note : IEquatable&lt;Note&gt;


  {


  public string Title { get; set; }


  public string Text { get; set; }


  public override string ToString()


  {


  return $&quot;[{this.Title} : {this.Text}]&quot;;


  }


  public bool Equals(Note other)


  {


  return other != null


  &amp;&amp; this.Text == other.Text


  &amp;&amp; this.Title == other.Title;


  }


  public override bool Equals(object other)


  {


  return Equals(other as Note);


  }


  public override int GetHashCode()


  {


  return this.Title.GetHashCode();


  }


  }</pre>


  <h3>Note.Create 意図を処理する</h3>


  <p>注.意図を作成し、次のコードを BasicLuisDialog クラスに追加します。</p>


  <pre>

  [LuisIntent(&quot;Note.Create&quot;)]


  public Task NoteCreateIntent(IDialogContext context, LuisResult result)


  {


  EntityRecommendation title;


  if (!result.TryFindEntity(Entity_Note_Title, out title))


  {


  // Prompt the user for a note title


  PromptDialog.Text(context, After_TitlePrompt, &quot;What is the title of the note you want to create?&quot;);


  }


  else


  {


  var note = new Note() { Title = title.Entity };


  noteToCreate = this.noteByTitle[note.Title] = note;


  // Prompt the user for what they want to say in the note


  PromptDialog.Text(context, After_TextPrompt, &quot;What do you want to say in your note?&quot;);


  }


  return Task.CompletedTask;


  }


  private async Task After_TitlePrompt(IDialogContext context, IAwaitable&lt;string&gt; result)


  {


  EntityRecommendation title;


  // Set the title (used for creation, deletion, and reading)


  currentTitle = await result;


  if (currentTitle != null)


  {


  title = new EntityRecommendation(type: Entity_Note_Title) { Entity = currentTitle };


  }


  else


  {


  // Use the default note title


  title = new EntityRecommendation(type: Entity_Note_Title) { Entity = DefaultNoteTitle };


  }


  // Create a new note object


  var note = new Note() { Title = title.Entity };


  // Add the new note to the list of notes and also save it in order to add text to it later


  noteToCreate = this.noteByTitle[note.Title] = note;


  // Prompt the user for what they want to say in the note


  PromptDialog.Text(context, After_TextPrompt, &quot;What do you want to say in your note?&quot;);


  }


  private async Task After_TextPrompt(IDialogContext context, IAwaitable&lt;string&gt; result)


  {


  // Set the text of the note


  noteToCreate.Text = await result;


  await context.PostAsync($&quot;Created note **{this.noteToCreate.Title}** that says \&quot;{this.noteToCreate.Text}\&quot;.&quot;);


  context.Wait(MessageReceived);


  }

  </pre>


  <h3>Note.ReadAloud 意図の処理</h3>


  <p>ボットは Note.ReadAloud 意図を使用してメモの内容を表示したり、メモのタイトルが検出されない場合は&#39;表示できます。 次のコードを BasicLuisDialog クラスに貼り付けます。</p>


  <pre>

  [LuisIntent(&quot;Note.ReadAloud&quot;)]


  public async Task NoteReadAloudIntent(IDialogContext context, LuisResult result)


  {


  Note note;


  if (TryFindNote(result, out note))


  {


  await context.PostAsync($&quot;**{note.Title}**: {note.Text}.&quot;);


  }


  else


  {


  // Print out all the notes if no specific note name was detected


  string NoteList = &quot;Here&#39;s the list of all notes: \n\n&quot;;


  foreach (KeyValuePair&lt;string, Note&gt; entry in noteByTitle)


  {


  Note noteInList = entry.Value;


  NoteList += $&quot;**{noteInList.Title}**: {noteInList.Text}.\n\n&quot;;


  }


  await context.PostAsync(NoteList);


  }


  context.Wait(MessageReceived);


  }


  public bool TryFindNote(string noteTitle, out Note note)


  {


  // TryGetValue returns false if no match is found.


  bool foundNote = this.noteByTitle.TryGetValue(noteTitle, out note);


  return foundNote;


  }


  public bool TryFindNote(LuisResult result, out Note note)


  {


  note = null;


  string titleToFind;


  EntityRecommendation title;


  if (result.TryFindEntity(Entity_Note_Title, out title))


  {


  titleToFind = title.Entity;


  }


  else


  {


  titleToFind = DefaultNoteTitle;


  }


  // TryGetValue returns false if no match is found.


  return this.noteByTitle.TryGetValue(titleToFind, out note);


  }</pre>


  <h3>ボットのビルド</h3>


  <p>切り取りおよび貼り付け部分が完了したら、コード エディターで <strong>build.cmd</strong> を右クリックし、[コンソールから実行] <strong>を選択できます</strong>。 ボットは、オンライン コード エディター環境内からビルドおよびデプロイされます。</p>


  <h3>ボットのテスト</h3>


  <p>Azure Portal で、 <strong>[Test in Web Chat]\(Web チャットでのテスト\)</strong> をクリックしてボットをテストします。 メモの作成、メモ&quot;の読み&quot;&quot;&quot;取り、メモの削除など、メッセージを&quot;入力してみてください。&nbsp;&quot;&rsquo;自然言語を使用する場合は、要求の状態をより柔軟に設定できます。さらに、Language Understanding s Active ラーニング 機能を使用して、Language Understanding&rsquo;&rsquo; アプリケーションを開き、理解していないとアプリの効果を高め得る可能性があるものを提案することができます。</p>


  <p><a href="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/0525790e-7c7a-4ebb-bbd0-6e292a718f28.png"><img alt="Test in Web Chat" border="0" height="768" src="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/5c6a1ce6-f390-43d3-99ca-a4ca9121aa17.png" style="border: 0px currentcolor; border-image: none; margin-right: auto; margin-left: auto; float: none; display: block; background-image: none;" title="テストのWeb チャット" width="570"></a></p>


  <p>ヒント: ボットが常に正しい意図またはエンティティを認識&#39;認識しない場合は、トレーニングする発話の例を追加することで、Language Understanding アプリ&#39;のパフォーマンスを向上させます。 ボットのコードを変更Language Understanding、アプリを再トレーニング&#39;できます。</p>


  <h2>その&#39;(今のところ)</h2>


  <p>ここからは、&rsquo;始め始めたばかりです。&nbsp; ボット サービスに戻り、ボットをさまざまな会話チャネルに接続できます。&nbsp; 事前構築済みの意図を削除し、アプリケーション用の独自のカスタム 意図の作成を開始できます。</p>


  <p>会話&rsquo;型アプリケーションの作成に関する世界が開かれ、簡単&rsquo;に開始できます。&nbsp; 作成した情報とフィードバックをお待ちしております。 詳細については、次のサイトを参照してください。</p>


  <ul>
   <li>Azure Bot Service: <a href="https://azure.microsoft.com/en-us/services/bot-service/" target="_blank">Web サイト</a></li>
   <li>Language Understanding サービス (LUIS): <a href="https://azure.microsoft.com/en-us/services/cognitive-services/language-understanding-intelligent-service/" target="_blank">Web サイト</a> と <a href="https://www.luis.ai/" target="_blank">ポータル</a></li>
   <li>参照アーキテクチャについては、以下を参照してください <a href="https://aka.ms/scenarios-abs">https://aka.ms/scenarios-abs</a></li>
  </ul>


  <p>コーディングをお楽しみください!</p>


  <p>Azure Bot ServiceチームLanguage Understandingチーム</p>
