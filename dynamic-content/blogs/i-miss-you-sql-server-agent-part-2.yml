### YamlMime:Yaml
ms.openlocfilehash: f06ead8ed47cc42c318edaee01d59ef31f479d7c
ms.sourcegitcommit: d03bdc7fe5447adb6530886aab848b75fe8fa8ee
ms.translationtype: MT
ms.contentlocale: ja-JP
ms.lasthandoff: 03/11/2022
ms.locfileid: "139896739"
Slug: i-miss-you-sql-server-agent-part-2
Title: 'I Miss You SQL Server Agent: パート 2'
Summary: '[この記事は、チームによってSQL Azureされました。]現在、SQL Azureエージェントの概念はSQL Serverではありません。 このブログシリーズでは、軽量の代替を作成しています。'
Content: '<p>[この記事は、チームによってSQL Azureされました。]</p><p>現在、SQL Azureエージェントの概念はSQL Serverではありません。 このブログシリーズでは、Azure Worker ロールを使用して軽量の代替Windowsを作成します。 このシリーズの最初のブログ記事では、Windows Azure worker ロールと SQL Server Agent の比較について説明し、Visual Studio といくつかのコードを開始しました。 このブログ記事では、1 日に 1 回 "ジョブ" を完了するメカニズムを作成します。</p>  <h2>データベースの作成</h2>  <p>Windows Azure はステートレス プラットフォームです。ワーカー ロールは、いつでもデータ センター内の別のサーバーに移動できます。 この理由から、ジョブの完了状態を自分で保持する必要があります。そのため、明らかな選択がSQL Azure。 これを行うには、<b>SQLServerAgent</b> という名前の SQL Azure サーバーの下にデータベースを作成しました (<b>データベース名 msdb は</b>予約されています)。 このデータベースでは、<b>jobactivity </b>という名前のテーブルを作成しました。これは、エージェント テーブル <b>sysjobactivity</b> のオンプレミスSQL Server簡略化されたバージョンです。 使用した作成スクリプトを次に示します。</p>  <pre class="csharpcode"><span class="kwrd">CREATE</span> <span class="kwrd">TABLE</span> [dbo].[jobactivity](      [job_id] uniqueidentifier <span class="kwrd">NOT</span> <span class="kwrd">NULL</span> <span class="kwrd">PRIMARY</span> <span class="kwrd">KEY</span>,      [job_name] nvarchar(100) <span class="kwrd">NOT</span> <span class="kwrd">NULL</span>,      [start_execution_date] datetime <span class="kwrd">NOT</span> <span class="kwrd">NULL</span>,      [stop_execution_date] datetime <span class="kwrd">NULL</span>,  ) </pre>      <p>job_idオブジェクトの毎日のインスタンスを表す場合、job_name は実行されるジョブの任意のキーです。このテーブルを使用して、さまざまな名前のジョブを実行できます。</p>    <h2>ジョブの開始と停止の追跡</h2>    <p>また、ジョブの開始時にテーブルに行を追加し、ジョブの終了時に実行を停止する日付を設定するストアド プロシージャも必要です。 <b>StartJob ストアド プロシージャ</b>は、1 つの worker ロールがジョブを開始したというシグナルとしてジョブ実行の行を追加する前に、この日のジョブが開始されていないと保証します。 これにより、ジョブを複数回実行することなく、複数の worker ロールSQL Serverエージェントとして機能することができます。</p>    <pre class="csharpcode"><span class="kwrd">CREATE</span> <span class="kwrd">PROCEDURE</span> StartJob (      @job_name <span class="kwrd">varchar</span>(100),      @job_id uniqueidentifier <span class="kwrd">OUTPUT</span>)  <span class="kwrd">AS</span>    <span class="kwrd">BEGIN</span> <span class="kwrd">TRANSACTION</span>    <span class="kwrd">SELECT</span>    @job_id  <span class="kwrd">FROM</span>    [jobactivity]  <span class="kwrd">WHERE</span>    DATEDIFF(d, [start_execution_date], GetDate()) = 0       <span class="kwrd">AND</span> [job_name] = @job_name    <span class="kwrd">IF</span> (@@<span class="kwrd">ROWCOUNT</span>=0)  <span class="kwrd">BEGIN</span>      <span class="rem">-- Has Not Been Started</span>      <span class="kwrd">SET</span> @job_id = NewId()      INSERT <span class="kwrd">INTO</span> [jobactivity]           ([job_id],[job_name],[start_execution_date])          <span class="kwrd">VALUES</span> (@job_id, @job_name, GetDate())  <span class="kwrd">END</span>  <span class="kwrd">ELSE</span>  <span class="kwrd">BEGIN</span>       <span class="kwrd">SET</span> @job_id = <span class="kwrd">NULL</span>  <span class="kwrd">END</span>    <span class="kwrd">COMMIT</span> <span class="kwrd">TRAN</span></pre>      <p>もう 1 つのストアド プロシージャ <b>である StopJob</b> は次のように表示されます。</p>    <pre class="csharpcode"><span class="kwrd">CREATE</span> <span class="kwrd">PROCEDURE</span> [dbo].[StopJob](      @job_id uniqueidentifier)        <span class="kwrd">AS</span>    <span class="kwrd">UPDATE</span> [jobactivity]  <span class="kwrd">SET</span> [stop_execution_date] = GetDate()  <span class="kwrd">WHERE</span> job_id = @job_id</pre>      <p>    <p>次に、新しいストアド プロシージャを呼び出す C# を worker ロール コードに記述しましょう。</p>    <pre class="csharpcode"><span class="kwrd">protected</span> Guid? StartJob(String jobName)  {      <span class="kwrd">using</span> (SqlConnection sqlConnection = <span class="kwrd">new</span> SqlConnection(          ConfigurationManager.ConnectionStrings[<span class="str">&quot;SQLServerAgent&quot;</span>].              ConnectionString))      {          <span class="kwrd">try</span>          {              <span class="rem">// Open the connection</span>              sqlConnection.Open();                SqlCommand sqlCommand = <span class="kwrd">new</span> SqlCommand(                  <span class="str">&quot;StartJob&quot;</span>, sqlConnection);                sqlCommand.CommandType =                  System.Data.CommandType.StoredProcedure;                sqlCommand.Parameters.AddWithValue(<span class="str">&quot;@job_name&quot;</span>, jobName);                <span class="rem">// WWB: Sql Job Id Output Parameter</span>              SqlParameter jobIdSqlParameter = <span class="kwrd">new</span>                   SqlParameter(<span class="str">&quot;@job_id&quot;</span>, SqlDbType.UniqueIdentifier);              jobIdSqlParameter.Direction = ParameterDirection.Output;              sqlCommand.Parameters.Add(jobIdSqlParameter);                sqlCommand.ExecuteNonQuery();                <span class="kwrd">if</span> (jobIdSqlParameter.Value == DBNull.Value)                  <span class="kwrd">return</span> (<span class="kwrd">null</span>);              <span class="kwrd">else</span>                  <span class="kwrd">return</span> ((Guid)jobIdSqlParameter.Value);          }          <span class="kwrd">catch</span> (SqlException)          {              <span class="rem">// WWB: SQL Exceptions Means It Is Not Started</span>              <span class="kwrd">return</span> (<span class="kwrd">null</span>);          }      }  }    <span class="kwrd">protected</span> <span class="kwrd">void</span> StopJob(Guid jobId)  {      <span class="kwrd">using</span> (SqlConnection sqlConnection = <span class="kwrd">new</span> SqlConnection(          ConfigurationManager.ConnectionStrings[<span class="str">&quot;SQLServerAgent&quot;</span>].              ConnectionString))      {          <span class="rem">// Open the connection</span>          sqlConnection.Open();            SqlCommand sqlCommand = <span class="kwrd">new</span> SqlCommand(              <span class="str">&quot;StopJob&quot;</span>, sqlConnection);            sqlCommand.CommandType =              System.Data.CommandType.StoredProcedure;            sqlCommand.Parameters.AddWithValue(<span class="str">&quot;@job_id&quot;</span>, jobId);            sqlCommand.ExecuteNonQuery();      }  }</pre>      <p>worker ロールの Run() メソッドで完全に結び付け、spTestJob ストアド プロシージャを午後 1 時の直後に 1 日に 1 回実行します。</p>    <pre class="csharpcode"><span class="kwrd">public</span> <span class="kwrd">override</span> <span class="kwrd">void</span> Run()  {      Trace.WriteLine(<span class="str">&quot;WorkerRole1 entry point called&quot;</span>, <span class="str">&quot;Information&quot;</span>);        <span class="kwrd">while</span> (<span class="kwrd">true</span>)      {          DateTime nextExecutionTime = <span class="kwrd">new</span> DateTime(              DateTime. UtcNow.Year,               DateTime. UtcNow.Month, DateTime. UtcNow.Day,              13, 0, 0);          <span class="kwrd">if</span> (DateTime. UtcNow &gt; nextExecutionTime)          {              <span class="rem">// WWB: After 1:00 pm, Try to Get a Job Id.</span>              Guid? jobId = StartJob(<span class="str">&quot;TestJob&quot;</span>);              <span class="kwrd">if</span> (jobId.HasValue)              {                  Trace.WriteLine(<span class="str">&quot;Working&quot;</span>, <span class="str">&quot;Information&quot;</span>);                    <span class="rem">// WWB: This Method Has the Code That Execute</span>                  <span class="rem">// A Stored Procedure, The Actual Job</span>                  ExecuteTestJob();                    StopJob(jobId.Value);              }                <span class="rem">// WWB: Sleep For An Hour</span>              <span class="rem">// This Reduces The Calls To StartJob</span>              Thread.Sleep(3600000);          }          <span class="kwrd">else</span>          {              <span class="rem">// WWB: Check Every Minute</span>              Thread.Sleep(60000);          }      }  }</pre>      <p>上記のサンプルにエラー処理コードが何も含めなかった場合、何が起こるかという例外が発生します。 一時的なエラー SQL Azure返された場合は、どうなるでしょうか。 worker ロールがデータ センター内の別のサーバーにリサイクルされた場合は、どうなるでしょうか。 これらの問題については、コードを追加して、このシリーズのパート 3 で対処します。</p>    <h2>まとめ</h2>    <p>質問、懸念事項、コメントはありますか? 以下に投稿すると、対処を試みることができます。</p>'
