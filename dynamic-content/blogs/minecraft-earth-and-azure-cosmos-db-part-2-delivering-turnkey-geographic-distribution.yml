### YamlMime:Yaml
ms.openlocfilehash: 72baa44cc5c11ee97d5531f123ea8d54138ee1a4
ms.sourcegitcommit: d03bdc7fe5447adb6530886aab848b75fe8fa8ee
ms.translationtype: MT
ms.contentlocale: ja-JP
ms.lasthandoff: 03/11/2022
ms.locfileid: "139895376"
Slug: minecraft-earth-and-azure-cosmos-db-part-2-delivering-turnkey-geographic-distribution
Title: 'Minecraft地球と Azure Cosmos DB パート 2: ターンキーの地理的分布の配信'
Summary: この投稿は、組織が実際のニーズを満たすために Azure Cosmos DB を使用する方法と、組織に対して行っている違いについて、2 部構成のシリーズのパート 2 です。
Content: >-
  <p><i>この投稿は、組織が実際のニーズを満たすために Azure Cosmos DB&rsquo; を使用する方法と、組織に対する違いについて、2 部構成のシリーズのパート 2 です。<strong> </strong>パート <a href="https://azure.microsoft.com/blog/minecraft-earth-and-azure-cosmos-db-part-1-extending-minecraft-into-our-real-world" target="_blank">1</a> では、Minecraft Earth のサービス開発者が Azure Cosmos DB&rsquo;&mdash; を選ぶという課題と、それを使用して世界中のすべてのプレーヤーが実行したほぼすべてのアクションを超低遅延でキャプチャする方法について説明しました。パート 2&rsquo; では、ソリューションのワークロードと、Azure Minecraft DB 上に構築することにより、Earth サービス開発者がどのようにメリットを得たCosmosします。</i></p>


  <h2>地理的分布と複数リージョンの書き込み</h2>


  <p>Minecraft Earth サービス開発者は、Azure Cosmos DB のターンキー地理的分散機能を使用して、フォールト トレランス、ディザスター リカバリー、最小待機時間の 3 つの目標を達成しました。後者は、Azure Cosmos DB&mdash; のマルチマスター機能を使用して複数リージョンの書き込みを有効にすることで達成されます。<a href="https://docs.microsoft.com/en-us/azure/cosmos-db/how-to-multi-master" target="_blank"></a> サポートされている各地域には、少なくとも 2 つのサービス インスタンスがあります。 たとえば、北米 では、Minecraft Earth サービスは米国西部と米国東部の Azure リージョンで実行され、Azure の他のコンポーネントを使用して、ユーザーに近い方を特定し、トラフィックを適切にルーティングします。</p>


  <p>Minecraft Earth サービス開発チームのシニア ソフトウェア エンジニアである Nathan Sosn engineere 氏は、次の説明を行います。</p>


  <p style="margin-left: 40px;"><em>&ldquo;Azure は非常に多くのグローバル リージョンで利用できたので、世界中のフットプリントを簡単に確立し、グローバルな規模で低待機時間のゲーム エクスペリエンスを実現しました。しかし、ほとんどの場合、ユーザーは 1 つの地域内を移動します。つまり、各地域のすべてのサービス インスタンス間にマルチマスター書き込みを設定しています。&rsquo;&rsquo;つまり、サンフランシスコに住んでいる選手はヨーロッパに旅行するのも、このような場合にラウンドトリップの待ち時間を最小限に抑えるために別のメカニズムを使用して Minecraft Earthits&mdash;&rsquo;&rsquo; を引き続きプレイしているという言い方ではありません。&rdquo;</em></p>


  <h2>1 秒あたりの要求ユニット数 (RU/秒) 消費量</h2>


  <p>Azure Cosmos DB では、1 秒あたりの要求ユニット数 (RU/秒) &ldquo;&rdquo; は、保証されたデータベース スループットを予約するために使用される通貨です。 Minecraft Earth の場合、一般的な書き込み要求コンシューマーは約 10 RU/s で、追加の 2 - 3 RU/s は<a href="https://azure.microsoft.com/en-us/services/service-bus" target="_blank">、Azure Service Bus</a> によって駆動される追加専用イベント ログのバックグラウンド処理に使用されます。</p>


  <p style="margin-left: 40px;"><em>&ldquo;RU&rsquo;/秒の使用量は非常に線形的にスケーリングされるという結果が見つかりました。容量を増やす必要があるのは、1 秒あたりの書き込み要求が大幅に増加した場合のみです。最初は、より多&rdquo;くのスループットが必要だと考えていましたが、多くの最適化を行う必要がある、と Sosn thoughte は言います。 &ldquo;&rsquo;&mdash;&mdash;元の設計では、要求の量と複雑さを比較的適切に処理しましたが、全体的なデータ ボリュームのために、システムがシャード化されるケースは処理されません。物理的に再パーティション分割されます。&rdquo;</em></p>


  <p>その理由は、割り当てられた RU/s が物理パーティション間で均等に分散され、最新のデータを持つ物理パーティションが他のパーティションよりもはるかにホットに実行されたためです。</p>


  <p style="margin-left: 40px;"><em>&ldquo;幸い、システムはクライアントのビューにマテライズされる追加専用ログとしてモデル化されています。そのため、Azure Cosmos DB&rdquo; から直接古いデータを読み取ることはほとんどないので、Sosnizede &ldquo; について説明しています。データ モデルは柔軟性が高く、イベントをビューに処理した後にコールド ストレージにアーカイブし、Time to Live 機能を使用して Azure Cosmos DB から削除することができます。<a href="https://docs.microsoft.com/en-us/azure/cosmos-db/time-to-live" target="_blank"></a>&rdquo;</em></p>


  <p>現在、サービスの現在の&rsquo;アーキテクチャでは、Sosn scalabilitye&rsquo; はスケーラビリティについて心配する必要が全くない状態です。</p>


  <p style="margin-left: 40px;"><em>&ldquo;開発中に、最大 100 万 RU/s&rdquo; の Azure Cosmos DB のスケーラビリティをテストし、問題なくそのスループットを実現しました。と Sosn sayse は述べています。</em></p>


  <h2>地球へのMinecraft打ち上げ</h2>


  <p>Minecraft地球は、2019 年 10 月に 1 つの地域で正式にリリースされ、その他すべての地域でのグローバルなロールアウトは、数週間にわたって完了しました。 Minecraftの場合、Minecraft Earth は、拡張現実の世界で、知り合い、好きなゲームを全く新しいレベルで体験する手段を提供します。</p>


  <p>また、Sosn equale と、Minecraft Earth を実現するのに役立った他のすべての開発者にとって、最も人気のあるゲームの 1 つを拡張現実の領域に拡張する機会も同様に高い報酬を得ていました。</p>


  <p style="margin-left: 40px;"><em>&ldquo;私たちの多くが&rdquo;&ldquo;自分でゲームをプレイし、その一部になる機会に飛び乗っています。振り返って見て、すべてがうまくい&mdash;き、&rsquo;すべての結果に非常に満足しています。&rdquo; </em></p>


  <h2>Azure Cosmos DB を使用する利点</h2>


  <p>Azure Cosmos DB は、地球へのアクセスをサポートする複数の Azure Minecraftの 1 つですが、これは極めて重要な役割を果たします。</p>


  <p style="margin-left: 40px;"><em>&ldquo;何か&rsquo;非常に&rdquo;複雑なものをゼロから完全に構築することなく、私たちが行ったことを提供できる別の方法を考えられないと、Sosn scratche は言います。 &ldquo;Azure Cosmos DB には、低待機時間、グローバル分散、マルチマスター書き込みなど、必要なすべての機能が用意されています。必要な操作は、使用するために適切に設定する必要があったのです。&rdquo; </em></p>


  <p>Azure Cosmos DB を使用して Minecraft Earth サービスを構築する具体的な利点は次のとおりです。</p>


  <p><b>簡単な導入と実装</b>。 Sosn jre によると、Azure Cosmos DB は簡単に採用できます。</p>


  <p style="margin-left: 40px;"><em>&ldquo;Azure Cosmos DB</em> の使用は、特に .NET &rdquo;<em>&nbsp; エコシステムのコンテキスト内で非常に簡単でした。Sosn ecosysteme は言います。 &ldquo;Nuget パッケージをインストールし、適切なエンドポイントをポイントするだけでした。サービスのドキュメントは非常に徹底的です。SDK の&rsquo;動作に関する誤解が原因で、大きな問題は発生していない。&rdquo;</em></p>


  <p><strong>メンテナンス不要</strong>。 Microsoft Azure の一部として、Azure Cosmos DB はフル マネージド のサービスです。つまり、Minecraft Earth サービス チームの誰も、サーバーの修正プログラムの適用、バックアップの維持、データ センターの障害などについて心配する必要はありません。</p>


  <p style="margin-left: 40px;"><em>&ldquo;毎日の操作に対処する必要はないのは、大きな特典&rdquo; です。と Sosn sayse は言います。 &ldquo;ただし、これは一般的に Azure 上に構築する利点があります。&rdquo;</em></p>


  <p><b>低待機時間が保証されます。</b> 開発者が Azure Cosmos DB を選択した大きな理由は、世界中のどこでも、99 番目のセンタイルで読み取りと書き込みの保証された <a href="https://azure.microsoft.com/en-us/support/legal/sla/cosmos-db/v1_3/" target="_blank">1 桁 (&lt;10ms)</a> の待機時間 SLA が提供されたためです。 一方、テーブル ストレージの待機時間&mdash;は上限が保証されずに長くなっています。</p>


  <p style="margin-left: 40px;"><em>&ldquo;Azure Cosmos DB&rsquo; は、読み取りで平均待機時間が 7&rdquo; ミリ秒であるという点で、約束通り配信しています。</em></p>


  <p><b>柔軟なスケーラビリティ。 </b>Azure Cosmos DB によって提供されるエラスティック スケーラビリティにより、ゲームは摩擦のない起動を楽しんだ。</p>


  <p style="margin-left: 40px;"><em>&ldquo;サービスのスケーリングのボトルネックCosmos Azure Cosmos DB&rdquo; で、Sosn scalinge は言います。 &ldquo;初回&rsquo;リリース以降&rsquo;、パフォーマンスを最適化するために多くの作業が行われ、その作業が大きなメリットだったのと同様に、スケーラビリティの制限に達しなかったことを知っています。最初はスループット&rsquo;&rsquo;に対してもう少し多くの料金を支払ったかもしれませんが、ユーザーの需要の増加に対応できるサービスを提供するよりもはるかに優れた結果になります。&rdquo;</em></p>


  <p><b>ターンキーの地理的分布。</b> Azure Cosmos DB では、地理的分布は、地球サービス開発者Minecraft簡単なタスクでした。 プロビジョニングされたスループット (RU/s) の調整は、Azure Cosmos DB がすべてのリージョンで必要な内部操作を透過的に実行し、1 つのシステム イメージを提供し続けているため、同じ方法で簡単です。</p>


  <p style="margin-left: 40px;"><em>&ldquo;ターンキー geo ディストリビューションは大きな利点でした&rdquo; 。Sosn geoe は言います。 &ldquo;マルチマスター サポートをオンにするときにシステムをモデル化する方法についてもう少し慎重に検討する必要はしましたが、自分で問題を解決するよりも、作業量が桁違いでした。&rdquo; </em></p>


  <p><b>コンプライアンス。</b> 開発者は、Azure Cosmos DB&rsquo; 内で Time to Live を使用して、ヨーロッパ 一般データ保護規則 (GDPR) のようなコンプライアンスの義務に違反する心配をすることなく、場所ベースのゲーム データを短時間安全に格納できます。</p>


  <p><em>&ldquo;&lsquo;&rsquo;これにより、このプレーヤーのようなワークフローは、特定の期間に 1 回だけこの場所を利用できる必要があります。その後、Azure Cosmos DB は設定された TTL&rdquo; 内のデータを自動的にクリーンアップします。</em></p>


  <p>Azure Cosmos DB での経験をまとめると、Sosnizinge は非常に肯定的だったと述べています。</p>


  <blockquote>

  <p><em>&ldquo;Azure Cosmos DB&rsquo; は、基本的な概念を理解するために時間を取った後に信頼性が高く、使いやすいので、何よりコードを記述する場合は、このままです。私のチーム&rsquo;の後読み開発者が機能に取り組む場合、データベースやデータの格納方法について考える必要はありません。ドメインのコードを記述するだけで、機能するだけになります。&rdquo;</em></p>

  </blockquote>


  <h2>概要 Azure Cosmos DB を使用する</h2>


  <ul>
      <li><a href="https://azure.microsoft.com/en-us/services/cosmos-db/" target="_blank">Azure Cosmos DB にアクセスします</a>。</li>
      <li><a href="https://azure.microsoft.com/en-us/solutions/gaming/" target="_blank">Azure for Gaming の詳細を確認してください</a>。</li>
  </ul>
