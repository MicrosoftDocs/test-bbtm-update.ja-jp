### YamlMime:Yaml
ms.openlocfilehash: 3daec3ad03782b847eed2cc39bebb4c776c326d1
ms.sourcegitcommit: d03bdc7fe5447adb6530886aab848b75fe8fa8ee
ms.translationtype: MT
ms.contentlocale: ja-JP
ms.lasthandoff: 03/11/2022
ms.locfileid: "139895751"
Slug: visual-studio-code-and-azure-app-service-a-perfect-fit
Title: Visual Studio Code と Azure App Service-完全に一致
Summary: Visual Studio Code を使用して Azure App Service に発行する方法について説明します。
Content: >-
  私にとっては、 <a href="https://code.visualstudio.com/Docs" target="_blank">Visual Studio Code</a>先週の発表をお待ちしており、 <a href="https://azure.microsoft.com/en-us/documentation/services/app-service/" target="_blank">Azure App Service</a>にデプロイされたプロジェクトにフックできるかどうかをすぐに理解できるようになりました。 したがって、1/3 のセッションの <a href="https://channel9.msdn.com/events/build/2015" target="_blank">間に、</a> サンフランシスコからの出発点 (すばらしい仕事仲間 <a href="https://twitter.com/davidebbo" target="_blank">David ebbo</a>を使用した場合) では、1つの出発点となることができました。 Visual Studio Code で開発し、Git プッシュを実行して Azure クラウドに発行する Azure App Service で実行されている Node.js アプリ。


  <a href="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/nirma_image1.png"><img class="alignnone size-full wp-image-293991" src="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/nirma_image1.png" alt="nirma_image1" width="499" height="249" /></a>


  ここで説明する手順によって作成されたアーティファクトは次のとおりです。

  <ul>
   <li>node.js に実装された Azure App Service Web アプリ</li>
   <li>web アプリと同期される GitHub リポジトリ (マスターブランチへのすべてのコミットは、GitHub フックを使用して web アプリの新しいバージョンを発行します)</li>
   <li>リモートとして GitHub リポジトリにプッシュするためのローカル git リポジトリのセットアップ</li>
   <li>ローカル git リポジトリを使用するように構成された Visual Studio Code ワークスペース</li>
   <li>最終的には、 コードで git プッシュメニュー項目にヒットすると、実際の Azure クラウドアプリケーションが変更されます。</li>
  </ul>

  &nbsp;

  <h2>システム要件</h2>

  マジックを実現するには、インストールされている次のコンポーネントを使用する必要があります。

  <ol>
   <li>Azure サブスクリプション ( <a href="https://azure.microsoft.com/en-us/pricing/free-trial/" target="_blank">こちらをご覧ください</a>)</li>
   <li>Visual Studio Code (<a href="https://code.visualstudio.com/Docs/setup" target="_blank">インストール手順</a>)</li>
   <li>Git (<a href="https://git-scm.com/download" target="_blank">ダウンロード</a>)</li>
   <li>Curl (GitHub リポジトリの作成に使用) (<a href="https://curl.haxx.se/download.html" target="_blank">インストール</a>)</li>
   <li>Azure CLI (<a href="https://azure.microsoft.com/en-us/documentation/articles/xplat-cli/" target="_blank">インストール手順</a>) を参照してください。
  <strong>注:</strong>Azure CLI はオプションのコンポーネントであり、 <a href="https://portal.azure.com/" target="_blank">Azure ポータル</a>または<a href="https://azure.microsoft.com/en-us/documentation/articles/powershell-install-configure/" target="_blank">Powershell</a>のいずれかを使用して、Web アプリを作成し、GitHub で構成することができます。</li>
   <li><a href="https://github.com/" target="_blank">GitHub</a>アカウントの<strong>メモ:</strong>この最初のバージョンのコードでは、使用している GitHub アカウントが SSH または2要素認証を使用して<strong>いません</strong>。</li>
  </ol>

  &nbsp;

  <h2>まとめ</h2>

  このデモでは、1つのファイル、server.js で構成される非常に単純な node.js アプリケーションを作成します。 手順は次のとおりです。


  1. 空のフォルダーを作成します。これがコードワークスペースの場所になります。 ここでは、"C:\websites\CodeWebApp" を使用することを選択しました。

  2. コードを起動し、ファイルを検索します。[フォルダー] メニューを開き、新しいフォルダーを選択します。


  <a href="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/nirma_image2.jpeg"><img class="alignnone size-full wp-image-293992" src="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/nirma_image2.jpeg" alt="nirma_image2" width="470" height="330" /></a>


  3. コードで、server.js ファイルを作成し、次の java スクリプトスニペットを貼り付けます。

  <pre class="prettyprint">var http = require('http');

  http.createServer(function (req, res) {
      console.log('Got request for ' + req.url);
      res.writeHead(200, {'Content-Type': 'text/html'});
      res.end('&lt;h1&gt;Hello Code and Azure Web Apps!&lt;/h1&gt;');
  }).listen(process.env.PORT);</pre>

  <p align="left">[保存] をクリックします。 ファイルに server.js という名前を付けて、手順 1. で作成したフォルダーに保存していることを確認します。</p>

  <p align="left"><a href="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/nirma_image3.png"><img class="alignnone size-full wp-image-294011" src="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/nirma_image3.png" alt="nirma_image3" width="513" height="337" /></a></p>

  4.ここで、後で GitHub と同期するローカル git リポジトリを作成します。 コードで、左側のナビゲーションバーの git アイコンをクリックし、[git リポジトリの初期化] ボタンをクリックします。 <strong>注: </strong>ファイルのヒットが必要になる場合があります。フォルダーを開く... メニュー項目をクリックし、[git リポジトリの初期化] ボタンが表示されない場合は、手順1で作成したワークスペースフォルダーを選択します。


  <a href="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/nirma_image4.png"><img class="alignnone size-full wp-image-294012" src="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/nirma_image4.png" alt="nirma_image4" width="522" height="345" /></a>


  5. コミットコメントを入力し、enter キーを押して、server.js ファイルをコミットします。 これで、server.js チェックインされたローカル git リポジトリが作成されました。


  <img class="alignnone size-full wp-image-294041" src="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/nirma_image5.png" alt="nirma_image5" width="527" height="348" />


  6. Git Bash では、次のいくつかの手順を実行します。 オンライン GitHub リポジトリを作成し、ローカルリポジトリをそのリポジトリにマップします。 GitHub リポジトリを作成するには、次のコマンドを Git Bash ウィンドウに入力します。

  <pre class="prettyprint">curl -u USER https://api.github.com/user/repos -d '{ "name": "NAME" }'</pre>

  <strong>注: </strong>user を GitHub ユーザー名に置き換えます。

  <strong>注: </strong>name は新しい GitHub リポジトリの名前に置き換えてください。


  <a href="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/nirma_image6.png"><img class="alignnone size-full wp-image-294051" src="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/nirma_image6.png" alt="nirma_image6" width="549" height="127" /></a>


  GitHub パスワードを入力するように求められます。

  このプロセスでは、実行後に一連の JSON が返されます。


  <a href="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/nirma_image7.png"><img class="alignnone size-full wp-image-294061" src="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/nirma_image7.png" alt="nirma_image7" width="552" height="159" /></a>


  7. 次に、ローカルリポジトリを新しく作成された GitHub リポジトリにマップします。 Git Bash の種類:

  <pre class="prettyprint">git remote add origin https://github.com/USER/NAME.git</pre>

  <strong>注: </strong>user を GitHub ユーザー名に置き換えます。

  <strong>注: </strong>name は、作成した GitHub リポジトリの名前に置き換えてください。


  8. ここでは、資格情報をローカルに保存し、コードから生成されたプッシュコマンドに自動的に追加するように git を構成します (コードチームが将来のリリースでの認証のサポートを向上させている可能性があります)。 Git Bash で、次のように入力します。

  <pre class="prettyprint">git config credential.helper store</pre>

  9.この手順は GitHub への最初のプッシュになります。その後、コードからすべてのプッシュコマンドを実行できるようになります。 Git Bash の種類:

  <pre class="prettyprint">git push –u origin master</pre>

  <div><strong>注: </strong>GitHub のユーザー名とパスワードの入力を求められます。</div>

  <div><a href="https://acom.azurecomcdn.net/80C57D/blogmedia/blogmedia/2015/05/07/Git-Bash.png"><img style="background-image: none; padding-top: 0px; padding-left: 0px; display: inline; padding-right: 0px; border: 0px;" title="Git Bash" src="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/Git-Bash_thumb.png" alt="Git Bash" width="564" height="212" border="0" /></a></div>

  <div></div>

  <div></div>

  <div></div>

  前の手順で資格情報ヘルパーを構成しているため、次に Git Bash またはコードからプッシュするときに資格情報を指定する必要はありません。


  10. これで、ローカルリポジトリが GitHub リポジトリに同期されました。 ここでは、Azure App Service Web アプリを作成します。 Web Apps を作成するには、いくつかの方法があります。これは、 <a href="https://azure.microsoft.com/en-us/documentation/articles/web-sites-publish-source-control/" target="_blank">プレビューポータル</a> ("Ibiza") または "クラシック" <a href="https://manage.windowsazure.com" target="_blank">ポータル</a>で行うことができます。 <a href="https://www.troyhunt.com/2015/01/automating-web-hosting-creation-in.html" target="_blank">Powershell コマンドレット</a> を使用することもできます。 ポータルのいずれかを使用する場合は、新しい Web アプリを作成し、継続的デプロイ UI から GitHub を選択します。 次に、手順 6 (master ブランチ) で作成したリポジトリを選択します。

  この例では、 <a href="https://azure.microsoft.com/en-us/documentation/articles/xplat-cli/" target="_blank">Azure CLI</a>を使用して Azure Web アプリを作成し、それを GitHub リポジトリにリンクします。 (管理者として実行されている) コマンドウィンドウで、次のように入力します。

  <pre class="prettyprint">azure site create NAME  -- github</pre>

  <strong>注: </strong>[名前] を Web アプリの一意の名前に置き換えます。<strong>注:</strong>データセンターと GitHub リポジトリの入力を求められます。


  <a href="https://acom.azurecomcdn.net/80C57D/blogmedia/blogmedia/2015/05/04/nirma_image10.png"><img class="alignnone size-medium wp-image-294081" src="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/nirma_image10-573x369.png" alt="nirma_image10" width="573" height="369" /></a>

  11. コードを使用して変更を行い、Web アプリにプッシュする準備ができました。 コードで、server.js ファイルの出力行を変更します。


  <a href="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/nirma_image11.png"><img class="alignnone size-full wp-image-294091" src="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/nirma_image11.png" alt="nirma_image11" width="584" height="224" /></a>


  12. [保存] をクリックし、左側のナビゲーションの Git アイコンをクリックします。


  13. コード内の変更をコミットします。


  <a href="https://acom.azurecomcdn.net/80C57D/blogmedia/blogmedia/2015/05/05/image65.png"><img style="background-image: none; float: left; padding-top: 0px; padding-left: 0px; display: inline; padding-right: 0px; border-width: 0px;" title="image" src="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/image65_thumb.png" alt="image" width="580" height="193" align="left" border="0" /></a>


  &nbsp;


  &nbsp;


  &nbsp;


  &nbsp;


  &nbsp;


  &nbsp;


  &nbsp;


  14. GitHub リポジトリにプッシュします。


  <a href="https://acom.azurecomcdn.net/80C57D/blogmedia/blogmedia/2015/05/05/image69.png"><img style="background-image: none; float: left; padding-top: 0px; padding-left: 0px; display: inline; padding-right: 0px; border-width: 0px;" title="image" src="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/image69_thumb.png" alt="image" width="587" height="194" align="left" border="0" />

  </a>


  &nbsp;


  &nbsp;


  &nbsp;


  &nbsp;


  &nbsp;


  &nbsp;


  <strong>注: </strong>git 操作の出力を表示するには、ビューをクリックします。出力メニュー項目


  <a href="https://acom.azurecomcdn.net/80C57D/blogmedia/blogmedia/2015/05/05/image73.png"><img style="background-image: none; float: left; padding-top: 0px; padding-left: 0px; display: inline; padding-right: 0px; border-width: 0px;" title="image" src="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/image73_thumb.png" alt="image" width="586" height="191" align="left" border="0" /></a>


  &nbsp;


  &nbsp;


  &nbsp;


  &nbsp;


  &nbsp;


  &nbsp;


  15. これで、作成した Web アプリを参照して、先ほど行った変更を確認できるようになりました。 おめでとうございます。 コードを使用して Azure App Service Web アプリを発行できるようになりました。


  &nbsp;


  <a href="https://acom.azurecomcdn.net/80C57D/blogmedia/blogmedia/2015/05/05/image77.png"><img style="background-image: none; float: left; padding-top: 0px; padding-left: 0px; display: inline; padding-right: 0px; border-width: 0px;" title="image" src="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/image77_thumb.png" alt="image" width="525" height="129" align="left" border="0" /></a>


  &nbsp;


  &nbsp;


  &nbsp;


  &nbsp;


  &nbsp;

  <h2>まとめ</h2>

  上記のシナリオは、実行できることに関して、氷山の先端にすぎません。 実稼働環境にリリースする前にチームとして作業する、またはコードをステージングするより洗練されたプロジェクトがある場合は、GitHub リポジトリを Web アプリの<a href="https://azure.microsoft.com/en-us/documentation/articles/web-sites-staged-publishing/" target="_blank">ステージングスロット</a>にリンクして、コードを運用環境にスワップする前にテストを行うことができます。


  または、GitHub ワークフローを活用し、2つのサイトを作成し、1つを master ブランチと同期して、もう1つをステージングブランチと同期させることもできます。その後、<a href="https://help.github.com/articles/using-pull-requests/" target="_blank">プル要求</a>を使用して、運用リリースをゲートできます。 さらに多くのことを学習し、新しい情報が表示されるようにこのブログを更新します。
