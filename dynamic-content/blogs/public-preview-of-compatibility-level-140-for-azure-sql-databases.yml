### YamlMime:Yaml
ms.openlocfilehash: 0dbb5b686c80ebfbe1909113c101e6ffb60429f2
ms.sourcegitcommit: d03bdc7fe5447adb6530886aab848b75fe8fa8ee
ms.translationtype: MT
ms.contentlocale: ja-JP
ms.lasthandoff: 03/11/2022
ms.locfileid: "139894265"
Slug: public-preview-of-compatibility-level-140-for-azure-sql-databases
Title: Azure SQL データベースの互換性レベル140のパブリックプレビュー
Summary: Azure SQL Database では、互換性レベル140の公式パブリックプレビューが発表されています。
Content: "<p>Azure SQL Database では、互換性レベル140の公式<em>パブリックプレビュー</em>が発表されています。</p>\n\n<p>互換性レベル140では、次のクエリオプティマイザーの変更が有効になります。</p>\n\n<ul>\n    <li>列ストア インデックスを参照する単純なプランは、バッチ モード実行の対象であるプランを優先するために廃止されます。</li>\n    <li>Sp_execute_external_script UDX 演算子は、バッチモード実行の対象となります。</li>\n    <li>次の3つのアダプティブクエリ処理機能が導入されています。 <ul>\n        <li><a href=\"https://blogs.msdn.microsoft.com/sqlserverstorageengine/2016/11/29/introducing-batch-mode-adaptive-memory-grant-feedback/\">バッチモードメモリ許可フィードバック</a>により、要求するメモリが多すぎるか少なすぎる場合の繰り返しクエリのパフォーマンスが向上します。</li>\n        <li><a href=\"https://blogs.msdn.microsoft.com/sqlserverstorageengine/2017/04/19/introducing-batch-mode-adaptive-joins/\">バッチモードアダプティブ結合</a>。これは、ランタイムの行カウントに基づいて最適な結合アルゴリズムを動的に選択できるようにする新しいクエリ演算子の種類です。</li>\n        <li><a href=\"https://blogs.msdn.microsoft.com/sqlserverstorageengine/2017/04/19/introducing-interleaved-execution-for-multi-statement-table-valued-functions/\">インターリーブ実行</a>。これにより、クエリの最適化中に使用される関数呼び出しの実際の行数を使用して、複数ステートメントのテーブル値関数を参照するクエリのパフォーマンスが向上します。</li>\n    </ul>\n    </li>\n</ul>\n\n<p>この一覧は完全ではないことに注意してください。 &nbsp;SQL Server 2016 RTM の後にリリースされるほとんどのオプティマイザー修正プログラムは、互換性レベル140で既定でオンになります。</p>\n\n<p>既定の互換性レベルに SQL バージョンを配置すると、次のようになります。</p>\n\n<ul>\n    <li>100: SQL Server 2008 および Azure SQL Database</li>\n    <li>110: SQL Server 2012 および Azure SQL Database</li>\n    <li>120: SQL Server 2014 および Azure SQL Database</li>\n    <li>130: SQL Server 2016 および Azure SQL Database</li>\n    <li>140: SQL Server 2017 および Azure SQL Database</li>\n</ul>\n\n<p>データベースの現在の互換性レベルを確認するには、次の SQL transact-sql ステートメントを実行します。</p>\n\n<pre class=\"prettyprint\">\nSELECT compatibility_level\nFROM   [sys].[databases]\nWHERE  [name] = &#39;Your Database Name&#39;;\n</pre>\n\n<p>互換性レベル140を使用すると、開発者はクエリプロセッサの機能強化を活用できます。 既存のデータベースの互換性レベルを変更するには、 <a href=\"https://docs.microsoft.com/en-us/sql/t-sql/statements/alter-database-transact-sql-compatibility-level\">ALTER database</a>を実行します。</p>\n\n<pre class=\"prettyprint\">\nALTER DATABASE database_name   \nSET COMPATIBILITY_LEVEL =  140;\n</pre>\n\n<p>クエリプロセッサを高い互換性レベルにアップグレードするために推奨されるワークフローについては、「<a href=\"https://docs.microsoft.com/en-us/sql/database-engine/install-windows/change-the-database-compatibility-mode-and-use-the-query-store\">データベース互換性モードを変更してクエリストアを使用</a>する」をご覧ください。 &nbsp;この記事では互換性レベル130と SQL Server について説明していますが、SQL Server と Azure SQL DB の140への移行にも同じ手法が適用されます。</p>\n\n<p>SQL Server 2017 が起動すると、新しく作成されたデータベースの既定の Azure SQL Database 互換性レベルは130から140に変わります。 この時間より前に作成されたデータベースは影響を受けず、現在の互換性レベルが維持されます。 詳細については、 <a href=\"https://docs.microsoft.com/en-us/sql/t-sql/statements/alter-database-transact-sql-compatibility-level\">「ALTER Database Compatibility Level (transact-sql SQL)</a>」を参照してください。</p>"
