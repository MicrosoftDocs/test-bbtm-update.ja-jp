### YamlMime:Yaml
ms.openlocfilehash: 5a6fcf0c4489e2aa490647307fe8f6e9edd1c071
ms.sourcegitcommit: d03bdc7fe5447adb6530886aab848b75fe8fa8ee
ms.translationtype: MT
ms.contentlocale: ja-JP
ms.lasthandoff: 03/11/2022
ms.locfileid: "139909153"
Slug: azure-log-analytics-meet-our-new-query-language-2
Title: Azure Log Analytics –新しいクエリ言語に対応
Summary: この記事では、新しい Azure Log Analytics クエリ言語でサポートされているすばらしい新機能の一部を確認します。 クエリ言語の詳細については、言語サイトのチュートリアルと Log Analytics コミュニティスペースをご覧ください。
Content: >-
  <p>Azure Log Analytics は最近、新しいクエリ言語を使用するように強化されています。 クエリ言語自体 &rsquo; はまったく新しいものではなく、しばらくの間 Application Insights によって広く使用されています。 最近では、使用する言語とプラットフォームが Log Analytics に統合されました。これにより、豊富な新機能が導入され、高度な分析用に設計された新しいポータルが可能になります。</p>


  <p>この投稿では、現在サポートされているクール新機能の一部を確認しています。 しかし、これ &rsquo; は氷山の先端だけであり、マイクロソフトの <a href="https://docs.loganalytics.io/" target="_blank">言語サイト</a> と <a href="https://aka.ms/AzureLogAnalyticsCommunity" target="_blank">Log Analytics コミュニティスペース</a>のチュートリアルもレビューに招待&#39;ます。 投稿全体に示されている例は、この Log Analytics <a href="https://portal.loganalytics.io/demo" target="_blank">プレイグラウンド</a> &ndash; でも、いつでも使用できる無料のデモ環境であり、登録は必要ありません。</p>


  <h4>パイプ-退席中</h4>


  <p>クエリは、1つまたは複数のテーブルに格納されたデータを収集します。 次の基本的なクエリを確認してください。</p>


  <p><code>Event</code></p>


  <p>これは、取得するのと同じように簡単ですが、でも、 <i>イベント</i> テーブル内のすべてを返すだけの有効なクエリと&#39;ます。 テーブル内のすべてのレコードを取得することは、通常、結果が多すぎることを意味します。 データを分析する場合、一般的な最初の手順は、テーブルから大量のレコードを確認し、関連するデータを拡大する方法を計画することです。 これは、take &rdquo; を使用して &ldquo; 簡単に行うことができます。</p>


  <p><code>Event<br>

  | take 10</code></p>


  <p>これは、複数の要素がパイプで区切られたクエリ &ndash; の一般的な構造です。 最初の要素の出力 (つまり、 <i>イベント</i>テーブル全体) は、次のテーブルの入力です。 この場合、最終的なクエリ出力は、 <i>イベント</i> テーブルの10個のレコードになります。 レビューを行った後は、クエリをより具体的にする方法を決定できます。 多くの場合、次のように、特定の条件によってフィルター処理する <i>場所</i> を使用します。</p>


  <p><code>Event<br>

  | where EventLevelName == &quot;Error&quot;</code></p>


  <p>このクエリでは、テーブル内のすべてのレコードが返されます。この場合、EventLevelName &ldquo; はエラー &rdquo; (大文字と小文字が区別されます) になります。</p>


  <p>クエリのようなクエリでも、大量のレコードが返されます。 すべてのデータを理解するために、[ <i>集計</i>] を使用できます。 集計は、共通の値でレコードのグループを識別し、各グループに集計を適用することもできます。</p>


  <p><code>Event<br>

  | where EventLevelName == &quot;Error&quot;<br>

  | summarize count() by Computer </code></p>


  <p>この例では、コンピューター別にグループ化された、エラーとしてマークされた <i>イベント</i> レコードの数を返します。</p>


  <p>プレイグラウンドで<a href="https://portal.loganalytics.io/Demo?q=H4sIAAAAAAAAA3MtS80rUeCqUSjPSC1KVXAFcX1Sy1Jz%2FBJzUxVsbRWUXIuK8ouUQEqKS3NzE4syq1IVkvNL80o0NBWSKhWc83MLSktSi7gALzj5wEoAAAA%3D&amp;timespan=PT24H" target="_blank">試してみてください</a>。</p>


  <h4>検索</h4>


  <p>場合によっては、クエリを特定のテーブルに制限するのではなく、すべてのデータを検索する必要があります。 この種類のクエリでは、次のように<i>検索</i> &rdquo; キーワードを使用 &ldquo; します。</p>


  <p><code>search &quot;212.92.108.214&quot;<br>

  | where TimeGenerated &gt; ago(1h)</code></p>


  <p>上の例では、特定の IP アドレスを含む、過去1時間のすべてのレコードを検索します。</p>


  <p>すべてのデータをスキャンすると、実行に時間がかかることがあります。 一連のテーブルで用語を検索するには、次のように検索範囲を設定します。</p>


  <p><code>search in (ConfigurationData, ApplicationInsights) &quot;logon&quot; or &quot;login&quot;</code></p>


  <p>この例では、 <i>ConfigurationData</i>と<i>applicationinsights</i>の各テーブルで、ログオン &rdquo; または &ldquo; ログイン &rdquo; という用語 &ldquo; を含むレコードが検索されます。</p>


  <p>検索語句は、既定では大文字と小文字が区別されます。 検索クエリにはさまざまなバリエーションがあり、 <a href="https://docs.loganalytics.io/docs/Language-Reference/Tabular-operators/search-operator">表形式の演算子</a>で詳細を確認できます。</p>


  <h4>クエリ時のカスタムフィールド</h4>


  <p>多くの場合、カスタムフィールドをすぐに計算し、分析で使用します。 これを行う1つの方法として、自動的に作成された列 ( <i>Errorscount</i>など) に独自の名前を割り当てることができます。</p>


  <p><code>Event<br>

  | where EventLevelName == &quot;Error&quot;<br>

  | summarize ErrorsCount=count() by Computer<br>

  | sort by ErrorsCount</code></p>


  <p>ただし、フィールドを追加する場合は、 <i>集計</i>を使用する必要はありません。 これを行う最も簡単な方法は、を拡張することです <i>。</i></p>


  <p><code>Event<br>

  | where TimeGenerated &gt; datetime(2017-09-16)<br>

  | where EventLevelName == &quot;Error&quot;<br>

  | extend PST_time = TimeGenerated-8h<br>

  | where PST_time between (datetime(2017-09-17T04:00:00) .. datetime(2017-09-18T04:00:00))</code></p>


  <p>この例では、 <i>Timegenerated</i>に基づくが、UTC から PST のタイムゾーンに合わせて調整された<i>PST_time</i>を計算します。 このクエリでは、新しいフィールドを使用して、2017-09-18 2017-09-17 午前4時 (太平洋標準時) に作成されたレコードのみをフィルター処理します。</p>


  <p>同様の演算子は <i>project</i>です。 結果セットに計算フィールドを追加する代わりに、射影されたフィールドのみ <i>が保持さ</i> れます。 この例では、結果には次の4つの列のみが含まれます。</p>


  <p><code>Event<br>

  | where EventLevelName == &quot;Error&quot;<br>

  | project TimeGenerated, Computer, EventID, RenderedDescription</code></p>


  <p>プレイグラウンドで<a href="https://portal.loganalytics.io/Demo?q=H4sIAAAAAAAAAyWMOwqAMBAF%2B5xiSZ0rWGkQQSzEC4h5YMR8WFdtPLwRy4GZsReiqIfuFQyyH%2FW4sA9zAFUVacucWFNRMqcNi9DkA1pE8CxwhuoU8ilg89ddY2hEdGXnGhwL%2Byw%2BRfUCF5avw2kAAAA%3D&amp;timespan=PT24H" target="_blank">試してみてください</a>。</p>


  <p>補完演算子は、結果セットから削除する列を指定する、 <i>Project</i>します。</p>


  <h4>結合</h4>


  <p>Join は、指定された列の値を照合することによって、2つのデータセットのレコードをマージします。 これにより、さまざまなデータソース間の相関関係に依存する高度な分析が可能になります。</p>


  <p>次の例では、 <i>Update</i>と<i>securityevent</i>の2つのテーブル &ndash; のレコードを結合します。</p>


  <p><code>Update<br>

  | where TimeGenerated &gt; ago(1d)<br>

  | where Classification == &quot;Security Updates&quot; and UpdateState == &quot;Needed&quot;<br>

  | summarize missing_updates=makeset(Title) by Computer<br>

  | join (<br>

  SecurityEvent<br>

  | where TimeGenerated &gt; ago(1h)<br>

  | summarize count() by Computer<br>

  ) on Computer</code></p>


  <p>&rsquo;2 つのデータセットが一致していることを確認します。 最初のデータセットは次のとおりです。</p>


  <p><code>Update<br>

  | where TimeGenerated &gt; ago(1d)<br>

  | where Classification == &quot;Security Updates&quot; and UpdateState == &quot;Needed&quot;<br>

  | summarize missing_updates=makeset(Title) by Computer</code></p>


  <p>これで、必要なセキュリティ更新プログラムが記述されている最後の日から <i>更新</i> レコードが取得されます。 次に、コンピューターごとに必要な更新プログラムのセットが要約されます。</p>


  <p>2番目のデータセットは次のとおりです。</p>


  <p><code>SecurityEvent<br>

  | where TimeGenerated &gt; ago(1h)<br>

  | summarize count() by Computer</code></p>


  <p>これは、コンピューターごとに過去1時間に作成された <i>Securityevent</i> レコードの数をカウントします。</p>


  <p>ここで比較した共通フィールドは <i>コンピューター</i>であるため、最終的には、各コンピューターに、セキュリティ更新プログラムが不足しているコンピューターの一覧と、過去1時間のセキュリティイベントの合計数が表示されます。</p>


  <p><img alt="join" border="0" height="311" src="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/68d200b9-31bc-4208-9c73-c18619464d2e.png" style="border: 0px currentColor; border-image: none; padding-top: 0px; padding-right: 0px; padding-left: 0px; display: inline; background-image: none;" title="join" width="839"></p>


  <p>ほとんどのクエリの既定の視覚エフェクトはテーブルです。 データをグラフィカルに表示するには、クエリの最後に [ <em>| レンダー barchart</em> &rdquo; ] を追加 &quot; するか、結果の上に表示されている [<em>グラフ</em>] ボタンを選択します。 結果は、次の更新プログラムの管理方法を決定するのに役立ちます。</p>


  <p><img alt="barchart" border="0" height="352" src="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/a50cbd02-7819-4587-8ab4-c8cc5b75952e.png" style="border: 0px currentColor; border-image: none; padding-top: 0px; padding-right: 0px; padding-left: 0px; display: inline; background-image: none;" title="棒グラフ" width="842"></p>


  <p>最も必要な更新プログラムが<em>Windows サーバーの2017-09 の累積的な更新</em>プログラムであり、処理する 1<sup>st</sup>コンピューターが<em>ContosoAzADDS1.ContosoRetail.com</em>であることがわかります。</p>


  <p>結合には、内部、外部、半などのさまざまな種類があります。これらのフレーバーによって、照合の実行方法と出力の内容が定義されます。 結合の詳細については、 <a href="https://go.microsoft.com/fwlink/?linkid=858789" target="_blank">結合のチュートリアル</a>を参照してください。</p>


  <h4>次の手順</h4>


  <p>データの分析方法の詳細については、次を参照してください。</p>


  <ul>
   <li><a href="https://go.microsoft.com/fwlink/?linkid=844764" target="_blank">クエリ言語ドキュメントサイト</a></li>
   <li><a href="https://go.microsoft.com/fwlink/?linkid=856078" target="_blank">クエリの概要</a></li>
   <li><a href="https://docs.microsoft.com/en-us/azure/log-analytics/log-analytics-log-search-upgrade" target="_blank">新しいクエリ言語へのアップグレード</a></li>
  </ul>
