### YamlMime:Yaml
ms.openlocfilehash: e8d4f0be0283ae796357b90be60ddcdf36d10619
ms.sourcegitcommit: d03bdc7fe5447adb6530886aab848b75fe8fa8ee
ms.translationtype: MT
ms.contentlocale: ja-JP
ms.lasthandoff: 03/11/2022
ms.locfileid: "139892541"
Slug: service-fabric-processor-in-public-preview
Title: パブリックプレビュー中の Service Fabric プロセッサ
Summary: reliable collection を利用し、Service Fabric プロセッサを使用して Event Hubs からのイベントを処理します。 この新しいライブラリにより、パーティションを管理し、高度な負荷分散を行うことができます。
Content: >-
  <p>Azure Event Hubs 用の Microsoft クライアントには、常に2つの抽象化レベルがあります。 低レベルのクライアントがあります。これには、アプリケーションによる最大制御を可能にするイベントの送信元クラスと受信者クラスが含まれます。また、アプリケーションは、イベントハブの構成を理解し、各パーティションに接続されているイベントレシーバーを維持するように強制します。 低レベルのクライアントの上位に構築されたは、上位レベルのライブラリであるイベントプロセッサホストであり、受信側でこれらの詳細のほとんどを非表示にします。 イベントプロセッサホストは、イベントハブパーティションの所有権を複数のホストインスタンスに自動的に分散し、アプリケーションによって提供される処理方法にイベントを配信します。</p>


  <p>Service Fabric は、アプリケーションをシャードに分割し、それらのシャードを複数のコンピューティングノードに分散するための一般化されたフレームワークである、Microsoft が提供するもう1つのライブラリです。 多くのお客様は、アプリケーションに Service Fabric を使用しており、一部のアプリケーションはイベントハブからイベントを受信する必要があります。 Service Fabric アプリケーション内でイベントプロセッサホストを使用することもできますが、inelegant も冗長でもあります。 組み合わせとは、ノード間で負荷を分散する2つの異なる層があることを意味し、どちらも他の層を認識していません。 また、Azure Storage に対する依存関係も導入されています。これは、イベントプロセッサホストインスタンスがパーティションの所有権を調整するために使用するメソッドであり、関連付けられたコストです。</p>


  <p>Service Fabric プロセッサは、Service Fabric と直接統合されたイベントハブからイベントを使用するための新しいライブラリであり、パーティションの管理、信頼性の高いストレージ、およびより高度な負荷分散のために Service Fabric&#39;の機能を使用します。 同時に、イベントプロセッサホストを使用しているすべてのユーザーにとって使い慣れたシンプルなプログラミングインターフェイスが提供されます。 プロセッサが Service Fabric する唯一の要件は、実行する Service Fabric アプリケーションのパーティション数が、使用元のイベントハブと同じである必要があります。 これにより、イベントハブパーティションからアプリケーションパーティションへの1つのマッピングを簡単に1つにすることができ、負荷を最も効果的に分散 Service Fabric ことができます。</p>


  <p>Service Fabric プロセッサは現在プレビューの段階にあり、 <a href="https://www.nuget.org/packages/Microsoft.Azure.EventHubs.ServiceFabricProcessor/" target="_blank">ServiceFabricProcessor</a> &rdquo; web ページの &ldquo; NuGet で使用できます。 ソースコードは、 <a href="https://github.com/Azure/azure-event-hubs-dotnet" target="_blank">.net Event Hubs クライアントリポジトリ</a>の GitHub にあります。 GitHub で利用可能な<a href="https://github.com/Azure/azure-event-hubs/tree/master/samples/DotNet/ServiceFabricProcessor" target="_blank">サンプルアプリケーション</a>を見つけることもできます。</p>


  <p>開発者&#39;の観点から見ると、Service Fabric プロセッサを使用してアプリケーションを作成する主な要素が2つあります。 最初の部分は、 <strong>Ieventprocessor</strong> インターフェイスを実装するクラスを作成することです。 <strong>Ieventprocessor</strong> は、パーティション (<strong>openasync</strong>) の処理が開始されたとき、処理がシャットダウン (<strong>closeasync</strong>) されたときに呼び出されるメソッドを指定します。このメソッドは、エラーが発生したときに通知を処理 (<strong>ProcessErrorAsync</strong>) し、イベントが発生したときにイベントを処理 (<strong>ProcessEventsAsync</strong>) します。 最後の1つは、アプリケーション&#39;s ビジネスロジックが配置される場所で、ほとんどのアプリケーションの重要な部分です。</p>


  <p>2番目の部分は、アプリケーション&#39;の機能を実行するために Service Fabric によって呼び出されるアプリケーション&#39;s <strong>runasync</strong>メソッドにコードを追加することによって、Service Fabric と統合しています。 基本的な手順は次のとおりです。</p>


  <ul>
      <li>
      <p><strong>Eventprocessoroptions</strong>のインスタンスを作成し、必要なオプションを設定します。</p>
      </li>
      <li>
      <p><strong>Ieventprocessor</strong>実装のインスタンスを作成します。 これは、このパーティションのイベントを処理するために使用されるインスタンスです。</p>
      </li>
      <li>
      <p><strong>ServiceFabricProcessor</strong>のインスタンスを作成し、オプションとプロセッサオブジェクトをコンストラクターに渡します。</p>
      </li>
      <li>
      <p><strong>ServiceFabricProcessor</strong>インスタンスで<strong>runasync</strong>を呼び出します。これにより、イベントの処理が開始されます。</p>
      </li>
  </ul>


  <h2>次の手順</h2>


  <p>詳細については、GitHub の<a href="https://github.com/Azure/azure-event-hubs/blob/master/samples/DotNet/ServiceFabricProcessor/ProgrammersGuide.md" target="_blank">プログラミングガイド</a>を参照してください。 このブログ投稿をご利用いただけましたか? 忘れずに、以下のコメントセクションにお客様のご意見やフィードバックをお寄せください&#39;。 <a href="https://aka.ms/eventhubs" target="_blank">Event Hubs</a>の詳細については、製品ページを参照してください。</p>
