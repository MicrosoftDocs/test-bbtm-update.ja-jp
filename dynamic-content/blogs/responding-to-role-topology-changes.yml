### YamlMime:Yaml
ms.openlocfilehash: 732b9932970c10916b57a209c36f300d91f9adb1
ms.sourcegitcommit: d03bdc7fe5447adb6530886aab848b75fe8fa8ee
ms.translationtype: MT
ms.contentlocale: ja-JP
ms.lasthandoff: 03/11/2022
ms.locfileid: "139910438"
Slug: responding-to-role-topology-changes
Title: ロール トポロジの変更への応答
Summary: 導入プログラム インサイト シリーズでは、Windows Azure テクノロジ導入プログラムに関係する Microsoft サービス コンサルタントの経験について説明し、お客様が ソリューションをデプロイするサポートを提供しています。
Content: '<p><i>導入プログラム インサイト シリーズでは、Windows Azure テクノロジ導入プログラムに関係する Microsoft サービス コンサルタントが、Windows Azure Platform にソリューションをデプロイする支援を行った経験について説明します。この投稿は TomEr 氏による投稿です。</i></p>  <p>以前は、アプリケーションが Web ファームで実行され、より多くの容量が必要な場合は、追加の物理マシンを購入、インストール、構成する必要がありました。プロセスには数か月かかる可能性があります。数千ドルのコストがかかる可能性があります。 これに対し、Windows Azure にアプリケーションをデプロイする場合、この同じプロセスには単純な構成の変更が含まれるので、数分で追加のインスタンスをデプロイできます。これらのインスタンスが使用されている間は、増分 1 時間分の料金のみを支払います。 負荷が変動するアプリケーションや負荷が増加しているアプリケーションの場合、これは Azure プラットフォームのWindows大きな利点です。</p>  <p>ロール インスタンスがステートレスで独立するように設計されている場合、一般に、ロールがスケールアップまたはスケールダウンされた時間 (トポロジの変更として Azure で知られています<i>)</i> - を処理するコードを記述する必要はありません Windows Azure は、環境の構成を処理し、新しいインスタンスが使用可能 (または古いインスタンスが削除された場合) にすぐに処理します。 ロード バランサーが再構成され、アプリケーションは引き続き通常の方法で実行されます。 ただし、一部の高度なシナリオでは、インスタンスが実行されている全体的なコンテキストを認識する必要がある場合や、ロール トポロジが変更された場合に特定のタスクを実行する必要がある場合があります。 </p>  <p>この投稿は、Windows Azure がイベントを発生し、これらの変更中にロール環境に関する情報を伝達する方法を説明することで、トポロジの変更に応答できるアプリケーションを作成するのに役立ちます。 このガイダンスは、Web ポータルを使用してアプリケーションを手動でスケーリングするか、Service Management APIを使用するか、自動パフォーマンス <a target="_blank" href="https://msdn.microsoft.com/en-us/library/ee460799.aspx">ベースのスケーリングを使用するか</a><a target="_blank" href="https://msdn.microsoft.com/en-us/magazine/gg232759.aspx">に関係ない場合に適用されます</a>。</p>  <h4>ロール環境のメソッドとイベント</h4>  <p>環境の変更に対応するコードを記述できる場所は、主に 5 つがあります。 この 2 つの <b>OnStart</b> と <b>OnStop</b> は <b>RoleEntryPoint</b> クラスのメソッドであり、メイン ロール クラス (既定では <b>WebRole</b> または <b>WorkerRole</b> と呼ばれています) でオーバーライドできます。 他の 3 つのイベントは <b>、サブスクライブできる RoleEnvironment</b> クラスのイベントです。 <b>変更</b>、 <b> </b>変更、 <b>停止です</b>。</p>  <p>これらのメソッドの目的は、その名前から非常に明確です。</p>  <ul>  <li><b>インスタンスが</b> 最初に起動すると、OnStart が呼び出されます。</li>  <li><b>変更</b> は、ロール環境に関する変更が近い場合に呼び出されます。</li>  <li><b>変更</b> は、ロール環境に関する変更が行ったばかりである場合に呼び出されます。</li>  <li><b>停止は</b> 、インスタンスの停止が近いときに呼び出されます。</li>  <li><b>インスタンスが停止すると、OnStop</b> が呼び出されます。</li>  </ul>  <p>どの場合も、対応するアクションの発生を防ぐためにコードでできることは何もありませんが、任意の方法で応答できます。 <b>Changing</b> イベントの場合は、<b>e.Cancel = true</b> を設定して、構成の変更に対処するためにインスタンスをリサイクルするかどうかを選択できます。 </p>  <h4>アプリケーションで変更と変更が発生しない理由</h4>  <p>このトピックを初めて確認し始め、Windows Azure Compute Emulator (旧称 Development Fabric) とクラウドの両方で、次のような異常な動作を確認しました。</p>  <ul>  <li>構成<b>変更を</b><b>行った</b>場合、インスタンスで Changing イベントと Changed イベントが発生しなかった。</li>  <li><b>RoleEnvironment.CurrentRoleInstance.Role.Instances.Count</b> は、ロールに多数のインスタンスがある場合でも、常に 1 を返しました。</li>  </ul>  <p>これは、この MSDN の記事に記載されている内部エンドポイントがロールに定義されていない場合に想定される動作である点が判明しました。 そのため、解決策は、次のように ServiceDefinition.csdef ファイルに内部エンドポイントを定義することです。</p>  <p>&lt;エンドポイント&gt;<br>&nbsp;&lt;InternalEndpoint name="InternalEndpoint1" protocol="http" /&gt;<br>&lt;/Endpoints&gt; </p>  <h4>どのイベントがどこでいつ発生しますか?</h4>  <p>イベントの名前はかなり自明のように見えますが、デプロイをスケールアップまたはスケールダウンする場合の正確な動作は、必ずしも期待できるとは限りません。 次の図は、1 つのロールを含むシナリオの例で発生するイベントを示しています。 最初に 2 つのインスタンスがデプロイされ、デプロイは 4 つのインスタンスにスケーリングされ、その後 3 に戻り、最後にデプロイが停止されます。&nbsp; </p>  <p><img src="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/8171.Topology1.png" border="0"></p>  <p>この図には、いくつかの興味深い点があります。</p>  <ul>  <li>1. Changing <b>イベント</b> と <b>Changed</b> イベントは、開始または停止していないインスタンスに対してだけ発生します。 インスタンスを追加する場合、これらのイベントは新しいインスタンスでは発生しなく、インスタンスを削除する場合、これらのイベントはシャットダウンされているインスタンスでは発生しない。</li>  <li>2.Changing イベント<b>では</b>、<b>RoleEnvironment.CurrentRoleInstance.Role.Instances</b> は、ターゲット ロール <i></i> インスタンスではなく、元のロール インスタンス<i>を</i>返します。 現時点では、ターゲット ロール インスタンスを見つける方法はありません。</li>  <li>3.Changed イベント<b>では</b>、<b>RoleEnvironment.CurrentRoleInstance.Role.Instances</b> は、元の<i></i>ロール インスタンスではなく、ターゲット ロール <i>インスタンスを返</i>します。 元のインスタンスについて知る必要がある場合は、 <b>Changing</b> イベントが発生するときにこの情報を保存し、 <b>Changed</b> イベントからアクセスできます (これらのイベントは常に順に発生します)。</li>  <li>4.インスタンスが起動すると、<b>RoleEnvironment.CurrentRoleInstance.Role.Instances</b> は、その多<i></i>くがまだ開始されていない場合でも、ターゲット ロール インスタンスを返します。</li>  <li>5. インスタンスが停止すると、 <b>RoleEnvironment.CurrentRoleInstance.Role.Instances</b> は元のロール <i>インスタンスを</i> 返します。 現時点では、ターゲット インスタンスについて確認する方法はありません。 また、どのインスタンスがシャットダウンされるかを特定する方法はありません (ID 番号が最も高いインスタンスであるとは限りません)。 <b>Stopping と</b> <b>OnStop が</b>呼び出された場合は、ユーザーです。 <b>Changing が</b>呼び出された場合は、そうではありません。 </li>  </ul>  <p>上記の例では <b>、Changing</b> イベントが取り消されていないと想定しています ( <b>例: Cancel = true</b> の場合、構成の変更が適用される前にインスタンスが再起動されます)。 これを行う場合、発生するイベントは大きく異なります。 [変更<b></b>] は起動されませんが、<b>停止</b>、停止、<b>OnStart</b> は実行します。 次の図は、Changing イベントが取り消IN_0、スケールアップ操作中にインスタンスインスタンスが <b>発生した場合</b> の動作を示しています。</p>  <p><img src="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/0675.Topology2.png" border="0"></p>  <p>これらのイベントに関する最後の注意点: どちらの図にも示していませんが、サービスに複数のロールを持ち、1 つのロールでトポロジを変更した場合、Change イベント<b></b>と <b>Changed</b> イベントは、インスタンスの数が変更されていないロールでも、すべてのロールで発生します。 イベント データから、次のようなコードを使用して、現在のロールに対してトポロジの変更が発生したのか、別のロールに対して発生したのかを確認できます。</p>  <p>private void RoleEnvironmentChanging(object sender, RoleEnvironmentChangingEventArgs e)<br>{<br>&nbsp;&nbsp;&nbsp;var changes = from ch in e.Changes.OfTypeRoleEnvironmentTopologyChange&lt;&gt;()<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ここで ch。RoleName == RoleEnvironment.CurrentRoleInstance.Role.Name<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;select ch;<br>&nbsp;&nbsp; if (変更)。Any())<br>&nbsp;&nbsp; {<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// 現在のロールでトポロジの変更が発生しました<br>&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;他<br>&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; トポロジの変更が別のロールで発生しました<br>&nbsp;&nbsp;&nbsp;}<br>}</p>  <h4>詳細情報</h4>  <p><b>RoleEnvironment </b>と上記のイベントは、サービスの変更に関する多くの優れた情報を提供しますが、API が提供するよりも多くの情報が必要になる場合があります。 たとえば、以前は Azure アプリケーションで作業しました。各インスタンスは、既に開始されている他のインスタンスとその IP アドレスを知る必要がありました。 Azure テーブルを利用して、実行中のインスタンスに関する重要な情報を記録することを選択しました。 インスタンスが開始または停止するたび、これらの詳細をテーブルに記録する必要がありました。この詳細は、他のすべてのインスタンスで読み取る可能性があります。 このソリューションはうまく機能しますが、テーブルに古いデータや不適切なデータが含まれている可能性がある場合に対処するために、慎重で防御的なコーディングが必要でした。 そのため、このようなソリューションは、絶対に必要な場合にのみ構築する必要があります。</p>  <h3>まとめ</h3>  <p>必要に応じてアプリケーションをスケーリングする機能は、Windows Azure の大きな利点の 1 つであり、Fabric コントローラーは <b>RoleEntryPoint</b> メソッドと <b>RoleEnvironment</b> イベントを通じて、ロール環境の現在の状態と変更に関する詳細情報を提供できます。 ほとんどのアプリケーションでは、スケーリング操作を処理するために空想的なコードを入力する必要はありません。ただし、より複雑なアプリケーションを扱う場合は、この情報が、アプリケーションでトポロジの変更を効果的に処理する方法を理解するのに役立ちます。 </p>  <p><iframe scrolling="no" frameborder="0" src="https://www.facebook.com/plugins/like.php?href=https://blogs.msdn.com/b/windowsazure/archive/2011/01/04/responding-to-role-topology-changes.aspx;layout=box_count&amp;show_faces=false&amp;width=300&amp;action=like&amp;font=segoe+ui&amp;colorscheme=light&amp;height=50" style="width: 300px; height: 50px; visibility: hidden; overflow: hidden;"></iframe><br>ツイートします  <script src="https://platform.twitter.com/widgets.js" type="text/javascript"></script>  </p>'
