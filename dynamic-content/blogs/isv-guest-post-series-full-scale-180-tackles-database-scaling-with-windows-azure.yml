### YamlMime:Yaml
ms.openlocfilehash: d70bdbcb4422ce59e89ec5a12d62ac6031ea9b48
ms.sourcegitcommit: d03bdc7fe5447adb6530886aab848b75fe8fa8ee
ms.translationtype: MT
ms.contentlocale: ja-JP
ms.lasthandoff: 03/11/2022
ms.locfileid: "139908909"
Slug: isv-guest-post-series-full-scale-180-tackles-database-scaling-with-windows-azure
Title: 'ISV ゲストポストシリーズ: Windows Azure でのフルスケール180どんなデータベーススケーリング'
Summary: 'エディター &rsquo; のメモ: フルスケールの180プリンシパル Trent swanson によって作成された今日 &rsquo; の投稿では、Windows Azure とデータベースのパーティション分割を使用して、そのようなソリューションを構築する方法について説明しています。'
Content: '<p><b><i>エディター &rsquo; のメモ:</i></b> <i>フルスケールの180プリンシパル Trent swanson によって作成された今日 &rsquo; の投稿では、Windows Azure とデータベースのパーティション分割を使用して、顧客向けのスケーラブルなソリューションを構築する方法について説明しています。</i><i><img style="float: right;" src="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/3678.trent.png" alt="" height="145" border="0" width="106"></i></p>  <p>フルスケール180は、クラウドコンピューティングソリューションに特化したワシントン州ワシントン based コンサルティング企業であり、アーキテクチャアドバイザリからのソリューション配信までのプロフェッショナルサービスを提供します。 &nbsp;フルスケールの180チームは、 <a href="https://www.windowsazure.com/en-us/pricing/free-trial/?WT.mc_id=cmp_pst001_blg_post0114gen">Windows Azure</a>で革新的なクラウドソリューションを提供するという評判を持ち、一見不可能な問題に対応しています。 &nbsp;フルスケール180は幅広い業界にわたるお客様と連携しています。また、すべてのプロジェクトが一意であるにもかかわらず、多くの場合、これらのソリューションに関連する一般的な懸念事項と要件が多数存在します。</p>  <p>顧客とのさまざまなプロジェクトの中で、Windows Azure での非常に優れたソリューションを設計、実装、デプロイすることによって、非常に興味深い課題をいくつか紹介しました。 &nbsp;頻繁に発生する課題は、データベースのスケーリングです。</p>  <p>データストアを使用する場合は、非常に高いレベルで、次の2つの主要領域に作業を集中する必要があります。</p>  <ul>  <li>&ldquo;データが格納される場所 &rdquo;</li>  <li>最適な方法でデータをその場で取得する</li>  </ul>  <p>複雑さが増し、抽象化レイヤーの数が多いのは、ソフトウェア開発分野において興味深いものです。 まずは、何らかの処理を行うために、API、ライブラリ、プログラミングパラダイム、クラスライブラリ、フレームワークなどのさまざまな概念を説明しています。最終的には均衡状態になります。これは、高いレベルの抽象化コンストラクトを使用するか、ビルド/取得の決定と呼ばれることもあります。 他にも同様に、データストアは同じパターンに従います。 <a href="https://www.windowsazure.com/en-us/home/features/sql-azure/?WT.mc_id=cmp_pst001_blg_post0114sql">SQL Azure</a>などのリレーショナルストアを扱う場合は、システムによって設定されたルールで再生する必要があります。</p>  <h3>データが格納される場所</h3>  <p>SQL Azure を使用する場合、データストアの物理コンポーネントが問題になることはないため、データファイル、ファイルグループ、ディスク全体の条件などについて心配する必要はありません。 サービス自体によって課せられるリソースの制限事項を考慮する必要があります。 現在 SQL Azure は、150 gb までの個々のデータベースを提供します。</p>  <p>アプリケーション &rsquo; のデータベース使用量が時間の経過と共に増加すること &rsquo; がよくあります。 オンプレミスデータベースとは異なり、制御できる唯一のディメンションは Windows Azure から追加のデータベース領域を調達することです。 これには2つの方法があります。拡張の計画を立て、前もって新しい領域を購入する (クラウドでの実行に対する目的が損なわれる可能性があります) か、またはポリシーに基づいて必要に応じて自動的に拡張します。 後者を選択する場合は、データベース間でデータをパーティション分割する方法を見つける必要があります。</p>  <h3>最適なデータ転送とシャーディング</h3>  <p>スペース管理以外にも、データストアとの間で送受信されるデータが高速であることを確認する必要があります。 オンプレミスのシステムでは、ネットワークとディスクの両方の速度が最適化されますが、クラウドプラットフォームでは通常、これは使用できる最適化ではないため、別のアプローチが必要になります。 これは通常、データアクセスを並列化するために変換されます。</p>  <p>&nbsp;<img src="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/1307.FullScale1.png" alt="" border="0"></p>  <p>データストレージのニーズは増大しますが、データベースの最大サイズについては、プラットフォームによって設定されたルール内で再生する必要があります。 同様に、これらのサイズとスループットの制限事項を考慮してソリューションを設計する必要があります。 &nbsp; データストアへの接続、データストア内の物理ストレージのスループット、またはデータストアのサイズ制限にかかわらず、多くの場合、この1つの単体制限を超えて &rsquo; 拡張するソリューションを設計する必要があります。 小さなデータベースのコレクションを使用してデータを格納するメカニズムを使用して、これらの小さなデータベースに同時にアクセスできる可能性がある場合は、サイズと速度の両方に合わせてデータストアソリューションを最適化することができます。 このメカニズムでは、データの自動パーティション分割とデータベース調達を行う必要があります。 この問題を解決するための一般的な方法の1つは、 <i>シャーディング</i>です。 &nbsp; シャーディングでは、使用する方法に関係なく、データ管理とデータアクセスに変更が加えられています。 SQL Azure フェデレーションは、SQL Azure に対してすぐに使用できるシャーディング実装を提供します。&nbsp;</p>  <p>お客様の取り組みの中で、SQL Azure のフェデレーションが解決策となる状況は明らかにしていません。 &nbsp;単に1つのデータベースの 150 GB のサイズ制限を超えてスケールアウトするだけでなく、マルチテナントクラウドソリューションでは、フェデレーションが役に立ちました。</p>  <h3>マルチテナントソリューションでのフェデレーションの SQL Azure</h3>  <p>マルチテナントは、多くの場合、通常は使用するクラウドソリューションの一部である要件です。 &nbsp;これらのプロジェクトには、新しいソリューションの構築、既存のシングルテナントソリューションへのこの機能の追加、スケールの拡大と運用コストの削減を実現するための既存のマルチテナントソリューションの再設計などが含まれています。 &nbsp;多くの場合、これらの要件を満たすには SQL Azure フェデレーションが非常に便利な機能です。 &nbsp;テナントはデータをパーティション分割するための自然な<i>境界</i>になり、多数のテナントによってコスト管理が重要になります。</p>  <p>ここでは、テナントデータをそれぞれ &rsquo; 専用のデータベースに格納するソリューションについて考えてみましょう &rsquo; 。 &nbsp;現在 SQL Azure でプロビジョニングできる最小のデータベースは 100 mb です。これは、$ 5/テナントの月間ストレージコストに相当します。 &nbsp;1万テナントをオンボードすると、ベースラインコストは $5万になります。 これで、個別のデータベースではなく、すべてのテナントを1つのデータベースにまとめることができました。 すべてのテナントが完全な 100 KB データを格納していたとしても、1万のすべてのテナントを 2 GB のデータベースに配置して、1か月につき $13.99 のみを予備として使用することができます。 &nbsp;&rsquo;これは大きな違いです。</p>  <p>次に、サービスに新機能を追加し、より多くのデータベースストレージを必要とする状況を考えてみましょう &rsquo; 。テナントのオンボードを続けます。 &nbsp;要求の増加に対応できるように、データベースのサイズを増やすことができますが、ある時点で上限に達しています。 &nbsp;この制限は、データベースサイズの上限、または1つのデータベースが許容時間内に処理できるトランザクションの数のいずれかになります。 &nbsp;ここでは、シャーディングが非常に役に立つようになりました。 SQL Azure フェデレーション &rsquo; では、ある時点で、サービスがオンラインになっている間はデータベースを分割し、需要の増加に合わせてデータベースをスケールアウトすることができます。</p>  <p>最近、Windows Azure でマルチテナントソリューションをデモンストレーションする多数のサンプルを開発しました。 &nbsp;これらのサンプルの1つには SQL Azure フェデレーションを使用するマルチテナントサンプルアプリケーションが含まれており、 <a target="_blank" href="https://shard.codeplex.com/">shard.codplex.com</a>にあります。 シャードプロジェクトに基づく例を見てみましょう &rsquo; 。&nbsp;</p>  <h3>既存のソリューションへのマルチテナントの追加</h3>  <p>シングルテナントデータベースのアプローチを共有データベースの設計に移行することは、多くの場合、非常にコストのかかる努力です。 &nbsp; 一般的な方法では、テナント固有のデータを含む各テーブルにテナント識別子を追加し、テナントを含むすべてのレイヤーでアプリケーションを修正します。 &nbsp; さらに、1つのデータベースのリソース制限を超えるスケーリングをサポートするには、テナントを複数のデータベースに分散させる必要があります。 &nbsp; その結果、ソリューション &rsquo; の運用コストが低くなり、利益を増やしたり、ソフトウェアベンダーにソリューションの競争力を高めたりすることができます。 &nbsp; これまでは、コストを削減し、スケールをサポートするために、基本的にカスタムシャーディングソリューションを使用しています。 &nbsp; これらのカスタムソリューションには、1つの DB でテナントレベルの分離を提供し、接続のルーティングを処理し、需要の増加に対応するために複数のデータベースにテナントを移動する、複雑な設計がありました。</p>  <p><img src="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/3718.FullScale2.png" alt="" border="0"></p>  <h3>フィルター選択された接続</h3>  <p>SQL Azure フェデレーションのフィルター選択された接続機能は、既存のソリューションを共有データベースの設計に移行する際に非常に強力です。 &nbsp;フィルター選択された接続を使用すると、ビジネスロジックまたはデータアクセス層で必要な変更を最小限に抑えることができます。これは、通常、すべての操作のテナント ID を作成するために必要です。 &nbsp;データベース接続がテナントコンテキストで初期化されたら、既存のビジネスロジックとデータアクセス層との接続を使用できます。 &nbsp;この機能は、アプリケーションで必要な作業量を最小限に抑えるために使用されていますが、スキーマの変更も必要であり、データ層の変更も必要であり、フェデレーションでサポートされていない機能を使用するためにアプリケーションに変更が必要になる場合があります。 &nbsp;SQL Azure フェデレーションのガイドラインと制限事項の詳細については、MSDN を参照してください。</p>  <p>同じテーブルに複数のテナントのデータを格納するために、スキーマに [TenantId] 列を追加する場合でも、 &rsquo; これを処理するためにコードまたはモデルを変更する必要はありません。 &nbsp;たとえば、 &rsquo; タスクを含むテーブルがあり、そのテーブル内のタスクの一覧をテナントに挿入して表示する機能がアプリケーションにあるとします。 &nbsp;フィルター選択された接続を<span style="text-decoration: underline;">使用せず</span>に、TenantId 列をテーブルに追加した後、次のような SQL ステートメントを含むコード</p>  <p>SELECT * FROM [Tasks]</p>  <p>&nbsp;次のように変更する必要があります。</p>  <p>SELECT * FROM [Tasks] <b>WHERE TenantId = @TenantId </b></p>  <p>実際、このような SQL ステートメントを含むすべてのコードでは、変更が必要になります。 &nbsp;フィルター選択された接続では、select * FROM [Tasks] &rdquo; など &ldquo; のステートメントを使用するアプリケーションコードを変更する必要はありません。&nbsp;</p>  <h3>[スキーマの変更]</h3>  <p>クイックレビューを行って、スキーマでサポートされていない機能の使用、およびさまざまな回避策を特定したら、まず、すべてのフェデレーションテーブルを特定します。 &nbsp; テナント固有のデータを含むテーブルでは、テーブルにテナント id 列が必要です。この列は、データをパーティション分割するために使用されます。 &nbsp; また、フェデレーションテーブルを参照する外部キー制約を含むテーブルでは、TenantId も追加される必要があります。また、フェデレーションテーブルになることもあります。 &nbsp; たとえば、Orders テーブルを使用していて、フェデレーションテーブルを作成する場合を考えてみます。 &nbsp; このテーブルには OrderId があり、多くの場合、Orders テーブルの OrderId に対する foreign key 制約を含む OrderDetails テーブルです。 &nbsp; また、OrderDetails には TenantId 列を追加する必要があり、foreign key 制約には TenantId も含める必要があります。</p>  <p>これらの各フェデレーションテーブルに対して、新しいレコードを挿入するときにビジネスロジックまたはデータアクセス層 &rsquo; が操作の一部としてテナント id を渡す必要がないように、フィルターされた接続コンテキストの確立に使用される値にテナント id が既定で設定されます。</p>  <p><img src="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/3362.FullScale3.png" alt="" border="0"></p>  <p>テナント固有のデータを含むすべてのテーブルに [TenantId] 列が追加されます。 &nbsp;この列の既定値は、USE FEDERATION ステートメントで渡される値であり、フィルター選択された接続の接続状態の一部であるフェデレーションフィルター値です。 &nbsp;この機能を使用すると、ステートメントの一部として [TenantId] を含めなくても、フェデレーションテーブルにデータを挿入できます。 &nbsp;現在、テナントを処理しないデータアクセスコードは、新しいレコードを挿入するときにこの新しい列をサポートするように変更する必要はありません。 &nbsp;フェデレーションテーブルのすべての一意のインデックスとクラスター化インデックスには、フェデレーション列が含まれている必要があるため、主キーのこの部分も作成しました。 &nbsp;&ldquo;フェデレーションの ON &rdquo; 句を追加してフェデレーションテーブルを作成します。この場合、[TenantId] テーブル列を [Tid] のフェデレーションディストリビューションキーと関連付けます。&nbsp;</p>  <h3>接続コンテキスト</h3>  <p>スキーマの更新が完了したので、アプリケーションでフィルター選択された接続の取得に対処する必要があります。 &nbsp;ここでの課題は、データベース接続をテナントコンテキストで初期化する必要があることです。これには、接続を開いた後、アプリケーションがこの接続を使用する前に、特定のフェデレーションステートメント ( &ldquo; フェデレーション &hellip; &rdquo; を使用) を呼び出す必要があります。 &nbsp;これを実現するには、テナント識別子を受け取るメソッドを実装し、アプリケーションが使用する開いている接続を返すか、接続が開かれたときにこのロジックを処理するイベントハンドラーを持つ接続オブジェクトを返します。</p>  <h3>まとめ</h3>  <p>このすべてをまとめて、一般的なマルチテナントソリューションでの単純な web 要求のプロセス全体について説明 &rsquo; します。 &nbsp; この例では、フェデレーションタスクテーブルに新しいタスクを記述し、テナントのタスクの一覧を返す方法を検討します。</p>  <p><img src="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/2604.FullScale4.png" alt="" border="0"></p>  <p>1) &nbsp; &nbsp; &nbsp; タスク情報を含む web 要求を受け取り、データが検証され、要求のテナントコンテキストが確立されます。 &nbsp;テナント識別子の解決方法は別の説明です。これは、さまざまな方法で処理できます。 &nbsp;テナントのコンテキストで初期化されたデータベース接続を取得するために、のテナント識別子をメソッドに渡します。</p>  <ol>  <li>これは、 <b>USE FEDERATION TenantFederation (Tid = 137) WITH RESET, FILTERING = ON</b> &rdquo; ステートメントが実行され &ldquo; ている開いている接続を返すことができます。</li>  <li>接続状態が open に変更されたときにこのステートメントを実行するために、接続オブジェクトにイベントハンドラーをアタッチできます。</li>  <li>Entity framework を利用する場合、いくつかの方法があります。たとえば、既存の SQL プロバイダーのラップ、接続オブジェクトへのイベントハンドラーのアタッチ、接続を開いて初期化したコンテキストを返すなどです。</li>  </ol>  <p>2) &nbsp; &nbsp; &nbsp; use federation &rdquo; ステートメントは &ldquo; 、テナント id 137 のデータを含む正しいフェデレーションメンバーに接続をリダイレクトします。 &nbsp;これにより、アプリケーションは、データベースに1つのテナント &rsquo; データしか含まれていない場合に、このフィルター選択された接続を正確に使用できるようになります。<br> <b>INSERT</b> <b>INTO [Task] ([Name], &hellip; ) VALUES ( &lsquo; My Task &rsquo; , &hellip; )</b></p>  <ol>  <li>TenantId 値を含める必要はないことに注意してください</li>  </ol>  <p>3) &nbsp; &nbsp; &nbsp; ビュー &ndash; の<b>SELECT * FROM [tasks]</b>を使用して返すタスクを取得する</p>  <ol>  <li>TenantId を含む WHERE 句を含める必要はないことに注意してください。</li>  </ol>  <p>システムの規模が拡大し、テナントを増やしていくにつれて、データベースを動的に拡張できるアーキテクチャが完成しました。 &nbsp;フェデレーションを分割し、アプリケーションがまだオンラインの間は、別のデータベースにソリューションをスケールアウトしました。</p>  <h3>カスタムシャーディングの代わりにフェデレーションを SQL Azure</h3>  <p>一部のお客様は、既にカスタムシャーディングソリューションを実装しています。 動作して &rsquo; いる場合は、SQL Azure フェデレーションを使用するようにソリューションを変更する必要がないよう &rsquo; に思えるかもしれません。 フェデレーションによって得られる利点があるため、SQL Azure フェデレーションについても説明します。</p>  <ul>  <li><b>テナントの移行。</b>&rsquo;オンボードプロセス中に小規模、中、または大規模になるテナントを予測することが困難な場合があります。このため、これらのテナントのリソースニーズの変化に対処するのは困難です。 テナントは、独自のデータベースに移動する必要があります。または、システムでの要求の増加に対応するために、既存のデータベースを分割する必要がある場合があります。 SQL Azure フェデレーションでは、オンラインデータベース分割がサポートしています。</li>  <li><b>テナントに依存しないクエリ。 </b>カスタムシャードでは、データアクセス層にクエリのテナント ID が含まれる可能性があります。 SQL Azure フェデレーションでは、<i>接続フィルター</i>によってテナントレベルのフィルター処理が提供されるため、テナント ID を含めなくてもクエリを作成できます。</li>  <li><b>データベースの検索。</b> 通常、マルチテナントアプリケーションでは、マスターデータベースは、すべてのテナントデータベースに対して参照インデックスを提供します (アプリケーション &rsquo; のデータベーストポロジに応じて、テナントを共有データベースまたは個別のデータベースにマッピングします)。 SQL Azure フェデレーションでは、テナントレベルの接続文字列が適切なデータベースに自動的に接続されるため、接続文字列を使用してマスター参照データベースを管理する必要がなくなります。</li>  <li><b>接続プールの断片化。</b> &nbsp;カスタムシャーディングの実装では、複数のデータベースを使用します。そのため、これらのデータベースに対する複数の接続と接続文字列が使用されます。 &nbsp;これらの各接続によってアプリケーションサーバーに接続プールが生成されるため、多くの場合、アプリケーションでプールの断片化に関する問題が発生します。 &nbsp;ソリューションをサポートするために必要なデータベースの数によっては、パフォーマンスの問題が発生する可能性があります。また、場合によっては、複雑な再設計や接続プールの無効化が必要になることもあります。 &nbsp;フェデレーションへの接続の処理方法が大幅に異なるため、フェデレーションへの接続の処理が大幅に異なるため、これは SQL Azure フェデレーションの場合とは異なり、1つの接続プールが作成されます。</li>  </ul>  <h3>まとめ</h3>  <p>SQL Azure フェデレーションは、Windows Azure でリレーショナルデータベースを動的にスケールアウトする必要があるソリューションと比較して検討し、評価する必要があります。 &nbsp;これは、新規または既存のマルチテナントソリューションと確実に考慮する必要があります。 &nbsp;SQL Azure フェデレーションの詳細については、次のリソースを参照することをお勧めします。</p>  <ul>  <li>SQL Azure でのフェデレーション (SQL Azure データベース)</li>  <li><a target="_blank" href="https://blogs.msdn.com/b/cbiyikoglu/">Cihan Biyi、 &rsquo; ブログ<br></a></li>  <li><a target="_blank" href="https://social.technet.microsoft.com/wiki/contents/articles/2281.federations-building-scalable-elastic-and-multi-tenant-database-solutions-with-sql-azure-en-us.aspx">フェデレーション: SQL Azure を使用したスケーラブルで柔軟なマルチテナントデータベースソリューションの構築</a></li>  <li><a target="_blank" href="https://shard.codeplex.com">Cloud Ninja federation サンプル</a></li>  </ul>'
