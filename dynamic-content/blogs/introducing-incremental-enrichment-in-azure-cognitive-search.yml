### YamlMime:Yaml
ms.openlocfilehash: 5029e02c548b07434e164ec98be34c4d81e31ff7
ms.sourcegitcommit: d03bdc7fe5447adb6530886aab848b75fe8fa8ee
ms.translationtype: MT
ms.contentlocale: ja-JP
ms.lasthandoff: 03/11/2022
ms.locfileid: "139904761"
Slug: introducing-incremental-enrichment-in-azure-cognitive-search
Title: インクリメンタル エンリッチメントのAzure Cognitive Search
Summary: インクリメンタル エンリッチメントは、データのインデックスAzure Cognitive Search宣言型のアプローチを取り入れ、データの新しい機能です。
Content: >-
  <p><a href="https://docs.microsoft.com/en-us/azure/search/cognitive-search-incremental-indexing-conceptual" target="_blank">インクリメンタル エン</a> リッチメントは、データのインデックスAzure Cognitive Search宣言型のアプローチを取り入れ、データの新しい機能です。 増分エンリッチメントを有効にすると、スキルが進化し続けている場合でも、ドキュメント エンリッチメントは少なくともコストで実行されます。 のインデクAzure Cognitive Searchデータ ソースから検索インデックスにドキュメントを追加できます。 インデクサーは、データ ソース内のドキュメントに対する更新を追跡し、データ ソース内の新しいドキュメントや更新されたドキュメントを使ってインデックスを更新します。</p>


  <p>インクリメンタル エンリッチメントは、データ ソース内のドキュメントの変更からエンリッチメント パイプラインのすべての側面に変更の追跡を拡張する新機能です。 インデクサーは増分エンリッチメントを使用して、ドキュメントをデータ ソース、現在のバージョンのスキルセット、インデクサーとの最終的な整合性に駆動します。</p>


  <p>インデクサーにはいくつかの重要な特性があります。</p>


  <ul>
      <li>データ ソース固有。</li>
      <li>状態対応。</li>
      <li>データ ソースとインデックスの間の最終的な整合性を確保するように構成できます。</li>
  </ul>


  <p>過去に、スキルを追加、削除、または更新してスキルセットを編集すると、最適な選択肢が得ていました。 コーパス全体のすべてのスキルを再実行するか、基本的にインデクサーのリセットを行います。または、インデックス内のドキュメントがさまざまなバージョンのスキルセットでエンリッチされるバージョンドリフトを許容します。</p>


  <p>API のプレビュー リリースに対する最新の更新により、インデクサーの状態管理は、データ ソースとインデクサー のフィールド マッピングのみから拡張され、スキルセット、出力フィールド マッピングのナレッジ ストア、プロジェクションも含まれます。</p>


  <p>インクリメンタル エンリッチメントにより、エンリッチメント パイプラインの効率が大幅に向上します。 スキルの追加または更新時にドキュメントのコーパス全体を再エンリッチする大きなコストを受け入れるか、または異なるバージョンのスキルセットでドキュメントが作成または更新され、エンリッチメントの形状や品質が非常に異なるバージョンのドリフトを処理する、という選択肢が排除されます。</p>


  <p>インデクサーは、エンリッチメント パイプライン全体の変更を追跡して対応します。どのスキルが変更されたかを判断し、更新されたスキルと、呼び出された場合にダウンストリームまたは依存スキルのみを選択的に実行します。 インクリメンタル エンリッチメントを構成することで、インデックス内のすべてのドキュメントが、必要な作業量を最も少ない状態で常に最新バージョンのエンリッチメント パイプラインで処理することができます。 増分エンリッチメントでは、変更の処理方法を完全に制御する必要があるシナリオに対処するための詳細なコントロールも提供されます。</p>


  <p><a href="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/507286c2-c347-401e-aa70-5d0d03a346e2.png"><img alt="Azure Cognitive Search document enrichment pipeline" border="0" height="462" src="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/11209cb0-9fc2-4d87-8210-62744f0df29a.png" style="margin: 0px auto; border: 0px currentcolor; border-image: none; float: none; display: block; background-image: none;" title="" width="883"></a></p>


  <h2>インデクサー キャッシュ</h2>


  <p>インデクサー キャッシュをエンリッチメント パイプラインに追加すると、増分インデックス作成が可能になります。 インデクサーは、各ドキュメントの各スキルの結果をキャッシュします。 スキルセットの更新 (新規または更新されたスキル) が原因でデータ ソースのインデックスを再設定する必要がある場合は、以前に強化された各ドキュメントがキャッシュから読み取り、影響を受けたスキル、変更、および変更のダウンストリームだけが再実行されます。 更新された結果はキャッシュに書き込まれます。ドキュメントはインデックスで更新され、必要に応じてナレッジ ストアで更新されます。 物理的には、キャッシュはストレージ アカウントです。 インデクサー キャッシュには、Search サービス内のすべてのインデックスが同じストレージ アカウントを共有できます。 各インデクサーには、変更できない一意のキャッシュ ID が割り当てられます。</p>


  <h2>インデックス作成に対するきめ細かい制御</h2>


  <p>インクリメンタル エンリッチメントは、インデクサーが最初に最も優先度の高いタスクを実行して変更検出をオーバーライドするための細かい制御のホストを提供します。</p>


  <ul>
      <li>変更検出のオーバーライド: インクリメンタル エンリッチメントを使用すると、エンリッチメント パイプラインのすべての側面をきめ細かく制御できます。 これにより、変更によって意図しない結果が生じかねない状況に対処できます。 たとえば、スキルセットを編集したりカスタム スキルの URL を更新したりした場合、そのスキルに関してキャッシュされた結果がインデクサーによって無効化されます。 エンドポイントを別の仮想マシン (VM)&rsquo; に移動する場合、または新しいアクセス キーを使用してスキルを再デプロイする場合は、既存のドキュメントを再処理する必要があります。</li>
  </ul>


  <p>インデクサー <code>disableCacheReprocessingChangeDetection </code>が明示的に必要なエンリッチメントのみを実行するために、スキルセットの更新では、必要に応じてクエリ文字列パラメーターを に設定できます <code>true</code>。 このパラメーターを設定すると、スキルセットの更新だけがコミットされ、既存のコーパスに対する影響に対する変更が評価されません。</p>


  <ul>
      <li>キャッシュの無効化: このシナリオの逆は、カスタム スキルの新しいバージョンをデプロイできるシナリオです。エンリッチメント パイプライン内では何も変更されませんが、更新されたモデルの利点を反映するために、特定のスキルが無効にされ、影響を受けるすべてのドキュメントが再処理される必要があります。 これらのインスタンスでは、スキルセットに対して無効化スキル操作を呼び出します。 スキルのリセット API は、キャッシュ内の無効化すべきスキル出力のリストと共に POST 要求を受け取ります。 スキルのリセット API の詳細については、ドキュメントを参照 <a href="https://docs.microsoft.com/en-us/rest/api/searchservice/2019-05-06-preview/reset-skills" target="_blank">してください</a>。</li>
  </ul>


  <h2>既存の API の更新</h2>


  <p>インクリメンタル エンリッチメントを導入すると、一部の既存の API が更新されます。</p>


  <h3>インデクサー</h3>


  <p>インデクサーで新しいプロパティが公開されます。</p>


  <p>キャッシュ</p>


  <ul>
      <li><code>StorageAccountConnectionString</code>: 中間結果のキャッシュに使用されるストレージ アカウントへの接続文字列。</li>
      <li><code>CacheId</code>:cacheId は、このインデクサーのキャッシュとして使用される annotationCache ストレージ アカウント内のコンテナーの識別子です。 このキャッシュは、このインデクサーに固有であり、インデクサーが削除され、同じ名前で再作成された場合、cacheid が再生成されます。 cacheId は設定できません。これは常にサービスによって生成されます。</li>
      <li><code>EnableReprocessing</code>: 既定では true に設定され、false に設定すると、ドキュメントは引き続きキャッシュに書き込まれますが、キャッシュ データに基づいて既存のドキュメントは再処理されません。</li>
  </ul>


  <p>インデクサーでは、新しい querystring パラメーターもサポートされます。</p>


  <p><code>ignoreResetRequirement</code> を に設定 <code>true </code>すると、リセット条件をトリガーせずにコミットを実行できます。</p>


  <h3>スキルセット</h3>


  <p>スキルセットでは新しい操作はサポートされていませんが、新しい querystring パラメーターがサポートされます。</p>


  <p><code>disableCacheReprocessingChangeDetection </code>は、 <code>true </code>現在のアクションに基づいて既存のドキュメントに対して に更新を行う必要がない場合に に設定されます。</p>


  <h3>データソース</h3>


  <p>データソースでは新しい操作はサポートされていませんが、新しい querystring パラメーターがサポートされます。</p>


  <p><code>ignoreResetRequirement</code> を に設定 <code>true </code>すると、リセット条件をトリガーせずにコミットを実行できます。</p>


  <h2>ベスト プラクティス</h2>


  <p>インクリメンタル エンリッチメントを使用するには、新しいインデクサーでキャッシュ プロパティを構成するか、既存のインデクサーをリセットしてキャッシュ プロパティを設定することをお勧めします。 ignoreResetRequirement は慎重に使用してください。容易には検出できない不整合が意図せずデータに生じることがあります。</p>


  <h2>重要なポイント</h2>


  <p>増分エンリッチメントは強力な機能であり、データソースからのデータが検索インデックスまたはナレッジ ストア内のデータと常に一貫性を持つ状態を宣言的に保証できます。 スキル、スキルセット、またはエンリッチメントによってエンリッチメント パイプラインが進化するにつれて、ドキュメントの最終的な整合性を高める作業が最も少なからず実行されます。</p>


  <h2>次の手順</h2>


  <p>概要インデ <a href="https://docs.microsoft.com/en-us/azure/search/cognitive-search-incremental-indexing-conceptual" target="_blank">ク</a> サーにキャッシュを追加するか、新しいインデクサーを定義するときにキャッシュを追加することで、増分エンリッチメントを使用できます。</p>
