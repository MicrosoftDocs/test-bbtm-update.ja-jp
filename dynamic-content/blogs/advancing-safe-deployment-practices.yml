### YamlMime:Yaml
ms.openlocfilehash: 5a54967dbec4263b7fdd347ff7ebf2a71b2a20a4
ms.sourcegitcommit: d03bdc7fe5447adb6530886aab848b75fe8fa8ee
ms.translationtype: MT
ms.contentlocale: ja-JP
ms.lasthandoff: 03/11/2022
ms.locfileid: "139894608"
Slug: advancing-safe-deployment-practices
Title: 安全な配置方法を進める
Summary: IT システムをオンプレミスで実行する場合、plated ハードウェアを用意し、サーバールームをロックアップして、キーを破棄することで、完全な可用性を確保することができます。 ソフトウェアを使用すると、従来は可能な限り多くの変更を防ぐことができます。 OS やアプリケーションに更新プログラムが適用されることを回避し、それが非常に重要であり、ユーザーからの変更要求に対してプッシュバックします。
Content: >-
  <p>&quot;Azure に表示されるサービスの信頼性の問題の主な原因は何ですか。ただし、一般的なハードウェア障害はありませんか。 [変更] を選択します。 クラウドの価値提案の1つは、it &rsquo; が継続的に改善され、新しい機能と機能が提供されること、およびセキュリティと信頼性の強化が図られることです。 しかし、プラットフォームは継続的に進化しているため、変更は避けられません。 これには、箱の製品または従来の IT アプローチよりも品質と安定性を確保するためのアプローチが非常に異なります。この方法 &mdash; では、長期的にテストしたり、何かを展開して変更を回避したりすることができます。 この <a href="https://azure.microsoft.com/en-us/blog/tag/advancing-reliability/" target="_blank">投稿では</a> 、 <a href="https://azure.microsoft.com/en-us/blog/advancing-microsoft-azure-reliability/" target="_blank">7 月のブログ投稿</a> で、Azure&#39;の信頼性がミッションクリティカルなワークロードをサポートしていることを確認するために&#39;について説明しています。 ここでは、安全な <strong>デプロイ</strong>の方法について説明し&#39;ます。これは、すべてのコードと構成の更新が明確に定義された段階を経て顧客にリーチする前に回帰やバグを発見するように、変更の自動化を管理する方法です。また、初期段階を過ぎた場合は、できるだけ少ない数に影響します 私たちのコンピューティングエンジニアリングチームの<strong>佐藤さん Del Amo Casado</strong>は、安全なデプロイイニシアチブを推進しているため、この投稿を作成しました。 &rdquo;-Mark Russinovich、CTO、Azure</p>


  <hr>

  <p>&nbsp;</p>


  <p>IT システムをオンプレミスで実行する場合、plated ハードウェアを用意し、サーバールームをロックアップして、キーを破棄することで、完全な可用性を確保することができます。 ソフトウェアによっては、オペレーティングシステムまたはアプリケーション &rsquo; に更新プログラムを適用しても、重要度が高く &mdash; なり、ユーザーからの変更要求が再度発生するのを防ぐことができます。 だれもがシステムを treading にしているので、 &lsquo; 熱中! &rsquo; アプローチはシステムを継続的に改善しています。また、定期的にパッチを適用するのが非常に重要であると思われるシステムのセキュリティが侵害されることもあります。 前述のように、このアプローチは、Azure などのハイパースケールパブリッククラウドでの変更とリリース管理には&#39;いません。 変更は、サービスの更新と改善をデプロイする必要がある場合、およびセキュリティ上の脆弱性が発生した場合に迅速に行動することをお勧めします。 単に変更を避けることができる &rsquo; ので、マイクロソフト、マイクロソフトのお客様、およびパートナーは、変更が想定されていることを確認し、その変更を計画しています。 Microsoft は引き続き更新プログラムを可能な限り透過的に実行し、次に示すように変更を安全に展開します。 また、お客様とパートナーは高可用性を実現するように設計する必要があり、プラットフォームによって送信されたメンテナンスイベントを使用して、必要に応じて適応します。 また、場合によっては、お客様は、 <a href="https://www.aka.ms/advancingreliability/4" target="_blank">組織に適したタイミング</a>でプラットフォームの更新を開始することを制御できます。</p>


  <h2>変更 (安全に)</h2>


  <p>Azure データセンター全体でリリースをデプロイする方法を検討する際には、プロセスを構築する際に、その変更によって生じる不明な問題が発生する可能性があると想定し、影響を最小限に抑えて問題の検出を可能にする方法を計画し、問題が発生した場合の軽減措置を自動化します。 開発者は、完全に無害であると判断し、&#39;それがサービスに影響を与えていることを保証することがありますが、システムに対する変更が最小限でも、システムの安定性が低下することがあります。そのため &lsquo; 、ここでの変更 &rsquo; は、すべての新しいリリースを参照し、コードの変更と構成の変更の両方を対象 ほとんどの場合、構成の変更によってシステムの動作に大きな影響が及ぶことはありませんが、コードを変更する場合と同様に、潜在的なコードの欠陥や新しいコードパスをアクティブ化する際に、構成の変更は不要です。</p>


  <p>Azure 全体で Teams は、変更に関連する影響を最小限に抑えることができます。 まず、テストと統合の検証を通じて、デプロイが開始される前に変更が品質基準を満たしていることを確認します。 次に、サインオフ後、変更を段階的にロールアウトし、正常性シグナルを継続的に測定します。これにより、テスト中に画面にない変更に関連する予期しない影響がある場合に、相対分離を検出できるようになります。 このような変更によって問題が広範囲に運用されることはありません。そのため、可能な限り回避できるようにするための手順が実行されます。 段階的デプロイを使用すると、大きな影響を受ける前に小さなスケール (または小さい &lsquo; 爆発半径 &rsquo; ) で問題を検出することができます。</p>


  <p>Azure では、上記の高レベルのプロセスに合わせて変更の自動化が行われています。これは、すべてのコードと構成の変更が特定の段階のライフサイクルを通過するようにすることを目的としています。この <strong>フレームワーク</strong>は、正常性メトリックが監視され、パフォーマンスが低下した場合に自動アクションとアラートをトリガー これらのステージ (次の図を参照) を使用すると、ソフトウェアの変更が既存の Azure ワークロードに悪影響を与えるリスクが軽減されます。</p>


  <p><a href="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/dfe1ed0f-f1f3-45c7-bd0d-9cb934b15eed.png"><img alt="A diagram showing how the cost and impact of failures increases throughout the production rollout pipeline, and is minimized by going through rounds of development and testing, quality gates, and integration." border="0" height="463" src="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/bf679ad2-9c14-484f-a30c-6ac44391150e.png" style="border: 0px currentcolor; border-image: none; margin-right: auto; margin-left: auto; float: none; display: block; background-image: none;" title="運用ロールアウトパイプライン全体で障害のコストと影響をどのように向上させるかを示す図です。開発とテスト、品質ゲート、および統合のラウンドスルーによって最小限に抑えられます。" width="1024"></a></p>


  <p>これは、開発者がコードを変更し、独自のシステムでテストし、ステージング環境にプッシュすることによって、デプロイパイプラインを簡略化したものです。 一般に、この <strong>統合環境</strong> は、特定のコンポーネントの相互作用をテストする必要がある Azure サービスのサブセットのチーム専用です。 たとえば、コンピューティング、ネットワーク、ストレージなどのコアインフラストラクチャチームは、統合環境を共有します。 各チームは、その環境内のソフトウェアに対して代理テストとストレステストを実行し、安定するまで反復します。その後、特定のリリース、機能、または変更が運用の準備ができていることを品質結果が示したら、その変更をカナリア領域にデプロイします。</p>


  <h2>カナリア領域</h2>


  <p>一般に、<strong>カナリアリージョン</strong>については、更新プログラムの初期の更新プログラム &rdquo; のリージョンと &ldquo; して参照しています。また、azure サービスの大多数を活用して、azure リージョンを効果的に完全に扱うこと &rsquo; ができます。 カナリア領域の1つは <a href="https://docs.microsoft.com/en-us/azure/availability-zones/az-overview" target="_blank">Availability Zones</a> を使用して構築されています。また、両方のリージョンが <a href="https://docs.microsoft.com/en-us/azure/best-practices-availability-paired-regions" target="_blank">リージョンペア</a> を形成しているため、データ geo レプリケーション機能を検証できます。 これらのカナリアリージョンは、フル、実稼働レベル、エンドツーエンドの検証、および大規模なシナリオカバレッジに使用されます。 これらのサービスでは、一部のファーストパーティサービス (内部の顧客向け)、いくつかのサードパーティのサービス、およびプログラムに招待されている少数の外部顧客をホストします。これにより、対象となるシナリオの豊富さと複雑さを向上させることができます。 また、Azure teams は、これらの環境でストレスおよび代理テストを実行します。また、リージョンまたは可用性ゾーンレベルでフォールトインジェクションまたはディザスターリカバリーの訓練を定期的に実行し、これが実際に発生したときに実行される検出と復旧のワークフローを実践します。 これらの演習では、Azure の広範な顧客ワークロードを変更する前に、ソフトウェアが最高品質であることを確認しています。</p>


  <h2>パイロット フェーズ</h2>


  <p>カナリアの結果から、既知の問題が検出され <strong>ていない</strong>ことが判明したら、実稼働環境へのプログレッシブデプロイを開始できます。 このフェーズでは、比較的小規模で、ハードウェアと構成がより多様な変更を試すことができます。 このフェーズは、ハードウェアの依存関係を持つコアストレージサービスやコアコンピューティングインフラストラクチャサービスなどのソフトウェアに特に重要です。 たとえば、Azure には、GPU&#39;s、大規模メモリサーバー、汎用サーバー、複数世代のプロセッサ、Infiniband などのサーバーが用意されています。これにより、変更を可能にし、小規模なテストでは表面化しない問題を検出できるようになります。 各手順では、完全な正常性の監視と拡張された &#39;&#39; 焼き付けるによって、潜在的な障害パターンを表面化させ、変更の信頼性を向上させ、顧客に対する全体的なリスクを大幅に削減しています。</p>


  <p>パイロット段階からの結果が良好であると判断したら、デプロイシステムは、 <strong>より多くのリージョンに段階的</strong>に変更を進めることができるようになります。 広範な Azure リージョンへのデプロイにおいて、Availability Zones を考慮するデプロイシステム (変更はリージョン内の1つの可用性ゾーンにのみ適用されます) とリージョンのペアリング (すべてのリージョンは、georedundant ストレージの2つ目のリージョンとペア &rsquo; になります) によって最初にリージョンに、次にそのペアにデプロイさ &lsquo; れます。 一般に、変更は、負のシグナルがない限り、デプロイされます。</p>


  <h2>セーフの展開方法</h2>


  <p>Azure の規模がグローバルになると、ロールアウトプロセス全体が完全に自動化され、ポリシーによって促進されます。 これらの宣言型ポリシーとプロセス (開発者ではありません) は、ソフトウェアをどの程度迅速に展開できるかを決定します。ポリシーは一元的に定義され、ソフトウェアの品質を監視するための必須の正常性シグナルと、上記で説明したさまざまな段階の必須 &lsquo; の焼き付ける時間 &rsquo; を含みます。 各フェーズでさまざまな期間にわたってソフトウェアの作成と焼きを行う理由は、そのサービスのすべての負荷に変更が公開されるようにすることです。 たとえば、さまざまな組織のユーザーが朝にオンラインになり、ゲームの顧客が夜間にオンラインになり、新しい仮想マシン (Vm) または顧客からのリソースの作成が長時間にわたって発生する可能性があります。</p>


  <p>グローバルサービスは、さまざまなクラスター、リージョン、またはサービスリングに段階的にデプロイする方法を採用することはできません。また、SDP との連携によって段階的なロールアウトのバージョンを実践することもできます。 これらのサービスは、複数のフェーズでサービスインスタンスを更新するモデルに従っており、Azure Traffic Manager によって、更新されたインスタンスへのトラフィックを段階的に逸脱ます。 シグナルが正の場合は、更新されたインスタンスに対して時間の経過と共により多くのトラフィックが逸脱され、信頼度が高くなり、デプロイがより多くのサービスインスタンスに適用されなくなるのを防ぐことができます。</p>


  <p>もちろん、Azure platform にも、変更をすべての Azure に同時にデプロイする機能があります。これは、非常に重大な脆弱性を軽減するために必要な場合に当てはまります。 安全な展開ポリシーは必須ですが、特定の緊急条件が満たされた場合には、このポリシーを高速化することもできます。 たとえば、通常よりも短時間で移行する必要があるセキュリティ更新プログラムをリリースする場合や、既にお客様に非常にインパクトている &rsquo; 問題を軽減する修正によって、回帰のリスクが克服される修正プログラムをリリースする場合などです。 このような例外は非常にまれです。一般的に、デプロイツールとプロセスは、多くの場合、通知が作成され、シナリオやワークフローが大規模に実行される可能性を最大化するために、速度を意図的に犠牲にします。</p>


  <h2>継続的な改善</h2>


  <p>私たちの安全な展開プラクティスと展開ツールは、以前の障害やメンテナンスイベントからの学習によって継続的に進化しています。また、問題を検出して大幅に小さくすることを目標としています。 たとえば、正常性信号を強化し、機械学習を使用してエラーをより適切に関連付け、異常を検出することの重要性について学習しました。 さらに、お送りしたようにパイロットとフライトを行う方法も改善されているため、より少ないリスクでより多くのハードウェアをカバーできます。 問題の兆候を示す可能性がある場合は、変更を自動的にロールバックする機能の向上を続けています。 また、一般に変更の影響を軽減または排除するプラットフォームの機能にも投資します。</p>


  <p>昨年にリリースされた1000を超える新機能により、Azure の変化のペースが膨大になる可能性があることがわかっています。 前述のように、クラウドサービスの機敏性と継続的な改善は、クラウド &ndash; の変化の重要な価値提案の1つであり、バグではなく機能です。 最新のリリースの詳細については、お客様とパートナーに <a href="https://www.Azure.com/Updates" target="_blank">Azure.com/Updates でのお知らせ</a>をお勧めします。 これは、最近の Azure 製品の更新プログラム (開発中のイノベーションのロードマップを含む) について、1か所で確認することができます。 これらのさまざまなサービスが利用可能になっているリージョンや、利用可能になる時期を理解するために、 <a href="https://www.Azure.com/ProductsbyRegion" target="_blank">Azure.com/ProductsbyRegion でツールを使用</a>することもできます。</p>
