### YamlMime:Yaml
ms.openlocfilehash: c230d58d32fc1edf7398989b389e78055ce1a2af
ms.sourcegitcommit: d03bdc7fe5447adb6530886aab848b75fe8fa8ee
ms.translationtype: MT
ms.contentlocale: ja-JP
ms.lasthandoff: 03/11/2022
ms.locfileid: "139904404"
Slug: request-filtering-in-application-insights-with-telemetry-processor
Title: テレメトリ プロセッサを使用したアプリケーション インサイトでの要求のフィルター処理
Summary: コミュニティからの大きなフィードバックの後、テレメトリ プロセッサという新しい機能に投資しました。 バックエンド サービスに送信される前に、Application インサイト SDK によって生成されたテレメトリを検査、フィルター処理、変更できます。 テレメトリ プロセッサは、新しいバージョンの SDK に含まれています。
Content: "<p>コミュニティ <a href=\"https://aka.ms/aiuservoice\">からの大</a> きなフィードバックの後、テレメトリ プロセッサという新しい機能に投資しました。 &nbsp;Application <a href=\"https://azure.microsoft.com/documentation/articles/app-insights-api-custom-events-metrics/\"><u><font color=\"#0066cc\">インサイト SDK</font></u></a> によって生成されたテレメトリがバックエンド サービスに送信される前に、そのテレメトリを確認、フィルター処理、変更できます。 テレメトリ プロセッサは、新しいバージョン <a href=\"https://azure.microsoft.com/documentation/articles/app-insights-release-notes-dotnet/\">の SDK に含まれています</a>。</p>\n\n<p>バックエンドに送信&nbsp;する前に、データの初期化、フィルター処理、サンプリングを行えるので、たとえば、ロボットからの要求や成功した依存関係呼び出しに関するテレメトリをフィルター処理できます。 つまり、収集されるデータの量を減らして、関心のあるテレメトリに集中することができます。</p>\n\n<p>フィルターを作成するには、ITelemetryProcessor を実装します。 これは、テレメトリ <a href=\"https://azure.microsoft.com/documentation/articles/app-insights-api-custom-events-metrics/\">モジュール、テレメトリ初期化</a> 子、テレメトリ チャネルなど <a href=\"https://azure.microsoft.com/documentation/articles/app-insights-api-custom-events-metrics/#telemetry-initializers\">、</a>&nbsp;もう 1 つの <a href=\"https://apmtips.com/blog/2015/05/06/diy-data-sampling/\">拡張ポイントです</a>。&nbsp;</p>\n\n<h1>テレメトリ プロセッサを作成する</h1>\n\n<ol>\n <li><a href=\"https://azure.microsoft.com/documentation/articles/app-insights-release-notes-dotnet/\">SDK を最新バージョンに更新します</a>。 注: このバージョンはプレリリース中です。実際の API は将来変更される可能性があります。</li>\n <li>&nbsp;ITelemetryProcessor を適用してフィルターを作成します。 これは、テレメトリ モジュール、テレメトリ初期化子、テレメトリ チャネルなど、もう 1 つの拡張ポイントです。<br />\nテレメトリ プロセッサが処理のチェーンを構築することに注意してください。 テレメトリ プロセッサをインスタンス化するときは、リンクをチェーン内の次のプロセッサに渡します。 テレメトリ データ ポイントが Process メソッドに渡されると、作業が実行され、そのチェーンの次のテレメトリ プロセッサが呼び出されます。</li>\n <li>メイン ソース ファイル (通常は Global.asax.cs) に新しい TelemetryConfiguration を作成します。</li>\n</ol>\n\n<p>実装の詳細については、ドキュメント ページを <a href=\"https://azure.microsoft.com/documentation/articles/app-insights-api-filtering-sampling/#filtering\">参照してください</a>。</p>\n\n<h1><font face=\"Calibri\">フィルター処理</font></h1>\n\n<p>多くのお客様は、機密情報のフィルター処理など、フィルター処理機能を <a href=\"https://azure.microsoft.com/documentation/articles/app-insights-get-started/#comment-2309233065\">求めがありました</a>。 アプリケーションインサイト、この機能を提供できるのを楽しげに思っています。 便利なフィルターの例を次に示します。</p>\n\n<h3>代理要求をフィルターで取り出す</h3>\n\n<p>メトリックス エクスプローラーには、検索エンジンと Web テストからの要求をフィルターで絞り込むオプションが用意されています。 トラフィックを減らし、SDK から送信しないデータ ポイントのクォータを向上できます。</p>\n\n<pre class=\"prettyprint\">\npublic void Process(ITelemetry item)\n{\n    if (!string.IsNullOrEmpty(item.Context.Operation.SyntheticSource))\n    { return; }\n\n    this.Next.Process(item);\n}</pre>\n\n<p><strong>メモ：</strong>&nbsp;SyntheticSource は <a href=\"https://azure.microsoft.com/documentation/articles/app-insights-configuration-with-applicationinsights-config/#nuget-package-2\">TelemetryInitialzier によって設定されます</a>。</p>\n\n<h3>認証に失敗した要求をフィルターで取り出す</h3>\n\n<p>これにより、401 応答で &ldquo;要求がフィルター処理&rdquo; されます。 401 応答: 認証に失敗しました - &quot;&quot;&rsquo;多くの場合、名前が間に合うということはネゴシエーション応答を意味し、個別の要求項目として追跡したくない場合があります。 ネゴシエーション応答と実際の失敗を区別する、より複雑なロジックが配置されている可能性があります。&nbsp;</p>\n\n<pre class=\"prettyprint\">\npublic void Process(ITelemetry item)\n{\n    var request = item as RequestTelemetry;\n\n    if (request != null &amp;&amp;\n    request.ResponseCode.Equals(&quot;401&quot;, StringComparison.OrdinalIgnoreCase))\n    {\n        // To filter out an item, just terminate the chain: \n        return;\n    }\n    // Send everything else: \n    this.Next.Process(item);\n}</pre>\n\n<h3>高速リモート依存関係 &ldquo;呼び&rdquo; 出しをフィルターで取り出す</h3>\n\n<p>これにより、100 ミリ秒未満の依存関係呼び出しがフィルター処理されます。 多くの場合、高速クエリは診断に興味を持たいものです。</p>\n\n<pre class=\"prettyprint\">\npublic void Process(ITelemetry item)\n{\n    var request = item as DependencyTelemetry;\n            \n    if (request != null &amp;&amp; request.Duration.Milliseconds &lt; 100)\n    {\n        return;\n    }\n    this.Next.Process(item);\n}</pre>\n\n<p>これで、必要なテレメトリをフィルター処理できます。 テレメトリ プロセッサを使用すると、&nbsp;収集されるデータに関してより多くの制御を行います。</p>\n\n<h1>今後の計画</h1>\n\n<p>Application インサイトチームは、開発者に高品質のツールを提供する取り組みです。 API は、新しい機能を開発する中で変更される可能性が高く、そのため、新機能に関するフィードバックや推奨事項を大いに感謝します。</p>"
