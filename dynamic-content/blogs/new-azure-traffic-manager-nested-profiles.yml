### YamlMime:Yaml
ms.openlocfilehash: 9fd50b2b7cb9f241877d47d7d6ade72e068454ee
ms.sourcegitcommit: d03bdc7fe5447adb6530886aab848b75fe8fa8ee
ms.translationtype: MT
ms.contentlocale: ja-JP
ms.lasthandoff: 03/11/2022
ms.locfileid: "139894311"
Slug: new-azure-traffic-manager-nested-profiles
Title: '新規: Azure Traffic Manager入れ子になったプロファイル'
Summary: Azure のお客様は、トラフィック管理のために入れ子になったプロファイルを作成できます。 これにより、より大規模で複雑なデプロイのニーズをサポートする強力な負荷分散とフェールオーバー スキームを作成する柔軟性が非常に高い可能性があります。
Content: >-
  Azure Traffic Manager入れ子になったプロファイルのサポートをお知らせTraffic Managerです。 この機能を使用すると、より大規模で複雑なデプロイのニーズをサポートするために、より柔軟で強力な負荷分散とフェールオーバー スキームを作成できます。


  この機能は、現在、REST API PowerShell コマンドレットを通じてサポートされています。

  <h1>はじめに</h1>

  Traffic Managerを使用すると、複数の Azure デプロイ間で受信トラフィックを負荷分散できます。 Traffic Manager によって実現される主なシナリオには、エンド ユーザーを最も近いデプロイに向け、サービスを監視し、サービスがダウンした場合に自動フェールオーバーを提供することで高可用性を実現することで、アプリケーションのパフォーマンスを向上させる方法が含まれます。 また、最近、重み付けされたトラフィック分散と <a href="https://azure.microsoft.com/blog/2014/06/26/azure-traffic-manager-external-endpoints-and-weighted-round-robin-via-powershell/">Azure</a> 外部のエンドポイントのサポートも発表しました。これにより、フェールオーバーからクラウドへのフェールオーバー、クラウドへのバースト、オンプレミスからクラウドへの移行など、さまざまな追加シナリオが可能になります。


  本日は、新しい機能として、入れ子になった新しいプロファイルTraffic Manager発表します。 この機能を使用すると、より大規模で複雑なデプロイのニーズをサポートするために、より柔軟で強力な負荷分散とフェールオーバー スキームを作成できます。


  入れ子になったプロファイルは、<a href="https://msdn.microsoft.com/en-us/library/azure/hh758255.aspx">REST API</a> および PowerShell コマンドレットを使用して作成できます (<a href="https://azure.microsoft.com/en-us/documentation/articles/install-configure-powershell/">Azure PowerShell</a> の使用を開始する方法を次に示します。バージョン 0.8.8 以降が必要です)。Azure 管理ポータルでは作成できません。


  このブログ記事の残りの部分では、いくつかの例を使用して、この機能の機能とその使い方について説明します。

  <h2>例 1: パフォーマンス負荷分散を使用した新しいデプロイの試用</h2>

  アプリケーションが複数の Azure リージョン (米国東部、米国西部、ヨーロッパ北部、ヨーロッパ西部、東南アジア) 東アジアデプロイされているとします。 ユーザーにTraffic Managerリージョンにトラフィックを分散するには、ユーザーの "パフォーマンス" 負荷分散方法を使用します。


  <a href="https://acom.azurecomcdn.net/80C57D/blogmedia/blogmedia/2014/10/22/1.-Performance-Load-Balancing.png"><img style="padding-top: 0px; padding-left: 0px; padding-right: 0px; border-width: 0px;" title="1. パフォーマンスLoad-Balancing" alt="1. Performance Load-Balancing" src="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/1.-Performance-Load-Balancing_thumb.png" width="614" height="286" border="0" /></a>


  次に、サービスの更新を広くロールアウトする前に、少数のユーザーで試してみる必要があるとします。 このためには、"重み付けラウンド ロビン" 負荷分散方法を使用します。これにより、トラフィックの一部が試用版のデプロイに送信される可能性があります。 以前は、これをパフォーマンス負荷分散と組み合わせることができなかった。 これで、入れ子になったプロファイルを使用して、両方を実行できます。


  次に示すのは、ヨーロッパ北部での新しいデプロイを試用する方法です。 既存のデプロイと共に試用版のデプロイを設定し、これら 2 つのエンドポイントと重み付けラウンド ロビン負荷分散方法を使用して Traffic Manager プロファイルを作成します。 次に、この "子" プロファイル<i></i>をエンドポイントとして "親" プロファイルに追加します。このプロファイルでは、パフォーマンス負荷分散方法が使用されます。


  次の図と PowerShell スニペットは、この例を示しています。


  <a href="https://acom.azurecomcdn.net/80C57D/blogmedia/blogmedia/2014/10/22/2.-Nested-Load-Balancing-Performance-Weights.png"><img style="padding-top: 0px; padding-left: 0px; padding-right: 0px; border-width: 0px;" title="2. 入れ子になった負荷分散、パフォーマンスの重み" alt="2. Nested Load-Balancing, Performance   Weights" src="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/2.-Nested-Load-Balancing-Performance-Weights_thumb.png" width="614" height="439" border="0" /></a>

  <pre class="prettyprint"># Create child profile


  $child = New-AzureTrafficManagerProfile -Name "eunorth-child" -DomainName "eunorth.trafficmanager.net" -LoadBalancingMethod "RoundRobin" -Ttl 30 -MonitorProtocol "Http" -MonitorPort 80 -MonitorRelativePath "/"


  $child = Add-AzureTrafficManagerEndpoint -TrafficManagerProfile $child -DomainName "eunorth.cloudapp.net" -Status "Enabled" -Type "CloudService" -Weight 99


  $child = Add-AzureTrafficManagerEndpoint -TrafficManagerProfile $child -DomainName "eunorth-new.cloudapp.net" -Status "Enabled" -Type "CloudService" -Weight 1


  Set-AzureTrafficManagerProfile –TrafficManagerProfile $child


  # Create parent profile


  $parent = New-AzureTrafficManagerProfile -Name "parent" -DomainName "myapp.trafficmanager.net" -LoadBalancingMethod "Performance" -Ttl 30 -MonitorProtocol "Http" -MonitorPort 80 -MonitorRelativePath "/"


  $parent = Add-AzureTrafficManagerEndpoint -TrafficManagerProfile $parent -DomainName "eunorth.trafficmanager.net" -Status "Enabled" -Type "TrafficManager" -Location "North Europe"


  $parent = Add-AzureTrafficManagerEndpoint -TrafficManagerProfile $parent -DomainName "euwest.cloudapp.net" -Status "Enabled" -Type "CloudService"


  # Repeat above line for other endpoints


  Set-AzureTrafficManagerProfile –TrafficManagerProfile $parent</pre>

  この配置では、親プロファイルを経由して送信されるトラフィックは、通常どおり各リージョンに振り分けられます。 ヨーロッパ北部では、割り当てた重みに従って、既存のデプロイと試用版のデプロイの間でトラフィックが送信されます。


  パフォーマンス負荷分散方法を使用する親に子プロファイルを割り当てるときに、子プロファイルの場所を指定しました (型 = 'Any' を使用して、外部エンドポイントの場所を指定するのとまったく同じ方法で、以前のブログ記事を参照<a href="https://azure.microsoft.com/blog/2014/06/26/azure-traffic-manager-external-endpoints-and-weighted-round-robin-via-powershell/"></a>してください)。

  <h2>入れ子になったプロファイルでのエンドポイントの監視</h2>

  Traffic Manager各サービス エンドポイントの正常性を積極的に監視します (次の方法)。 エンドポイントが異常であると判断された場合、Traffic Manager はユーザーを代替エンドポイントにルーティングすることで、サービスの全体的な可用性を維持します。 このエンドポイントの監視とフェールオーバーの動作は、すべての負荷分散方法 ("フェールオーバー" メソッドではなく) で使用できます。


  入れ子になったプロファイルの場合、エンドポイント監視の動作は少し異なります。 親プロファイルが入れ子になったエンドポイントとして子プロファイルで構成されている場合、親は子を直接プローブされません。 代わりに、子プロファイルのエンドポイントの正常性を使用して子プロファイルの全体的な正常性を計算し、親プロファイルが子にトラフィックを送信するかどうかを決定します。


  前の例に戻る: ヨーロッパ北部での既存のデプロイが失敗したとします。 既定では、"子" プロファイルはすべてのトラフィックを試用デプロイメントに送信します。 それも失敗した場合、親プロファイルは、すべての子エンドポイントが不健康な場合、子プロファイルがトラフィックを受信し、ヨーロッパ北部のすべてのトラフィックを他のリージョンにフェールオーバーする必要がある、と判断します。


  <a href="https://acom.azurecomcdn.net/80C57D/blogmedia/blogmedia/2014/10/22/3.-MinChildEndpoints-1.png"><img style="padding-top: 0px; padding-left: 0px; padding-right: 0px; border: 0px;" title="3. MinChildEndpoints = 1" alt="3. MinChildEndpoints = 1" src="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/3.-MinChildEndpoints-1_thumb.png" width="614" height="439" border="0" /></a>


  この配置に満足している可能性があります。または、試用版のデプロイの正常性に関係なく、すべてのヨーロッパ北部トラフィックのフェールオーバーとして試用版のデプロイを使用してはならないという懸念がある場合があります。ヨーロッパ北部の既存のデプロイが失敗した場合は、他<i></i>のリージョンにフェールオーバーする必要があります。 これは、親プロファイルで子プロファイルをエンドポイントとして構成するときに、"MinChildEndpoints" パラメーターを指定して、子プロファイルで使用できる必要があるエンドポイントの最小数を決定することもできます。 このしきい値 (既定値は 1) を下回る場合、親プロファイルは子プロファイル全体を使用不可と見なし、代わりに他の親プロファイル エンドポイントにトラフィックを送信します。


  次の例は、MinChildEndpoints が 2 に設定されている場合、ヨーロッパ<i></i>北部でのデプロイで障害が発生した場合、親プロファイルによって子プロファイルがトラフィックを受信しなき、ユーザーが他のリージョンに送信される必要があるという判断を示しています。

  <h3><a href="https://acom.azurecomcdn.net/80C57D/blogmedia/blogmedia/2014/10/22/4.-MinChildEndpoints-2.png"><img style="padding-top: 0px; padding-left: 0px; padding-right: 0px; border: 0px;" title="4. MinChildEndpoints = 2" alt="4. MinChildEndpoints = 2" src="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/4.-MinChildEndpoints-2_thumb.png" width="614" height="439" border="0" /></a></h3>

  子プロファイルが "フェールオーバー" 負荷分散方法を使用する場合、その子へのすべてのトラフィックは 1 つのエンドポイントによって受信されます。 そのため、この場合、MinChildEndpoints を "1" 以外の値に設定してもほとんど意味はありません。

  <h2>例 2: In-Geoフェールオーバー</h2>

  元の例 (最初の図) では、エンドポイント (ヨーロッパ北部など) で障害が発生した場合、そのエンドポイントに送信されたトラフィックはすべて、すべてのリージョンにわたって他のエンドポイントに分散されます (これは、"最も近い" エンドポイントの過剰読み込みを回避するように設計された Traffic Manager パフォーマンス負荷分散方法の既定の動作です)。


  <a href="https://acom.azurecomcdn.net/80C57D/blogmedia/blogmedia/2014/10/22/5.-Performance-Failover.png"><img style="padding-top: 0px; padding-left: 0px; padding-right: 0px; border: 0px;" title="5. パフォーマンス フェールオーバー" alt="5. Performance Failover" src="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/5.-Performance-Failover_thumb.png" width="614" height="286" border="0" /></a>


  ただし、ヨーロッパ北部のトラフィックを優先的にヨーロッパ西部にフェールオーバーし、両方のエンドポイントが使用できない場合にのみ他の場所に送信することを好むとします。 これを行うには、次に示すように、フェールオーバー負荷分散方法を使用する子プロファイルを作成します。


  <a href="https://acom.azurecomcdn.net/80C57D/blogmedia/blogmedia/2014/10/22/6.-Performance-with-in-Geo-Failover.png"><img style="padding-top: 0px; padding-left: 0px; padding-right: 0px; border: 0px;" title="6. Geo 内フェールオーバーでのパフォーマンス" alt="6. Performance with in-Geo Failover" src="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/6.-Performance-with-in-Geo-Failover_thumb.png" width="614" height="439" border="0" /></a>


  このパターンは、すべてのリージョンに対して繰り返し実行できます。親プロファイル内の 6 つのエンドポイントすべてを 6 つの子プロファイルに置き換え、それぞれがリージョン内フェールオーバーを提供します。

  <h2>例 3: Per-Endpoint監視設定</h2>

  従来のオンプレミス Web サイトと Azure でホストされる新しいクラウドベースのバージョン間でトラフィックをスムーズに移行するために、Traffic Manager を使用するとします。従来の Web サイトでは、ホーム ページ (パスは "/") を使用してサイトの正常性を監視しますが、新しいクラウドベースのバージョンでは、その他のチェックも含まれたカスタムの監視ページ (パスは "/monitor.aspx") を実装します。


  Traffic Manager プロファイルの監視設定は、そのプロファイル内のすべてのエンドポイントに適用されるので、これまでは両方のサイトで同じパスを使用しなければなりませんでした。入れ子になった Traffic Manager プロファイルがリリースされたので、サイトごとに子プロファイルを使用して、サイトごとに異なる監視設定を定義できます。


  <a href="https://acom.azurecomcdn.net/80C57D/blogmedia/blogmedia/2014/10/22/7.-Per-Endpoint-Monitoring-Settings.png"><img style="padding-top: 0px; padding-left: 0px; padding-right: 0px; border: 0px;" title="7.Per-Endpoint監視設定" alt="7. Per-Endpoint Monitoring Settings" src="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/7.-Per-Endpoint-Monitoring-Settings_thumb.png" width="614" height="392" border="0" /></a>

  <h1>よく寄せられる質問</h1>

  <b>Azure 管理ポータル 経由で入れ子になったプロファイルを使用できますか?</b>


  現在Traffic Manager入れ子になったプロファイルは、REST API PowerShell コマンドレットを使用して構成できます。 Azure 管理ポータルでは作成できません。


  ただし、引き続き Azure 管理ポータルを使用して、入れ子になったプロファイルを使用してプロファイルの状態を表示したり、エンドポイントの有効化と無効化や監視設定の構成など、これらのプロファイルの他の設定を管理したりすることもできます。


  <b>Traffic Manager では、何層の入れ子がサポートされますか。</b>


  最大 10 レベルの深さまでプロファイルを入れ子にできます (ただし、その理由は想像できない)。'ループ' は許可されていません。


  <b>他のエンドポイントの種類 (Cloud Services、Web サイト、外部エンドポイント) と入れ子になった "子" プロファイルを、同じ Traffic Manager プロファイルに混在Traffic Managerできますか?</b>


  はい。 プロファイル内での異なる種類のエンドポイントの組み合わせには制限はありません。


  <b>入れ子になったプロファイルに対して課金モデルはどのように適用されますか。</b>


  Traffic Managerには、監視対象のエンドポイントと 100 万件の DNS クエリごとに 2 つのコンポーネントがあります (詳細については、価格に関するページ<a href="https://azure.microsoft.com/en-us/pricing/details/traffic-manager/">を参照</a>してください)。これは、入れ子になったプロファイルに適用される方法を次に示します。

  <ul>
   <li>監視対象のエンドポイント単位: 親プロファイルのエンドポイントとして構成されている場合、子プロファイルに対する料金は発生します。 基になるサービスを監視する子プロファイルのエンドポイントには、通常どおり課金されます。</li>
   <li>100 万 DNS クエリ単位: 各クエリは 1 回だけカウントされます。 子プロファイルからエンドポイントを返す親プロファイルに対するクエリは、親プロファイルにのみ課金されます。</li>
  </ul>

  <b>データ の詳細については、どこで確認Azure Traffic Manager。</b>


  このAzure portalサービスと<a href="https://azure.microsoft.com/en-us/documentation/services/traffic-manager/">シナリオの</a>概要Traffic Managerが含まれています。 また、価格と SLA <a href="https://azure.microsoft.com/en-us/pricing/details/traffic-manager/">の</a> 詳細 <a href="https://azure.microsoft.com/en-us/support/legal/sla/">も含</a> まれている。


  MSDN には、アプリケーションの負荷分散方法やエンドポイントの監視と構成Traffic Manager、より詳細な概要が含まれている。MSDN では、.NET 管理ライブラリ、および PowerShell コマンドレット<a href="https://msdn.microsoft.com/en-us/library/azure/hh758255.aspx" target="_blank"></a>Traffic Manager REST API<a href="https://msdn.microsoft.com/en-us/library/azure/microsoft.windowsazure.management.trafficmanager(v=azure.11).aspx" target="_blank">の</a>リファレンス ドキュメントもホストしています。


  <a href="https://azure.microsoft.com/blog/2014/06/26/azure-traffic-manager-external-endpoints-and-weighted-round-robin-via-powershell/" target="_blank">この前のブログ記事</a>では、外部エンドポイントと重み付けプロファイルの構成など、Azure Traffic Manager用の PowerShell の使用を開始する方法について説明しています。


  AZURE の有料サポート プランに加えて、<a href="https://social.msdn.microsoft.com/Forums/windowsazure/en-US/home?forum=windowsazureconnectivity">MSDN</a> フォーラムを使用して、DNS またはサービスに関連する Azure のあらゆる側面について質問Traffic Manager。 機能に関する提案は、フィードバック サイトに <a href="https://feedback.azure.com/forums/217313-networking-dns-traffic-manager-vpn-vnet/category/77466-domain-name-service-dns-traffic-manager">投稿する必要があります</a>。ここで、既存の提案に投票することができます。
