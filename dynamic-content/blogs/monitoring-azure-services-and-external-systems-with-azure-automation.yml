### YamlMime:Yaml
ms.openlocfilehash: bc10185ac637f563f484ddf815d1bf9d7feb89de
ms.sourcegitcommit: d03bdc7fe5447adb6530886aab848b75fe8fa8ee
ms.translationtype: MT
ms.contentlocale: ja-JP
ms.lasthandoff: 03/11/2022
ms.locfileid: "139893874"
Slug: monitoring-azure-services-and-external-systems-with-azure-automation
Title: Azure Automation を使用した Azure サービスと外部システムの監視
Summary: この記事では、特定のイベントが発生したときにアクションを実行できるように、Azure または外部システムでサービスを監視するように Azure Automation を設定する方法について説明します。
Content: "このブログ投稿では、特定のイベントが発生したときにアクションを実行できるように、Azure または外部システムでサービスを監視するように Azure Automation を設定する方法について説明します。 Azure Automation を使用してこれを実現する方法については、お客様との議論が非常に少ないので、ここではほとんどのシナリオで機能すると思われるアプローチについて説明します。\n\nプロセスをトリガーするイベントについては、オートメーションを利用して他のシステムを監視するのが一般的です。これは、外部システムに変更を加える必要がなく、すべてのイベント対応ロジックを1か所で保持できるため、一般的なアプローチです。\n\nモニターを使用すると、ポーリングメカニズムが必要になります。この点については、この記事で後ほど説明します。 ポーリングメカニズムでは、Azure Automation のスケジュールとワークフローの機能を活用して、実際に実行される時間を最小限に抑え、ポーリングによってコストを削減しながらリソースを節約します。\n<h3>Basic 監視機能</h3>\n最初に、Azure サービスの監視を必要とするシナリオから始めましょう。 特定のイベント id を検索するイベントログを監視する Azure 環境に、いくつかの仮想マシンがデプロイされている場合があります。 たとえば、証明書の有効期限が近づいている場合は、証明書を更新し、変更が発生したことを全員に知らせる電子メールを送信します。\n\nVM で監視しているイベントの場合、runbook は次の図のようになります。\n\n&nbsp;\n\n<img style=\"float: none; padding-top: 0px; padding-left: 0px; padding-right: 0px; border: 0px;\" title=\"Runbook の Azure Automation 監視\" alt=\"Azure Automation Monitor Runbook\" src=\"https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/MonitorVM.png\" width=\"600\" height=\"465\" border=\"0\" />\n\n&nbsp;\n\n証明書の有効期限のサンプルの場合、手順は次のようになります。\n<ol>\n <li>過去24時間以内に発生したイベント ID 64 (証明書の有効期限が間もなく切れる) を探して、Azure 内の VM を監視します。</li>\n <li>イベント ID が見つかった場合は、新しい runbook ジョブを開始して、組織のプロセスに基づいて証明書を更新します。</li>\n <li>証明書が更新された後に電子メールを送信する</li>\n <li>期限切れの証明書について VM の監視を続行する (イベント ID 64)</li>\n</ol>\nこのチェックは、すべての Vm で1日1回実行する必要があるとします。 クラウドサービス内の VM を呼び出して、このイベント ID が見つかったかどうかを判断する runbook を作成できます。 True の場合、子 runbook を呼び出して証明書を更新します。\n\n要件として、期限切れの証明書を1日に1回だけチェックする必要があるため、スリープ状態にして継続的にポーリングを行う必要はありません。また、毎日のスケジュールを使用して、Azure Automation 内のスケジューラ機能を使用して簡単にスケジュールできます。\n\nスケジュールでは、開始時刻を毎晩11:55 に設定して、前日のすべてのイベントを確認し、約5分間または深夜に達したときに実行されるようにします。\n\n&nbsp;\n\n<img style=\"float: none; padding-top: 0px; padding-left: 0px; padding-right: 0px; border: 0px;\" title=\"Runbook の Azure Automation 監視\" alt=\"Azure Automation Monitor Runbook\" src=\"https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/Schedule.png\" width=\"590\" height=\"465\" border=\"0\" />\n<h3></h3>\n<h3>高度な監視</h3>\n基本的な監視ソリューションを作成したので、より頻繁にポーリングを行う方法を見てみましょう。\n\nAzure Automation では、runbook を1時間ごとに実行するようにスケジュールすることができます。これにより、「基本的な監視」で説明されている方法と同じ方法を使用して、監視を1時間に細分化できます。 ただし、15分ごとにポーリングするとします。これは、それぞれ異なる15分のマークで実行される4つの個別のスケジュールを作成し、それらを Watch-EventID runbook にリンクすることで実現できます。\n\n次の図に示すように、この runbook は15分ごとに実行されるようになりました。次の実行列を参照してください。\n\n<img style=\"float: none; padding-top: 0px; padding-left: 0px; padding-right: 0px; border: 0px;\" title=\"Runbook に複数のスケジュール\" alt=\"Multiple schedules on runbook\" src=\"https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/ScheduleMonitor.png\" width=\"600\" height=\"220\" border=\"0\" />\n\n&nbsp;\n<h3>状態管理を使用した監視</h3>\nここで説明する方法は、監視 runbook のニーズのほとんどを満たしていますが、次の2つの欠点があります。各 runbook にスケジュールを関連付ける必要があります。また、重複するイベントがトリガーされないように、runbook の外部 (たとえば、Automation 変数) の状態管理を維持する必要があります。 たとえば、証明書の有効期限イベントログのシナリオを再び検討する場合は、証明書の有効期限イベントを検索する runbook の今後のジョブで新しい証明書を継続的に生成する必要がありません。15分前に実行されたジョブが、その同じイベントに基づいて既に再生成されていることを認識していなかっただけです。\n\nこれらの問題を解決するには、事前にスケジュールされた runbook を使用して、あらかじめ定義された間隔で実行するようにスケジュールされた runbook を作成する必要があります。 これを \"Manage-MonitorRunbook\" と呼びます。これは、特定のタグが関連付けられている監視 runbook を開始するためです。 これには、各 runbook にリンクされたスケジュールを必要としないという利点があり、必要に応じてモニターを無効にすることが簡単にできます。\n\n状態管理の欠点に対処するために、PowerShell ワークフローの <a href=\"https://technet.microsoft.com/en-us/library/jj733586.aspx\">中断ワークフロー</a> アクティビティを活用できます。 モニターの runbook では、1回のポーリングだけを実行して完了するのではなく、連続してループするようになりましたが、監視しているシステムの1回のポーリングを行った後に中断します。 その後、Manage-MonitorRunbook runbook は Resume-AzureAutomationJob コマンドレットを使用して runbook ジョブを再開します。\n\n&nbsp;\n\n<img style=\"float: none; padding-top: 0px; padding-left: 0px; padding-right: 0px; border: 0px;\" title=\"MonitorEvents\" alt=\"MonitorEvents\" src=\"https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/MonitorEvents.png\" width=\"600\" height=\"308\" border=\"0\" />\n\n1つの監視 runbook ジョブでポーリング間の状態を維持できるだけでなく、この方法のもう1つの利点は、runbook ジョブが継続的に実行されていないため、実際に作業を行っていないときに追加のコストが発生しないことです。 これは、中断ワークフローを中断するのではなく、Start-Sleep を使用してスリープ状態にした場合に発生します。 中断されたワークフローは課金されませんが、スリープ中のワークフローは実行中の状態であるため、実行中のコストが発生します。\n\n上記の Watch-EventID runbook にこの方法を適用すると、次のようになります。 次のワークフローでは、新しいイベントを探す必要がある時間を示すために runbook 内の状態を保持しています。また、イベントが見つかるたびに、その値を更新して、次のポーリングが同じイベントに対してトリガーされないようにします。\n<pre class=\"prettyprint\">&lt;#\n.SYNOPSIS \n    Sample runbook to search for a specific event id in an Azure VM\n\n.DESCRIPTION\n    This runbook looks for a specific event ID in an Azure VM so that an action\n    could be taken when this event happens.\n    It is designed to be used with the Manage-MonitorRunbook utility runbook so that\n    it will get resumed on specific intervals defined by the schedules on the Manage-MonitorRunbook\n    runbook. This runbook should have a tag to indicate that it should get resumed by\n    that runbook.\n\n This runbook depends on the Connect-AzureVM utility runbook that is available from the gallery.\n\n.PARAMETER ServiceName\n    Name of the Azure Cloud Service where the VM is located\n\n.PARAMETER VMName\n    Name of the Azure VM\n\n.PARAMETER AzureCredentialSetting\n    A credential asset name containing an Org Id username / password with access to this Azure subscription.\n\n.PARAMETER SubscriptionName\n    The name of the Azure subscription\n\n.PARAMETER EventID\n    The specific event ID to search for. This sample looks for this event ID\n\n.PARAMETER LogName\n    The event log name. Example System\n\n.PARAMETER Source\n    The event log source. Example EventLog\n\n.PARAMETER VMCredentialSetting\n    A credential asset name that has access to the Azure VM \n\n.EXAMPLE\n    Watch-EventID -ServiceName \"Finance\" -VMName 'FinanceWeb1' -AzureCredentialSetting 'FinanceOrgID' -SubscriptionName \"Visual Studio Ultimate with MSDN\" -EventID \"63\" -LogName \"System\" -Source \"EventLog\" -VMCredentialSetting \"FinanceVMCredential\"\n#&gt;\nworkflow Watch-EventID\n{\n  Param ( \n        [String] $ServiceName,\n        [String] $VMName,\n        [String] $AzureCredentialSetting,\n        [String] $SubscriptionName,\n        [String] $EventID,\n        [String] $LogName,\n        [String] $Source,\n        [String] $VMCredentialSetting\n    )\n\n # The start time is used to ensure we only look for events after this specific time.\n # This would be a common pattern in any monitor runbooks that are developed.\n    $StartTime = Get-Date\n    Try\n    {\n        While (1)\n        {         \n            $OrgIDCredential = Get-AutomationPSCredential -Name $AzureCredentialSetting\n            if ($OrgIDCredential -eq $null)\n            {\n                throw \"Could not retrieve '$AzureCredentialSetting' credential asset. Check that you created this first in the Automation service.\"\n            }\n\n            $Credential = Get-AutomationPSCredential -Name $VMCredentialSetting\n            if ($Credential -eq $null)\n            {\n                throw \"Could not retrieve '$VMCredential' credential asset. Check that you created this first in the Automation service.\"\n            }     \n\n            # Get the uri of the Azure VM to connect to by calling the Connect-AzureVM utility runbook                 \n            $Uri =  Connect-AzureVM `\n                -AzureOrgIdCredential $OrgIDCredential `\n                -AzureSubscriptionName $SubscriptionName `\n                -ServiceName $ServiceName `\n                -VMName $VMName\n\n   # Script to run on the remote VM looking for an event ID\n            $ScriptBlock = {Param($EventID, $StartTime,$LogName,$Source) Get-EventLog -LogName $LogName -Source $Source -InstanceID $EventID -After $StartTime -Newest 1} \n\n   # Run this ScirptBlock on the remote VM\n            $EventResult = InlineScript {\n                 Invoke-command -ConnectionUri $Using:Uri -Credential $Using:Credential -ScriptBlock $Using:ScriptBlock -ArgumentList $Using:EventID, $Using:StartTime, $Using:LogName, $Using:Source\n            }\n\n            if ($EventResult)\n            {\n                # Set new start time to be after this event. This is to ensure that only new events are looked for.\n                $StartTime = $EventResult.TimeGenerated\n\n                # Take whatever action is required when this event happens...\n                # You should use the Start-AzureAutomationRunbook cmdlet to trigger a new runbook asynchrously\n                # so that this runbook returns immediately and this runbook can suspend itself looking for new work\n                # at the next call from the Manage-MonitorRunbook runbook\n                # Start-AzureAutomationRunbook -AutomationAccountName &lt;System.String&gt; -Name &lt;System.String&gt; [-Parameters &lt;System.Collections.IDictionary&gt;] \n\n                Write-Output \"Event ID found... Taking action\"\n            }\n\n            # Suspending workflow so Automation minutes are not used up continously\n            # This workflow will be resumed by a separate monitor runbook (Manage-MonitorRunbook) on a specific schedule\n            Write-Verbose \"Suspending workflow...\"\n\n            # Clearing credentials since these can't be persisted with suspend currently\n            $Credential = $Null\n            $OrgIDCredential = $Null\n            Suspend-Workflow\n        }\n    }\n    Catch\n    {  \n        # This runbook should never suspend due to an error as it will\n        # get resumed by the monitor runbook when it shouldn't. You should not set Erroractionpreference  =  stop for this runbook\n  # as it will cause the runbook to suspend when it shouldn't for monitor runbooks.\n        # Writing out an error in this case \n        Write-Error ($_)\n    }\n\n}</pre>\nその後、特定の間隔でこの runbook を再開する Manage-MonitorRunbook runbook が必要になるため、その間隔でポーリングを行うことができます。Runbook の例を次に示します。 この runbook をそのように使用して、モニターを管理できるようになります。\n<pre class=\"prettyprint\">&lt;#\n.SYNOPSIS \n    Utility runbook to control monitor runbooks to run at specific intervals\n\n.DESCRIPTION\n    This runbook is designed to run on scheduled intervals and resume any monitor runbooks\n    that have a specific tag that are suspended\n\n.PARAMETER AccountName\n    Name of the Azure automation account name\n\n.PARAMETER AzureCredentialSetting\n    A credential asset name containing an Org Id username / password with access to this Azure subscription.\n\n.PARAMETER Tag\n    Value of the tag for monitor runbooks in the service that should be resumed. Only this specific tag should be set on monitor runbooks\n to avoid other runbooks from getting resumed if they are suspended. \n\n.PARAMETER SubscriptionName\n    The name of the Azure subscription. This is an optional parameter as the default subscription will be used if not supplied.\n\n.EXAMPLE\n    Manage-MonitorRunbook -AccountName \"Finance\" -AzureCredentialSetting 'FinanceOrgID' -Tag \"Monitor\" -SubscriptionName \"Visual Studio Ultimate with MSDN\"\n\n#&gt;\nworkflow Manage-MonitorRunbook\n{\n    Param ( \n        [Parameter(Mandatory=$true)]\n        [String] $AccountName,\n\n        [Parameter(Mandatory=$true)]\n        [String] $AzureCredentialSetting,\n\n        [Parameter(Mandatory=$true)]\n        [String] $Tag,\n\n        [Parameter(Mandatory=$false)]\n        [String] $SubscriptionName\n    )\n\n    $AzureCred = Get-AutomationPSCredential -Name $AzureCredentialSetting\n    if ($AzureCred -eq $null)\n    {\n        throw \"Could not retrieve '$AzureCredentialSetting' credential asset. Check that you created this first in the Automation service.\"\n    }\n\n    # Set the Azure subscription to use\n    $Null = Add-AzureAccount -Credential $AzureCred \n\n    # Select the specific subscription if it was passed in, otherwise the default will be used  \n    if ($SubscriptionName -ne $Null)\n    {\n       $Null = Select-AzureSubscription -SubscriptionName $SubscriptionName\n    }\n\n    # Get the list of runbooks that have the specified tag\n    $MonitorRunbooks = Get-AzureAutomationRunbook -AutomationAccountName $AccountName | where -FilterScript {$_.Tags -match $Tag}\n\n    foreach ($Runbook in $MonitorRunbooks)\n    {\n        Write-Verbose (\"Checking \" + $Runbook.Name + \" for suspended jobs to resume\")\n        # Get the next suspended job if there is one for this Runbook Id\n        $SuspendedJobs = Get-AzureAutomationJob -AutomationAccountName $AccountName `\n      -RunbookName $Runbook.Name | Where -FilterScript {$_.Status -eq \"Suspended\"}\n\n       if ($SuspendedJobs.Count -gt 1)\n        {\n            Write-Error (\"There are multiple jobs for \" + $Runbook.Name + \" running. This shouldn't happen for monitor runbooks\")\n            # Select the oldest job and resume that one\n            $SuspendedJobs = $SuspendedJobs | Sort-Object -Property CreationTime  | Select-Object -First 1\n        }\n\n        if ($SuspendedJobs)\n        {    \n   Write-Verbose (\"Resuming the next suspended job: \" + $SuspendedJobs.Id)\n            Resume-AzureAutomationJob -AutomationAccountName $AccountName -Id $SuspendedJobs.Id   \n        }\n    }\n}</pre>\n上記の runbook では、特定のタグセットが監視されていることを示す runbook があるかどうかを確認してから、それらの runbook を再開して、チェックを実行してから、もう一度中断することができます。 この runbook は30分ごとに実行されるようにスケジュールされていますが、次の図のようになります。\n\n&nbsp;\n\n<img style=\"float: none; padding-top: 0px; padding-left: 0px; padding-right: 0px; border: 0px;\" title=\"30MinSchedule\" alt=\"30MinSchedule\" src=\"https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/30MinSchedule.png\" width=\"600\" height=\"99\" border=\"0\" />\n\n&nbsp;\n\n監視マネージャーの runbook が接続されているスケジュールの runbook パラメーターの値を見ると、Tag パラメーターに \"monitor\" という値が設定されていることがわかります。これにより、このタグを持ち中断されているすべての runbook が再開されます。 このシナリオでは、[構成] ページの Watch-EventID runbook に \"monitor\" タグを追加して、30分ごとに monitor manager runbook によって呼び出されるようにします。\n\n&nbsp;\n\n<img style=\"float: none; padding-top: 0px; padding-left: 0px; padding-right: 0px; border: 0px;\" title=\"ScheduleValues\" alt=\"ScheduleValues\" src=\"https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/ScheduleValues.png\" width=\"539\" height=\"465\" border=\"0\" />\n\n&nbsp;\n\nこのソリューションを拡張して、さまざまなスケジュールで Manage-MonitorRunbook runbook を構成し、適切な時間ベースの間隔タグで runbook にタグを付けることによって、さまざまな時間間隔のモニターを処理することができます。 たとえば、runbook を15分ごとに実行するようにスケジュールし、\"monitor15\" タグで runbook を開始したり、5分ごとにスケジュールを設定したり、タグパラメーターに \"monitor5\" タグを使用したりすることができます。\n\n上記の runbook は、 <a href=\"https://azure.microsoft.com/blog/2014/10/07/introducing-the-azure-automation-runbook-gallery\">Automation runbook ギャラリー</a> で使用できます。これにより、monitor manager を使用して独自の監視 runbook を作成し、さまざまなシステムへの統合を開始して、運用タスクを自動化された方法で組み合わせることができます。\n\nAutomation の詳細と開始方法については、「 <a href=\"https://go.microsoft.com/fwlink/p/?linkid=392861&amp;clcid=0x409\">automation」ページ</a> を参照してください。"
