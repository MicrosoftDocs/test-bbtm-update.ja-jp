### YamlMime:Yaml
ms.openlocfilehash: 0347336136b6a8228dbf8b80a8ab7e1d805ead13
ms.sourcegitcommit: d03bdc7fe5447adb6530886aab848b75fe8fa8ee
ms.translationtype: MT
ms.contentlocale: ja-JP
ms.lasthandoff: 03/11/2022
ms.locfileid: "139910068"
Slug: azure-cosmos-db-pushing-the-frontier-of-globally-distributed-databases
Title: 'Azure Cosmos DB: グローバルに分散されたデータベースのフロンティアをプッシュする'
Summary: これは、2010の構想がクラウドで生まれたデータベースであるため、クラウドの3つの基本的なプロパティを利用する Azure Cosmos DB を慎重に設計および設計しました。
Content: >-
  <p>これは、2010の構想がクラウドで生まれたデータベースであるため、クラウドの3つの基本的なプロパティを利用する Azure Cosmos DB について、慎重に設計およびエンジニアリングしました。</p>


  <ul>
   <li>透過的なマルチマスターレプリケーションによる<strong>グローバル分散</strong>。</li>
   <li>行方向のパーティション分割により、<strong>世界中のスループットとストレージを柔軟に拡張</strong>できます。</li>
   <li>データベースエンジンからレプリケーションプロトコルまで、リソース管理の高いシステムスタックを利用して、きめ細かな<strong>マルチテナント</strong>を実現します。</li>
  </ul>


  <p>この3つのプロパティは、99パーセンタイルと99.999% の高可用性が保証される1桁のミリ秒待機時間で、世界中のすべての書き込みと読み取りの両方に対して柔軟なスケーラビリティを提供するために、より優れた方法で Cosmos DB ます。 このサービスは、データを透過的にレプリケートし、グローバルに分散された Cosmos データベースの1つのシステムイメージを、( <a href="https://github.com/Azure/azure-cosmos-tla">TLA +</a>を使用して正確に指定した) <a href="https://docs.microsoft.com/en-us/azure/cosmos-db/consistency-levels">5 つの明確に定義</a>された整合性モデルを選択して提供し、ユーザーは世界中のどこでもローカルレプリカに対して書き込みと読み取りを行います。 昨年の発売以来、サービスの拡大により、設計の選択と、独自のエンジニアリングトレードオフが検証されました。</p>


  <h2>高速で、グローバルにスケーラブルな書き込み</h2>


  <p>azure の基本サービスの1つとして、Cosmos DB は既定ですべての azure リージョンで実行されます。 この執筆時点では、Cosmos DB は50を超える地理的リージョンにわたって運用されています。数万のお客様は、2 ~ 50 以上のリージョンでグローバルにレプリケートされるように Cosmos データベースを構成しています。</p>


  <p>お客様は Cosmos データベースを複数のリージョンにわたって使用してきましたが、今までは、読み取りのために他のすべてのリージョンで書き込み (および読み取り) を行うリージョンを1つだけ指定できました。 数年後に Microsoft &rsquo; の内部ワークロードを実行してサービスをテストした後、現在は、複数の書き込みリージョン ( &ldquo; マルチマスター &rdquo; 構成) を持つように Cosmos データベースを構成できることを発表しました。 この機能によって、次のようなメリットが得られます。</p>


  <ul>
   <li><strong>世界中のすべての書き込みと読み取りの可用性を 99.999%</strong> &ndash;Cosmos DB では、99.999% の読み取り可用性に加えて、財務 sla によって99.999% の書き込み可用性が提供されるようになりました。</li>
   <li><strong>柔軟な書き込みと読み取りのスケーラビリティ、世界中</strong> - のすべて読み取りに加えて、世界中のすべての書き込みを弾力的に拡張できるようになりました。 アプリケーションが Cosmos DB コンテナー (またはデータベース) で構成するスループットは、財務 sla によって支えられているすべてのリージョンにわたって配信されることが保証されます。</li>
   <li><strong>1 桁の-ミリ秒の書き込みと読み取り待機時間は99パーセンタイルで、すべて世界中</strong> -Cosmos DB では、1桁のミリ秒の読み取り待機時間に加えて、世界中のどこからでも10ミリ秒の書き込み待機時間が99パーセンタイルで提供 &lt; されるようになりました。</li>
   <li><strong>明確に定義された複数の整合性モデル</strong> &ndash;Cosmos DB &rsquo; s レプリケーションプロトコルは、適切に定義され、実用的で直感的な5つの整合性モデルを提供して、簡単にグローバルに分散したアプリケーションを作成できるように設計されています。 また <a href="https://github.com/Azure/azure-cosmos-tla">、可用性モデルに関する高レベルの TLA + 仕様</a>も作成しました。</li>
   <li><strong>無制限のエンドポイントのスケーラビリティ</strong> &ndash;Cosmos DB &rsquo; s レプリケーションプロトコルは、数百ものデータセンターと数十億のエッジデバイス (homogeneously) で拡張できるように設計されています。 このアーキテクチャでは、Azure リージョンまたはエッジデバイスを等しい &ndash; ものとして扱います。両方とも、Cosmos DB レプリカをホストし、マルチマスターレプリケーションプロトコルで真ピアとして参加することができます。</li>
   <li><strong>マルチマスター MongoDB、Cassandra、SQL、グリーン mlin、およびテーブル</strong> -マルチモデルおよびマルチ API データベースとして、Cosmos DB は、 <a href="https://docs.microsoft.com/en-us/azure/cosmos-db/sql-api-introduction">SQL (Cosmos DB)</a>、 <a href="https://docs.microsoft.com/en-us/azure/cosmos-db/cassandra-introduction">Cassandra (cql)</a>、 <a href="https://docs.microsoft.com/en-us/azure/cosmos-db/mongodb-introduction">MongoDB</a>、 <a href="https://docs.microsoft.com/en-us/azure/cosmos-db/table-introduction">Table Storage</a>、および<a href="https://docs.microsoft.com/en-us/azure/cosmos-db/graph-introduction">グリーン mlin</a> api のネイティブワイヤプロトコル互換サポートを提供します。 Cosmos DB では、お客様の MongoDB および Cassandra アプリケーションに対して、完全に管理された、安全で準拠した、コスト効率に優れたサーバーレスデータベースサービスを利用できます。このサービスは、業界をリードする包括的な sla によっても支えられています。 上記の一覧に示されている機能は、Cassandra、MongoDB、、Table Storage、SQL を含むすべての Cosmos DB api でサポートされるようになりました。 たとえば、マルチマスター、グローバルに分散した MongoDB、または、Cosmos DB によって提供される、ユーザー補助グラフデータベースを使用できるようになりました。</li>
  </ul>


  <h2>数十年の研究と厳格なエンジニアリング = Cosmos DB</h2>


  <p><a href="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/e17a86b0-c899-4637-ba8b-b3f1968121b8.png"><img alt="image" border="0" height="201" src="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/92f4d489-b015-4f89-abd8-13fc5d46fcf3.png" style="border: 0px currentcolor; border-image: none; float: right; display: inline; background-image: none;" title="昨年の画像 " width="302"> </a> Cosmos DB の発表では、Cosmos DB の技術上の基礎を説明する Leslie Lamport を使用して、ビデオインタビューに付随する Cosmos DB の<a href="https://azure.microsoft.com/en-us/blog/a-technical-overview-of-azure-cosmos-db/">技術概要</a>を記述しました。 このようなことを続けるために、 <a href="https://aka.ms/LeslieMM">Leslie の新しいビデオインタビューでは</a>、Cosmos DB &rsquo; s アーキテクチャの進化、斬新なレプリケーション Cosmos DB プロトコルの設計における TLA + のアプリケーション、世界クラスエンジニアリングによる paxos から epidemic プロトコルへの分散システムの研究について説明しています。これにより、真の Cosmos scale アプリを構築できます。</p>


  <p>このブログ記事では、Cosmos データベースに対して複数の書き込みリージョンを有効にするための新機能を含む Cosmos DB &rsquo; s グローバル分散アーキテクチャについてもう少し詳しく見ていきます。 以下のセクションでは、Cosmos DB &rsquo; s グローバル分散のシステムモデルについて説明します。このシステムモデルには、世界中の書き込みをスケーリングするための、エントロピに基づくエントロピベースの設計があります。</p>


  <h2>グローバル分散のシステムモデル</h2>


  <p>Cosmos DB サービスは azure の基本サービスであるため、パブリック、ソブリン、DoD、政府機関など、世界中のすべての azure リージョンにデプロイされます。 データセンター内では、Cosmos DB サービスのデプロイと管理を、コンピューターの大規模 &ldquo; なスタンプ &rdquo; (それぞれ専用のローカルストレージ) で行います。 データセンター内では、Cosmos DB は多数のクラスターに展開され、それぞれが複数世代のハードウェアを実行する可能性があります。 通常、特定のクラスター内のマシンは 10 から 20 の範囲の障害ドメインにまたがります。</p>


  <p><a href="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/2e1e0416-fd72-49d0-8b10-b3a3b21145ec.png"><img alt="image" border="0" height="265" src="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/1f298337-e4aa-4b6f-8876-b52703b58a44.png" style="border: 0px currentcolor; border-image: none; margin-right: auto; margin-left: auto; float: none; display: block; background-image: none;" title="絵" width="600"></a></p>


  <p style="text-align: center;"><strong>図 1: システムトポロジ</strong></p>


  <p>Cosmos DB のグローバル分散は、ボタンを数回クリックするだけで (またはプログラムによって1つの API 呼び出しで)、任意の時点で、Cosmos<strong>データベース</strong>に関連付けられる地理的リージョンを追加 (または削除) できます。 Cosmos データベースは、一連の Cosmos<strong>コンテナー</strong>で構成されます。 Cosmos DB では、コンテナーは分散とスケーラビリティの論理ユニットとしての役割を果たします。 作成するコレクション、テーブル、およびグラフは、(内部) Cosmos コンテナーとして表されます。 それぞれのコンテナーは完全にスキーマが独立していて、それそれがクエリのスコープを持ちます。 Cosmos コンテナー内のすべてのデータはインジェスト時に自動的にインデックス作成されます。 これにより、ユーザーはインデックス管理のスキーマや面倒な処理を行わなくてもデータにクエリを実行できるようになります。特に、グローバル分散セットアップでは、</p>


  <p>図2に示すように、コンテナー内のデータは2つのディメンションに沿って分散されます。</p>


  <ul>
   <li>特定のリージョン内では、コンテナー内のデータは、指定したパーティションキーを使用して分散され、基になるリソースパーティション (ローカルディストリビューション) によって透過的に管理されます。</li>
   <li>これに加えて、リソースの各パーティションにはリージョンをまたいでレプリケーションを実施しています (グローバル分散)。</li>
  </ul>


  <p>Cosmos DB 弾力的を使用しているアプリが Cosmos コンテナーでスループットを (またはより多くのストレージを使用して) スケーリングする場合、Cosmos DB はすべてのリージョンでパーティション管理 (分割、複製、削除など) 操作を透過的に実行します。 スケール、分散、または障害に関係なく、Cosmos DB は、コンテナー内のデータの単一のシステムイメージを引き続き提供します。コンテナーは、任意の数のリージョンにグローバルに分散されます。</p>


  <p><a href="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/c0c3180b-6f58-4500-89c5-950fde694820.png"><img alt="image" border="0" height="412" src="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/78029eca-fe3b-496b-b433-66a25f79ad59.png" style="border: 0px currentcolor; border-image: none; margin-right: auto; margin-left: auto; float: none; display: block; background-image: none;" title="絵" width="462"></a></p>


  <p><strong>図 2: 世界中の複数のリージョンにまたがる、2つのディメンション間でのリソースパーティションの配分</strong></p>


  <p>物理的には、 <strong>リソースパーティション</strong> は <strong>レプリカセット</strong>と呼ばれるレプリカのグループによって実装されます。 各コンピューターは、固定された一連のプロセス内のさまざまなリソースパーティションに対応する数百のレプリカをホストします (図1を参照)。 リソースパーティションに対応するレプリカは、クラスター内のマシンとリージョン内のデータセンターの間で動的に配置および負荷分散されます。</p>


  <p>レプリカは、Cosmos DB テナントに一意に所属します。 各レプリカは Cosmos DB &rsquo; s<a href="https://www.vldb.org/pvldb/vol8/p1668-shukla.pdf">データベースエンジン</a>のインスタンスをホストします。これにより、リソースだけでなく、関連付けられたインデックスも管理されます。 Cosmos DB データベースエンジンは、atom レコードシーケンス (空の型システム<sup>1</sup>) を操作します。 &nbsp;エンジンは、スキーマの概念に完全に依存せず、レコードの構造とインスタンス値の間の境界をぼかします。 Cosmos DB ではインジェスト時に自動的に効率的な方法ですべてをインデックス作成することにより、完全なスキーマ独立を実現しています。これにより、ユーザーはスキーマを処理したり、インデックス管理を行ったりすることなくグローバルに分散されたデータをクエリできます。 Cosmos DB データベースエンジンは、いくつかの調整プリミティブ、言語ランタイム、クエリプロセッサ、ストレージおよびインデックス作成サブシステム (トランザクションストレージの実装とデータのインデックス作成) などのコンポーネントで構成されています。 耐久性と高可用性を提供するため、このデータベース エンジンは SSD 上にデータとインデックスを保持し、レプリカ セット内のデータベース エンジン インスタンス間でレプリケーションを行います。 より大きなテナントは、より高いスケールのスループットとストレージに対応し、より大きなレプリカまたはその両方 (およびその逆) のいずれかになります。 システムのすべてのコンポーネントは、完全に非同期 &ndash; 的にスレッドをブロックすることはありません。各スレッドは、不要なスレッドスイッチを発生させることなく、短時間の作業を行います。 レート制限とバック プレッシャが、管理制御からすべての I/O パスに至るまでスタック全体で組み込まれています。 このデータベース エンジンはきめ細かいコンカレンシーを活用するように、および少量のシステム リソースで運用しながら高スループットを実現するように設計されています。</p>


  <p>Cosmos DB &rsquo; s グローバル分散は、2つの主な抽象化 &ndash; <strong>レプリカセット</strong>と<strong>パーティションセット</strong>に依存しています。 レプリカ セットはモジュール式の調整用レゴ ブロックで、パーティション セットは 1 つ以上の地理的分散リソース パーティションの動的オーバーレイです。 グローバル分散のしくみを理解するために、この2つの主要な抽象化を理解する必要があります。</p>


  <h2>レプリカセット-調整の Lego ブロック</h2>


  <p>リソース パーティションは、複数の障害ドメインにまたがっているセルフ マネージド方式で動的に負荷を分散するレプリカ グループ (別名、レプリカ セット) として実現します。 このセットは、レプリケートされたステートマシンプロトコルをまとめて実装し、リソースパーティション内のデータを高可用性、耐久性、および厳密に一貫性のあるものにします。 レプリカセットのメンバーシップ N は動的 &ndash; であるため、障害、管理操作、および失敗したレプリカが再生成/回復するまでの時間に基づいて、n<sub>分</sub> と n の<sub>最大値</sub> の間で変動が維持されます。 メンバーシップが変更すると、レプリケーション プロトコルも読み取りと書き込みのクォーラムのサイズを再構成します。 特定のリソースパーティションに割り当てられているスループットを一様に分散するために、2つのアイデアを採用しています。まず、リーダーでの書き込み要求の処理にかかるコストが、フォロワーに更新を適用する場合よりも高くなります。 それに対応して、リーダーに割り当てられるシステム リソースはフォロワーよりも多くなっています。 2 番目に、可能な限り、指定の整合性レベルの読み取りクォーラムはフォロワー レプリカによってのみ構成されます。 絶対に必要な場合を除き、読み取りを提供するリーダーに連絡することは避けてください。 ここでは、Cosmos DB がサポートする5つの整合性モデルのクォーラムベースシステムの<a href="https://www.cs.utexas.edu/~lorenzo/corsi/cs395t/04S/notes/naor98load.pdf">負荷と容量</a>の関係について、調査によるさまざまなアイデアを採用しています。</p>


  <h2>パーティション-動的な地理的に分散したオーバーレイを設定 &ndash; します</h2>


  <p>リソース パーティションのグループは、それぞれが Cosmos データベース リージョンで構成されているリソース パーティションから成り、構成されているすべてのリージョンでレプリケートされた同じキー セットを管理します。 この高度な調整プリミティブはパーティション セットと呼ばれ、特定のキー セットを管理するリソース パーティションの地理的に分散された動的オーバーレイです。 特定のリソースパーティション (つまりレプリカセット) はクラスター内でスコープが設定されますが、パーティションセットはクラスター、データセンター、地理的領域にまたがることができます (図2および図 3)。</p>


  <p><a href="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/31111e2b-0d09-4da6-8340-230abbf1812d.png"><img alt="image" border="0" height="344" src="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/d94db21b-35e7-40b1-a7cf-cbd84dad1fba.png" style="border: 0px currentcolor; border-image: none; margin-right: auto; margin-left: auto; float: none; display: block; background-image: none;" title="絵" width="480"></a></p>


  <p align="center"><strong>図 3: パーティションセットがリソースパーティションの動的なオーバーレイである</strong></p>


  <p>パーティションセットは、同一のキーセットを所有する複数のレプリカセットで構成される、地理的に分散 &ldquo; したスーパーレプリカセット &rdquo; と考えることができます。 レプリカセットと同様に、パーティションセット &rsquo; のメンバーシップは、特定のパーティションセットとの間で新しいパーティションを追加または削除する暗黙的なリソースパーティション管理操作に基づいて動的 &ndash; に変動します (たとえば、コンテナーのスループットをスケールアウトしたり、Cosmos データベースにリージョンを追加/削除したり、エラーが発生した場合など)。各パーティション (パーティションセット) が独自のレプリカセット内でパーティションセットのメンバーシップを管理するので、メンバーシップは完全に分散され、高可用性を実現します。 パーティション セットを再構成する間に、リソース パーティション間のオーバーレイのトポロジも確立されます。 トポロジは、ソースとターゲットのリソースパーティション間の整合性レベル、地理的距離、および使用可能なネットワーク帯域幅に基づいて動的に選択されます。</p>


  <p>このサービスを使用することによって、単一の書き込みリージョンと複数の書き込みリージョンのいずれかで Cosmos データベースを構成できます。このどちらを選択するかに基づいて、パーティション セットで書き込みを行えるよう構成されるのが 1 つのリージョンのみかすべてのリージョンにおいてであるかが決まります。 システムは、入れ子になった2つの合意プロトコル &ndash; を使用します。1つは、書き込みを受け入れるリソースパーティションのレプリカセットのレプリカ内で動作し、もう1つはパーティションセットのレベルで動作し、パーティションセット内のすべてのコミットされた書き込みに対して完全な順序の保証を提供します。 このマルチレイヤーの入れ子になったコンセンサスは、高可用性に関する当社の厳密な SLA の遂行や、Cosmos DB がお客様に提供する整合性モデルの実装において重要となります。</p>


  <h2>柔軟な競合解決によるエントロピ対策</h2>


  <p>更新プログラムの伝達、競合解決、および因果関係追跡の設計は、epidemic アルゴリズムと <a href="https://zoo.cs.yale.edu/classes/cs422/2013/bib/terry95managing.pdf">bayou システム</a>の前の作業からのものです。 アイデアのカーネルは残されており、Cosmos DB &rsquo; s システムの設計を伝えるのに便利なフレームを提供していますが、Cosmos DB システムに適用した場合にも大幅な変換が行われています。 これが必要なのは、以前のシステムが、リソースガバナンスでも、Cosmos DB が運用する必要があるスケールでも設計されていないためです。また、機能 (制限された staleness 整合性など) や、お客様に提供 Cosmos DB れる厳格で包括的な sla を提供することもできません。</p>


  <p>パーティションセットは複数のリージョンに分散され、Cosmos DB &rsquo; s (マルチマスター) レプリケーションプロトコルに従って、指定されたパーティションセットを構成するリソースパーティション間でデータがレプリケートされることを思い出してください。 (パーティション セットを構成する) それぞれのリソース パーティションは書き込みを承諾し、対象リージョンに対してローカルなクライアントに対して通常読み取りを行います。 リージョン内のリソース パーティションで承諾された書き込みは耐久性の高い状態でコミットされ、クライアントに対して確認応答する前にリソース パーティションで高可用になります。 これらは仮の書き込みで、アンチエントロピ チャネルを使用してパーティション セットの他のリソース パーティションに伝達されます。 クライアントは、要求ヘッダーを引き渡すことによって、仮の書き込みまたはコミット済みの書き込みを要求できます。 アンチエントロピ伝達 (伝達の頻度を含む) は、パーティション セットのトポロジ、リソース パーティションのリージョン近接度、および構成された整合性レベルに基づいて動的です。 パーティション セット内では、Cosmos DB は動的に選択されたアービター パーティションが含まれるプライマリ コミット スキーマに従います。 アービターの選択は、オーバーレイのトポロジに基づくパーティション セットの再構成の不可欠な部分です。 コミットされた書き込み (複数行/バッチ更新を含む) は、完全に順序付けされます。</p>


  <p>因果関係の追跡とバージョン ベクトルで更新の競合を検出して解決するために、エンコードされたベクター クロック (それぞれ、レプリカ セットとパーティション セットの各レベルのコンセンサスに対応するリージョン ID と論理クロックを含む) を使用します。 トポロジとピア選択アルゴリズムは、固定および最小限のストレージと、バージョン ベクトルのネットワーク オーバーヘッドを最小限に抑える目的で設計されています。 このアルゴリズムによって、厳密な収束プロパティが保証されます。<br>

  複数の書き込みリージョンが構成されている Cosmos データベースの場合、システムによって、開発者が選択できる多数の柔軟な自動競合解決ポリシーが提供されています。以下の選択肢が含まれます。</p>


  <ol>
   <li><strong>Last-Write-Wins (LWW)</strong> 。既定では、システム定義のタイムスタンプ プロパティ (時刻同期クロック プロトコルに基づく) が使用されます。 また Cosmos DB を使用することによって、競合解決に使用する他のカスタムの数値型プロパティを指定できます。</li>
   <li>アプリケーション定義の <strong>カスタム競合解決ポリシー (</strong> マージ プロシージャを使用して表現) は、競合のアプリケーション定義セマンティクス調整用に設計されています。 これらのプロシージャは、データベース トランザクションの支援によって書き込み間の競合が検出されると、サーバー側で呼び出されます。 システムにより、コミットメント プロトコルの一部としてマージ プロシージャの実行が 1 回だけとなることが保証されます。 利用可能ないくつかのサンプルが準備されています。</li>
   <li><strong>競合フリーのレプリケートされたデータ型 (CRDT)</strong> は、データベース エンジンのコア (ARS) 型システム内でネイティブに実行されます。 これにより、コミットメント プロトコルの一部として、トランザクション的に直接データベース エンジン内で競合を自動的に解決できます。</li>
  </ol>


  <h2>正確に定義された 5 つの整合性モデル</h2>


  <p>単一または複数の書き込みリージョンを使用して Cosmos データベースを構成する場合でも、サービスによって提供される 5 つの定義済みの整合性モデルを使用できます。 複数の書き込みリージョンを可能にする新たに追加されたサポートに関しては、整合性レベルの以下の側面に注目できます。</p>


  <p>前と同様に<strong></strong>、境界付き整合性では、すべての読み取りが、任意のリージョンの最新の書き込みから k プレフィックスまたは t 秒以内に入ります。 また、有界整合性制約を使用した読み取りでは、モノトニックになり、一貫性のあるプレフィックスとなることが保証されます。 アンチエントロピ プロトコルはレートが制限された状態で実行され、プレフィックスが累積しないことと、書き込みのバックプレッシャを適用する必要がないことが保証されます。 以前と同様に、 <strong>セッション</strong> の整合性によって、モノトニック読み取り、モノトニック書き込み、高い評価、および書き込み後の読み取りおよび一貫性のあるプレフィックスの保証が世界中で保証されます。 強力な整合性で構成<strong></strong>されたデータベースの場合、システムは、各パーティション セット内でリーダーを指定することで、1 つの書き込みリージョンに戻されます。</p>


  <p>ここでは、5 つの整合性モデル <a href="https://docs.microsoft.com/en-us/azure/cosmos-db/consistency-levels">の</a> セマンティクスについて説明し、高レベル <a href="https://github.com/Azure/azure-cosmos-tla">の TLA+ 仕様を使用して数学的に示します</a>。</p>


  <h2>まとめ</h2>


  <p>グローバルに分散されたデータベースとして、Cosmos DB は、任意の数の Azure リージョンにデータを透過的にレプリケートします。 新しい完全に分散型のマルチマスター レプリケーション アーキテクチャを使用すると、Cosmos データベースに関連付けられているすべてのリージョンで書き込みと読み取りの両方を柔軟にスケーリングできます。 世界中の任意の場所にある Cosmos データベースのローカル レプリカに書き込み、書き込みをグローバルにエラスティックにスケーリングする機能は、過去数年間の著作です。 この機能がすべてのユーザーに一般提供されるのを楽しみに思います。</p>


  <h2>謝辞</h2>


  <p>Azure Cosmos DB &ldquo;は、2010 Project年後半に、現在のフォームに拡張および拡張する前に、Project として&rdquo;開始されました。 長年にわたるサービスの広範な使用により、Azure Cosmos DB を堅牢にしてきた Microsoft 内のすべてのチームに感謝します。 &ndash;私たちは、コンピューティング、ネットワーク、Service Fabric など、Azure Cosmos DB &ndash; が基に構築されている多くのコンポーネント テクノロジがある巨大な企業に立ち向かっています。継続的なサポートに感謝します。 レスリー・ランポート博士に感謝し、分散システムの設計に関するアプローチに影響を与え、 ミッション クリティカルなアプリを構築するために Cosmos DB に依存し、サービスの制限をプッシュし、常に最善を要求したお客様に非常に感謝しています。 最後に、彼らの深いコミットメントと注意に対するすばらしいすべての宇宙人に感謝します。</p>


  <hr>

  <ol>
   <li><i>JSON、BSON、CQL のような文法は、ARS 型システムの厳密なサブセットです。</i></li>
  </ol>
