### YamlMime:Yaml
ms.openlocfilehash: 0255b756ca6cb87d879b2d3204b945337bcfb674
ms.sourcegitcommit: d03bdc7fe5447adb6530886aab848b75fe8fa8ee
ms.translationtype: MT
ms.contentlocale: ja-JP
ms.lasthandoff: 03/11/2022
ms.locfileid: "139892553"
Slug: serverless-real-time-notifications-in-azure-using-azure-cosmosdb
Title: 'Azure #CosmosDB を使用した Azure でのサーバーレスリアルタイム通知'
Summary: Microsoft Build 2018 カンファレンスには多くの発表がありますが、目を引いたのは、サービスとしてのプラットフォーム (PaaS) オファリングである Azure SignalR のプレビュー リリースです。
Content: >-
  <p><br>

  <a href="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/6bbedec0-67f2-4cbe-83a5-4397f2506143.png"><img alt="header" border="0" height="488" src="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/b51cee18-6093-4130-930f-acd811f7b5e0.png" style="border: 0px currentcolor; border-image: none; margin-right: auto; margin-left: auto; float: none; display: block; background-image: none;" title="ヘッダー" width="1779"></a></p>


  <p><a href="https://developer.microsoft.com/events/build/content" target="_blank">Microsoft Build 2018</a> カンファレンスには多数のお知らせがありますが、目を引いたのは、インスタンスやホストを気にすることなく、リアルタイムのメッセージと通知を簡単に実装できるサービスとしてのプラットフォーム (PaaS) オファリングである <strong></strong> Azure SignalR のプレビュー リリースです。</p>


  <p>では、お気に入りのグローバル分散およびサーバーレス <strong></strong>データベース、<a href="https://azure.microsoft.com/services/cosmos-db/" target="_blank">Azure Cosmos DB、Azures</a>&rsquo; サーバーレス コンピューティング オファリングを使用して何かを構築<a href="https://azure.microsoft.com/services/functions/" target="_blank">Azure Functions。</a> 他のユーザーもこのトピックに関心を持っています。</p>


  <h2>リアルタイムで、本当に?</h2>


  <p>知らない方のために、<a href="https://www.asp.net/signalr" target="_blank">SignalR</a>&rsquo; は 2013 年から ASP.NET Framework のライブラリであり、最近 <a href="https://docs.microsoft.com/aspnet/core/signalr/introduction" target="_blank">SignalR Core</a> の名前で <a href="https://docs.microsoft.com/aspnet/core" target="_blank">ASP.NET Core</a> 用に書き換えされています。これにより、リアルタイム アプリケーションを簡単に作成し、<strong>Websocket</strong> プロトコルを介<strong></strong>してクライアントにコンテンツをプッシュし、クライアントに応じて他の代替手段に適切に戻ることができます。 これは、ゲーム、ダッシュボード、監視アプリ、 <a href="https://azure.microsoft.com/blog/have-fun-and-draw-awesome-on-the-cosmic-scale-azure-cosmosdb-pxdraw-canvas-today/" target="_blank">コラボレーション</a> アプリ、マッピング/追跡アプリ、または通知を必要とする任意のアプリに最適です。</p>


  <p><a href="https://tools.ietf.org/html/rfc6455" target="_blank">Websocket</a> プロトコルを利用することで、複数の HTTP 接続を開くオーバーヘッドや、セッション全体で維持される単一の 2 ウェイ TCP チャネルを通して、クライアントにコンテンツをプッシュできます。</p>


  <h2>サーバーレスに行く!</h2>


  <p>SignalR <strong>の</strong>要件の 1 つは、開発者は、通常は Web インスタンスとして<strong></strong>デプロイされるクライアントとの接続を管理および維持するためのホストが必要でした。 Azure では、App Service や Cloud Services など、任意の PaaS オファリングでこれを行Cloud Services。 複雑なタスク&rsquo;でなかったのに、設計とユーザーの負荷の<strong></strong>定義に基づいて、サービスが多数の接続と負荷を確実に処理できるよう維持し、確保する必要があったことを意味しています。</p>


  <p><strong>Azure SignalR では</strong>、<strong>ホストが提供されます</strong>。 必要なのは、公開されているサービス エンドポイントにクライアントとサーバーを接続する必要がある場合のみです。 ニーズに基 <a href="https://docs.microsoft.com/azure/azure-signalr/signalr-overview#how-does-it-scale" target="_blank">づいてサービスを透過</a> 的にスケーリングすることもできます。</p>


  <p>サーバーレス データベース<strong></strong>&hellip;と <strong> </strong>Azure Functionsをサーバーレス プラットフォームとして追加してすべてのコードを実行する場合、結果はサーバーレス、サーバーレスです。</p>


  <h2>通知の合理化</h2>


  <p>アーキテクチャには次が必要です。</p>


  <ul>
   <li>データ <strong>を</strong> 保存し、リアルタイム通知を受信できるクライアント。 わかりやすくするために、<strong>Web クライアント</strong><strong>は高速な</strong>オプション&rsquo;であり、一般的なチャット アプリケーションを選択して<strong>紹介しました</strong>。</li>
   <li>クライアント <strong>から</strong> データを受信してデータベースに <strong>保存できる</strong> <strong>API</strong>。</li>
   <li>新 <strong>しい</strong> データに対して作用し、すべてのクライアントに <strong>リアルタイム</strong> で通知できるメカニズム。</li>
  </ul>


  <p>コンピューティング レイヤーとして Azure Functions ( <a href="https://docs.microsoft.com/azure/azure-functions/functions-scale#consumption-plan" target="_blank">Consumption Plan</a>) を使用していたので、すべての機能を 4 つの関数に分散しました。</p>


  <ul>
   <li><a href="https://github.com/ealsur/serverlessnotifications/blob/master/src/function/ChangeFeedSignalR/Functions/FileServer.cs" target="_blank">Web ホスト</a> が継続的に実行されている場合と同様に、Web クライアントが <a href="https://github.com/ealsur/serverlessnotifications/tree/master/src/function/ChangeFeedSignalR/www" target="_blank">www</a> フォルダー内のファイルを参照および取得できる静的ファイルのサーバーレス ファイル サーバーとして機能する FileServer (ただし、shhh、&rsquo;theret!)。 Web <a href="https://github.com/ealsur/serverlessnotifications/blob/master/src/function/ChangeFeedSignalR/www/index.html" target="_blank">クライアントは、</a> 接続とトランスポート <a href="https://www.npmjs.com/package/@aspnet/signalr" target="_blank">プロトコルの解決に Azure SignalRs&rsquo; npm</a> パッケージを使用しています。 または、静的アセットを使用してサービスを<a href="https://azure.microsoft.com/services/cdn/" target="_blank">提供Azure CDN</a>もあります。</li>
   <li><a href="https://github.com/ealsur/serverlessnotifications/blob/master/src/function/ChangeFeedSignalR/Functions/SaveChat.cs" target="_blank">SaveChat</a>。接続されている Web クライアントからチャット メッセージを受信し、出力バインディングを使用して Cosmos DB に<a href="https://docs.microsoft.com/azure/azure-functions/functions-bindings-cosmosdb#output" target="_blank">保存します</a>。</li>
   <li><a href="https://github.com/ealsur/serverlessnotifications/blob/master/src/function/ChangeFeedSignalR/Functions/SignalRConfiguration.cs" target="_blank">SignalRConfiguration。SignalRs</a>&rsquo; Websocket 接続を初期化するために必要な情報を Web クライアントに送信します。</li>
   <li><a href="https://github.com/ealsur/serverlessnotifications/blob/master/src/function/ChangeFeedSignalR/Functions/FeedToSignalR.cs" target="_blank">FeedToSignalR</a>。Azure Cosmos DB の新しいデータに基づいて <a href="https://github.com/ealsur/serverlessnotifications/blob/master/src/function/ChangeFeedSignalR/Functions/FeedToSignalR.cs" target="_blank">CosmosDB</a> トリガーをトリガーし、接続されているすべてのクライアントに Azure SignalR を介してブロードキャストします。</li>
  </ul>


  <p>特に静的 Web ホストのカスタム ルートをサポートするために、プロキシ <a href="https://docs.microsoft.com/azure/azure-functions/functions-proxies" target="_blank">.</a> json ファイルAzure Functions プロキシを <a href="https://github.com/ealsur/serverlessnotifications/blob/master/src/function/ChangeFeedSignalR/proxies.json" target="_blank">実装</a> しました。 そのため、ユーザーがベース URL を参照すると、代わりに HTTP によってトリガーされる関数の 1 つが呼び出されます。</p>


  <p>完全なフローは次のとおりです。</p>


  <ul>
   <li>Web クライアントは、静的リソースを読み込む場合 (ベース URL を参照する場合など)、 <a href="https://github.com/ealsur/serverlessnotifications/blob/master/src/function/ChangeFeedSignalR/Functions/SignalRConfiguration.cs" target="_blank">SignalRConfiguration から SignalR 構成をプルします</a>。</li>
   <li>その後、ブラウザーがサポートして接続する最適なトランスポート プロトコルを Azure SignalR とネゴシエートします。</li>
  </ul>


  <p><a href="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/ba92560e-ab55-41f6-8d66-bba585220c0e.png"><img alt="signalr" border="0" height="374" src="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/140d7978-ada7-43c9-be0f-dc2f9b20845f.png" style="border: 0px currentcolor; border-image: none; margin-right: auto; margin-left: auto; float: none; display: block; background-image: none;" title="Signalr" width="688"></a></p>


  <ul>
   <li>ユーザーがメッセージを書き込むと、SaveChat への Ajax 呼び出しをCosmosして Azure Cosmos DB に<a href="https://github.com/ealsur/serverlessnotifications/blob/master/src/function/ChangeFeedSignalR/Functions/SaveChat.cs" target="_blank">保存されます</a>。</li>
  </ul>


  <p><a href="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/940fc191-ef92-4249-8bcb-c1fdd114b47b.png"><img alt="chat" border="0" height="486" src="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/91341b89-20b5-46ca-b444-cf21909ccaec.png" style="border: 0px currentcolor; border-image: none; margin-right: auto; margin-left: auto; float: none; display: block; background-image: none;" title="チャット" width="721"></a></p>


  <ul>
   <li>各チャット行は、Azure Cosmos DB にドキュメントとして格納されます。</li>
  </ul>


  <p><a href="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/a4e76ce8-fea2-4f79-bc6f-6ddfcef21f8e.png"><img alt="db" border="0" height="265" src="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/5215ab15-61b9-4106-a8a5-a6562362b889.png" style="border: 0px currentcolor; border-image: none; margin-right: auto; margin-left: auto; float: none; display: block; background-image: none;" title="Db" width="925"></a></p>


  <ul>
   <li><a href="https://github.com/ealsur/serverlessnotifications/blob/master/src/function/ChangeFeedSignalR/Functions/FeedToSignalR.cs" target="_blank">FeedToSignalR によって</a>トリガーされ、すべての Azure SignalR 接続クライアントにブロードキャストされます。</li>
  </ul>


  <p><a href="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/5b37fe4a-9ea5-41b6-ae0b-3736579a0b75.png"><img alt="invocation" border="0" height="276" src="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/3bc72e33-d634-48c5-bda2-9538aa486116.png" style="border: 0px currentcolor; border-image: none; margin-right: auto; margin-left: auto; float: none; display: block; background-image: none;" title="呼び出し" width="823"></a></p>


  <p>最終的な結果は<strong>、必要な</strong>&rsquo;ときにのみリソースを消費し、ホストや追加のサービス レイヤーを維持する必要がない、完全なサーバーレス フローです。</p>


  <p>これは単なるチャット アプリですが、IoT、ダッシュボード、システム全体のブロードキャスト、大きな etcetera などの他のフローに簡単に実装できます。</p>


  <h2>次の手順</h2>


  <p>コードは <a href="https://github.com/ealsur/serverlessnotifications/" target="_blank">Github で</a> パブリックであり、1 回のクリックで Azure サブスクリプションに完全なアーキテクチャをデプロイする便利なボタン <a href="https://portal.azure.com/#create/Microsoft.Template/uri/https%3A%2F%2Fraw.githubusercontent.com%2Fealsur%2Fserverlessnotifications%2Fmaster%2Fazuredeploy.json" target="_blank">も含まれています</a>。</p>


  <p><a href="https://portal.azure.com/#create/Microsoft.Template/uri/https%3A%2F%2Fraw.githubusercontent.com%2Fealsur%2Fserverlessnotifications%2Fmaster%2Fazuredeploy.json" target="_blank"><img alt="deploybutton" border="0" height="42" src="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/018d6bb5-0d61-48c3-b267-84d1459dc44c.png" style="border: 0px currentcolor; border-image: none; margin-right: auto; margin-left: auto; float: none; display: block; background-image: none;" title="deploybutton" width="198"></a></p>


  <p>新しいプロジェクトまたは現在のプロジェクトのベースとして複製、フォーク、および使用します。 Azure SignalR はまだプレビュー中で、ライブラリ<strong></strong>またはサービス API は将来変更される可能性があります。 今すぐ <a href="https://azure.microsoft.com/try/cosmosdb/" target="_blank">Azure Cosmos DB を</a>無料で試し、サインアップやクレジット カードは必要ありません。 Twitter CosmosDB でフォローすることで、最新の Azure Cosmos DB のニュースと機能<a href="https://twitter.com/search?q=%23cosmosDB&amp;src=typd" target="_blank">に関する最新情報を確認してください。#</a><a href="https://twitter.com/AzureCosmosDB" target="_blank">@AzureCosmosDB</a></p>
