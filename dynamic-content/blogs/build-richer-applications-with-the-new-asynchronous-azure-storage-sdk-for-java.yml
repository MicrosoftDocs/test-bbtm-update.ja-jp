### YamlMime:Yaml
ms.openlocfilehash: e2414ea9a0fe5010d330b5dd3154a27d9604afb7
ms.sourcegitcommit: d03bdc7fe5447adb6530886aab848b75fe8fa8ee
ms.translationtype: MT
ms.contentlocale: ja-JP
ms.lasthandoff: 03/11/2022
ms.locfileid: "139910895"
Slug: build-richer-applications-with-the-new-asynchronous-azure-storage-sdk-for-java
Title: Java 用の新しい非同期アプリケーション SDK を使用してAzure Storageアプリケーションを構築する
Summary: クラウド スケール アプリケーションでは、通常、リモート データにアクセスするときに必要なパフォーマンスを実現するために、高いコンカレンシーが必要です。 新しい Storage SDK v10 for Java では、非同期操作を提供することで、このようなアプリケーションの構築が簡素化され、大規模なスレッド プールを作成して管理する必要がなくなります。 この新しい SDK では、非同期操作に RxJava リアクティブ プログラミング モデルが使用されます。REST 要求では Netty HTTP クライアントにも依存します。
Content: "<p>クラウド スケール アプリケーションでは、通常、リモート データにアクセスするときに必要なパフォーマンスを実現するために、高いコンカレンシーが必要です。 Java SDK Storage新しい機能により、非同期操作を提供することでこのようなアプリケーションの構築が簡素化され、大規模なスレッド プールを作成して管理する必要がなくなります。 この新しい SDK では、非同期操作に <a href=\"https://github.com/ReactiveX/RxJava\">RxJava</a> リアクティブ プログラミング モデルが使用されます。REST 要求では <a href=\"https://github.com/netty/netty\">Netty HTTP クライアント</a> にも依存します。 概要 SDK <a href=\"https://github.com/azure/azure-storage-java/tree/New-Storage-SDK-V10-Preview#getting-started\">for Java Azure Storage使用</a>できます。</p>\n\n<p>Azure Storage SDK v10 for Java では、Storage <a href=\"https://azure.microsoft.com/en-us/blog/preview-the-new-azure-storage-sdk-for-go-storage-sdks-roadmap/\">Go SDK</a> リリースで以前に導入されたスレッド セーフな型を提供する次世代の <a href=\"https://azure.microsoft.com/en-us/blog/preview-the-new-azure-storage-sdk-for-go-storage-sdks-roadmap/\">Storage Storage </a> SDK 設計が採用されています。 この新しい SDK は、クライアント上でバッファリングを行わずにデータを効果的に移動するために構築され、Storage REST API 内のインターフェイスに近いインターフェイスを提供します。 新しい SDK の機能強化の一部を次に示します。</p>\n\n<ul>\n <li>RxJava を使用した非同期プログラミング モデル</li>\n <li>REST API と一貫性のある低レベルの API Storage一致</li>\n <li>利便性のために構築された新しい高レベル API</li>\n <li>スレッド セーフ インターフェイス</li>\n <li>すべての SDK での一貫性Storageバージョン管理</li>\n</ul>\n\n<h2>RxJava を使用した非同期プログラミング モデル</h2>\n\n<p>これで、Storage SDK で RxJava がサポートされるので、イベント 駆動型アプリケーションを簡単にビルドできます。 これは、オブザーバー パターンと共にシーケンスを構成できるためです。 次のサンプルでは、xml ファイルのディレクトリが見つかった時点でアップロードされます。このパターンを示しています。</p>\n\n<pre class=\"prettyprint\">\n// Walk the directory and filter for .xml files\nStream&lt;Path&gt;<path> walk = Files.walk(filePath).filter(p -&gt; p.toString().endsWith(&quot;.xml&quot;));\n\n// Upload files found asynchronously into Blob storage in 20 concurrent operations\nObservable.fromIterable(() -&gt; walk.iterator()).flatMap(path -&gt; {\n    BlockBlobURL blobURL = containerURL.createBlockBlobURL(path.getFileName().toString());\n\n    FileChannel fc = FileChannel.open(path);\n    return TransferManager.uploadFileToBlockBlob(\n        fc, blobURL,\n            BlockBlobURL.MAX_PUT_BLOCK_BYTES, null)\n        .toObservable()\n        .doOnError(throwable -&gt; {\n             if (throwable instanceof RestException) {\n                 System.out.println(&quot;Failed to upload &quot; + path + &quot; with error:&quot; + ((RestException) throwable).response().statusCode());\n             } else {\n                 System.out.println(throwable.getMessage());\n             }\n         })\n         .doAfterTerminate(() -&gt; {\n              System.out.println(&quot;Upload of &quot; + path + &quot; completed&quot;);\n              fc.close();\n          });\n\n    }, 20)  // Max concurrency of 20 - this is usually determined based on the number of cores you have in your environment\n    .subscribe();\n</path></pre>\n\n<p>完全なサンプルは、Azure Storage <a href=\"https://github.com/seguler/azure-storage-v10-java-samples/blob/master/src/DirectoryUpload/DirectoryUpload.java\">Java SDK サンプル リポジトリにあります</a>。</p>\n\n<p>上記のサンプルでは、高レベルの API <a href=\"https://docs.microsoft.com/en-us/java/api/com.microsoft.azure.storage.blob._transfer_manager.uploadfiletoblockblob?view=azure-java-preview\"><em>である TransferManager.uploadFileToBlockBlob</em></a> が呼び出されます。この場合、Observable はシグナルを出力します (この場合は <em>java.nio.file.Path</em> 型)。 flatMap を使用すると、この例では 20 に設定された最大同時接続を構成できます。 Azure Storage SDK v7 を使用してこれらのファイルをアップロードする場合は、スレッドを作成し (最大 20)、それらを管理する必要があります。一方、上記の例では、RxJava は、同じデータ セットを同時にアップロードするスレッド プールを、より少ないスレッドで管理し、リソース効率が向上します。</p>\n\n<p>詳細については、RxJava および&nbsp; Reactive プログラミング モデル<a href=\"https://github.com/ReactiveX/RxJava\">に関する記事を参照してください</a>。</p>\n\n<h2>ストレージ REST API と一貫性のある低レベルの API</h2>\n\n<p>低レベルの API は、URL の種類 ( <a href=\"https://docs.microsoft.com/en-us/java/api/com.microsoft.azure.storage.blob._block_blob_u_r_l?view=azure-java-preview\"><em>BlockBlobURL</em></a> など) に存在し、REST API の単純なラッパーとして設計されています。利便性は提供されますが、非表示の動作はありません。 これらの低レベル API を呼び出すごとに、送信された REST 要求が 1 つ (再試行を除く) 保証されます。 さらに、これらの型の名前は、動作をより明確にするために更新されています。 たとえば、<a href=\"https://docs.microsoft.com/en-us/rest/api/storageservices/put-blob\">PutBlob </a>は現在アップロード、<a href=\"https://docs.microsoft.com/en-us/rest/api/storageservices/put-block\">PutBlock </a>は StageBlock、<a href=\"https://docs.microsoft.com/en-us/rest/api/storageservices/put-block-list\">PutBlockList は CommitBlockList </a>などです。</p>\n\n<pre class=\"prettyprint\">\nBlockBlobURL blobURL = containerURL.createBlockBlobURL(&quot;mysampledata&quot;);\n \nString data = &quot;Hello world!&quot;;\nblobURL.upload(Flowable.just(ByteBuffer.wrap(data.getBytes())), data.length(), null, null, null)\n    .subscribe(blockBlobsUploadResponse -&gt; {\n        System.out.println(&quot;Status code: &quot; + blockBlobsUploadResponse.statusCode());\n    }, throwable -&gt; {\n        System.out.println(&quot;Throwable: &quot; + throwable.getMessage());\n    });\n</pre>\n\n<h2>利便性のために構築された新しい高レベル API</h2>\n\n<p><a href=\"https://docs.microsoft.com/en-us/java/api/com.microsoft.azure.storage.blob._transfer_manager?view=azure-java-preview\"><em>TransferManager クラスは</em></a>、他の下位レベルの API を内部的に呼び出す便利な高レベル API を提供する場所です。 たとえば、 <em><a href=\"https://docs.microsoft.com/fi-fi/java/api/com.microsoft.azure.storage.blob._transfer_manager.uploadfiletoblockblob?view=azure-java-preview\">uploadFileToBlockBlob </a></em>メソッドは、内部的に 10 x <a href=\"https://docs.microsoft.com/en-us/java/api/com.microsoft.azure.storage.blob._block_blob_u_r_l.stageBlock?view=azure-java-preview#com-microsoft-azure-storage-blob--block-blob-u-r-l-stageblock-string-flowable-bytebuffer--long-leaseaccessconditions-\"><em>StageBlock </em></a>呼び出しを行い (各ブロックのサイズが 100 MB に構成されている) 1 GB のファイルをアップロードした後、 <a href=\"https://docs.microsoft.com/en-us/java/api/com.microsoft.azure.storage.blob._block_blob_u_r_l.commitblocklist?view=azure-java-preview\"><em>CommitBlockList </em></a>を 1 回呼び出して Blob service でアップロードされたブロックをアトミックにコミットすることでアップロードできます。</p>\n\n<pre class=\"prettyprint\">\nSingle<commonrestresponse> response = TransferManager.uploadFileToBlockBlob(\n        FileChannel.open(filePath), blobURL,\n        BlockBlobURL.MAX_PUT_BLOCK_BYTES, null)\n        .doOnError(throwable -&gt; {\n            if (throwable instanceof RestException) {\n                System.out.println(&quot;Failed to upload &quot; + filePath + &quot; with error:&quot; + ((RestException) throwable).response().statusCode());\n            } else {\n                System.out.println(throwable.getMessage());\n            }\n        })\n        .doAfterTerminate(() -&gt; System.out.println());\n\nresponse.subscribe(commonRestResponse -&gt; {System.out.println(commonRestResponse.statusCode());});\n</commonrestresponse></pre>\n\n<h2>スレッド セーフ インターフェイス</h2>\n\n<p>以前の Storage SDK (バージョン 9 以前) では、<a href=\"https://docs.microsoft.com/en-us/java/api/com.microsoft.azure.storage.blob._cloud_block_blob?view=azure-java-stable\">CloudBlockBlob </a>や <a href=\"https://docs.microsoft.com/en-us/java/api/com.microsoft.azure.storage.blob._cloud_blob_container?view=azure-java-stable\">CloudBlobContainer </a>などのオブジェクトが提供されました。これはスレッド セーフで&#39;で、実行時に問題が発生する可能性がある方法で変更可能でした。 新しい Storage SDK (v10 以上) では、Storage REST API に近いインターフェイスが提供され、関連付けられているオブジェクトのほとんどが変更できないので、それらを共有できます。</p>\n\n<p>たとえば、BLOB に対して操作を実行する場合 (例: )、BLOB URI を使用して <a href=\"https://docs.microsoft.com/en-us/java/api/com.microsoft.azure.storage.blob._block_blob_u_r_l?view=azure-java-preview\"><em>BlockBlobURL </em></a>オブジェクトを作成し、関連付けられている REST API 操作はすべてその型のメソッドです。 その URI オブジェクト<a href=\"https://docs.microsoft.com/en-us/java/api/com.microsoft.azure.storage.blob._block_blob_u_r_l.upload?view=azure-java-preview\">で アップロード</a><a href=\"https://docs.microsoft.com/en-us/java/api/com.microsoft.azure.storage.blob._block_blob_u_r_l.stageblock?view=azure-java-preview\"><em>、StageBlock</em></a>、<a href=\"https://docs.microsoft.com/en-us/java/api/com.microsoft.azure.storage.blob._block_blob_u_r_l.commitblocklist?view=azure-java-preview\"><em>および CommitBlockList </em></a>を呼び出します。 これらのメソッドはすべて、変更できない REST API 応答をラップする <em>RestResponseTHeaders,TBody&lt;&gt;</em> の単一 (io.reactivex.Single) を返します。 <em>BlockBlobURL </em>型の作成されたインスタンスは変更されません。</p>\n\n<h2>新Storage SDK のバージョン</h2>\n\n<p>新しい SDK は、新しいバージョン管理戦略に従って、新しいバージョンStorage サービス REST APIされます。 現在のリリースであるバージョン 10 は、バージョン 2018-03-28 Storage REST APIバージョンに関連付けされます。 すべてのプログラミング言語のすべての新しい Storage SDK では、REST API 2018-03-28 リリースで V10 が使用されます。そのため、さまざまなバージョン間を簡単に移動できます。 次の REST API リリースをサポートする新しい SDK がリリースされると、クライアントの重要な変更に関係なく、そのメジャー バージョン (v10 から V11 など) がバンプされます。 これは主に、1 つのバージョンから別のバージョンに移行するときに、サービスの動作REST APIが原因です。</p>\n\n<p>10 より前のバージョンは、以前のバージョンの SDK Storage予約されます。 バージョンStorageバージョン 10 以降の SDK では、新しい SDK 設計が採用されます。</p>\n\n<h2>今すぐ使ってみる</h2>\n\n<p>Azure Storage SDK v10 for Java の使用を開始するには、次の Blob maven パッケージを使用します (ファイルとキューは近日公開予定)。</p>\n\n<pre>\n&lt;dependency&gt;\n&nbsp;    &lt;groupid&gt;com.microsoft.azure&lt;/groupid&gt;\n     &lt;artifactid&gt;azure-storage-blob&lt;/artifactid&gt;\n&nbsp;    &lt;version&gt;10.0.1-Preview&lt;/version&gt;\n&lt;/dependency&gt;  </pre>\n\n<p>開始に役立ついくつかの便利なリンクを次に示します。</p>\n\n<ul>\n <li><a href=\"https://github.com/Azure/azure-storage-java/tree/New-Storage-SDK-V10-Preview\">github Azure Storage SDK v10 を使用する</a></li>\n <li><a href=\"https://docs.microsoft.com/en-us/azure/storage/blobs/storage-quickstart-blobs-java-v10\">Java での Blob Storage のクイック スタート サンプル</a></li>\n <li><a href=\"https://docs.microsoft.com/en-us/java/api/storage/client?view=azure-java-preview\">API リファレンス ドキュメント</a></li>\n <li><a href=\"https://github.com/seguler/azure-storage-v10-java-samples/\">上記の xml ファイルサンプルのディレクトリのアップロード</a></li>\n</ul>\n\n<h2>ロードマップ</h2>\n\n<p>Azure Storage SDK v10 for Java は現在プレビュー中であり、Blob Storage のみをサポートしています。 ユーザー&#39;に基づいて、いくつかの更新プログラムを間もなく追加する予定です。 そのため、このページをご確認ください。このページに関する<a href=\"https://github.com/azure/azure-storage-java\">フィードバックをおGitHub</a>。 近日リリースが予定されている主な変更の一部を次に示します。</p>\n\n<ul>\n <li>2018-03-28 のサポートはまもなく開始されます</li>\n <li>Queue、File Services のサポート</li>\n <li>GA リリース</li>\n</ul>"
