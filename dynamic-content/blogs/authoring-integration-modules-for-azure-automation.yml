### YamlMime:Yaml
ms.openlocfilehash: 961717028339e6569f8aed74ca0ec4701001a50d
ms.sourcegitcommit: d03bdc7fe5447adb6530886aab848b75fe8fa8ee
ms.translationtype: MT
ms.contentlocale: ja-JP
ms.lasthandoff: 03/11/2022
ms.locfileid: "139894592"
Slug: authoring-integration-modules-for-azure-automation
Title: 「Authoring Integration Modules for Azure Automation (Azure Automation 用の統合モジュールの作成)」
Summary: この機能に精通しているAzure Automation、PowerShell が重要な機能を実現する基本的なテクノロジAzure Automationがあります。 ただし、PowerShell モジュールによる機能拡張により、PowerShell 自体は優れた機能です。
Content: >-
  <p><strong>2016 年 1 月 8 日更新: モジュール .zip ファイルと同じ名前のフォルダーは、モジュール .zip ファイルに必要なくなりました。zip 内に直接説明されている .psd1、.psm1 などのファイルがある場合は、モジュールのインポートが機能します。</strong></p>


  <p>この機能&rsquo;に慣れた<a href="https://aka.ms/Q2p1ap">Azure Automation</a>&rsquo;、PowerShell が重要な基盤技術Azure Automationがあります。 ただし、PowerShell モジュールによる機能拡張により、PowerShell 自体は優れた機能です。 このAzure Automation PowerShell を基に構築されています。PowerShell モジュールは、機能拡張ストーリー Azure Automationも重要です。 このブログ記事では、PowerShell モジュール統合&rsquo;&ldquo;&rdquo;モジュールでの Azure Automation スピンの詳細と、独自の PowerShell&rdquo; &ndash; &ldquo;&ndash; モジュールを作成するためのベスト プラクティスについて説明し、Azure Automation 内の統合モジュールとして機能します。 &nbsp;</p>


  <h2>&rsquo;PowerShell モジュールとは</h2>


  <p>統合モジュールに具体的に取り組む前に、PowerShell モジュールとは何ですか? PowerShell で&rsquo;コマンドレット (Get-Date や Copy-Item&rsquo; など) を呼び出した場合は、PowerShell モジュールを使用しました。 PowerShell モジュールは、PowerShell コンソールだけでなく、PowerShell スクリプト、ワークフロー、Runbook から使用できる PowerShell コマンドレットのグループです。 PowerShell のすべての機能はコマンドレットを通じて公開され、すべてのコマンドレットは PowerShell モジュールによってサポートされ、その多くは PowerShell 自体に備わっています。 たとえば、Get-Date コマンドレットは Microsoft.PowerShell.Utility PowerShell モジュールの一部であり、Copy-Item コマンドレットは Microsoft.PowerShell.Management PowerShell モジュールの一部です。 これらのモジュールはどれも PowerShell に付属しています。 ただし、多くの PowerShell モジュールは PowerShell の一部として出荷されません。代わりに、<a href="https://gallery.technet.microsoft.com/scriptcenter/2d191bcd-3308-4edd-9de2-88dff796b0bc">Windows Update PowerShell</a> モジュールなどのカプセル化された機能を使用して複雑なタスクをより簡単にするために、膨大な PowerShell コミュニティによって配布されます (修正プログラムの適用シナリオに関心がある場合は、このモジュールの使い方を示す <a href="https://gallery.technet.microsoft.com/scriptcenter/Manage-Windows-Updates-on-160f40bc">Azure Automation Runbook</a> も用意されています)。 PowerShell モジュールの詳細については、 <a href="https://msdn.microsoft.com/en-us/library/dd878324%28v=vs.85%29.aspx">MSDN を参照してください</a>。 <img alt="Authoring Integration Modules for Azure Automation" border="0" height="131" src="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/azureautomation-authoring-integration-modules-1.png" style="float: none; padding-top: 0px; padding-left: 0px; margin: 0px auto; padding-right: 0px; border: 0px;" title="「Authoring Integration Modules for Azure Automation (Azure Automation 用の統合モジュールの作成)」" width="610"> &nbsp;</p>


  <h2>Azure Automation&rsquo;統合モジュールとは</h2>


  <p>これで、通常&rsquo;の古い PowerShell &ldquo;モジュールについて理解しました。これらの Azure Automation 統合&rdquo;モジュールとは何か、および標準の PowerShell モジュールとどのように異なりますか? 結局のところ、大きな違&rsquo;いはありません。 統合モジュールは単なる PowerShell &ndash; モジュールであり、必要に応じて、Runbook のこのモジュール コマンドレットで使用する Azure Automation&rsquo; 接続の種類を指定するメタデータ ファイルを 1 つの追加ファイルに含まれています。 省略可能なファイルか、または使用しない場合、これらの PowerShell モジュールを Azure Automation にインポートして、Runbook 内でコマンドレットを使用できます。 背後では、Azure Automationこれらのモジュールが格納され、ジョブの実行時に Runbook が実行される Azure Automation サンドボックスに読み込まれます。 1 つの PowerShell モジュールを Azure Automation で出荷し、Azure PowerShellできます。 これらのモジュールのいずれかを Azure Automation にインポートするには、PowerShell &ndash; モジュールと統合モジュールに関するもう 1 つの小さな注意点があります。モジュールを 1 つのファイルとしてインポートするには、モジュール フォルダーを zip 圧縮する必要があります。 zip ファイルは、含まれているモジュール フォルダーと同じ名前である必要があります。 zip 内の module フォルダーには、モジュール フォルダーと同じ名前の .psd1、.psm1、または PowerShell モジュール .dll ファイルが少なくとも含まれている必要があります。 たとえば、以下で説明する Twilio モジュールの場合、適切な構造は次のとおりです。</p>


  <ul>
   <li>Twilio.zip <ul>
    <li>Twilio フォルダー <ul>
     <li>Twilio.psd1</li>
    </ul>
    </li>
   </ul>
   </li>
  </ul>


  <p>&nbsp; 次のように表示されます。 <img alt="Authoring Integration Modules for Azure Automation" border="0" height="186" src="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/azureautomation-authoring-integration-modules-2.png" style="float: none; padding-top: 0px; padding-left: 0px; margin: 0px auto; padding-right: 0px; border: 0px;" title="「Authoring Integration Modules for Azure Automation (Azure Automation 用の統合モジュールの作成)」" width="480"> <a href="https://technet.microsoft.com/en-us/library/dn457813.aspx">TechNet</a>&ldquo; 上の Azure Automation にインポートするために統合モジュールをパッケージ化する方法の詳細については、「統合モジュールの構築」セクションを参照&rdquo;してください。 <b>楽しい事実: </b>多Azure Automation&ldquo;&rdquo;、統合モジュールは省略可能なモジュールと見なされます。基本的には、オプションの追加メタデータ ファイルを含む PowerShell モジュールだけであるからです。 PowerShell モジュールと統合モジュールのメタデータ ファイルは、概念的には、Orchestrator の Integration Pack の概念とSystem Centerです。 実際、Integration Module という用語&ldquo;は、&ldquo;Orchestrator &ldquo;の Integration Pack&rdquo; という用語と、PowerShell の PowerShell&rdquo; モジュールの組み合わせから生み出&rdquo;されています。 &nbsp;</p>


  <h2>統合Azure Automationメタデータ ファイル</h2>


  <p>では、この追加の省略可能なファイルの詳細は何ですか。このファイルには、それが含まれるモジュールAzure Automationの接続の種類が保持されます。 ファイルの名前はモジュールの名前に基づいて <i>ModuleName-Automation.json&gt; という形式で指定され、(モジュール zip ファイル内の) モジュール フォルダー内に配置する必要があります。&lt;</i> 統合モジュールメタデータ ファイルを含む PowerShell モジュールの例については、スクリプト センターの <a href="https://gallery.technet.microsoft.com/scriptcenter/Twilio-PowerShell-Module-8a8bfef8">Twilio PowerShell モジュール</a> を参照してください。 以下に示す通り、統合モジュールのメタデータ ファイルが含まれています。 <img alt="Authoring Integration Modules for Azure Automation" border="0" height="186" src="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/azureautomation-authoring-integration-modules-2.png" style="float: none; padding-top: 0px; padding-left: 0px; margin: 0px auto; padding-right: 0px; border: 0px;" title="「Authoring Integration Modules for Azure Automation (Azure Automation 用の統合モジュールの作成)」" width="480"> &nbsp; このファイルの内容は、JSON 形式のオブジェクトです。 このオブジェクトには、モジュールが表&ldquo;&rdquo;すシステムまたはサービスに接続するために必要な接続のフィールドが含まれます。 これにより、最終的に Azure Automation の接続の種類が作成されます。 このファイルを使用すると、モジュールの接続の種類について、フィールド名、種類、フィールドを暗号化するか省略可能にするかを指定できます。 上記の Twilio モジュールのこのファイルの形式と内容の例を次に示します。 Twilio への要求では、認証のために Twilio AccountSid と認証トークン (AuthToken) を渡す必要があります。そのため、Twilio の接続の種類には次のフィールドが含まれます。 <img alt="Authoring Integration Modules for Azure Automation" border="0" height="369" src="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/azureautomation-authoring-integration-modules-3.png" style="float: none; padding-top: 0px; padding-left: 0px; margin: 0px auto; padding-right: 0px; border: 0px;" title="「Authoring Integration Modules for Azure Automation (Azure Automation 用の統合モジュールの作成)」" width="480"> &nbsp; Twilio 統合 &ndash; モジュールを Azure Automation にインポートした後、接続を作成すると、新しい接続の種類として Twilio 接続の種類が表示されます。 この接続の種類 (接続資産とも呼ばれる) のインスタンスを作成すると、Twilio への接続に必要なフィールド (この場合は AccountSid と AuthToken) を指定できます。 <img alt="Authoring Integration Modules for Azure Automation" border="0" height="376" src="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/azureautomation-authoring-integration-modules-4.png" style="float: none; padding-top: 0px; padding-left: 0px; margin: 0px auto; padding-right: 0px; border: 0px;" title="「Authoring Integration Modules for Azure Automation (Azure Automation 用の統合モジュールの作成)」" width="610"> &nbsp; もちろん、複数の Twilio アカウントがある場合は、Twilio アカウントごとに接続資産を作成して、これらのアカウントの任意のアカウントとして Twilio に接続できます (Twilio コマンドレットの Runbook で選択した接続に応じて異なる)。 &nbsp;</p>


  <h2>統合モジュールの作成 - ベスト プラクティス</h2>


  <p>統合モジュールが基本的に PowerShell&rsquo;&rsquo; モジュールだけであるからといって、作成に関する一連のベスト プラクティス<b></b>が用意されているという意味ではありません。 PowerShell&rsquo; モジュールを作成する場合は、PowerShell モジュールを作成する場合に、このモジュールを最も使いAzure Automation。 これらの一部はAzure Automation固有であり、一部のモジュールは、Automation を使用する必要があるかどうかに関係なく、PowerShell ワークフロー&rsquo;でモジュールをうまく機能させるのに役立ちます。 &nbsp; 1. <span style="text-decoration: underline;">モジュール内のすべてのコマンドレットの概要、説明、ヘルプ URI を含める</span> PowerShell では、Get-Help コマンドレットでの使用に関するヘルプをユーザーが受け取れるコマンドレットの特定のヘルプ情報 <a href="https://technet.microsoft.com/en-us/library/ee176848.aspx">を定義できます</a>。 たとえば、.&rsquo;psm1 ファイルで記述された PowerShell モジュールの概要、説明、ヘルプ URI を定義する方法を次に示します。 <img alt="Authoring Integration Modules for Azure Automation" border="0" height="124" src="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/azureautomation-authoring-integration-modules-5.png" style="float: none; padding-top: 0px; padding-left: 0px; margin: 0px auto; padding-right: 0px; border: 0px;" title="「Authoring Integration Modules for Azure Automation (Azure Automation 用の統合モジュールの作成)」" width="610"> &nbsp; この情報を指定すると、PowerShell コンソールで Get-Help コマンドレットを使用する際にこのヘルプが表示されるだけでなく、runbook の作成中にアクティビティを挿入する場合など、Azure Automation 内でこのヘルプ機能も公開されます。 <img alt="Authoring Integration Modules for Azure Automation" border="0" height="166" src="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/azureautomation-authoring-integration-modules-6.png" style="float: none; padding-top: 0px; padding-left: 0px; margin: 0px auto; padding-right: 0px; border: 0px;" title="「Authoring Integration Modules for Azure Automation (Azure Automation 用の統合モジュールの作成)」" width="480"> &nbsp; [詳細な &ldquo;ヘルプの表示]&rdquo; をクリックすると、アクセスに使用する Web&rsquo; ブラウザーの別のタブにヘルプ URI がAzure Automation。 &nbsp; 2. <span style="text-decoration: underline;">モジュールがリモート システムに対して動作する場合:</span></p>


  <blockquote>a. このファイルには、そのリモート システム (接続の種類) に接続するために必要な情報を定義する統合モジュール メタデータ ファイルが含まれている必要があります</blockquote>


  <blockquote>既&rsquo;にこのエキスパートがいます。 &nbsp; b.  <span style="text-decoration: underline;">モジュール内の各コマンドレットは、接続オブジェクトをパラメーターとして受け取る必要があります</span></blockquote>


  <p>接続の種類のフィールドを持つオブジェクトをパラメーターとして渡Azure Automationモジュールのコマンドレットは、このモジュールで最も簡単に使用できます。 これにより、ユーザーはコマンドレット&rsquo;を呼び出すごとに、接続資産のパラメーターを対応するパラメーターにマップする必要はありません。 IM の話の例&rsquo;として、以下を参照してください。 この Runbook では、joeTwilio という Twilio 接続資産を使用して Twilio にアクセスし、すべての Twilio 電話番号を返します。 接続のフィールドをコマンドレットのパラメーターにマップする方法を確認してください。 <img alt="Authoring Integration Modules for Azure Automation" border="0" height="212" src="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/azureautomation-authoring-integration-modules-7.png" style="float: none; padding-top: 0px; padding-left: 0px; margin: 0px auto; padding-right: 0px; border: 0px;" title="「Authoring Integration Modules for Azure Automation (Azure Automation 用の統合モジュールの作成)」" width="610"> 次に、Twilio を呼び出すより良い方法を以下と比較します。 この場合、接続オブジェクトを コマンドレットに直接渡します。これは簡単です。<img alt="Authoring Integration Modules for Azure Automation" border="0" height="171" src="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/azureautomation-authoring-integration-modules-8.png" style="float: none; padding-top: 0px; padding-left: 0px; margin: 0px auto; padding-right: 0px; border: 0px;" title="「Authoring Integration Modules for Azure Automation (Azure Automation 用の統合モジュールの作成)」" width="610"> &nbsp; コマンドレットに対してこのような動作を有効にするには、パラメーターの接続フィールドではなく、接続オブジェクトをパラメーターとして直接取得できます。 通常は&rsquo;、Azure Automation を<a href="https://msdn.microsoft.com/en-us/library/dd878348(v=vs.85).aspx"></a>使用していないユーザーが、接続オブジェクトとして機能するハッシュテーブルを構築せずにコマンドレットを呼び出すので、それぞれに対してパラメーター を設定する必要があります。 接続フィールドのプロパティを 1 つずつ渡すには、下のパラメーター セット &ldquo;SpecifyConnectionFields&rdquo; を使用します。 &ldquo;UseConnectionObject&rdquo; を使用&rsquo;すると、接続を直接通過できます。 ご覧のように、次の方法Send-TwilioSMSを渡す方法があります。 <img alt="Authoring Integration Modules for Azure Automation" border="0" height="257" src="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/azureautomation-authoring-integration-modules-9.png" style="float: none; padding-top: 0px; padding-left: 0px; margin: 0px auto; padding-right: 0px; border: 0px;" title="「Authoring Integration Modules for Azure Automation (Azure Automation 用の統合モジュールの作成)」" width="610"> &nbsp; 3. <span style="text-decoration: underline;">モジュール内のすべてのコマンドレットの出力の種類を定義する</span> コマンドレットの <a href="https://technet.microsoft.com/en-us/library/hh847785.aspx">出力の種類</a> を定義すると、デザイン時の IntelliSense を使用して、作成中に使用するコマンドレットの出力プロパティを決定できます。 以下に示す通り、OutputType &ldquo;&rdquo;&rsquo;コマンドレット属性を使用すると、コマンドレットの出力で先行入力機能を取得できます。実行する必要が生じずに使用できます。 <img alt="Authoring Integration Modules for Azure Automation" border="0" height="155" src="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/azureautomation-authoring-integration-modules-10.png" style="float: none; padding-top: 0px; padding-left: 0px; margin: 0px auto; padding-right: 0px; border: 0px;" title="「Authoring Integration Modules for Azure Automation (Azure Automation 用の統合モジュールの作成)」" width="480"> <img alt="Authoring Integration Modules for Azure Automation" border="0" height="272" src="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/azureautomation-authoring-integration-modules-11.png" style="float: none; padding-top: 0px; padding-left: 0px; margin: 0px auto; padding-right: 0px; border: 0px;" title="「Authoring Integration Modules for Azure Automation (Azure Automation 用の統合モジュールの作成)」" width="610"> &nbsp; 現在Azure Automationこの&rsquo;データは使用されませんが、今後は、Runbook の構築を簡単に行うのに役立て願っています。 &nbsp; 4. <span style="text-decoration: underline;">モジュール内のコマンドレットは、パラメーターに対して複雑なオブジェクト型を受け取る必要はありません</span> PowerShell ワークフローは、逆シリアル化された形式で複合型を格納するというので、PowerShell とは異なります。 プリミティブ型はプリミティブのままですが、複合型は逆シリアル化されたバージョン (実質的にはプロパティ バッグ) に変換されます。 たとえば、Runbook で Get-Process コマンドレットを使用した場合 (または、その場合は PowerShell ワークフローだけ)、予期される [System.Diagnostic.Process] 型ではなく、[Deserialized.System.Diagnostic.Process] 型のオブジェクトが返されます。 この型には、逆シリアル化されていない型と同じプロパティがすべて揃っていますが、メソッドは 1 つもありません。 また、この値をパラメーターとしてコマンドレットに渡してみると、コマンドレットではこのパラメーターの [System.Diagnostic.Process]&rsquo; 値が必要です。"パラメーター &#39;プロセス&#39; で引数変換を処理できません" というエラーが表示されます。 <span style="color: #ff0000;">エラー: &quot;Deserialized.System.Diagnostics.Process &quot;型の System.Diagnostics.Process (CcmExec)&quot; </span> <span style="color: #ff0000;">&quot;値を型 System.Diagnostics.Process に変換できません&quot;。&quot; &quot;</span> &nbsp; これはもちろん、予期される [System.Diagnostic.Process] 型と指定された [Deserialized.System.Diagnostic.Process] 型の間に型の不一致が存在します。 この問題を回避する方法では、モジュールのコマンドレットでパラメーターに複合型を受け取らないようにします。 これを&rsquo;行う間違った方法を次に示します。ご覧のように、コマンドレットは複合型をパラメーターとして受け取ります。 <img alt="Authoring Integration Modules for Azure Automation" border="0" height="132" src="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/azureautomation-authoring-integration-modules-12.png" style="float: none; padding-top: 0px; padding-left: 0px; margin: 0px auto; padding-right: 0px; border: 0px;" title="「Authoring Integration Modules for Azure Automation (Azure Automation 用の統合モジュールの作成)」" width="480"> &nbsp; ここでは、&rsquo;コマンドレットによって内部的に使用できるプリミティブを取り込み、複雑なオブジェクトを取得して使用する方法について説明します。 コマンドレットは PowerShell ワークフローではなく PowerShell のコンテキストで実行されるので、コマンドレット $process 内 <i>で正</i> しい [System.Diagnostic.Process] 型になります。 <img alt="Authoring Integration Modules for Azure Automation" border="0" height="170" src="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/azureautomation-authoring-integration-modules-13.png" style="float: none; padding-top: 0px; padding-left: 0px; margin: 0px auto; padding-right: 0px; border: 0px;" title="「Authoring Integration Modules for Azure Automation (Azure Automation 用の統合モジュールの作成)」" width="480"> &nbsp;&ndash;そこでの上級ユーザーの場合、Runbook &ndash;の接続資産は複雑な型のハッシュテーブルであるのに、これらのハッシュテーブルは Connection パラメーターのコマンドレットに完全に渡せ、キャスト例外は発生していないように見えるかもしれません。 技術的には、PowerShell の一部の型は、シリアル化された形式から逆シリアル化された形式に適切にキャストできます。そのため、逆シリアル化されていない型をコマンドレットにパラメーターとして渡しても受け取ることができます。 ハッシュテーブルは、そうした型の 1 つです。 モジュール&rsquo;作成者が&rsquo;定義した型を、正しく逆シリアル化できる方法で実装することもできますが、いくつかのトレードオフ <a href="https://blogs.msdn.com/b/powershell/archive/2013/06/11/understanding-powershell-s-type-conversion-magic.aspx">があります</a>。 型は、既定のコンストラクターを持ち、そのすべてのプロパティをパブリックにし、<a href="https://msdn.microsoft.com/en-us/library/system.management.automation.pstypeconverter(v=vs.85).aspx"> PSTypeConverter を持っている必要があります</a>。 ただし、モジュール作成者が&ldquo;&rdquo;所有していない定義済みの型の場合は、それらを修正する方法はありません。そのため、パラメーターの複合型をまとめて回避する必要があります。 <b>Runbook Authoring のヒント: </b>&rsquo;何らかの理由でコマンドレットが複合型パラメーターを受け取る必要がある場合、または複合型パラメーターを必要とする他のユーザーモジュールを使用している場合、Runbook と PowerShell ワークフローの回避策は、複合型を生成するコマンドレットと、複合型を使用するコマンドレットを同じ <a href="https://technet.microsoft.com/en-us/library/jj649082.aspx">InlineScript</a> アクティビティにラップします。 InlineScript では、PowerShell ワークフローではなく、PowerShell としてコンテンツが実行されるため、複合型を生成するコマンドレットでは、逆シリアル化された複合型ではなく、適切な型が生成されます。 &nbsp; 5. <span style="text-decoration: underline;">モジュール内のすべてのコマンドレットをステートレスにする</span> PowerShell ワークフローは、ワークフロー内で呼び出されたすべてのコマンドレットを別のセッションで実行します。 つまり、同じモジュール内の他のコマンドレットによって作成または変更されたセッション状態に依存するコマンドレットは、PowerShell ワークフローまたは Runbook では機能しません。 実行&rsquo;しない操作の例を次に示します。 <img alt="Authoring Integration Modules for Azure Automation" border="0" height="290" src="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/azureautomation-authoring-integration-modules-14.png" style="float: none; padding-top: 0px; padding-left: 0px; margin: 0px auto; padding-right: 0px; border: 0px;" title="「Authoring Integration Modules for Azure Automation (Azure Automation 用の統合モジュールの作成)」" width="480"> &nbsp; ご覧のように、set-GlobalNum Get-GlobalNumTimesTwo設定するセッション変数$globalNumによって異なります。 これはワークフロー&rsquo;では機能しません。$globalNumは常に 0 です。 &rsquo;Get-GlobalNumTimesTwoは、数値をパラメーターとして受け取ってセッションの状態に依存しないか、PowerShell コンテキストで両方のコマンドレットを同じセッションで実行するために、Set-GlobalNum と Get-GlobalNumTimesTwo を同じ <a href="https://technet.microsoft.com/en-us/library/jj649082.aspx">InlineScript</a> アクティビティにラップする必要があります。 &nbsp; 6. <span style="text-decoration: underline;">モジュールは Xcopy 可能パッケージに完全に含まれている必要があります</span> Runbook Azure Automationが必要な場合、これらのモジュールは Automation サンドボックスに配布されます。ため、実行しているホストとは別に動作する必要があります。 つまり、モジュール パッケージを zip 圧縮し、同じまたは新しい PowerShell バージョンを持つ他のホストに移動し、そのホスト PowerShell&rsquo; 環境にインポートするときに通常通り機能する必要があるという意味です。 そのためには、モジュールがモジュール フォルダー (Azure Automation にインポートするときに zip 形式で圧縮されるフォルダー) 以外のファイルや、ホストに固有のレジストリ設定 (製品のインストールによって設定される設定など) に依存しないようにする必要があります。 このベスト プラクティスに従っていない場合、モジュールは、このモジュールでAzure Automation。 &nbsp;</p>


  <h2>まとめ</h2>


  <p>これで、&rsquo;Azure Automation&rsquo; 統合モジュールとは何か、どのように記述したのか、および統合モジュールを自動化で真に役立つものにするためのベスト プラクティスについて、完全に高速化する必要があります。 統合はオーケストレーション戦略の成功の中核であり、すべてのシステムへの統合を構築するために必要Azure Automationすべてが必要になります。 次回まで、常に <strong>落ち着きを保ち、自動化をオンにしてください。</strong> &nbsp; 使用を開始Azure Automation?&nbsp; このサービスについては、こちらを <a href="https://aka.ms/Q2p1ap" target="_blank">確認し</a>、Twitter のAzure Automationに従 <a href="https://twitter.com/AzureAutomation" target="_blank">ってください</a>。 個人的に連絡を取りたい場合は、 ブログで連絡 <a href="https://jodoglevy.com" target="_blank">するか、</a> Twitter でフォロー <a href="https://twitter.com/jodoglevy" target="_blank">してください</a>。</p>
