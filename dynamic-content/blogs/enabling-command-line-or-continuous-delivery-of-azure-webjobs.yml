### YamlMime:Yaml
ms.openlocfilehash: 95bab04d540323836129ce4fb68e7a1fb42ca7a8
ms.sourcegitcommit: d03bdc7fe5447adb6530886aab848b75fe8fa8ee
ms.translationtype: MT
ms.contentlocale: ja-JP
ms.lasthandoff: 03/11/2022
ms.locfileid: "139895114"
Slug: enabling-command-line-or-continuous-delivery-of-azure-webjobs
Title: Azure Web ジョブのコマンドラインまたは継続的な配信の有効化
Summary: コマンド ラインと継続的インテグレーションストーリーから WebJobs の発行ストーリーを改善し、これらのギャップを埋める更新プログラムを作成できる領域がいくつか見つかりました。 この投稿では、この更新プログラムの概要、公式の Visual Studio 更新プログラムの直後にリリースする方法、および Azure WebJob の継続的インテグレーションまたはコマンド ライン発行を有効にする方法について説明します。
Content: >-
  <a href="https://azure.microsoft.com/blog/2014/08/04/announcing-release-of-visual-studio-2013-update-3-and-azure-sdk-2-4/" target="_blank">Visual Studio 2013 Update 3</a> でリリースされた WebJobs 発行ツールを設計するときに、Azure API と管理ライブラリの機能強化に対応して、WebJobs ツールの更新プログラムを迅速にリリースできるという考えで構築しました。 開発者は、継続的インテグレーション ビルドで既に使い慣れた発行機能を使用したいと考え、WebJobs を発行するための新しいツールによって、既存のツールと発行の自動化シナリオのギャップが埋め合わせられている可能性が高いという点がわかっていました。 コマンド ラインと継続的インテグレーションストーリーから WebJobs の発行ストーリーを改善し、これらのギャップを埋める更新プログラムを作成できる領域がいくつか見つかりました。 この投稿では、この更新プログラムの概要、公式の Visual Studio 更新プログラムの直後にリリースする方法、および Azure WebJob の継続的インテグレーションまたはコマンド ライン発行を有効にする方法について説明します。

  <h2>アプリケーションを使用したアジャイル ツールの更新NuGet</h2>

  可能な限り最大限の柔軟性を提供するために、<a href="https://www.nuget.org/packages/Microsoft.Web.WebJobs.Publish" target="_blank">WebJobs</a> 発行ロジックを実際に実行するコードの大部分を含む WebJobs 公開用 NuGet パッケージを公開しました。 次の図は、WebJobs ツールでの発行チェーンの大きなアーキテクチャを示しています。


  <img style="padding-top: 0px;padding-left: 0px;padding-right: 0px;border-width: 0px" title="publish-stack" alt="publish-stack" src="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/publish-stack_thumb.png" width="499" height="256" border="0" />


  Scheduler Job Collections や Websites などの Azure リソースを設定するために必要な API 呼び出しをカプセル化し、API を効果的に使用してそれらのコンポーネントを NuGet パッケージにまとめ、より広範な Visual Studio 更新を必要とせずに API の改善、修正プログラム、リファクタリングなどの状況を実行できます。 上のグラフでは、開発者が、基本的なツール ワークフローへの更新プログラムを提供する決定によって、NuGet。 更新Visual Studioとコマンド ライン プロセスの両方が、更新プログラムのNuGetされます。 NuGet を使用してこれらの機能強化を有効にしているので、コマンド ラインから WebJobs を発行するための絶対最初の手順は、WebJobs 発行 NuGet を 1.0.1 バージョンに更新する方法です。 次NuGetの [パッケージの更新] ダイアログ のスクリーンショットは、パッケージ内で行Visual Studio 2013。 <img style="padding-top: 0px;padding-left: 0px;padding-right: 0px;border-width: 0px" title="nuget-for-updating" alt="nuget-for-updating" src="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/nuget-for-updating_thumb.png" width="604" height="299" border="0" />

  <h2>コマンド ライン発行の機会</h2>

  この記事では、<a href="https://www.nuget.org/packages/Microsoft.Web.WebJobs.Publish/1.0.1" target="_blank">Microsoft WebJobs Publish 1.0.1 NuGet</a> パッケージ リリースで使用できるコマンド ラインの機能強化と、Azure WebJobs のコマンド ラインまたは継続的デリバリーを有効にする方法に重点を置いて説明します。 これは、ほとんどの WebJob 所有者が必要とするコア要件であり、Visual Studio 3 Update 全体でこれを取得しようとしたが、いくつかの改善が必要なことを知っていました。 そのため、Azure WebJob の所有者が繰り返し可能な WebJob 発行ストーリーを設定するためのオプションを提供するために、テストに時間を取り、可能な限り多くの認証シナリオを有効にしました。

  <h3>非相互作用 Azure 認証の有効化</h3>

  上のグラフは、WebJobs ツールが管理ライブラリの上に構築Microsoft Azure<a href="https://www.nuget.org/packages?q=Microsoft.WindowsAzure.Management" target="_blank">示しています</a>。 MAML では、Azure に対する 2 種類のキー認証 (Active Directory トークンと管理証明書) が可能であり、WebJobs ツールでこれらの両方の種類の認証を使用する機能が提供されました。 Visual Studio Active Directory トークンでダイヤルする方法がいくつかあるので、WebJobs を手動で発行するときに認証を行う既定のメカニズムです。 ただし、Visual Studio 内から発行できる場合とコマンド ラインから発行できる場合の主な違いは、以下の認証ウィンドウは、Visual Studio 内から手動で認証する場合、または人間が他のクライアントから認証する場合にのみ非常に役立つという意味です。<em></em>


  <img style="padding-top: 0px;padding-left: 0px;padding-right: 0px;border-width: 0px" title="ログイン (login)" alt="login" src="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/login_thumb.png" width="434" height="439" border="0" />


  マシンまたはビルド サーバーのようなサービスによって実行されるコマンド ライン実行環境では、ログイン ダイアログとの対話は間違いなく最適ではありません。 継続的インテグレーションビルド中にビルド サーバーを Azure に対して認証する方法を顧客に提供する必要がありました。または、Web ジョブの発行を自動化する方法は実現できません。 しかし、WebJob 発行の自動化のストーリーを有効にするための最適なソリューションは、私たちの目の前でした。 独自のテスト環境からいくつかのテクニックを借用しました。 WebJobs ツールを自動化する方法を考える方が、独自の自動化シナリオで自分でテストする方法よりも良い場所です。 しかし、私たちはテストを行っていたので、コマンドライン ストーリーを独立したストーリーとしてテストするために詳細に注意を払う必要はないので、Visual Studio の更新が完了すると、コマンドライン ストーリーの完全なテストと改善に注目しました。

  <h3></h3>

  <h3>WebJobs 発行プロセスを変更して管理証明書で認証する</h3>

  で Active Directory トークンを使用して管理証明書を使用する代わりに、Azure API に対する認証を行います。 ツールの独自のテストでは、管理証明書を使用してビルド サーバーを認証しました。そのため、ci 環境内でビルドされたプロジェクトが Azure に発行され、関連するスケジューラ ジョブが作成され、適切に関連付けられるので、MSBuild プロセスで管理証明書を使用する顧客の能力を高めるのに投資しました。 バージョン 1.0.1 に WebJobs 公開用 NuGet をインストールしたら (上記を参照)、発行する Web アプリケーション Project またはコンソール アプリケーションの properties フォルダーに <strong>webjobs.props</strong> という名前のファイルを追加します。


  <img style="padding-top: 0px;padding-left: 0px;padding-right: 0px;border-width: 0px" title="webjobs-props" alt="webjobs-props" src="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/webjobs-props_thumb.png" width="600" height="376" border="0" />


  このファイル内には、管理証明書を使用して認証された WebJobs 発行プロセスを推進するための 3 つのオプションがあります。

  <h3>新しい Azure 発行ファイルを設定する</h3>

  管理証明書を使用して Azure に対して認証する最も簡単な方法は、Azure 発行設定ファイルに格納されている情報を使用することです。 これを行う最も簡単な方法は、Azure PowerShell コマンドレットをインストールし、<strong>Get-AzurePublishSettingsFile コマンドを実行する方法です</strong>。 これにより、Azure 発行設定のダウンロード <a href="https://manage.windowsazure.com/publishsettings" target="_blank">URL に移動します</a>。


  <img style="padding-top: 0px;padding-left: 0px;padding-right: 0px;border-width: 0px" title="get-publish-settings-file" alt="get-publish-settings-file" src="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/get-publish-settings-file_thumb.png" width="600" height="130" border="0" />

  <h3>Webjobs.props ファイルの編集</h3>

  1 つ目のオプションは、管理証明書の Base64 でエンコードされた文字列値を手動で入力する方法です。 管理証明書のエンコードされた形式は、*.publishsettings ファイルから webjobs.props ファイルに直接コピーできます。 証明書の値と Azure サブスクリプション ID が存在すると、WebJobs 発行プロセスは管理証明書を使用して認証する必要があります。また、[有効期限が切れているか存在しない] AAD トークンを使用して認証する既定のツール パスを試みない必要があります。


  <img style="padding-top: 0px;padding-left: 0px;padding-right: 0px;border-width: 0px" title="auth-option-1" alt="auth-option-1" src="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/auth-option-1_thumb.png" width="604" height="223" border="0" />


  WebJobs 発行プロセスに認証情報を提供する 2 番目のオプションは、webjobs.props ファイル内の *.publishsettings ファイル自体を使用することです。 これにより、Azure API MSBuild認証に使用する認証情報の発行設定ファイルにアクセスできます。 <strong>注: </strong>次のスクリーン ショットは、すべてのオプションを示しています。機能するには、両方ではなく 1 つしか必要ではありません。


  <img style="padding-top: 0px;padding-left: 0px;padding-right: 0px;border-width: 0px" title="auth-option-2" alt="auth-option-2" src="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/auth-option-2_thumb.png" width="604" height="264" border="0" />


  3 つ目のオプションは、発行プロセスを PFX ファイルに送る方法です。PFX ファイルは、以前に Azure にアップロードされた CER ファイルとペアになります。 ビルド サーバーのユーザーが使用できるよう PFX ファイルを設定するか、証明書のパスワードを webjobs.props ファイルに直接入力できます。


  <img style="padding-top: 0px;padding-left: 0px;padding-right: 0px;border-width: 0px" title="auth-option-3" alt="auth-option-3" src="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/auth-option-3_thumb.png" width="604" height="296" border="0" />


  webjobs.props ファイルにビルドを認証するメソッドが少なくとも 1 つある場合は、コマンド ラインから実行できます。

  <h3>コマンド ラインからの Web ジョブの発行</h3>

  環境を反映するように webjobs.props ファイルを構成したら、次のようなコマンドライン MSBuild スクリプトを実行して、アプリケーションをビルドし、Web ジョブと共にデプロイできます。 発行プロセスにスケジュールを含む Web ジョブが含まれる場合は、WebJobs をスケジュールするように Azure Scheduler ジョブも作成されます。 次のコードは、ビルドと発行を実行するために、Visual Studio 2013 開発者コマンド プロンプトインスタンスにコピーして貼り付けるコードです。

  <pre class="prettyprint">msbuild WebJobDemo.Web.csproj /p:DeployOnBuild=true /p:PublishProfile=WebJobDemo /p:VisualStudioVersion=12.0 /p:Password=asdfasdf</pre>

  ビルドが完了すると、出力MSBuild、Web 発行が完了し、Scheduler ジョブ コレクションとジョブが作成され、Web ジョブがスケジュールされたと示されます。


  <img style="padding-top: 0px;padding-left: 0px;padding-right: 0px;border-width: 0px" title="build-process" alt="build-process" src="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/build-process_thumb.png" width="604" height="544" border="0" />


  矢印は、スケジュールされた Web ジョブを作成するエンド エンド プロセスの主要な手順の一部を強調表示しています。

  <h2>概要とロードマップ</h2>

  現在<a href="https://www.nuget.org/packages/Microsoft.Web.WebJobs.Publish/1.0.1" target="_blank">WebJobs 公開用 NuGet 1.0.1</a> 更新プログラムを使用できます。これは、コマンド ライン シナリオを有効にする必要がある唯一のものです。そのため、今すぐパッケージを更新し、利点を得る必要があります。 Azure API が進化し、ミドルウェアとコマンド ライン エクスペリエンスが Azure 管理ライブラリなどのリソースを共有し続けるにつれて、反復可能な自動化の機会が増えます。 認証されていない認証を提供し、新しいリソース管理 API の一部AADサポートするなど、他の機会を調査しています。 これらの進化に伴い、 <a href="https://azure.microsoft.com/blog" target="_blank">Azure</a> および <a href="https://blogs.msdn.com/b/webdev/" target="_blank">Web 開発</a> とツールのブログでコミュニティを更新します。そのため、改善点を確認してください (アイデアやフィードバックがある場合は、お知らせください)。
