### YamlMime:Yaml
ms.openlocfilehash: 5dafcadcdc1d5edb4177a75eff01266d23f617aa
ms.sourcegitcommit: d03bdc7fe5447adb6530886aab848b75fe8fa8ee
ms.translationtype: MT
ms.contentlocale: ja-JP
ms.lasthandoff: 03/11/2022
ms.locfileid: "139894609"
Slug: advancing-resilience-through-chaos-engineering-and-fault-injection
Title: カオス エンジニアリングとフォールト挿入による回復性の向上
Summary: この投稿は、Microsoft が独自のシステムを検証する方法の例など、一般的な障害状態を検証する最善の方法について考え得る目的で設計されています。
Content: >-
  <p>&ldquo;昨年 7 月の投稿でこの<a href="https://azure.microsoft.com/en-us/blog/tag/advancing-reliability/" target="_blank"></a>信頼性の向上に関するブログ <a href="https://azure.microsoft.com/en-us/blog/advancing-microsoft-azure-reliability/" target="_blank"></a>シリーズを初めて開始した際に、信頼できるクラウド サービスのセットを提供するコミットメントの一環として、プラットフォームの可用性を向上させるいくつかの取り組みを強調しました。 私が言及した領域&rsquo;の 1 つは、障害が発生した場合にシステムが設計された方法で実行される検証をますます行う障害の挿入です。 &rsquo;今日、Ive は、この分野のプリンシパル プログラム マネージャーである <strong>Chris Ashton</strong>&lsquo;&rsquo; に、これらの広範な混乱エンジニアリングの概念について少し明らかにし、アプリケーションとサービスの回復性を向上させるために、これらを既に適用している方法の Azure&rsquo;&rdquo; の例を、ストレス テストと合成ワークロードと共に概説するように求めました。 - Mark Russin ashh、CTO、Azure</p>


  <hr>

  <p>&nbsp;</p>


  <p>大規模な分散アプリケーションの開発は簡単ではありませんでしたが、キャッチがあります。 はい。パブリック クラウドのおかげでインフラストラクチャが数分で提供されます。選択できる言語オプションが多数あり、利用できるオープン ソース コードが多数あり、マーケットプレースのコンポーネントとサービスを活用して構築できます。 はい。 <a href="https://docs.microsoft.com/en-us/azure/architecture/framework/" target="_blank">Azure Well-Architected Framework</a> や Azure アーキテクチャ センター の他のリソースなど、ソリューションのアーキテクチャと設計に関する優れた <a href="https://docs.microsoft.com/en-us/Azure/architecture/" target="_blank">リファレンス ガイド</a>があります。 ただし、アプリケーションの開発は簡単ですが&rsquo;、依存関係の中断による影響のリスクも増加します。 ただし、まれに、制御できない停止がいつでも発生したり、依存関係にインシデントが発生したり、主要なサービスやシステムの対応が遅くなる可能性があります。 ある領域で軽微な中断が拡大したり、別の領域で長い間副作用が発生したりする可能性があります。 これらのサービスの中断は、開発者の生産性を低下させ、顧客の信頼に悪影響を及ぼし、ビジネスの失業を引き起こす可能性があります。また、組織の結果にも&rsquo;影響を与える可能性があります。</p>


  <p>最新のアプリケーションと、その構築に使用されるクラウド プラットフォームは、障害に対して設計され、継続的に検証される必要があります。 開発者は、既知および不明な障害状態を考慮する必要があります。アプリケーションとサービスは冗長性のために設計する必要があります。アルゴリズムには再試行とバックオフのメカニズムが必要です。 システムは、まれに発生するが、必然的な生産停止や中断によって引き起こされたシナリオと条件に対して回復力を持つ必要があります。 この投稿は、Microsoft が独自のシステムを検証する方法の例など、一般的な障害状態を検証する最善の方法について考え得る目的で設計されています。</p>


  <h2>回復力</h2>


  <p>回復性とは、 に対して&mdash;&mdash;システムが正常に失敗し、最終的にイベントから復旧する機能です。 アプリケーション、サービス、またはプラットフォームの回復性を検証することが、障害に備える構築と同じように重要です。 個々のコンポーネントの信頼性を分離して検証し、システム全体が同じ信頼性を持つと考えるのは簡単で魅力的ですが、それは間違っている可能性があります。 回復性は、コンポーネントではなく、システム全体のプロパティです。 システムが本当に回復力を持っているのか理解するには、システムが実行される環境内のシステム全体の回復性を測定して理解する必要があります。 しかし、これを行う方法と開始する場所は何ですか?</p>


  <h2>混乱エンジニアリングと障害の挿入</h2>


  <p>混乱エンジニアリングは、実稼働環境で発生する現実世界の障害と依存関係の中断にシステムを与える方法です。 フォールト インジェクションは、その堅牢性とエラー処理を検証するために、システムに障害を意図的に導入する方法です。</p>


  <p>一般 &ndash; に、障害挿入を使用し、カオス エンジニアリング プラクティスを適用すると、アーキテクトは設計に対する信頼を築き、開発者はアプリケーションの回復性を測定、理解、改善できます。 同様に、サイト信頼性エンジニア (SREs) と、実際には、この領域でより広範なチームの責任を持つすべてのユーザーは、サービス レベルの目標がターゲット内に入り、実稼働環境でのシステムの正常性を監視できます。 同様に、運用チームは、顧客が使用するために展開する前に、新しいハードウェアとデータセンターを検証できます。 リリース検証に混乱の手法を組み込むと、管理を含め、組織が構築しているシステムに対する信頼度がすべてのユーザーに与えます。</p>


  <p>開発プロセス全体を通して、既に行っている場合は、早い段階でテストを行い、頻繁にテストします。 アプリケーションまたはサービスを運用に持ち込む準備をする場合は、単体テスト、機能テスト、ストレス テスト、統合テストを追加して実行することで、通常のテストプラクティスに従ってください。 意味がある場合は、エラー ケースのテスト カバレッジを追加し、エラー挿入を使用してエラー処理とアルゴリズムの動作を確認します。 さらに大きな影響を与え、混乱エンジニアリングが実際に機能する場所として、障害挿入を使用してエンドツーエンドのワークロード (ストレス テスト、パフォーマンス ベンチマーク、合成ワークロードなど) を強化します。 実稼働環境で実験を実行する前に、実稼働前のテスト環境から開始し、合成ワークロードを使用して安全な環境でソリューションがどのように動作するのかを理解してから、実際の顧客トラフィックに潜在的な影響を与えます。</p>


  <p>検証プロセスでのエラー挿入の正常な使用には、次の 1 つ以上が含まれる場合があります。</p>


  <ul>
      <li><strong>テスト環境での新機能のアドホック検証:</strong><br>
  開発者は、テスト仮想マシン (VM) を立ち上げ、分離して新しいコードを実行できます。 既存の機能テストまたはストレス テストの実行中に、障害を挿入してリモート依存関係 (SQL Server など) へのネットワーク アクセスをブロックし、新しいコードでシナリオが正しく処理されていることを証明できます。</li>
      <li><strong>デプロイゲートや回復性ゲートを含む、CI/CD パイプラインでの自動フォールト インジェクション カバレッジ:</strong><br>
  既存のエンドツーエンド シナリオ テスト (統合テストやストレス テストなど) は、フォールト インジェクションを使用して拡張できます。 通常の実行後に新しいステップを挿入するだけで、実行を続けるか、一部のエラーが適用された状態で再度実行されます。 障害を追加すると、通常はテストで見つからない問題や、最終的に見つかる可能性のある問題の検出を加速する問題を見つける可能性があります。</li>
      <li><strong>インシデント修正の検証とインシデント回帰テスト:</strong><br>
  障害の挿入は、ワークロードまたは手動実行と組み合わせて使用して、インシデントの原因と同じ条件を誘発し、インシデント シナリオの特定のインシデント修正または回帰テストの検証を可能にできます。</li>
      <li><strong>BCDR は、実稼働前環境でドリルします。</strong><br>
  データベースのフェールオーバーまたはストレージのオフラインを引き起こす障害は、BCDR 訓練で使用して、これらの障害が発生した場合にシステムが適切に動作し、フェールオーバー テスト中にデータが失われない状態を検証できます。</li>
      <li><strong>実稼働日:</strong><br>
  ゲーム &lsquo;の日は&rsquo; 、システムでイベントが正しく処理されていることを検証するために、停止またはインシデントの調整されたシミュレーションです。 これには通常、監視システムの検証と、インシデント中に発生する人間のプロセスが含まれます。 Teamsを実行するユーザーは、フォールト インジェクション ツールを利用して、制御された方法で架空のシナリオを表す障害を調整できます。</li>

  </ul>


  <h2>一般的なリリース パイプライン</h2>


  <p>この図は、一般的なリリース パイプラインと、障害挿入を含める機会を示しています。</p>


  <p><a href="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/ff02832d-0324-4078-832d-4d72f5d25263.png"><img alt="release pipeline chaos opportunities" border="0" height="285" src="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/2287a5aa-df08-4221-9552-df191a7b542c.png" style="border: 0px currentcolor; border-image: none; margin-right: auto; margin-left: auto; display: block; background-image: none;" title="" width="1024"></a></p>


  <p>&nbsp;</p>


  <p>障害の挿入に対する投資は、いくつかの基礎コンポーネントを基に構築された場合に、より成功します。</p>


  <ul>
      <li>調整されたデプロイ パイプライン。</li>
      <li>ARM の自動デプロイ。</li>
      <li>合成ランナーと合成エンドツーエンドのワークロード。</li>
      <li>監視、アラート、および有効なダッシュボード。</li>
  </ul>


  <p>これらの機能を導入 &ndash; することで、障害の挿入をデプロイ プロセスに統合して、オーバーヘッドをほとんどまたは全く追加する必要がなくなります。また、コード フローを実稼働中にゲートするために使用できます。</p>


  <p>過去のインシデントの根本原因分析では、ローカライズされたラックの停電と機器の故障が単一障害点として見つかりました。 ラーニング影響を受け、回復性が高くはないサービスの場合、実稼働環境で発生するこれらのイベントの 1 つは、オンコール エンジニアの時間のかかる、つらくてコストのかかるプロセスです。 障害挿入を使用して、制御された環境と期間におけるリリース パイプライン全体でこれらの障害に対する回復性を検証する機会がいくつかあります。これにより、コード作成者が明らかにした問題の調査をリードする機会も増えます。 &ndash;コードの変更や新しいコードを持つ開発者は、テスト環境を作成し、コードをデプロイし、機能テストとツールを使用してアドホック実験を実行できます。これは、VM の削除、サービスへのアクセスのブロック、単なるアクセス許可の変更など、依存関係のオフライン取得をシミュレートする障害を含むです。 ステージング環境では、同様の障害の挿入を、自動化されたエンドツーエンドおよび統合テストまたは他の合成ワークロードに追加できます。 テスト結果とテレメトリを使用して障害の影響を特定し、ベースライン パフォーマンスと比較して、必要に応じてコード フローをブロックできます。</p>


  <p>実稼働前または&lsquo;&rsquo;カナリア環境では、自動化されたランナーを、依存関係へのアクセスを再度ブロックしたりオフラインにしたりする障害で使用できます。 その後&mdash;、監視、アラート、および生き物ダッシュボードを使用して、停止が観察されただけでなく、システムが回復性を実証した問題に対して対応して補正されたと検証できます。 この同じ環境では、SE または運用チームがビジネス継続性/ディザスター リカバリー (BCDR) 訓練を実行し、障害挿入を使用してストレージまたはデータベースをオフラインにし、システム メトリックを再び監視して回復性とデータの整合性を検証することもできます。 これらの同じカナリア アクティビティは、実際の顧客トラフィックがある実稼働環境でも実行できますが、そうすることで顧客に影響を与える可能性が高くなります。そのため、パイプラインの早い方で障害挿入を利用した後にのみこれを行うのが推奨されます。 これらのプラクティスを確立し、デプロイ パイプラインにフォールト インジェクションを組み込むことで、体系的で制御された回復性検証が可能になります。これにより、チームはエンド カスタマーに影響を与えることなく、問題を軽減し、アプリケーションの信頼性を向上できます。</p>


  <h2>Microsoft でのフォールト インジェクション</h2>


  <p>Microsoft では、一部のチームは、検証パイプラインと自動テスト パスの早い段階でフォールト インジェクションを組み込む場合があります。 さまざまなチームが、通常通り自動検証ゲートでストレス テスト、パフォーマンス ベンチマーク、または合成ワークロードを実行し、ベースラインが確立されます。 その後、ワークロードが再度実行されます &ndash; 。今回は、CPU 負荷、ディスク IO ジッター、ネットワーク待機時間などの障害が適用されます。 ワークロードの結果が監視され、テレメトリがスキャンされ、クラッシュ ダンプがチェックされ、サービス レベル インジケーター (SLA) がサービス レベル目標 (SLA) と比較され、影響が測定されます。 結果が失敗と見なされた場合、コードはパイプラインの次のステージに流れない可能性があります。</p>


  <p>他の Microsoft チームは、通常のビジネス継続性、ディザスター リカバリー (BCDR) 訓練、および Game Days でフォールト インジェクションを使用します。 一部のチームは、毎月、四半期、または半年に 1 回の BCDR 訓練を行い、障害の挿入を使用して障害を誘発し、復旧プロセスとアラート、監視、ライブ サイト プロセスの両方を検証します。 多くの場合、これは実稼働前のカナリア環境で行われ、実際の顧客トラフィックで実稼働環境自体で使用されます。 一部のチームでは、過去のインシデントのレプリケーションなどの架空のシナリオを考え出し、障害の挿入を使用して調整を支援する Game Days も実行します。 この場合、&mdash;障害は、VM のクラッシュ、ネットワーク アクセスのオフ、データベースのフェールオーバーの原因、データセンター全体のオフラインのシミュレーションなど、より破壊的である可能性があります。 ここでも、通常のライブ サイトの監視とアラートが使用されます。そのため、DevOpsとインシデント管理プロセスも検証されます。 すべての関係者に対して優しくするために、通常、これらのアクティビティは営業時間中に実行され、夜間や週末には実行されません。</p>


  <p>また、運用チームは、お客様が使用するためにデプロイされる前に、障害挿入を使用して新しいハードウェアを検証します。 ラックまたはデータセンターに電源が遮断された場所で訓練が実行されます。そのため、監視システムとバックアップ システムを監視して、想定どおりに動作することを確認できます。</p>


  <p>Microsoft では、カオス エンジニアリングの原則とフォールト インジェクション手法を使用して、出荷する製品の回復性と信頼度を向上しています。 これらは、お客様に提供するアプリケーションと、開発者が利用できるサービスを検証するために使用されます。 これらは、デプロイ前に新しいハードウェアをテストするために、基になる Azure プラットフォーム自体を検証するために使用されます。 これらを個別にまとめて、Azure プラットフォームの全体的な信頼性と、サービス&mdash;の品質の向上に寄与します。</p>


  <h2>意図しない結果</h2>


  <p>障害の挿入は強力なツールであり、慎重に使用する必要があります。 テスト環境または実稼働前環境で発生した障害が、実稼働環境にも影響を与えなけるために、セーフガードを実施する必要があります。 他のコンポーネントやエンド カスタマーへの影響を最小限に抑えるために、障害シナリオの爆発半径を含む必要があります。 悪意のある意図を持つハッカーによる事故を防ぎ、潜在的な使用を防ぐために、障害を挿入する機能はアクセスを制限する必要があります。 障害挿入は実稼働環境で使用できますが、計画は慎重に行い、最初に実稼働前にテストし、爆発半径を制限し、必要に応じて実験を突然終了できるようフェールセーフを備えています。 <a href="https://www.history.com/news/chernobyl-disaster-timeline" target="_blank">1986 年の Chernobyl</a> の事故は、障害挿入訓練が間違ったという地味な例です。 システムが意図しない結果から離れないように注意してください。</p>


  <h2>サービスとしての混乱</h2>


  <p>この前のブログ記事で説明したように、<a href="https://azure.microsoft.com/en-us/blog/advancing-microsoft-azure-reliability/" target="_blank"></a>私たちの目標は、お客様とパートナーが独自のアプリケーションとサービスで同じ検証を実行できるよう、ネイティブフォールト インジェクション サービスを利用できるよう設定します。 これは、クラウド サービスの信頼性を向上し、まれに発生するが避けられない中断の影響を軽減する可能性が非常に高い、非常に優れた空間です。 多くのチームがこの分野で興味深いことを行ってきまし &rsquo; た。また、このようなさまざまなツールと障害をすべてまとめて、社内開発者が azure サービスを構築する際に、Microsoft Teams Microsoft 365 のような azure サービスを構築しやすく &mdash; することをお勧めします。そして、そして Dynamics は、お客様とパートナーが同じツールを使用して、独自のアプリケーションとソリューションに対して、同じツールを使用して、お客様独自のアプリケーションとソリューションを活用し、最終的に復元力を向上させることができます。</p>
