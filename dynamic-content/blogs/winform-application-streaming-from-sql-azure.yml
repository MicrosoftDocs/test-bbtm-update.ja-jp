### YamlMime:Yaml
ms.openlocfilehash: 4eff16a4b0171a39ccc4a7fb15a2f7e7e7fa753b
ms.sourcegitcommit: d03bdc7fe5447adb6530886aab848b75fe8fa8ee
ms.translationtype: MT
ms.contentlocale: ja-JP
ms.lasthandoff: 03/11/2022
ms.locfileid: "139888876"
Slug: winform-application-streaming-from-sql-azure
Title: WinForm Application Streaming from SQL Azure
Summary: '[この記事は、チームによってSQL Azureされました。]このブログ記事では、サンプルの WinForm アプリケーションのコードを示しています。このアプリケーションでは、画像を SQL Azure PictureBox コントロールにストリーミングします。 目標は...'
Content: '<p>[この記事は、チームによってSQL Azureされました。]</p><p>このブログ記事では、サンプルの WinForm アプリケーションのコードを示しています。このアプリケーションでは、画像を SQL Azure PictureBox コントロールにストリーミングします。 この目標は、SQL Azure の <b>varbinary(max)</b> 列から WinForm アプリケーション (この場合はイメージ) に大きな BLOB データをストリーム配信する方法を示することです。 ストリーミング データの便利な機能の 1 つは、プロセス バー コントロールを更新して、すべてのデータのダウンロードにかかる時間をユーザーに示す方法です。 このブログ記事は、SqlStream クラスを紹介するこのブログ投稿 <b>の拡張機能</b> です。</p>  <p><a href=""><img style="border-right-width: 0px; display: inline; border-top-width: 0px; border-bottom-width: 0px; border-left-width: 0px" title="clip_image002" border="0" alt="clip_image002" src="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/2021.clip_5F00_image002_5F00_thumb_5F00_1AAC27B4.jpg" width="358" height="333"></a></p>  <p>このコード サンプルの目標:</p>  <ul>   <li>WinForm アプリケーションからアプリケーションを呼び出SQL Azureコード例を示します。 </li>    <li>応答を PictureBox コントロールにストリーム配信します。 </li>    <li>ダウンロードが行う際に進行状況バー コントロールを更新します。 </li>    <li>ログインとパスワードの入力を求める。このブログ記事で説明するように、SQL Azureに接続するベスト プラクティスです。 </li> </ul>  <h2>Adventure Works ビューアー</h2>  <p>サンプル アプリケーションは、Adventure Works for SQL Azure データベースの SalesLT.Products テーブルのサムネイル画像を表示します。 このデータベースは、ここからダウンロード <a href="https://msftdbprodsamples.codeplex.com/releases/view/37304">できます</a>。 アプリケーションが起動すると、ユーザーは、データベースに対するログインとパスワードSQL Azureされます。 次に、画像を含むデータベースのすべての製品名をドロップダウン リストに入力します。 ユーザーがダウンロード ボタンをクリックすると、アプリケーションはデータベースに対してクエリを実行してイメージのサイズを決定します。進行状況バーを正確に構成するには、サイズが必要です。 その後、イメージがストリーム配信されSQL Azure表示されます。 ダウンロード中に、イメージのダウンロード速度とサイズをユーザーに示すステータス バーが更新されます。</p>  <h5>ドロップダウン リストの入力</h5>  <p>次のコードは、ドロップダウン リストに製品名を入力します</p>  <pre class="csharpcode">private <span class="kwrd">Dictionary</span>&lt;Int32, Int32&gt; ProductId = <span class="kwrd">new</span> <span class="kwrd">Dictionary</span>&lt;<span class="kwrd">int</span>, <span class="kwrd">int</span>&gt;();<br><br>private void FillDropDownList()<br>{<br>    productComboBox.Items.Clear();<br><br>    <span class="kwrd">using</span> (SqlConnection sqlConnection =<br>        <span class="kwrd">new</span> SqlConnection(ConnectionString))<br>    {<br>        sqlConnection.<span class="kwrd">Open</span>();<br>        String <span class="kwrd">sql</span> = &quot;<span class="kwrd">SELECT</span> [ProductId], [Name] <span class="kwrd">FROM</span>&quot; +<br>            &quot;[SalesLT].[Product] <span class="kwrd">WHERE</span> <span class="kwrd">NOT</span> [ThumbNailPhoto] <span class="kwrd">IS</span> <span class="kwrd">NULL</span>&quot;;<br>        <span class="kwrd">using</span> (SqlCommand sqlCommand = <span class="kwrd">new</span> SqlCommand(<span class="kwrd">sql</span>, sqlConnection))<br>        {<br>            <span class="kwrd">using</span> (SqlDataReader sqlDataReader = sqlCommand.ExecuteReader())<br>            {<br>                <span class="kwrd">while</span> (sqlDataReader.<span class="kwrd">Read</span>())<br>                {<br>                    Int32 <span class="kwrd">index</span> = productComboBox.Items.<span class="kwrd">Add</span>(<br>                        (String)sqlDataReader[&quot;Name&quot;]);<br>                    ProductId[<span class="kwrd">index</span>] = (Int32)sqlDataReader[&quot;ProductId&quot;];<br>                }<br>            }<br>        }<br>    }<br><br>    <span class="kwrd">if</span> (productComboBox.Items.<span class="kwrd">Count</span> &gt; 0)<br>        productComboBox.SelectedIndex = 0;<br>}<br><br>private void Form1_Load(<span class="kwrd">object</span> sender, EventArgs e)<br>{<br>    FillDropDownList();<br>}</pre>    <p>    <h5>ユーザーに資格情報の入力を求める</h5>    <p>接続文字列プロパティは、ユーザーにログインとパスワードの入力を求め、プライベート プロパティに格納し、SqlConnection コンストラクターで使用される <b>接続文字列を構築</b> します。</p>    <pre class="csharpcode">String Server { get; set; }<br>String Login { get; set; }<br>String Password { get; set; }<br><br>String ConnectionString<br>{<br>    get<br>    {<br>        <span class="kwrd">if</span> (String.IsNullOrEmpty(Login))<br>        {<br>            LoginDialog loginDialog = <span class="kwrd">new</span> LoginDialog();<br>            <span class="kwrd">switch</span> (loginDialog.ShowDialog())<br>            {<br>                <span class="kwrd">case</span> DialogResult.OK:<br>                    Login = loginDialog.Login;<br>                    Password = loginDialog.Password;<br>                    <span class="kwrd">break</span>;<br>                <span class="kwrd">default</span>:<br>                    <span class="kwrd">throw</span> (<span class="kwrd">new</span> OperationCanceledException());<br>            }<br>        }<br><br>        <span class="kwrd">return</span> (<br>            String.Format(<br>            <span class="str">&quot;Server=tcp:{0}.database.windows.net;&quot;</span> +<br>            <span class="str">&quot;Database=AdventureWorksLTAZ2008R2;&quot;</span> +<br>            <span class="str">&quot;User ID={1}@{0};Password={2};&quot;</span> +<br>            <span class="str">&quot;Trusted_Connection=False;Encrypt=True;&quot;</span>,<br>            Server, Login, Password));<br>    }<br>}</pre>    <p>    <h2>イメージのストリーミング</h2>    <p>ボタン クリック イベントが発生すると、コードは SqlStream クラスを使用して、メモリから <b>MemoryStream</b> にイメージSQL Azure<b>ストリームします</b>。 このメモリ ストリームは、ピクチャ ボックス コントロールの Image プロパティに割り当てられる <b>Bitmap</b> クラスのインスタンスを作成するために使用されます。</p>    <pre class="csharpcode"><span class="kwrd">private</span> <span class="kwrd">void</span> button1_Click(<span class="kwrd">object</span> sender, EventArgs e)<br>{<br>    button1.Enabled = <span class="kwrd">false</span>;<br>    Cursor.Current = Cursors.WaitCursor;<br>    progressBar1.Value = 0;<br><br>    <span class="kwrd">using</span> (SqlConnection sqlConnection =<br>        <span class="kwrd">new</span> SqlConnection(ConnectionString))<br>    {<br>        sqlConnection.Open();<br><br>        <span class="rem">// WWB: Convert the Selected Index To a Product Id</span><br>        Int32 productId = ProductId[productComboBox.SelectedIndex];<br><br>        <span class="rem">// WWB: The Length Can Be Great Than Int32.MaxValue</span><br>        Int64 length = FetchLength(sqlConnection, productId);<br>        Int32 scale = 1;<br><br>        <span class="rem">// WWB: If the Length Is Greater Than Int32.MaxValue</span><br>        <span class="rem">// Scale it down to fit within Int32.MaxValue, Since</span><br>        <span class="rem">// the Progress Bar supports Int32</span><br>        <span class="kwrd">while</span> (length &gt; Int32.MaxValue)<br>        {<br>            <span class="rem">// WWB: Track the Scale, We Will Need</span><br>            <span class="rem">// It To Increment the Progress Bar</span><br>            scale = scale * 2;<br>            length = length / 2;<br>        }<br><br>        <span class="rem">// Set the Maximum Length of the Progres Bar</span><br>        progressBar1.Maximum = (Int32)length;<br>        <br>        <span class="kwrd">using</span> (SqlStream sqlStream = <span class="kwrd">new</span> SqlStream(<br>            sqlConnection, <span class="str">&quot;SalesLT&quot;</span>, <span class="str">&quot;Product&quot;</span>,<br>            <span class="str">&quot;ThumbNailPhoto&quot;</span>, <span class="str">&quot;ProductID&quot;</span>, <br>            SqlDbType.Int, productId))<br>        {<br>            Byte[] buffer = <span class="kwrd">new</span> Byte[8192];<br>            Int32 read = 0;<br><br>            <span class="kwrd">using</span> (BinaryReader binaryReader =<br>                            <span class="kwrd">new</span> BinaryReader(sqlStream))<br>            {<br>                <span class="kwrd">using</span> (MemoryStream memoryStream = <span class="kwrd">new</span> MemoryStream())<br>                {<br>                    <span class="kwrd">using</span> (BinaryWriter binaryWriter<br>                        = <span class="kwrd">new</span> BinaryWriter(memoryStream))<br>                    {<br>                        <span class="kwrd">do</span><br>                        {<br>                            <span class="rem">// WWB: Read From SQL Azure</span><br>                            read = binaryReader.Read(buffer, 0, 8192);<br>                            <span class="rem">// WWB: Write To the Memory Stream</span><br>                            binaryWriter.Write(buffer, 0, read);<br>                            <span class="rem">// WWB: Increment the Progress Bar</span><br>                            progressBar1.Increment(read / scale);<br>                        } <span class="kwrd">while</span> (read &gt; 0);<br><br>                        <span class="rem">// WWB: Reset the Memory Stream</span><br>                        memoryStream.Position = 0;<br><br>                        <span class="rem">// WWB: Load the Memory Stream Into The Image</span><br>                        Bitmap bitmap = <span class="kwrd">new</span> Bitmap(memoryStream);<br><br>                        <span class="rem">// WWB: Assign the BitMap to the Picture Box</span><br>                        pictureBox1.Image = bitmap;<br>                    }<br><br>                }<br>            }<br>        }<br>    }<br><br>    Cursor.Current = Cursors.Default;<br>    button1.Enabled = <span class="kwrd">true</span>;<br>}</pre>    <p>    <p>プロジェクト ファイルを含む、以下の完全なコード サンプルをダウンロードできます。</p>    <h2>まとめ</h2>    <p>質問、懸念事項、コメントはありますか? 以下に投稿すると、対処を試みることができます。</p>'
