### YamlMime:Yaml
ms.openlocfilehash: 3d21bab894930086784774c6c802c679c842b4a7
ms.sourcegitcommit: d03bdc7fe5447adb6530886aab848b75fe8fa8ee
ms.translationtype: MT
ms.contentlocale: ja-JP
ms.lasthandoff: 03/11/2022
ms.locfileid: "139891548"
Slug: java-manage-azure-container-service-aks-and-more
Title: 'Java: Azure Container Service (AKS) の管理など'
Summary: 'Azure Management Libraries for Java の 1.4 をリリースしました。 このリリースでは、Azure Container Service (AKS) のサポートが追加されています。 '
Content: >-
  <p>Azure Management Libraries for Java の 1.4 をリリースしました。 このリリースでは、Azure Container Service <a href="https://docs.microsoft.com/en-us/azure/aks/">(AKS) のサポートが</a> 追加されています。</p>


  <h3><a href="https://github.com/azure/azure-libraries-for-java" title="https://github.com/azure/azure-libraries-for-java">https://github.com/azure/azure-libraries-for-java</a></h3>


  <h2>作業の開始</h2>


  <p>1.4 バージョンのライブラリを使用POM ファイル次の依存関係フラグメントを Maven ファイルに追加します。</p>


  <pre class="prettyprint">

  &lt;dependency&gt;
      &lt;groupId&gt;com.microsoft.azure&lt;/groupId&gt;
      &lt;artifactId&gt;azure&lt;/artifactId&gt;
      &lt;version&gt;1.4.0&lt;/version&gt;
  &lt;/dependency&gt;

  </pre>


  <h2>Azure Container Service (AKS) で Kubernetes クラスターを作成する</h2>


  <p><em>define() create() &hellip;</em> メソッド チェーンを使用して、Kubernetes クラスターを作成できます。</p>


  <pre class="prettyprint">

  KubernetesCluster kubernetesCluster = azure.kubernetesClusters().define(aksName)
      .withRegion(region)
      .withNewResourceGroup(rgName)
      .withLatestVersion()
      .withRootUsername(rootUserName)
      .withSshKey(sshKeys.getSshPublicKey())
      .withServicePrincipalClientId(servicePrincipalClientId)
      .withServicePrincipalSecret(servicePrincipalSecret)
      .defineAgentPool(&quot;agentpool&quot;)
          .withVirtualMachineCount(1)
          .withVirtualMachineSize(ContainerServiceVMSizeTypes.STANDARD_D1_V2)
          .attach()
      .withDnsPrefix(&quot;dns-&quot; + aksName)
      .create();
  </pre>


  <p>コミュニティで開発された Kubernetes クライアント ライブラリを使用して <a href="https://github.com/fabric8io/kubernetes-client">、Kubernetes クライアントをインスタンス化できます</a>。</p>


  <pre class="prettyprint">

  ernetesClient kubernetesClient = new DefaultKubernetesClient(config);</pre>


  <h2>Kubernetes クラスター Container Registryからデプロイする</h2>


  <p>Azure Container Registry から Kubernetes クラスターにイメージをデプロイするには、同じコミュニティで開発された <a href="https://github.com/fabric8io/kubernetes-client">Kubernetes</a> クライアント ライブラリと、Container Registry に関連付けられているイメージ プル シークレットを使用します。</p>


  <pre class="prettyprint">

  ReplicationController rc = new ReplicationControllerBuilder()
      .withNewMetadata()
          .withName(&quot;acrsample-rc&quot;)
          .withNamespace(aksNamespace)
          .addToLabels(&quot;acrsample-nginx&quot;, &quot;nginx&quot;)
          .endMetadata()
      .withNewSpec()
          .withReplicas(2)
          .withNewTemplate()
               .withNewMetadata()
                    .addToLabels(&quot;acrsample-nginx&quot;, &quot;nginx&quot;)
                     .endMetadata()
               .withNewSpec()
                    .addNewImagePullSecret(aksSecretName)
                    .addNewContainer()
                          .withName(&quot;acrsample-pod-nginx&quot;)
                        .withImage(&quot;acrdemo.azurecr.io/samples/acrsample-nginx&quot;)
                        .addNewPort()
                            .withContainerPort(80)
                            .endPort()
                        .endContainer()
                    .endSpec()
               .endTemplate()
           .endSpec()
      .build();
  </pre>


  <pre class="prettyprint">

  kubernetesClient.replicationControllers().inNamespace(aksNamespace).create(rc);</pre>


  <p>コンテナー レジストリから Kubernetes クラスターにイメージをデプロイする完全なサンプル コードは、Azure Container Service (AKS) で確認できます。<a href="https://github.com/Azure-Samples/acs-java-deploy-image-from-acr-to-kubernetes"></a></p>


  <h2>仮想マシンにロックを適用する</h2>


  <p><em>define() create() &hellip;</em> メソッド チェーンを使用して、仮想マシンにロックを作成して適用できます。</p>


  <pre class="prettyprint">

  lockVirtualMachineRO = azure.managementLocks().define(&quot;virtualMachineLockRO&quot;)
      .withLockedResource(vm)
      .withLevel(LockLevel.READ_ONLY)
      .create();
  </pre>


  <p>リソース ロックを管理 <a href="https://github.com/Azure-Samples/locks-java-manage-locks">するための完全なサンプル</a> コードを確認できます。</p>


  <h2>Express Route 回線ピアリングを作成する</h2>


  <p>express Route 回線は、 <em>define() create() &hellip; メソッド チェーンを使用して</em> 作成できます。</p>


  <pre class="prettyprint">

  ExpressRouteCircuit erc = azure.expressRouteCircuits().define(ercName)
      .withRegion(Region.US_NORTH_CENTRAL)
      .withNewResourceGroup(rgName)
      .withServiceProvider(&quot;Equinix&quot;)
      .withPeeringLocation(&quot;Silicon Valley&quot;)
      .withBandwidthInMbps(50)
      .withSku(ExpressRouteCircuitSkuType.PREMIUM_METEREDDATA)
      .create();
  </pre>


  <p>次に、別の <em>define() create() &hellip; </em>メソッド チェーンを使用して Express Route 回線ピアリングを作成できます。</p>


  <pre class="prettyprint">

  erc.peerings().defineAzurePrivatePeering()
      .withPrimaryPeerAddressPrefix(&quot;123.0.0.0/30&quot;)
      .withSecondaryPeerAddressPrefix(&quot;123.0.0.4/30&quot;)
      .withVlanId(200)
      .withPeerAsn(100)
      .create();
  </pre>


  <p>Express Route 回線を <a href="https://github.com/Azure-Samples/network-java-manage-express-route">作成して構成する</a> 完全なサンプル コードを確認できます。</p>


  <h2>[試用版]</h2>


  <p>他のサンプルは、お使いの <a href="https://github.com/azure/azure-libraries-for-java">GitHubできます</a>。 試して、ご意見をお寄せください (以下 <a href="mailto:java@microsoft.com">の電子メール</a> またはコメントを介して)。<br>

  &nbsp;<br>

  Azure 上の Java に関する多くの追加情報については、 を参照してください <a href="https://docs.microsoft.com/en-us/java/azure/">https://docs.microsoft.com/en-us/java/azure/</a>。</p>
