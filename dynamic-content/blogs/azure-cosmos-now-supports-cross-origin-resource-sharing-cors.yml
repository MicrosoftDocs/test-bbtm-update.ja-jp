### YamlMime:Yaml
ms.openlocfilehash: 2f480daf5366a7ef1f39f6cd8c0693cb9cce1b65
ms.sourcegitcommit: d03bdc7fe5447adb6530886aab848b75fe8fa8ee
ms.translationtype: MT
ms.contentlocale: ja-JP
ms.lasthandoff: 03/11/2022
ms.locfileid: "139894567"
Slug: azure-cosmos-now-supports-cross-origin-resource-sharing-cors
Title: Azure Cosmos DB がクロスオリジンリソース共有 (CORS) をサポートするようになりました
Summary: Azure Cosmos DB は、コア SQL API のクロスオリジンリソース共有 (CORS) の "allowedorigins" ヘッダーをサポートするようになりました。 この設定は、ポータルまたは ARM テンプレートを使用して構成できます。
Content: "<p>Azure Cosmos DB は、コア SQL API のクロスオリジンリソース共有 (CORS) &ldquo; allowedorigins &rdquo; ヘッダーをサポートするようになりました。 この設定は、ポータルまたは ARM テンプレートを使用して構成できます。 CORS のサポートにより、web アプリは、JavaScript ライブラリを使用して <a href=\"https://www.npmjs.com/package/@azure/cosmos\" target=\"_blank\">@azure/cosmos</a> ブラウザーから Cosmos DB に直接対話できるようにすることができます。また、中間層による余分なホップを回避することで、より応答性の高い snappy エンドユーザーエクスペリエンスを得ることができます。</p>\n\n<h2>Azure Cosmos DB とは</h2>\n\n<p>Azure Cosmos DB は、グローバルに分散されたマルチモデルデータベースサービスで、任意の Azure リージョンのデータの読み取りと書き込みを行うことができます。 ターンキーグローバル分散を提供し、99パーセンタイルで1桁のミリ秒の待機時間を保証し、スループットとストレージのエラスティックスケーリングを実現します。</p>\n\n<p>Azure Cosmos DB core SQL API の場合、Node.js 環境とブラウザー環境の両方で動作する JavaScript ライブラリが用意されています。 このライブラリでは、CORS サポートを利用できるようになりました。 この機能を利用するために、クライアント側で必要となる構成はありません。 ブラウザーが Cosmos DB と直接通信できるようになったので、web アプリによる余分なホップを回避することで、web シナリオのパフォーマンスをさらに向上させることができます。 このサンプルでは、次 &rsquo; のリンクを使用して、websocket などを使用して中間サーバーを設定するのではなく、Cosmos DB からの変更を直接リッスンすることができます。</p>\n\n<pre>\nimport {CosmosClient} from &quot;@azure/cosmos&quot;;\n\nconst client= new CosmosClient({\n   endpoint: &quot;<a href=\"https://&lt;your-cosmos-account\">https://&lt;your-cosmos-account</a>&gt;documents.azure.com&quot;,\n   auth: {} /* Permission token or read only key. Avoid master Key */\n});\n\nconst todos = client.database(&quot;TodoApp&quot;).container(&quot;Todo&quot;).items;\n\ntodos.readAll().toArray()\n     .then(({result})=&gt;{\n         for(const item of result) {\n             const e = document.createElement(&quot;div&quot;)\n             e.innerText = item.text;\n             document.body.prepend(e);\n         }\n     });</pre>\n\n<p>次に示すのは、TypeScript と webpack を使用してライブラリを <a href=\"https://www.npmjs.com/package/@azure/cosmos\" target=\"_blank\">@azure/cosmos</a> 操作し、すべてのクライアントのリアルタイム更新を使用して、Cosmos DB によって完全に機能する匿名の情報アプリを構築する<a href=\"https://github.com/christopheranderson/cosmos-browser-sample\" target=\"_blank\">簡単なサンプルです</a>。</p>\n\n<h3>CORS の有効化</h3>\n\n<p>CORS を有効にするには、ポータルまたは ARM テンプレートを使用できます。 ワイルドカード &ldquo; * &rdquo; を使用すると、すべてのオリジンを許可したり、コンマで区切られた完全修飾ドメインを指定したりできます (つまり <a href=\"https://www.mydomain.com\" target=\"_blank\">https://www.mydomain.com</a> <a href=\"https://mydomain.com\" target=\"_blank\">https://mydomain.com</a> <a href=\"https://api.mydomain.com)\" target=\"_blank\">https://api.mydomain.com)</a> 、、、など)。 現在、ドメイン名の一部としてワイルドカードを使用することはできません ( <a href=\"https://*.mydomain.net\" target=\"_blank\">https://* mydomain)</a>。</p>\n\n<p>ポータルで cors を有効にするには、Cosmos DB アカウントに移動し、[設定] ボックスの一覧から [ <strong>cors</strong> ] オプションを選択します。 ここで、許可されたオリジンを指定し、[ <strong>保存</strong> ] を選択してアカウントを更新できます。</p>\n\n<p><a href=\"https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/05fff13a-0fba-4e97-8832-fb4e0216a07a.png\"><img alt=\"Enabling CORS\" border=\"0\" height=\"784\" src=\"https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/b2ce73e8-a9e4-443e-a672-899fae46dc2c.png\" style=\"margin: 0px auto; border: 0px currentcolor; border-image: none; float: none; display: block; background-image: none;\" title=\"CORS を有効にする\" width=\"2103\"></a></p>\n\n<h2>ブラウザーでのライブラリの @azure/cosmos 使用</h2>\n\n<p>現時点では、には、パッケージに同梱されている CommonJS バージョンのライブラリしか含まれて @azure/cosmos いません。 ブラウザーでライブラリを使用するには、 &rsquo; Rollup や Webpack などのツールを使用して、ブラウザーと互換性のあるライブラリを作成する必要があります。 特定のノードライブラリには、ブラウザーモックが用意されている必要があります。 次に、必要なモック設定が含まれている webpack 構成ファイルの例を示します。</p>\n\n<pre>\nconst path = require(&quot;path&quot;);\n\nmodule.exports = {\n   entry: &quot;./src/index.ts&quot;,\n   devtool: &quot;inline-source-map&quot;,\n   node: {\n     net: &quot;mock&quot;,\n     tls: &quot;mock&quot;\n   },\n   output: {\n     filename: &quot;bundle.js&quot;,\n     path: path.resolve(__dirname, &quot;dist&quot;)\n   }\n};\n \nAnother thing to consider in the browser is that you don&rsquo;t want to use your master key for most situations. It is best to use Resource Tokens or Readonly keys instead. You can refer to <a href=\"https://github.com/christopheranderson/tokenprovider\" target=\"_blank\">this sample on Github</a> to get started understanding how Resource Tokens work and how you can use something like Azure Functions to authenticate and authorize your users before giving them a Resource Token. We will have more blogs soon about how to use these more advanced authentication patterns with your browser based applications.</pre>\n\n<h2>はじめに</h2>\n\n<p>開始するには、npm のライブラリを参照 <a href=\"https://www.npmjs.com/package/@azure/cosmos\" target=\"_blank\">@azure/cosmos</a> して、ブラウザーベースのアプリで使用を開始します。 &rsquo;ご意見をお寄せください。 GitHub リポジトリの電子メール <a target=\"_blank\">askcosmosdb@microsoft.com</a> またはログに問題があります。</p>\n\n<p>最新の Azure <a href=\"https://twitter.com/search?q=%23cosmosdb\" target=\"_blank\"> # CosmosDB</a>   ニュースと機能については、Twitter  <a href=\"https://twitter.com/azurecosmosdb\" target=\"_blank\">@AzureCosmosDB</a> に関する記事に従って最新の情報を入手してください。 Azure Cosmos DB によってどのようなものが構築されるかをご紹介します。</p>"
