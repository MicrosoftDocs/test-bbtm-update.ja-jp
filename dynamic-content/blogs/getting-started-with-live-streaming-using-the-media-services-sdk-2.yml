### YamlMime:Yaml
ms.openlocfilehash: 7fdd1235492c3a8edd8e1b8a18e4ea3bde5723a4
ms.sourcegitcommit: d03bdc7fe5447adb6530886aab848b75fe8fa8ee
ms.translationtype: MT
ms.contentlocale: ja-JP
ms.lasthandoff: 03/11/2022
ms.locfileid: "139904786"
Slug: getting-started-with-live-streaming-using-the-media-services-sdk-2
Title: Media Services SDK を使用したライブストリーミングのはじめに
Summary: Azure Media Services、ライブストリーミングサービスのパブリックプレビューが発表されました。 このチュートリアルでは Azure Media Services .net SDK を使用してライブストリーミングを設定する方法について説明します。
Content: "Azure Media Services、<a href=\"https://azure.microsoft.com/blog/2014/09/10/azure-media-services-launches-proven-live-streaming-platform/\">ライブストリーミングサービスのパブリックプレビュー</a>が発表されました。 このチュートリアルでは Azure Media Services .net SDK を使用してライブストリーミングを設定する方法について説明します。 <a href=\"https://github.com/Azure/azure-media-services-samples/tree/master/AMSLiveStreaming\">完全なソースコードは、GitHub で</a>ダウンロードできます。 また、コーディング部分をスキップする場合は、「 <a href=\"https://azure.microsoft.com/blog/2014/09/10/getting-started-with-live-streaming-using-the-azure-management-portal/\">Azure 管理ポータルを使用したライブストリーミングのはじめに</a>」をご覧ください。\n\n&nbsp;\n\n1. .NET 4.0 でコンソールアプリケーションを作成します。 windowsazure.servicebus を検索することで、Nuget を介して<a href=\"https://www.nuget.org/packages/windowsazure.mediaservices/\">Media Services .net SDK</a>を取得できます。 windowsazure.mediaservices を検索します。\n\n&nbsp;\n\n2. app.config に次のコードを追加してください。アカウント名とアカウントキーは、Azure 管理ポータルで確認できます。\n<pre class=\"prettyprint\">  &lt;appSettings&gt;\n    &lt;add key=\"MediaServicesAccountName\" value=\"Account_NAME\" /&gt;\n    &lt;add key=\"MediaServicesAccountKey\" value=\"Account_KEY\" /&gt;\n  &lt;/appSettings&gt;</pre>\n&nbsp;\n\n3. CloudMediaContext でを使用して Azure Media Services する Connect ます。\n<pre class=\"prettyprint\">private const string StreamingEndpointName = \"streamingendpoint001\";\nprivate const string ChannelName = \"channel001\";\nprivate const string AssetlName = \"asset001\";\nprivate const string ProgramlName = \"program001\";\n\n// Read values from the App.config file.\nprivate static readonly string _mediaServicesAccountName =\nConfigurationManager.AppSettings[\"MediaServicesAccountName\"];\n\nprivate static readonly string _mediaServicesAccountKey =\nConfigurationManager.AppSettings[\"MediaServicesAccountKey\"];\n\n// Field for service context.\nprivate static CloudMediaContext _context = null;\nprivate static MediaServicesCredentials _cachedCredentials = null;\n\nstatic void Main(string[] args)\n{\n// Create and cache the Media Services credentials in a static class variable.\n    _cachedCredentials = new MediaServicesCredentials(\n    _mediaServicesAccountName,_mediaServicesAccountKey);\n // Used the cached credentials to create CloudMediaContext.\n    _context = new CloudMediaContext(_cachedCredentials);\n}</pre>\n&nbsp;\n\n4. ライブチャネルを作成し、チャネルを開始します。 チャネルは、ライブストリームを取り込むことができる Azure Media Services の基本エンティティです。 各チャネルには、取り込み URL とプレビュー URL があり、1つまたは複数のプログラムを関連付けることもできます。 通常、チャネルを開始するには約2分かかりますが、20分ほどかかることがあります。 チャネルをすぐに開始する必要はありません。通常は、事前にチャネルを設定しますが、ライブイベントが開始されるまで待機します。\n<pre class=\"prettyprint\">public static IChannel CreateAndStartChannel()\n{\n    IChannel channel = _context.Channels.Create(\n        new ChannelCreationOptions\n        {\n            Name = ChannelName,\n            Input = CreateChannelInput(),\n            Preview = CreateChannelPreview(),\n            Output = CreateChannelOutput()\n        });\n\n    channel.Start();\n    Console.WriteLine(\"Starting Channel \" + ChannelName);\n    Console.WriteLine(\"Channel's ingest URL \" + channel.Input.Endpoints.FirstOrDefault().Url.ToString());\n    Console.WriteLine(\"Channel's preview URL \" + channel.Preview.Endpoints.FirstOrDefault().Url.ToString());\n\n    return channel;\n}</pre>\n&nbsp;\n\n5. 各メソッドは第4部で実装します。 チャネルを作成する方法を次に示します。 チャネルを作成するときは、フラグメント化 Mp4 (Smooth Streaming) または RTMP のいずれかをサポートしている取り込みプロトコルを選択できます。 Access Control では、IP 許可リストを定義して、インジェストポイントへのアクセスを許可する必要があります。これを特定のコンピューターにロックするか、IP アドレスの範囲に開くことができます。 すべての IP アドレスに対してこれを開くには、\"0.0.0.0/0\" に設定します。\n<pre class=\"prettyprint\">private static ChannelInput CreateChannelInput()\n{\n    return new ChannelInput\n    {\n        StreamingProtocol = StreamingProtocol.FragmentedMP4,\n        AccessControl = new ChannelAccessControl\n        {\n            IPAllowList = new List&lt;IPRange&gt;\n            {\n                new IPRange\n                {\n                    Name = \"TestChannelInput001\",\n                    Address = IPAddress.Parse(\"0.0.0.0\"),\n                    SubnetPrefixLength = 0\n                }\n            }\n        }\n    };\n}</pre>\n&nbsp;\n\n6. チャネルのプレビューとチャネルの出力を作成します。\n<pre class=\"prettyprint\">private static ChannelPreview CreateChannelPreview()\n{\n    return new ChannelPreview\n    {\n        AccessControl = new ChannelAccessControl\n        {\n            IPAllowList = new List&lt;IPRange&gt;\n            {\n                new IPRange\n                {\n                    Name = \"TestChannelPreview001\",\n                    Address = IPAddress.Parse(\"0.0.0.0\"),\n                    SubnetPrefixLength = 0\n                }\n            }\n        }\n    };\n}\n\nprivate static ChannelOutput CreateChannelOutput()\n{\n    return new ChannelOutput\n    {\n        Hls = new ChannelOutputHls { FragmentsPerSegment = 1 }\n    };\n}</pre>\n&nbsp;\n\n7. 次の行を main に配置してチャネルを作成し、取り込み URL とプレビュー URL を出力します。 取り込み URL は、ライブエンコーダーに提供するプッシュ先です (Wirecast などのエンコーダーを設定する場合は、 <a href=\"https://azure.microsoft.com/blog/2014/09/18/azure-media-services-rtmp-support-and-live-encoders/\">ライブエンコーダーの構成</a> に関するブログを参照してください)。 ライブエンコーダーを構成して開始すると、ストリームが適切に取り込まれたされていることを確認するために、プレビュー URL からストリームを見ることができるようになります。\n<pre class=\"prettyprint\">IChannel channel = CreateAndStartChannel();\n\n// Set the Live Encoder to point to the channel's input endpoint:\nConsole.WriteLine(\"Channel's ingest URL \" + channel.Input.Endpoints.FirstOrDefault().Url.ToString());\n\n// Use the previewEndpoint to preview and verify \n// that the input from the encoder is actually reaching the Channel. \nConsole.WriteLine(\"Channel's preview URL \" + channel.Preview.Endpoints.FirstOrDefault().Url.ToString());</pre>\n&nbsp;\n\n8. ストリームを永続化し、対象ユーザーが使用できるようにするには、プログラムとストリーミングエンドポイントを作成する必要があります。 Main メソッドに次のコードを追加してみましょう。\n<pre class=\"prettyprint\">// Once you previewed your stream and verified that it is flowing into your Channel, \n// you can create an event by creating an Asset, Program, and Streaming Locator. \nIProgram program = CreateAndStartProgram(channel);\nILocator locator = CreateLocatorForAsset(program.Asset, program.ArchiveWindowLength);\nIStreamingEndpoint streamingEndpoint = CreateAndStartStreamingEndpoint();\nGetLocatorsInAllStreamingEndpoints(program.Asset);\n\nConsole.ReadLine();</pre>\n&nbsp;\n\n9. プログラムを使用すると、ライブストリームの発行と保存を制御できます。 最大3つのプログラムを同時に実行できます。これにより、必要に応じて、ストリームのさまざまな部分を発行およびアーカイブできます。\n\nプログラムの記録されたコンテンツを保持する時間数を指定するには、[ <b>アーカイブ Windowlength</b> ] プロパティを設定します。 この値は、最小 5 分から最大 25 時間までの範囲で設定できます。 これにより、ビューアーが現在のライブ位置から時間をさかのぼってシークできる最大時間も決まります。 プログラムの放送は、指定された期間継続しますが、ArchiveWindowLength を過ぎたコンテンツは絶えず破棄されていきます。\n<pre class=\"prettyprint\">public static IProgram CreateAndStartProgram(IChannel channel)\n{\n    IAsset asset = _context.Assets.Create(AssetlName, AssetCreationOptions.None);\n\n    // Create a Program on the Channel. You can have multiple Programs that overlap or are sequential;\n    // however each Program must have a unique name within your Media Services account.\n    IProgram program = channel.Programs.Create(ProgramlName, TimeSpan.FromHours(3), asset.Id);\n    program.Start();\n\n    Console.WriteLine(\"Starting Program \" + Program.ProgramlName);\n    return program;\n}</pre>\n&nbsp;\n\n10. その後、ストリームにアクセスするために、ストリーミングロケーターを作成する必要があります。 ストリーミングロケーターを使用すると、プログラムに関連付けられている資産をストリーミングエンドポイント経由でストリーミングできるようになります。 ストリーミングロケーターを作成するときに、資産へのストリーミングアクセスのアクセスポリシーを設定できます。\n<pre class=\"prettyprint\">public static ILocator CreateLocatorForAsset(IAsset asset, TimeSpan ArchiveWindowLength)\n{\n    var locator = _context.Locators.CreateLocator\n        (\n            LocatorType.OnDemandOrigin,\n            asset,\n            _context.AccessPolicies.Create\n            (\n                \"Live Stream Policy\",\n                ArchiveWindowLength,\n                AccessPermissions.Read\n            )\n        );\n\n    return locator;\n}</pre>\n&nbsp;\n\n11. 最後に、ストリーミングエンドポイントを作成し、ロケーター URL を取得する必要があります。 1つの Media Services アカウントは、複数のストリーミングエンドポイントを持つことができます。 それぞれに対して異なる構成 (セキュリティ設定、クロスサイトアクセスポリシー、スケールユニットなど) を使用する場合や、ビデオオンデマンド (VOD) とライブストリーミングを分離する場合は、複数のストリーミングエンドポイントを使用することができます。\n<pre class=\"prettyprint\">public static IStreamingEndpoint CreateAndStartStreamingEndpoint()\n{\n    var options = new StreamingEndpointCreationOptions\n    {\n        Name = StreamingEndpointName,\n        ScaleUnits = 1,\n        AccessControl = GetAccessControl(),\n        CacheControl = GetCacheControl()\n    };\n\n    IStreamingEndpoint streamingEndpoint = _context.StreamingEndpoints.Create(options);\n    streamingEndpoint.Start();\n\n    return streamingEndpoint;\n}\n\nprivate static StreamingEndpointAccessControl GetAccessControl()\n{\n    return new StreamingEndpointAccessControl\n    {\n        IPAllowList = new List&lt;IPRange&gt;\n        {\n            new IPRange\n            {\n                Name = \"Allow all\",\n                Address = IPAddress.Parse(\"0.0.0.0\"),\n                SubnetPrefixLength = 0\n            }\n        },\n\n        AkamaiSignatureHeaderAuthenticationKeyList = new List&lt;AkamaiSignatureHeaderAuthenticationKey&gt;\n        {\n            new AkamaiSignatureHeaderAuthenticationKey\n            {\n                Identifier = \"My key\",\n                Expiration = DateTime.UtcNow + TimeSpan.FromDays(365),\n                Base64Key = Convert.ToBase64String(GenerateRandomBytes(16))\n            }\n        }\n    };\n}\n\nprivate static byte[] GenerateRandomBytes(int length)\n{\n    var bytes = new byte[length];\n    using (var rng = new RNGCryptoServiceProvider())\n    {\n        rng.GetBytes(bytes);\n    }\n\n    return bytes;\n}\n\nprivate static StreamingEndpointCacheControl GetCacheControl()\n{\n    return new StreamingEndpointCacheControl\n    {\n        MaxAge = TimeSpan.FromSeconds(1000)\n    };\n}\n\npublic static void GetLocatorsInAllStreamingEndpoints(IAsset asset)\n{\n    var locators = asset.Locators.Where(l =&gt; l.Type == LocatorType.OnDemandOrigin);\n    var ismFile = asset.AssetFiles.AsEnumerable().FirstOrDefault(a =&gt; a.Name.EndsWith(\".ism\"));\n    var template = new UriTemplate(\"{contentAccessComponent}/{ismFileName}/manifest\");\n    var urls = locators.SelectMany(l =&gt;\n                _context\n                    .StreamingEndpoints\n                    .AsEnumerable()\n                    .Where(se =&gt; se.State == StreamingEndpointState.Running)\n                    .Select(\n                        se =&gt;\n                            template.BindByPosition(new Uri(\"https://\" + se.HostName),\n                            l.ContentAccessComponent,\n                                ismFile.Name)))\n                .ToArray();\n\n    foreach(var url in urls){\n        Console.WriteLine(url);\n    }\n\n}</pre>\n&nbsp;\n\n12. これで、プログラムを実行してライブストリームを利用できるようになりました。 <a href=\"https://github.com/Azure/azure-media-services-samples/tree/master/AMSLiveStreaming\">完全なソースコードは、GitHub で</a>ダウンロードできます。 これらの設定はすべて Azure portal にも表示される可能性があります。"
