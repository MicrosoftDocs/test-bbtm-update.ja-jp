### YamlMime:Yaml
ms.openlocfilehash: 94e09628fe826bf4509620cf6391966715ac6166
ms.sourcegitcommit: d03bdc7fe5447adb6530886aab848b75fe8fa8ee
ms.translationtype: MT
ms.contentlocale: ja-JP
ms.lasthandoff: 03/11/2022
ms.locfileid: "139891418"
Slug: performance-best-practices-for-using-azure-database-for-postgresql-connection-pooling
Title: Azure Database for PostgreSQL を使用するためのパフォーマンスのベストプラクティス–接続プール
Summary: このブログは、Azure Database for PostgreSQL サービスを使用する際のパフォーマンスとスケールを向上させるためのベストプラクティスを共有するための一連のブログ記事の続きです。 この記事では、接続プールを使用する利点に焦点を当て、Azure Database for PostgreSQL で実行されるアプリケーションの接続の回復性、パフォーマンス、スケーラビリティを向上させるための推奨事項を共有します。
Content: >-
  <p>このブログは、Azure Database for PostgreSQL サービスを使用する際のパフォーマンスとスケールを向上させるためのベストプラクティスを共有するための一連のブログ記事の続きです。 この記事では、接続プールを使用する利点に焦点を当て、Azure Database for PostgreSQL で実行されるアプリケーションの接続の回復性、パフォーマンス、スケーラビリティを向上させるための推奨事項を共有します。 シリーズの前のパフォーマンスのベストプラクティスに関するブログをお読みになっていない場合は、次のブログ記事を読んで、Azure Database for PostgreSQL サービスを使用するための推奨されるベストプラクティスについて学習し、理解し、導入することを強くお勧めします。</p>


  <ul>
   <li><a href="https://azure.microsoft.com/en-us/blog/performance-best-practices-for-using-azure-database-for-postgresql/" target="_blank">Azure Database for PostgreSQL でのパフォーマンスのベスト プラクティス</a></li>
   <li><a href="https://azure.microsoft.com/en-us/blog/performance-updates-and-tuning-best-practices-for-using-azure-database-for-postgresql/" target="_blank">Azure Database for PostgreSQL を使用するためのパフォーマンスの更新とチューニングのベスト プラクティス</a></li>
   <li><a href="https://azure.microsoft.com/en-us/blog/performance-troubleshooting-using-new-azure-database-for-postgresql-features/" target="_blank">Azure Database for PostgreSQL 機能を使用したパフォーマンスのトラブルシューティングのベストプラクティス</a></li>
  </ul>


  <p>PostgreSQL では、接続の確立は負荷の高い操作です。 これは、PostgreSQL への新しい接続ごとに、OS プロセスのフォークと接続用の新しいメモリ割り当てが必要であるという事実に起因しています。 その結果、トランザクション アプリケーションでは、トランザクションの終了時に頻繁に接続を開いたり閉じたりするため、接続の待機時間が長くなる可能性があります。結果として、データベースのスループット (1 秒あたりのトランザクション数) が低下し、アプリケーションの全体的な待機時間が長くなります。 そのため、Azure Database for PostgreSQL を使用してアプリケーションを設計する際には、接続プールを活用してアプリケーションを設計することをお勧めします。 これにより、既存の接続を再利用し、サーバーでより高いデータベース スループット (1 秒あたりのトランザクション数) を可能にすることで、接続の待機時間が大幅に減少します。 接続プールを使用すると、固定された接続のセットが起動時に確立され、維持されます。 これはまた、データベース サーバー上で確立される新しい動的な接続が原因でサーバーにおいて発生するメモリの断片化を削減するのにも役立ちます。</p>


  <p>アプリ フレームワークまたはデータベース ドライバーでそれがサポートされている場合、アプリケーション側で接続プールを構成できます。 それがサポートされていない場合は、もう 1 つのオプションとして、アプリケーションの外部で実行されデータベース サーバーに接続される <a href="https://pgbouncer.github.io/" target="_blank">PgBouncer</a> や <a href="https://pgpool.net/mediawiki/index.php/Main_Page" target="_blank">Pgpool</a> などのプロキシ接続プーラー サービスを利用することをお勧めします。 PgBouncer と Pgpool はどちらもコミュニティによって開発されており、Azure Database for PostgreSQL と共に使用できます。 続行するにつれて、実際のユーザーエクスペリエンスのコンテキストで PgBouncer に関する会話に焦点を当てます。</p>


  <p>PgBouncer は軽量の接続プーラーで、アプリケーションを実行する仮想マシン (VM) にインストールできます。 アプリケーションは、VM でローカルに実行されている PgBouncer proxy サービスに接続します。 PgBouncer サービスは、pgbouncer.ini ファイルに指定されている資格情報と <a href="https://pgbouncer.github.io/config.html" target="_blank">構成設定</a> を使用して、Azure Database for PostgreSQL サービスに接続します。 pgbouncer.ini の構成設定では、接続の最大数と既定のプールサイズを定義できます。 <a href="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/27c885b8-bcfc-4859-8ec5-993d2ed96722.jpg"><img alt="Connection pooling comparison diagram" border="0" height="387" src="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/5f6e9aaf-efec-44cf-b645-1aa7e8d97e43.jpg" style="border: 0px currentcolor; border-image: none; margin-right: auto; margin-left: auto; float: none; display: block; background-image: none;" title="接続プールの比較図" width="597"></a></p>


  <p>アプリケーションが Azure Kubernetes Service (AKS) でコンテナー化され、実行されている場合は、 <a href="https://docs.microsoft.com/en-us/azure/architecture/patterns/sidecar" target="_blank">サイドカープロキシ</a>として PgBouncer を実行できます。 Microsoft では、Microsoft container registry で<a href="https://hub.docker.com/_/microsoft-azure-oss-db-tools-pgbouncer-sidecar" target="_blank">PgBouncer サイドカープロキシイメージ</a>を公開しています。これは、Azure &rsquo; の業界をリードするエコシステムとの最高クラスの OSS データベースのネイティブ統合を提供するための取り組みの一環としています。 PgBouncer サイドカーは、AKS の同じポッドにあるアプリケーションコンテナーで実行され、接続プールプロキシを Azure Database for PostgreSQL に提供します。 アプリケーションコンテナーがフェールオーバーまたは再起動した場合、サイドカーコンテナーは、接続の回復性と予測可能なパフォーマンスを備えた高可用性を提供します。 このイメージにアクセスして使用する方法の詳細については、 <a href="https://hub.docker.com/r/microsoft/azureossdb-tools-pgbouncer/" target="_blank">docker hub のページ</a> を参照してください。 Azure Kubernetes Services を使用した開発に関するベストプラクティスについては、 <a href="https://docs.microsoft.com/en-us/azure/postgresql/concepts-aks" target="_blank">Azure Kubernetes Service と Azure Database for PostgreSQL の接続</a>に関するドキュメントを &ldquo; 参照することをお勧めします。&rdquo;</p>


  <p>Azure Database for PostgreSQL を使用した接続プーリングで PgBouncer を使用する場合のパフォーマンス向上の推定値を指定するために、pgbench で簡単なパフォーマンスベンチマークテストを実行しました。 pgbench は、すべてのトランザクションに対して新しい接続を作成するための構成設定を提供しています。これを利用して、アプリケーションのスループットへの接続待機時間の影響を測定します。 次に示すのは、A/B テストが、PgBouncer を使用した標準の pgbench ベンチマークテストとスループットを比較していることを示しています。 このテストでは、2つの仮想コア (GP_Gen5_2) を使用して汎用層で実行されている Azure Database for PostgreSQL に対して、スケールファクターが5である pgbench を実行しました。 テスト中の唯一の変数は PgBouncer でした。 PgBouncer を使用すると、次のようにスループットが4倍向上し、 <strong>接続の待機時間が40% 低下しました</strong>。</p>


  <p><a href="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/5ff22e01-c7f4-4565-96f2-f5f05f67948f.png"><img alt="Performance improvement with PgBouncer column chart" border="0" height="261" src="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/b52f05e7-6f36-4d96-b3da-2e4cd01678a9.png" style="border: 0px currentcolor; border-image: none; margin-right: auto; margin-left: auto; float: none; display: block; background-image: none;" title="PgBouncer 縦棒グラフによるパフォーマンスの向上" width="589"></a></p>


  <p>PgBouncer は、組み込みの再試行ロジックを使用することにより、計画された (スケジュールされた/スケールアップ/スケールダウン) またはデータベースサーバーの計画外のフェールオーバー中に、接続の回復性、高可用性、透過的なアプリケーションのフェールオーバーをさらに確保できます。 再試行ロジックは、 <a href="https://www.sqlalchemy.org/library.html" target="_blank">Sqlalchemy</a>を使用した<a href="https://ckan.org/" target="_blank">CKAN</a>や<a href="https://airflow.apache.org/" target="_blank">Apache 気流</a>などの OSS アプリケーションで非常に便利であることがわかります。 PgBouncer を使用しない場合、接続エラーが発生した後で接続を再確立するには、データベースのフェールオーバーイベントでアプリケーションサービスを再起動する必要があります。 このシナリオでは、再試行の間隔よりも接続タイムアウトを十分に設定して、タイムアウトになる前に再試行を実行できるようにすることも重要です。</p>


  <p>まとめると、新しい接続は PostgreSQL の負荷の高い操作であるため、特に新しい接続を頻繁に開くアプリケーションの場合は、Azure Database for PostgreSQL に対してアプリケーションを実行するときに接続プールを使用することを強くお勧めします。 アプリケーションが接続プールを使用するように設計されていない場合は、接続プールプロキシとして PgBouncer を利用できます。 PgBouncer proxy でアプリケーションを実行する利点は次のとおりです。</p>


  <ul>
   <li>スループットとパフォーマンスの向上</li>
   <li>データベースサーバーへの接続の最大数を定義しても、接続リークは発生しません。</li>
   <li>再起動に対する接続の回復性の向上</li>
   <li>メモリの断片化の軽減</li>
  </ul>


  <p><a href="https://azure.microsoft.com/en-us/services/postgresql/" target="_blank">Azure Database for PostgreSQL</a>を利用していることを願っています。 次に参照する <a href="https://feedback.azure.com/forums/597976-azure-database-for-postgresql" target="_blank">機能についてのフィードバック</a> を引き続き提供してください。 ヘルプが必要な場合、または質問がある場合は、Azure Database for PostgreSQL の &ldquo; <a href="https://docs.microsoft.com/en-us/azure/postgresql/" target="_blank">ドキュメント</a>を参照してください。 &rdquo;<a target="_blank">AZURE DB For PostgreSQL</a>のエイリアスを電子メールで送信することで、microsoft に連絡することもできます。また、最新のニュースおよび発表については、Twitter <a href="https://twitter.com/AzureDBPostgres" target="_blank">@AzureDBPostgres</a> および<a href="https://twitter.com/search?q=%23PostgreSQL&amp;f=images&amp;src=tyah" target="_blank"> # PostgreSQL</a>についてご確認ください。</p>


  <h3>謝辞</h3>


  <p>Diana Putnam、Rachel Agyemang、Sudhakar Sannakkayala、Sunil Agrawal、Sunil Kamath、Bhavin Gandhi、Anitah Cantele、Prabhat Tripathi、Kirill Glushko、Praveen Barli がこの投稿に寄与するようになりました。</p>
