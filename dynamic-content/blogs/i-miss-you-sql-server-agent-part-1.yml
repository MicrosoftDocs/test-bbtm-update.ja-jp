### YamlMime:Yaml
ms.openlocfilehash: c27b9346cb61ea0e129382f2cf689d8900391583
ms.sourcegitcommit: d03bdc7fe5447adb6530886aab848b75fe8fa8ee
ms.translationtype: MT
ms.contentlocale: ja-JP
ms.lasthandoff: 03/11/2022
ms.locfileid: "139890766"
Slug: i-miss-you-sql-server-agent-part-1
Title: 'I Miss You SQL Server Agent: パート 1'
Summary: '[この記事は、チームによってSQL Azureされました。]現在、SQL AzureエージェントのクラウドでのSQL Serverはサポートされていません。 エージェントの種類SQL Server機能が必要なSQL Azure、...'
Content: '<p>[この記事は、チームによってSQL Azureされました。]</p><p>現在、SQL AzureエージェントのクラウドでのSQL Serverはサポートされていません。 SQL Azure の SQL Server エージェントの種類の機能が必要な場合は、Windows Azure worker ロールといくつかのカスタム コードを使用できます。このブログ投稿シリーズで方法を説明します。 </p>  <blockquote>   <p><i>"Secret agent man, secret agent man</i>       <br><i>彼らは番号を付け </i>、自分の名前を取り上げ、 - Johnny Rivers</p> </blockquote>  <h2>SQL Server エージェント</h2>  <p><a href="https://technet.microsoft.com/en-us/library/ms189237.aspx">SQL Server エージェントは</a>、ジョブWindows呼ばれるスケジュールされた管理タスクを実行する Microsoft Windows サービスです。 SQL Server エージェントでは、ジョブ情報を格納するのに SQL Server が使用されます。 ジョブには 1 つ以上のジョブ ステップが含まれます。 各ジョブ ステップには、データベースをバックアップするなど、独自のタスクがあります。 SQL Server エージェントでは、スケジュールに従って、特定のイベントに応答して、または必要に応じてジョブを実行できます。 たとえば、毎平日の業務終了後に会社のすべてのサーバーをバックアップする必要がある場合は、そのタスクを自動化できます。 月曜から金曜までの 22:00 以降にバックアップを実行するスケジュールを設定します。バックアップに問題が発生した場合、イベントが記録され、通知を受け取ることができます。 SQL Server エージェントは、オンプレミスの Enterprise、Datacenter、Standard エディションの SQL Server と一緒にインストールされます。ただし、Express または Compact エディションでは使用できません。 </p>  <h2>worker ロール</h2>  <p>worker ロールは、基本的にはクラウドWindowsサービスであり、開始、停止、および構成の更新の概念を理解します。 開始すると、十分に設計された worker ロールが無限ループに入り、次の処理が行えます。</p>  <ul>   <li>処理をシグナルするイベントを確認します。 </li>    <li>アクションを実行します。 </li>    <li>イベントを再度確認する必要があるまでスリープ状態にします。 </li> </ul>  <p>これらは、複数の目的で使用できるよう、目的を持って抽象化されています。</p>  <p>免責事項: worker ロールは目的上抽象であり、SQL Server エージェントは、何年も前からよく開発され、丸みを帯びている製品なので、SQL Server エージェントの完全な機能を worker ロールでレプリケートしません。 代わりに、SQL Server Agent が Windows Azure Worker ロールから実行するタスクの多くを実現できる (何らかのコーディングで) アイデアを伝える簡単なコードを提供します。</p>  <h2>作業の開始</h2>  <p>作業を開始するには、worker ロールを含む Visual Studioクラウド プロジェクトを作成します。 これを行う基本の詳細については、こちらを参照してください。</p>  <p><a href=""><img style="border-right-width: 0px; display: inline; border-top-width: 0px; border-bottom-width: 0px; border-left-width: 0px" title="イメージ" border="0" alt="image" src="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/4118.image_5F00_thumb_5F00_79D11C66.png" width="644" height="409"></a> </p>  <p>これにより、次のような <b>WorkerRole.cs</b> という名前のファイルにサンプル コードが生成されます。</p>  <pre class="csharpcode"><span class="kwrd">public</span> <span class="kwrd">override</span> <span class="kwrd">void</span> Run()  {      <span class="rem">// This is a sample worker implementation. Replace with your logic.</span>      Trace.WriteLine(<span class="str">&quot;WorkerRole1 entry point called&quot;</span>, <span class="str">&quot;Information&quot;</span>);        <span class="kwrd">while</span> (<span class="kwrd">true</span>)      {          Thread.Sleep(10000);          Trace.WriteLine(<span class="str">&quot;Working&quot;</span>, <span class="str">&quot;Information&quot;</span>);      }  }</pre>      <p>まず、SQL Azure データベースでストアド プロシージャを実行するコードを記述します。これは、SQL Server Agent ジョブ内のステップで Transact-SQL スクリプトを実行するのと同じです。</p>    <p><a href=""><img style="border-right-width: 0px; display: inline; border-top-width: 0px; border-bottom-width: 0px; border-left-width: 0px" title="イメージ" border="0" alt="image" src="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/0702.image_5F00_thumb_5F00_71C95437.png" width="644" height="580"></a> </p>    <p>コードは次のように表示されます。</p>    <pre class="csharpcode"><span class="kwrd">protected</span> <span class="kwrd">void</span> ExecuteTestJob()  {      <span class="kwrd">using</span> (SqlConnection sqlConnection = <span class="kwrd">new</span> SqlConnection(          ConfigurationManager.ConnectionStrings[<span class="str">&quot;AdventureWorksLTAZ2008R2&quot;</span>].              ConnectionString))      {          <span class="kwrd">try</span>          {              <span class="rem">// Open the connection</span>              sqlConnection.Open();                SqlCommand sqlCommand = <span class="kwrd">new</span> SqlCommand(                  <span class="str">&quot;spTest&quot;</span>, sqlConnection);                sqlCommand.CommandType =                  System.Data.CommandType.StoredProcedure;                sqlCommand.ExecuteNonQuery();          }          <span class="kwrd">catch</span> (SqlException)          {              Trace.WriteLine(<span class="str">&quot;SqlException&quot;</span>,<span class="str">&quot;Error&quot;</span>);              <span class="kwrd">throw</span>;          }      }  }</pre>      <p>通常、<b>SqlCommand.ExecuteNonQuery()</b> メソッドを使用して、データを返SQL Azureに対してストアド プロシージャを実行します。 返される結果セットを取得する場所はありません。つまり、出力はありません。これは、SQL Server エージェントに似ています。 </p>    <h2>例外処理</h2>    <p>上記のコードでは、例外を処理する作業が非常に悪い場合があります。これは、Windows Azure worker ロールで独自のバージョンの SQL Server エージェントを記述するときに理解する必要がある最初のハードルです。 エージェントSQL Server、ステップが成功した場合は次の手順に進むか、ステップが失敗した場合はジョブを終了し、エラーを報告します。 worker ロールで try/catch を使用SQL Serverエージェントのオプションをシミュレートできます。 このシリーズの 3 番目のブログ投稿では、エラー処理の問題の一部に対処します。</p>    <p>エージェントを使用<b><i>しないオプションは、</i></b>SQL Serverで実行を停止する方法です。 これは worker ロールの場合と同じです。ハンドルされない例外では、worker ロールがリサイクルおよび再起動されます。詳細については、こちらを参照 <a href="https://msdn.microsoft.com/en-us/library/ff431732.aspx">してください</a>。 ワーカー ロールのリサイクルと再起動の機能は、ブログ シリーズのパート 3 で説明されているエラー処理で使用します。</p>    <h2>まとめ</h2>    <p>このブログ シリーズのパート 2 では、その日の特定の時刻にストアド プロシージャを実行する方法について説明します。 質問、懸念事項、コメントはありますか? 以下に投稿すると、対処を試みることができます。</p>'
