### YamlMime:Yaml
ms.openlocfilehash: e375f654927d6bf362bb7476d51665206f416ec7
ms.sourcegitcommit: d03bdc7fe5447adb6530886aab848b75fe8fa8ee
ms.translationtype: MT
ms.contentlocale: ja-JP
ms.lasthandoff: 03/11/2022
ms.locfileid: "139909582"
Slug: policy-expressions-in-azure-api-management
Title: Azure API Management のポリシー式
Summary: 'この記事では、Azure API Management のポリシー式機能について説明します。 '
Content: >-
  <p><a href="https://azure.microsoft.com/en-us/services/api-management/" target="_blank">Azure API Management</a>では、Publisher ポータルから構成できる既定のポリシーを使用して、公開されている api の動作を制御および変更する機能が提供されます。 これらの <a href="https://azure.microsoft.com/en-us/documentation/articles/api-management-policy-reference/" target="_blank">ポリシー</a> は、api コンシューマーと api バックエンドの間にある API Management プロキシの受信要求または送信応答に適用されます。 <a href="https://msdn.microsoft.com/library/azure/dn910913.aspx" target="_blank">ポリシー式</a> を使用すると、API Management ポリシーの機能が強化され、トラフィックを制御したり、コードを記述したりバックエンドサービスを変更したりすることなく、API の動作を変更する高度な手段が提供されます。 ポリシー式は、ほとんどの API Management ポリシーで属性値またはテキスト値として使用できます。</p>


  <h2>構文</h2>


  <p>ポリシー式では、C# 6.0 構文を使用し、.NET Framework の型のサブセットにアクセスできます。 また、メンバーが要求や応答に関する情報を持つ、暗黙的な <a href="https://msdn.microsoft.com/library/azure/dn910913.aspx#ContextVariables" target="_blank">コンテキスト変数</a> にアクセスすることもできます。</p>


  <h2>&nbsp;</h2>


  <p>&nbsp;たとえば、<a href="https://msdn.microsoft.com/library/azure/dn894085.aspx#set_variable" target="_blank">変数の設定</a>ポリシーでは、ポリシー式を使用 &nbsp; して値を次のように設定できます。</p>


  <pre class="prettyprint">
    &lt;set-variable name=&quot;isIOS&quot; value=&quot;@(context.Request.Headers[&quot;User-Agent&quot;].Contains(&quot;iPad&quot;) || context.Request.Headers[&quot;User-Agent&quot;].Contains(&quot;iPhone&quot;))&quot; /&gt;</pre>

  <p>上記のステートメントのポリシー式は、@ (expression) &quot; として &quot; カプセル化されます。ここで、expression は適切な形式の C# ステートメントです。 要求が iPad または iPhone クライアントから送信された場合、この式は true と評価されます。 ここでは、コンテキスト変数は、要求オブジェクトへのアクセスを提供します。このオブジェクトヘッダーは、API を呼び出すアプリケーションによって要求に含まれるヘッダーへのアクセスを提供します。 注: ポリシーでは、パラメーター値として通常のテキストと式を組み合わせて使用することはでき &rsquo; ません。 複数ステートメントの式は、@ {expression 1; expression 2} &quot; として &quot; 中かっこでカプセル化する必要があります。 &nbsp;複数ステートメントの式のすべてのパスは、ポリシーで使用できる値を返す必要があります。</p>


  <h2>オーケストレーションと API リダイレクト</h2>


  <p>ポリシー式を <a href="https://msdn.microsoft.com/library/azure/dn894085.aspx" target="_blank">API Management 高度なポリシー</a> と組み合わせて使用すると、高度な API の再方向および動作の更新を調整できます。 これを使用すると、バックエンドサービスを書き直すことなく、公開されている API の最新の更新された fa &ccedil; ade を射影できます。 次 &rsquo; の例では、受信パスで使用されている場合に、発行された API にクエリパラメーターとして含まれているバージョン情報に基づいて受信要求をリダイレクトするために使用できるポリシー式の例を示しています。</p>


  <pre class="prettyprint">
    &lt;choose&gt;
      &lt;when condition=&quot;@(context.Request.Url.Query.GetValueOrDefault(&quot;version&quot;) == &quot;2014-03&quot;)&quot;&gt;
        &lt;set-backend-service base-url=&quot;https://contoso.com/api/1.6/&quot; /&gt;
      &lt;/when&gt;
      &lt;otherwise&gt;
        &lt;set-backend-service base-url=&quot;https://contoso.com/api/2.0/&quot;
      &lt;/otherwise&gt;
    &lt;/choose&gt;</pre>

  <h2>&nbsp;</h2>


  <h2>ポリシー式のコンテキスト</h2>


  <p>暗黙的に使用可能なコンテキスト変数は、API 呼び出しの要求または応答パラメーターへのアクセスを提供します。 コンテキストでは、要求と応答に加えて、公開されている Api、操作、製品、ユーザー、サブスクリプション、変数などの API Management サービスインスタンスに関する情報にもアクセスできます。 コンテキスト変数の内容は、パイプラインの各ステージで変更される可能性があることに注意してください。 たとえば、context のようになります。要求 url <a href="https://msdn.microsoft.com/library/azure/7406a8ce-5f9c-4fae-9b0f-e574befb2ee9#RewriteURL" target="_blank">書き換え</a> ポリシーが実行された後に、変換された url が含まれます。 変数の設定ポリシーをポリシー式と組み合わせて使用すると、後で使用できるようにコンテキスト変数内のオブジェクトの現在の内容を保持することができます。次に例を示します。</p>


  <pre class="prettyprint">

  &lt;policies&gt;
    &lt;inbound&gt;
      &lt;!-- Save the URL in invoked request from the context before its rewritten. --&gt;
      &lt;set-variable name=&quot;requestPath&quot; value=&quot;@(context.Request.Url.Path)&quot; /&gt;
      &lt;base /&gt;
      &lt;rewrite-uri template=&quot;api/add?a={a}&amp;amp;b={b}&quot; /&gt;
    &lt;/inbound&gt;
    &lt;outbound&gt;
    &lt;base /&gt;
      &lt;!-- Insert the saved request method+URL in the result section. --&gt;
      &lt;!-- Note request method wasn&#39;t rewritten, so we can access that from context. --&gt;
      &lt;find-and-replace from=&quot;&amp;lt;result&amp;gt;&quot; to=&quot;@{
        string str = &quot;&lt;result&gt;\n    &lt;operation&gt;&quot;;
        str += context.Request.Method;
        str += &quot; \&quot;&quot;;
        str += context.Variables.GetValueOrDefault&lt;string&gt;(&quot;requestPath&quot;);
        str += &quot;\&quot;&lt;/operation&gt;&quot;;
        return str;
      }&quot; /&gt;
    &lt;/outbound&gt;
  &lt;/policies&gt;</pre>


  <p>上記のポリシースニペットでは、元の要求を処理するために使用されたメソッド &amp; の URL パスが、操作 &gt; &quot; 要素として &lt; &quot; 応答本文の結果 &quot; &gt; セクションに &quot; &lt; 挿入されます。 ポリシー定義では XML が使用されるため、&#39; および &#39;&gt;&#39; &#39;&lt; 文字は from パラメーターでエスケープされますが、to パラメーターの複数ステートメントポリシー式ではエスケープされません。 この例では、set 変数を使用してコンテキストから要求 URL パスを保存し、検索と置換のポリシーでこれを使用します。 &nbsp; これに関する簡単なチュートリアルについては、Channel 9 の「スクリーンキャスト on <a href="https://channel9.msdn.com/Blogs/AzureApiMgmt/Policy-Expressions-in-Azure-API-Management" target="_blank">Policy 式</a> 」を参照してください。<iframe allowfullscreen="allowfullscreen" frameborder="0" height="150" scrolling="no" src="//channel9.msdn.com/Blogs/AzureApiMgmt/Policy-Expressions-in-Azure-API-Management/player" style="width: 610px; height: 343px;" width="300"></iframe> 詳細については、 <a href="https://azure.microsoft.com/en-us/documentation/articles/api-management-howto-policies/" target="_blank">Azure API Management のポリシーに</a>関するページを参照してください。</p>
