### YamlMime:Yaml
ms.openlocfilehash: 7df79774a9684f608f5218cdd945a6d72ec1a9e2
ms.sourcegitcommit: d03bdc7fe5447adb6530886aab848b75fe8fa8ee
ms.translationtype: MT
ms.contentlocale: ja-JP
ms.lasthandoff: 03/11/2022
ms.locfileid: "139893488"
Slug: how-cloud-speed-helps-sql-server-dbas
Title: クラウドの速度が dba SQL Server にどのように役立つか
Summary: 'このブログの投稿では、クラウドの要件によって推進されるエンジニアリングモデルの変換によって、SQL Server の構築、出荷、およびサービスの方法がいくつか改善されたことを確認します。 '
Content: >-
  <p>数年前に、Microsoft SQL Server 製品チームは、新しいクラウドプラットフォーム (PaaS) である Azure SQL Database を導入し、SQL Server コードベースを共有しています。 &nbsp;クラウドファーストサービスを実行するには、従来の SQL Server エンジニアリングモデルに大幅な変更を加える必要がありました。これは、完全に有効にするために数年の投資を行っていました。 これらのエンジニアリングモデルの変更により、Azure SQL Database と SQL Server の両方に悪影響を与える大きな利点が得られました。</p>


  <p>現在 Azure SQL Database を使用していない SQL Server データベース管理者 &rsquo; であっても、 &rsquo; クラウドへの Microsoft &rsquo; の投資によるメリットが得られます。 このブログの投稿では、クラウドの要件によって推進されるエンジニアリングモデルの変換によって、SQL Server の構築、出荷、およびサービスの方法がいくつか改善されたことを確認します。&nbsp;</p>


  <h2>機能がより迅速に到着</h2>


  <p>以前の SQL Server (2005 から 2012) では、SQL Server には約3年間のエンジニアリングサイクルがありました。 SQL Server の計画されたリリースごとに、さまざまなチーム間でコーディネートされたウォーターフォールのようなソフトウェア開発プロセスを使用して、事前の設計に進むことができます。 &nbsp;これには、プログラムマネージャーによる機能仕様ドキュメントの生成、開発者による設計仕様、およびテスト担当者によって開発された自動化されたテストコードが含まれます。&nbsp;</p>


  <p>SQL Server 最終的に出荷された後は、関連する新機能のアップグレードまたは採用に数年かかる可能性があります。 この従来のエンジニアリングモデルと、当初の計画と実際の顧客導入との間の延長期間は、機能 &ldquo; &rdquo; が適切に到着し、当初の目的のシナリオのニーズを満たしているかどうかを理解するために、数年かかります。 これまでに説明した新機能については、SQL Server エンジニアリングチームは数年前に市場について考える必要がありました。&nbsp;</p>


  <p>サービスとしてのプラットフォームである Azure SQL Database の開発により、SQL Server エンジニアリングチーム &rsquo; は、大幅に短い時間枠で作業するようになりました。 SQL Server エンジニアリングチームは、これを実現するために、いくつかの重要な変更を行いました。</p>


  <ul>
      <li>SQL Server のビルドとテストのループは、何千ものコンピューターを使用して並列でテストを実行することで自動化されました。 テストは常に実行されます。 これにより、従来のエンジニアリングモデルの数週間のビルドとテストのプロセスが、新しいモデルの平均ケースの時間にかかりました。</li>
      <li>SQL Server エンジニアリングチームは、元の SQL Server コード領域が非常に大きくなっており、モノリシックな状態に配置するのが困難であることを認識しました。 したがって、チームは、可能な限り、アーキテクチャをより小さなマイクロサービス全体に分割する方法を探しました。 アーキテクチャのこの変更により、コンポーネントごとに個別のデプロイとサービスが許可されました。</li>
      <li>機能を段階的にビルドし、毎月の Community Technical preview (ctp) を使用して配信する必要があります。</li>
  </ul>


  <p>これらの変更により、リリースサイクルを短縮し、従来よりも早く Azure SQL Database および SQL Server できるようになりました。 最近では、SQL Server エンジニアリングチームは、SQL Server 2016 のリリースから15か月間のみ SQL Server 2017 を出荷するように管理されていました。 これは、過去 3 ~ 5 年間の SQL Server 発送サイクルと比較しています。&nbsp;</p>


  <h2>機能は迅速にテストされ、顧客の検証が必要です</h2>


  <p>Microsoft では、SQL Server 2017 の一般提供が開始されました。 Microsoft では、新機能をテストするための早期および継続的なアクセスを提供する、<em>毎月</em>のコミュニティテクニカルプレビュー (ctp) を提供しています。 実稼働品質のビルドを提供する機能は、現在 Azure SQL Database で使用されている継続的なリリースプロセスによって非常に優先されています。 この新機能への早期アクセスにより、顧客からのフィードバックが早期に SQL Server エンジニアリングチームによってすぐに使用されるようになりました。 SQL Server エンジニアリングチームでは、機能が正常に動作しているかどうかを評価するために、エンジニアリングサイクル中に顧客が機能をテストする必要があります。</p>


  <h2>準備ができたときに出荷する機能</h2>


  <p>以前のバージョンの SQL Server では、一部の機能強化は、出荷前に SQL Server リリースにリスクされてい &ldquo; &rdquo; ます。 &nbsp;これは、出荷期間が不足している場合、この機能は別の3年間にわたって機能しない可能性があるためです。 &nbsp;SQL Server エンジニアリングチームが生産品質のリリースを頻繁に提供できるようになったため、これは問題になりません (または誘惑)。 機能 &rsquo; の準備ができていない場合は、問題が解決されるまで保持されます。その後、この機能は、今後の毎月のリリースに含まれます。&nbsp;</p>


  <h2>機能開発は反復的です</h2>


  <p>計画はエンジニアリングプロセスの重要な部分ですが、SQL Server エンジニアリングチームは少し異なる方法で実行するようになりました。 新機能の概念として、チームのアーキテクト、プログラムマネージャー、およびエンジニアリングマネージャーは、問題のある領域を調べて、妥当な時間内に出荷できる基本的なソリューションを見つけます。 提案された機能には、労力とエンジニアリングの資金を正当化するために、関連する主要顧客も必要です。 次に、SQL Server エンジニアリングチームは、顧客のニーズに対して反復処理を行い、完了して出荷準備が整うまでバージョンをリリースします。&nbsp;</p>


  <p>この例として、<a href="https://docs.microsoft.com/en-us/sql/relational-databases/automatic-tuning/automatic-tuning">自動プラン修正</a>機能があります。これは、プランの回帰を識別し、以前の良好なプランを適用して修正する、SQL Server 2017 の新しい自動チューニング機能です。 この機能は最初に Azure SQL Database にデプロイされており、内部の顧客やオプトインのプライベートプレビューのお客様による実際のテストが大量に発生しています。 これにより、現在の形式で SQL Server 2017 に最終的に出荷される前に、大量のフィードバックといくつかの変更が加えられました。</p>


  <p>実行可能な最小製品 (MVP) の初期バージョンからのフィードバックは、構築されたものを調整 (またはリセット) するために使用されます。 顧客からのフィードバックは、エンジニアリングサイクル全体で使用され、新機能や既存の機能の変更を正当化するために使用されます。 俊敏性の向上により、増分値を提供する小規模および大規模の機能の両方を解放し、マーケティングのビッグボックス &rdquo; 機能に &ldquo; 焦点を当てることはできません。</p>


  <h2>摩擦フリーアップグレード</h2>


  <p>Azure SQL Database は継続的にアップグレードされます。 修正はブランチ間で時間の経過と共にストリーミングされます。これらのアップグレードには、バグ修正や新しい改善が含まれる場合があります。 この継続的な変更により、自動アップグレードを可能な限りシームレスかつ自由に解放する必要がありました。 その結果、SQL Server エンジニアリングチームは、シームレスでサイレントなアップグレードを可能にするために、旧バージョンとの互換性を維持するポリシーに移行するのではなく、<em>ほとんどの機能を非推奨し、削除しまし</em>た。 この非推奨ポリシーは、SQL Server と Azure SQL Database の両方に適用されます。&nbsp;</p>


  <p>SQL Server エンジニアリングチームは、サービスを透過的にアップグレードできるように、下位互換性を強力な目標として維持することを目指しています。 互換性が損なわれている場合 (サービスのセキュリティを維持するために必要な変更など)、エンジニアリングは、影響を受ける顧客に積極的に取り組み、その回避策を発見するか、互換性レベルを使用して、顧客がアプリケーションを十分にテストし、準備ができたら新しいコードをオプトインできるようにします。</p>


  <p>互換性レベルのサブジェクトでは、新しいクエリ実行プランに影響する機能と修正が、次のデータベース互換性レベルで発生します。 この目的は、回帰リスクを最小限に抑えることです。 たとえば、SQL Server 2017 で導入された新しい<a href="https://docs.microsoft.com/en-us/sql/relational-databases/performance/adaptive-query-processing">アダプティブクエリ処理</a>機能ファミリでは、互換性レベル140以上が必要です。 SQL Server 2017 にアップグレードすると、明示的に変更するまで、既存のユーザーデータベース &rsquo; の互換性レベルが維持されます。 エンジンの機能 &rsquo; に影響がない場合 (<a href="https://docs.microsoft.com/en-us/sql/relational-databases/graphs/sql-graph-overview">SQL Graph</a>など)、 &rsquo; 互換性レベルに関連付けられず、明示的に有効にしなくても、使用可能な機能として自動的に表示されることがあります。</p>


  <p>また、 <a href="https://blogs.msdn.microsoft.com/sqlserverstorageengine/2017/05/17/automatic-plan-correction-in-sql-server-2017/">自動プラン修正</a> や <a href="https://docs.microsoft.com/en-us/sql/relational-databases/performance/monitoring-performance-by-using-the-query-store">クエリストア</a> などの機能は、アップグレード後の関する安全策および保険ポリシーとして機能し、迅速かつ効率的に回帰を処理することができます。</p>


  <h2>テレメトリドライブの品質</h2>


  <p>SQL Server エンジニアリングチームは、テレメトリを使用して次のことを行います。</p>


  <ol>
      <li>候補の識別-将来の改善のためのシナリオ</li>
      <li>機能の導入を測定する</li>
      <li>問題をより迅速に提示することで、製品の品質を向上させる</li>
  </ol>


  <p>すべてのテレメトリデータは一般化されており、顧客データを保護するためのスキャンされであり、このテレメトリを使用して大規模なサービスを管理します。 &nbsp;Azure SQL データベースの何百万ものデータベースと運用スタッフまたは dba がゼロのデータベースでは、Azure SQL Database から1日に最大 600 tb のテレメトリが収集され、SQL Server エンジニアリングチームが自動アラートと SLA インフラストラクチャを実行することができます。&nbsp;</p>


  <p>さらに、SQL Server エンジニアリングチームは、Azure SQL Database で実行されている何百万ものデータベース間でのすべてのクラッシュダンプを監視し、調査します。&nbsp;</p>


  <p>Azure SQL Database からのサービス学習は、次の方法で SQL Server &rsquo; s 品質に直接計上されます。</p>


  <ul>
      <li>SQL Server エンジニアリングチームは、このような修正を事前に修正し、Azure SQL Database、市場における SQL Server のバージョン、および将来の開発中のバージョンの SQL Server にデプロイします。</li>
      <li>修正プログラムは、過去と比べてはるかに厳しい速度で SQL Server の累積更新プログラム (cu) にプッシュされます。</li>
  </ul>


  <p>SQL Server エンジニアリングチームは、これらのエンジニアリングモデルへの投資により、SQL Server 2016 以上の最新の cu での実行を促進します。 これまで、お客様は修正プログラムとして要求する必要があった修正プログラムを入手しました (その後、エンジニアリングチームがスクランブルを行って修正するまで待ちます)。 &nbsp; このような修正は、サポートチケットを開かずに事前に行われるようになりました。</p>


  <p>SQL Server DBA の観点からは、最新の cu を使用すると、既知の問題の発生を防ぐことができます。また、SQL Server 環境のパフォーマンス、可用性、全体的な正常性にも役立ちます。</p>


  <h2>SP1 の必要性の排除</h2>


  <p>Azure SQL Database は、ほとんどの機能とバグの修正を最初に受け取ります。コードの変更は何百万ものデータベースに段階的に適用されます。 また、SQL Server エンジニアリングチームは、多くの並列マシンを活用して、テストをより迅速かつ頻繁に実行します。 最終的に、回帰サイクルでは、回帰とバグが早期にキャッチおよび修正されます。 これらの修正プログラムは、今後の累積的な更新プログラム (cu) を使用して SQL Server にロールバックされます。</p>


  <p>広範囲にわたるテストおよび運用環境に対応したビルドは、 <a href="https://blogs.msdn.microsoft.com/sqlreleaseservices/announcing-the-modern-servicing-model-for-sql-server/">最新のサービスモデル</a> に関するブログ記事で説明されている変更の発表につながっています。 SQL Server 2017 以降、ローカライズされた累積的な更新プログラム (cu) は、SQL Server 2017 のリリース後の最初の12か月ごとに配信され、5年間のメインストリームサイクルの残り4年間で毎月配信されます。 累積更新プログラムは運用可能であり、SQL Server 2017 以降の Service Pack リリースとしてテストされているため、年間サービスパックは公開されなくなりました。 SP1 が SQL Server 2017 にアップグレードされるまで待つ必要はありません。</p>


  <h2>2つのワールド、1つのエンジニアリングモデル</h2>


  <p>Azure SQL Database を実行すると、SQL Server エンジニアリングモデルが大幅に変換され、進化が続行されます。 ビルドと出荷のプロセスは引き続き合理化および改善されているため、Azure SQL Database と SQL Server の両方で、継続的な価値とイノベーションを顧客に提供することを目標としています。 クラウドイノベーションによって SQL Server が強化されているので、次のオンプレミスデータ層とアプリケーションを構築するのに最適な場所は SQL Server と考えられます。</p>


  <p>Microsoft &rsquo; のエンジニアリングモデルまたはこの記事で説明されている改善点に関するフィードバックをお寄せいただく場合は、お客様からのご意見をお待ちしております。 この件名に関するフィードバックやコメントを含む SQL Server エンジニアリングチームに問い合わせるには、電子メール SQLDBArchitects@microsoft.com をお送りください。</p>
