### YamlMime:Yaml
ms.openlocfilehash: 613d5e2aae2fc17006afa84401036eafad68741b
ms.sourcegitcommit: d03bdc7fe5447adb6530886aab848b75fe8fa8ee
ms.translationtype: MT
ms.contentlocale: ja-JP
ms.lasthandoff: 03/11/2022
ms.locfileid: "139891862"
Slug: announcing-the-release-of-azure-mobile-apps-node-sdk-v3-0-0
Title: Azure Mobile Apps Node SDK v 3.0.0 のリリースの発表
Summary: Azure Mobile Apps Node.js Server SDK の次のイテレーションを発表します。 このリリースには、新機能のスタック、改善点、バグ修正が含まれています。
Content: "<p>Azure Mobile Apps Node.js Server SDK の次のイテレーションを発表します。 &nbsp; このリリースには、新機能のスタック、改善点、バグ修正が含まれています。</p>\n\n<h2>データの変換、フィルター、およびフック</h2>\n\n<p>サーバー SDK の優れた機能の1つに、サーバーレベルでセキュリティフィルター処理とレコード変換を提供する機能がありました。これにより、開発者は、JavaScript コードを記述して、サーバーの要求-応答パイプラインを調整できます。 &nbsp; V2.0 リリースでは、拡張ポイントをさらに改良して、受信したクエリと項目を操作したり、各データ操作の後で機能をトリガーしたりできるように&#39;しました。 もちろん、独自のフィルター、変換、フックを作成して配布することもできます。 ただし、記述する必要のあるコードの量を減らすために、いくつかの一般的なフィルターをパッケージ化&#39;ます。</p>\n\n<h3>Per-User テーブル</h3>\n\n<p>おそらく、最も一般的なフィルター要求は、ユーザーごとのデータを提供することです。 &nbsp; ユーザーごとのテーブルを認証と共に使用して、テーブル内のデータを個々のユーザーに制限することができます。 &nbsp; このフィルターを使用するには、テーブル定義にを追加 <code>perUser = true </code> します。 &nbsp; 例えば：</p>\n\n<pre>\nvar table = require(&quot;azure-mobile-apps&quot;).table(); \ntable.access = &quot;authenticated&quot;;\ntable.perUser = true; \nmodule.exports = table;</pre>\n\n<h3>Web hook</h3>\n\n<p>Web フックを使用すると、各データ操作の完了後に外部 HTTP エンドポイント (Azure Functions など) を呼び出すことができます。</p>\n\n<pre>\nvar table = require(&quot;azure-mobile-apps&quot;).table();\ntable.webhook = { url: &quot;https://function.azurewebsites.net/apo/HttpTriggerNodeJS1&quot; };\nmodule.exports = table;\n</pre>\n\n<p>HTTP エンドポイントにポストされる構造など、この機能の詳細については、 <a href=\"https://azure.github.io/azure-mobile-apps-node\" target=\"_blank\">API リファレンス</a>を参照してください。</p>\n\n<h3>レコードの有効期限</h3>\n\n<p>一般的に要求されるもう1つのフィルターは、特定の間隔よりも古いレコードにアクセスできないようにする機能です。 たとえば、1日を経過したレコードへのアクセスを拒否することができます。</p>\n\n<pre>\nvar table = require(&quot;azure-mobile-apps&quot;).table();\ntables.recordsExpire = { days: 1 };\nmodule.exports = table;\n</pre>\n\n<p>間隔の指定の詳細については、 <a href=\"https://azure.github.io/azure-mobile-apps-node\" target=\"_blank\">API リファレンス</a>を参照してください。</p>\n\n<h2>データクエリの機能強化</h2>\n\n<p>Azure Mobile Apps サーバーでは、他のテーブルを参照して適切なテーブルを生成することが必要になる場合があります。 特定の一般的なシナリオを簡単にするために、 <a href=\"https://github.com/Azure/azure-query-js\" target=\"_blank\">クエリ API</a> が改善され&#39;ました。</p>\n\n<h3>論理的に削除されたレコードを含む</h3>\n\n<p>論理的な削除が有効になっている場合、レコードは SQL テーブルから実際に削除されるのではなく、削除済みとしてマークされます。 この情報は、オフラインキャッシュを更新できるように、他のモバイルデバイスに送信されます。 クエリでを指定し <code>.includeDeleted()</code> て、削除された項目を含めることができます。</p>\n\n<pre>\ntable.insert((context) =&gt; {\n    return context.tables(&#39;otherTable&#39;).includeDeleted().read()\n        .then((results) =&gt; {\n            context.item.count = results.length;\n            return context.execute();\n        });\n});\n</pre>\n\n<h3>ID でレコードを取得する</h3>\n\n<p>ID でレコードを取得するための単純な <code>find</code> 関数が、非常に簡単に追加&#39;ます。</p>\n\n<pre>\ntable.insert((context) =&gt; {\n    return context.tables(&#39;otherTable&#39;).find(context.item.parentId)\n        .then((parent) =&gt; {\n            context.item.parentName = parent.name;\n            return context.execute();\n        });\n});\n</pre>\n\n<h3>オブジェクト クエリ</h3>\n\n<p>以前は、オブジェクトベースのクエリを使用してテーブルを照会できましたが、update 操作と delete 操作では同じ機能を使用できませんでした。 この機能を使用できるようになりました。たとえば、依存レコードを削除することができます。</p>\n\n<pre>\ntable.delete((context) =&gt; {\n    return context.tables(&#39;childTable&#39;)\n        .delete({ parentId: context.item.id })\n        .then(context.execute);\n});\n</pre>\n\n<h2>テーブル関数でのコールバックの処理</h2>\n\n<p>以前の SDK リリースでは、テーブル操作関数内のコールバックはサポートしていませんでした。 &nbsp;このような方法では、約束を生成するためにコードを再作成する必要があります。 &nbsp;V 3.0.0 では、コールバックを直接サポートしています。 &nbsp;コールバックが完了したら、context. next (err) を呼び出し、エラーがあれば渡します。 &nbsp;例えば：</p>\n\n<pre>\n    var mongo = require(&#39;mongodb&#39;).MongoClient;\n\n    table.insert(function (context) {\n        context.execute().then(function () {\n            mongo.connect(&#39;mongodb://localhost:27017/test&#39;, function(err, db) {\n                db.collection(&#39;items&#39;).insertOne(context.item, function (err) {\n                    // signal that the operation is complete, passing in any error that may have occurred\n                    context.next(err);\n                });\n            });\n        });\n    });\n</pre>\n\n<h2>重大な変更</h2>\n\n<p>SQL Server に対してと句の <code>skip()</code> 両方を使用し <code>take()</code> てクエリを実行すると、基になるクエリによって生成された追加の列 (ROW_NUMBER) が返されます。 この列は返されなくなりました。 この変更は SQL Server 2012 以降で使用できる t-sql SQL 機能を使用して実装されているため、2012より前のバージョンの SQL Server はサポートされなくなりました。</p>\n\n<h2>SDK のインストール</h2>\n\n<p>新しいモバイルアプリを作成するか、既存のアプリをアップグレードするかにかかわらず、Azure Mobile Apps Server SDK for Node は npm 経由でインストールされます。</p>\n\n<pre>\nnpm install --save azure-mobile-apps@3.0</pre>\n\n<p>完全な API ドキュメントについては、 <a href=\"https://azure.github.io/azure-mobile-apps-node/\" target=\"_blank\">GitHub リポジトリ</a>と、モバイルバックエンドを構築する方法を説明する便利な<a href=\"https://azure.microsoft.com/documentation/articles/app-service-mobile-node-backend-how-to-use-server-sdk/\" target=\"_blank\">HOWTO ドキュメント</a>を参照してください。</p>"
