### YamlMime:Yaml
ms.openlocfilehash: 7d4a8a3d155c3d6e1fee53cd6b8d7041ee712ff1
ms.sourcegitcommit: d03bdc7fe5447adb6530886aab848b75fe8fa8ee
ms.translationtype: MT
ms.contentlocale: ja-JP
ms.lasthandoff: 03/11/2022
ms.locfileid: "139895040"
Slug: java-manage-azure-container-service-cosmos-db-active-directory-graph-and-more
Title: 'Java: Azure Container Service、Cosmos DB、Active Directory Graph などを管理します。'
Summary: Java 用 Azure 管理ライブラリの1.1 をリリースしました。 このリリースでは、Cosmos DB、Azure Container Service、およびレジストリ Active Directory Graph のサポートが追加されます。
Content: "<p>Java 用 Azure 管理ライブラリの1.1 をリリースしました。 このリリースでは、次のサポートが追加されています。</p> <table cellspacing=\"0\" cellpadding=\"2\" width=\"609\" border=\"0\"> <tbody> <tr> <td valign=\"top\" width=\"133\">Cosmos DB</td> <td valign=\"top\" width=\"281\">Azure Container Service とレジストリ</td> <td valign=\"top\" width=\"193\">Active Directory Graph</td></tr></tbody></table> <p><a title=\"https://github.com/Azure/azure-sdk-for-java\" href=\"https://github.com/Azure/azure-sdk-for-java\">https://github.com/Azure/azure-sdk-for-java</a></p> <h2>作業の開始</h2> <p>1.1 バージョンのライブラリを使用するには、次の依存関係フラグメントを Maven POM ファイルに追加します。</p><pre class=\"prettyprint\">&lt;dependency&gt;\n    &lt;groupId&gt;com.microsoft.azure&lt;/groupId&gt;\n    &lt;artifactId&gt;azure&lt;/artifactId&gt;\n    &lt;version&gt;1.1.0&lt;/version&gt;\n&lt;/dependency&gt;\n</pre>\n<h2>DocumentDB API を使用して Cosmos DB を作成する</h2>\n<p>Cosmos DB アカウントを作成するには、define ()... create () メソッドチェーン。</p><pre class=\"prettyprint\">DocumentDBAccount documentDBAccount = azure.documentDBs().define(\"myDocumentDB\")\n        .withRegion(Region.US_EAST)\n        .withNewResourceGroup(rgName)\n        .withKind(DatabaseAccountKind.GLOBAL_DOCUMENT_DB)\n        .withSessionConsistency()\n        .withWriteReplication(Region.US_WEST)\n        .withReadReplication(Region.US_CENTRAL)\n        .create();\n</pre>\n<p>さらに次のことができます。</p>\n<ul>\n<li><a href=\"https://github.com/Azure-Samples/cosmosdb-java-create-documentdb-and-configure-for-high-availability\">DocumentDB API を使用して Cosmos DB を作成し、高可用性を実現するように構成する</a> \n<li><a href=\"https://github.com/Azure-Samples/cosmosdb-java-create-documentdb-and-configure-for-eventual-consistency\">DocumentDB API を使用して Cosmos DB を作成し、最終的な整合性で構成する</a> \n<li><a href=\"https://github.com/Azure-Samples/cosmosdb-java-create-documentdb-and-configure-firewall\">DocumentDB API を使用した Cosmos DB の作成、高可用性のための構成、承認された IP アドレスのセットからのアクセスを制限するためのファイアウォールの作成</a> \n<li><a href=\"https://github.com/Azure-Samples/cosmosdb-java-create-documentdb-and-get-mongodb-connection-string\">MongoDB API を使用して Cosmos DB を作成し、接続文字列を取得する</a> </li></li></li></li></ul>\n<h2>Azure Container Registry を作成する</h2>\n<p>Azure Container Registry を作成するには、define ()... create () メソッドチェーン。</p><pre class=\"prettyprint\">Registry azureRegistry = azure.containerRegistries().define(\"acrdemo\")\n       .withRegion(Region.US_EAST)\n       .withNewResourceGroup(rgName)\n       .withNewStorageAccount(saName)\n       .withRegistryNameAsAdminUser()\n       .create();\n</pre>\n<p>Azure Container Registry の資格情報は、listCredentials () を使用して取得できます。</p><pre class=\"prettyprint\">RegistryListCredentials acrCredentials = azureRegistry.listCredentials();</pre>\n<h2>Kubernetes オーケストレーションを使用して Azure Container Service を作成する</h2>\n<p>Azure Container Service を作成するには、define ()... create () メソッドチェーン。</p><pre class=\"prettyprint\">ContainerService azureContainerService = azure.containerServices().define(\"myK8S\")\n      .withRegion(Region.US_EAST)\n      .withNewResourceGroup(rgName)\n      .withKubernetesOrchestration()\n      .withServicePrincipal(servicePrincipalClientId, servicePrincipalSecret)\n      .withLinux()\n      .withRootUsername(rootUserName)\n      .withSshKey(sshKeys.getSshPublicKey())\n      .withMasterNodeCount(ContainerServiceMasterProfileCount.MIN)\n      .withMasterLeafDomainLabel(\"dns-myK8S\")\n      .defineAgentPool(\"agentpool\")\n            .withVMCount(1)\n            .withVMSize(ContainerServiceVMSizeTypes.STANDARD_D1_V2)\n            .withLeafDomainLabel(\"dns-ap-myK8S\")\n            .attach()\n      .create();\n</pre>\n<p>Kubernetes クライアントは、コミュニティによって開発された <a href=\"https://github.com/fabric8io/kubernetes-client\">Kubernetes クライアントライブラリ</a>を使用してインスタンス化できます。</p><pre class=\"prettyprint\">KubernetesClient kubernetesClient = new DefaultKubernetesClient(config);</pre>\n<h2>Container Service で Container Registry から Kubernetes にデプロイする</h2>\n<p>同じコミュニティによって開発された <a href=\"https://github.com/fabric8io/kubernetes-client\">Kubernetes client ライブラリ</a> と、その Container Registry に関連付けられたイメージのプルシークレットを使用して、Azure Container Registry から Kubernetes クラスターにイメージをデプロイできます。</p><pre class=\"prettyprint\">ReplicationController rc = new ReplicationControllerBuilder()\n     .withNewMetadata()\n          .withName(\"acssample-rc\")\n          .withNamespace(acsNamespace)\n          .addToLabels(\"acssample-nginx\", \"nginx\")\n     .endMetadata()\n     .withNewSpec()\n          .withReplicas(2)\n          .withNewTemplate()\n               .withNewMetadata()\n                    .addToLabels(\"acssample-nginx\", \"nginx\")\n               .endMetadata()\n               .withNewSpec()\n                    .addNewImagePullSecret(acsSecretName)\n                    .addNewContainer()\n                         .withName(\"acssample-pod-nginx\")\n                         .withImage(\"acrdemo.azurecr.io/samples/acssample-nginx\")\n                         .addNewPort()\n                              .withContainerPort(80)\n                         .endPort()\n                    .endContainer()\n                .endSpec()\n          .endTemplate()\n     .endSpec()\n     .build();\n \nkubernetesClient.replicationControllers().inNamespace(acsNamespace).create(rc);\n</pre>\n\n<p>Container registry から Container Service の Kubernetes にイメージをデプロイする <a href=\"https://github.com/Azure-Samples/acs-java-deploy-image-from-acr-to-kubernetes\">完全なサンプルコード</a> を見つけることができます。<br>同様に、App Service で <a href=\"https://github.com/Azure-Samples/app-service-java-deploy-image-from-acr-to-linux\">Azure Container Registry から Linux コンテナーにイメージをデプロイ</a> することもできます。</p>\n<h2>サブスクリプションアクセスでサービスプリンシパルを作成する</h2>\n<p>サービスプリンシパルを作成し、定義 () を使用して共同作成者ロールを持つサブスクリプションに割り当てることができます... create () メソッドチェーン。</p><pre class=\"prettyprint\">ServicePrincipal servicePrincipal = authenticated.servicePrincipals().define(\"spName\")\n     .withExistingApplication(activeDirectoryApplication)\n     // define credentials\n     .definePasswordCredential(\"ServicePrincipalAzureSample\")\n           .withPasswordValue(\"StrongPass!12\")\n           .attach()\n     // define certificate credentials\n     .defineCertificateCredential(\"spcert\")\n           .withAsymmetricX509Certificate()\n           .withPublicKey(Files.readAllBytes(Paths.get(certificate.getCerPath())))\n           .withDuration(Duration.standardDays(7))\n           // export credentials to a file\n           .withAuthFileToExport(new FileOutputStream(authFilePath))\n           .withPrivateKeyFile(certificate.getPfxPath())\n           .withPrivateKeyPassword(certPassword)\n           .attach()\n     .withNewRoleInSubscription(role, subscriptionId)\n     .create();\n</pre>\n<p>同様に、次のことができます。</p>\n<ul>\n<li><a href=\"https://github.com/Azure-Samples/aad-java-manage-service-principals\">サービスプリンシパルの管理</a> \n<li><a href=\"https://github.com/Azure-Samples/aad-java-browse-graph-and-manage-roles\">グラフ (ユーザー、グループ、メンバー) を参照し、ロールを管理する</a> \n<li><a href=\"https://github.com/Azure-Samples/aad-java-manage-passwords\">パスワードの管理</a> </li></li></li></ul>\n<h2>[試用版]</h2>\n<p>より多くの &nbsp; <a href=\"https://github.com/azure/azure-sdk-for-java#sample-code\">https://github.com/azure/azure-sdk-for-java#sample-code</a> サンプルを入手できます。 ぜひ試してみてください (以下の電子メールまたはコメントを参照)。</p>\n<p>Azure <a href=\"https://azure.com/java\">https://azure.com/java</a> 上の Java に関する追加情報については、「」を参照してください。</p>"
