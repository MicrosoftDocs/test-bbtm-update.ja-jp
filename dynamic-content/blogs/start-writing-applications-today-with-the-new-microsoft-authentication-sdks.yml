### YamlMime:Yaml
ms.openlocfilehash: dc91737f078f8f58cc79b7923b570df0fe2dcab1
ms.sourcegitcommit: d03bdc7fe5447adb6530886aab848b75fe8fa8ee
ms.translationtype: MT
ms.contentlocale: ja-JP
ms.lasthandoff: 03/11/2022
ms.locfileid: "139892168"
Slug: start-writing-applications-today-with-the-new-microsoft-authentication-sdks
Title: 新しい Microsoft Authentication SDK を使用して、今日からアプリケーションの作成を開始する
Summary: ビルド 2016 では、Microsoft ID 用の新世代の認証 SDK である Microsoft Authentication Library (MSAL) for .NET の最初の開発者プレビューを発表しました。 本日は、MSAL .NET、MSAL iOS、MSAL Android、MSAL Javascript の実稼働対応プレビューのリリースを発表します。
Content: >-
  <p>ビルド 2016 では、Microsoft <a href="https://blogs.technet.microsoft.com/enterprisemobility/2016/03/31/microsoft-identity-at-build-2016/"></a> ID 用の新世代の認証 SDK である Microsoft Authentication Library (MSAL) for .NET の最初の開発者プレビューを発表しました。</p>


  <p>本日は、MSAL .NET、MSAL iOS、MSAL Android、MSAL Javascript の実稼働対応プレビューのリリースを発表します。</p>


  <p>この 1 年で、B2C と B2C の v2 プロトコル エンドポイントの機能Azure AD進Azure ADしました。 新しい MSALs は、これらの新機能を活用し、最初のプレビューについて提供された優れたフィードバックと組み合わせて、今までとは異なってアプリでの認証機能の統合を簡略化します。</p>


  <p>&rsquo;現在リリースしているライブラリはまだプレビュー中です。つまり、フィードバックを提供し、API &ndash;&rsquo;サーフェスを変更する時間はまだ残っていますが、それらは実稼働環境で完全にサポートされています。アプリで自信を持って使用できます。問題がある場合は、完全にリリースされた製品に対して、通常のすべてのサポート チャネルを無料で使用できます。 詳しくは、以下をご覧ください。</p>


  <h2>MSAL の紹介</h2>


  <p>MSAL は、Microsoft ID で保護された Web API にアクセスするために必要なトークンを簡単に取得できる SDK です。つまり、Azure AD (仕事用アカウントと学校アカウントまたは個人用 Microsoft アカウント)、Azure AD B2C、または新しい ASP.NET Core ID の v2 プロトコル エンドポイントによって行います。 Web API の例としては、Microsoft cloud API (Microsoft Graph など) や、Microsoft ID によって発行されたトークンを受け入れるように構成された他のサードパーティ API (独自のものも含む) があります。</p>


  <p>MSAL では、基本的なプリミティブのセットが提供されます。簡単なコード行が少ないトークンを操作できます。</p>


  <p>MSAL は、多くの複雑でリスクの高いプログラミング タスクを処理します。そうしないと、自分でコードを作成する必要があります。 具体的には、MSAL は、必要に応じて認証と同意 UX の表示、現在のシナリオに適したプロトコル フローの選択、適切な承認メッセージの生成、関連する応答の処理、ポリシー駆動型認証レベルのネゴシエート、デバイス認証機能の活用、後で使用するためのトークンの格納、透過的な更新などの処理を行います。 &rsquo;その高度なロジックにより、OAuth2 または OpenId Connect 仕様の 1 行も読み取らない場合でも、セキュリティで保護された API と高度なエンタープライズ レベルのアクセス制御機能を利用できます。 &rsquo;Azure AD 内部について学習する必要はありません。MLS を使用すると、ユーザーと管理者の両方が、専用のコードを必要とせずに、実行時にアクセス ポリシーが自動的に適用されると確信できます。</p>


  <p>疑問に思うでしょうが、MSAL または Active Directory 認証ライブラリ (ADAL) を使用する必要がありますか? 答えは簡単です。Azure AD の仕事用アカウントと学校アカウントと Microsoft 個人アカウント (Azure AD の v2 プロトコル エンドポイントを使用) の両方をサポートする必要があるアプリケーションを構築する場合、または Azure AD B2C を使用するアプリを構築する場合は、MSAL を使用します。 仕事用&rsquo;アカウントと学校アカウントをサポートする必要Azure ADを作成する場合は、ADAL を使用します。 今後は、すべてのアプリで&rsquo; MSAL を使用することをお勧めしますが、まだ使用しないでください。 MSAL と v2 プロトコル エンドポイントで行う作業はまだもう少し残Azure AD。 ADAL の詳細については、後の投稿を参照してください。</p>


  <h2>MSAL プログラミング モデル</h2>


  <p>MSAL を使用した開発は簡単です。</p>


  <p>すべては、Azure AD、<a href="https://apps.dev.microsoft.com/">B2C</a>、または Azure AD Identity の v2 プロトコル エンドポイントにアプリ<a href="https://portal.azure.com/"></a>を登録 ASP.NET Core開始します。 ここでは、&rsquo;アプリに関する基本的な情報を指定します (モバイル アプリですか? Web アプリですか、それとも Web API ですか?アプリの識別子を取得します。 たとえば&rsquo;、作業学校と MSA アカウント (Azure AD の v2 プロトコル エンドポイント) を使用することを意図した .NET &amp; デスクトップ アプリケーションを作成するとします。</p>


  <p>コードでは、常に *ClientApplication のインスタンス (Azure AD アプリのコード内の表現)&rsquo; を作成します。この場合、PublicClientApplication の新しいインスタンスを初期化し、登録時に取得した識別子を渡します。</p>


  <div class="wlWriterSmartContent" id="scid:C89E2BDB-ADD3-4f7a-9810-1B7EACF446C1:fa74bad8-c5d0-48d4-af4b-d5b95051204d" style="float: none; padding-bottom: 0px; padding-top: 0px; padding-left: 0px; margin: 0px; display: inline; padding-right: 0px">

  <pre style="white-space: normal">

  [sourcecode language=&#39;csharp&#39; padlinenumbers=&#39;true&#39;] string clientID = &quot;a7d8cef0-4145-49b2-a91d-95c54051fa3f&quot;; PublicClientApplication myApp = new PublicClientApplication(clientID); [/sourcecode]</pre>

  </div>


  <p>ユーザーの電子メール メッセージにアクセスするために、Microsoft Graphを呼び出したいとします。 必要なのは AcquireTokenAsync を呼び出し、呼び出す API に必要なスコープ (この場合は Mail.Read) を指定することだけです。</p>


  <div class="wlWriterSmartContent" id="scid:C89E2BDB-ADD3-4f7a-9810-1B7EACF446C1:183272d1-a3dc-4b6b-b07b-e72c1ecb5ea6" style="float: none; padding-bottom: 0px; padding-top: 0px; padding-left: 0px; margin: 0px; display: inline; padding-right: 0px">

  <pre style="white-space: normal">

  [sourcecode language=&#39;csharp&#39; ] string[] scopes = { &quot;Mail.Read&quot; }; AuthenticationResult ar = await myApp.AcquireTokenAsync(scopes); [/sourcecode]</pre>

  </div>


  <p>AcquireTokenAsync&rsquo; を呼び出した場合、ポップアップが表示され、ユーザーディレクトリの管理者によって確立された認証ポリシーを適用して、ユーザーが選択したアカウントで認証するように求めるメッセージが表示されます。 たとえば、そのコードを実行して microsoft.com &ndash;&rsquo;アカウントを使用すると、2 要素認証を使用する必要があります。一方、Id が自分のテスト テナントのユーザーを使用する場合、ユーザー名とパスワードのみを求められます。</p>


  <p>認証が成功すると、ユーザーは、要求されたアクセス許可と、個人情報へのアクセスに関連するその他のアクセス許可 (名前など) に同意を付与するために昇格されます。</p>


  <p><a href="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/9ea1c020-cd27-4646-b63f-5acf44af6d92.png"><img alt="MSALconsentPrompt" border="0" height="963" src="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/cb5d3730-0737-485d-acc9-6c3f51d7e38b.png" style="border-left-width: 0px; border-right-width: 0px; background-image: none; border-bottom-width: 0px; padding-top: 0px; padding-left: 0px; display: inline; padding-right: 0px; border-top-width: 0px" title="MSALconsentPrompt" width="855"></a></p>


  <p><a name="_msocom_1"></a></p>


  <p>ユーザーが受け入れたらすぐに、AcquireTokenAsync の呼び出しによってトークン取得フローが終了し、AuthenticationResult で (他の有用な情報と共に) 返されます。 必要な操作は、(ar を使用して) 抽出する必要があります。AccessToken) を選択し、API 呼び出しに含める必要があります。</p>


  <p>MSAL は高度なトークン ストアを備え、AcquireTokenAsync 呼び出しごとにトークンを自動的にキャッシュします。 MSAL には別のプリミティブ AcquireTokenSilentAsync が用意されています。これはキャッシュを透過的に検査して、必要な特性 (スコープ、ユーザーなど) を持つアクセス トークンが既に存在するか、ユーザーに UX を表示せずに取得できるかどうかを判断します。 Azure ADは強力な更新トークンを発行します。これは、多くの場合、新しいスコープや異なる組織の場合でも、新しいアクセス トークンを自動的に取得するために使用できます。MSAL は、プロンプトを最小限に抑えるために、これらの機能を利用するためにすべてのロジックを分類します。 つまり、これからは、メール API を呼び出す必要があるときは常に、以下のように AcquireTokenSilentAsync を呼び出して、常に新しいアクセス トークンを返す必要があるという情報を得ることができます。また、ユーザーがアプリに対する同意を取り消した場合など、何か問題が発生した場合は、いつでも AcquireTokenAsync に戻り、ユーザーに再度プロンプトを表示できます。</p>


  <div class="wlWriterSmartContent" id="scid:C89E2BDB-ADD3-4f7a-9810-1B7EACF446C1:36458724-a50c-4299-9f94-6114021fcf2f" style="float: none; padding-bottom: 0px; padding-top: 0px; padding-left: 0px; margin: 0px; display: inline; padding-right: 0px">

  <pre style="white-space: normal">

  [sourcecode language=&#39;csharp&#39; ] try { ar = await App.AcquireTokenSilentAsync(scopes, myApp.Users.FirstOrDefault()); } catch (MsalUiRequiredException UiEx) { ar = await App.PCA.AcquireTokenAsync(scopes); } [/sourcecode]</pre>

  </div>


  <p>これは、主な MSAL 使用パターンです。 その他 &ndash; はすべて、プラットフォーム、プログラミング言語、アプリケーションの種類、シナリオの違いを考慮するバリエーションですが、本質的には、この 2 つの呼び出しをマスターすると、MSAL のしくみがわかっています。</p>


  <h2>プラットフォーム</h2>


  <p>MSAL は複数のプラットフォームで利用できます。 概念はボード全体で同じですが、ターゲットプラットフォームごとに一般的なプリミティブとベスト プラクティスを使用して公開されます。</p>


  <p>過去 3 年間の ID 部門からのすべてのライブラリと同様に、MSAL は OSS であり、github で入手できます。 オープンで MSAL を開発し、コミュニティへの貢献を歓迎します。 たとえば、BlueMetal と Microsoft MVP のプリンシパル アーキテクトである Oren Novotny が、.NET Standard ターゲットを操作するために MSAL のリファクタリングに取り組むのを認めたい。 Oren さん、ありがとうございます。</p>


  <p>現在リリース中の MSALs プレビューに関する詳細を以下に示します。</p>


  <h3>MSAL .NET</h3>


  <p>ソースは で確認できます <a href="https://github.com/AzureAD/microsoft-authentication-library-for-dotnet">https://github.com/AzureAD/microsoft-authentication-library-for-dotnet</a>。</p>


  <p>MSAL .NET は、 Nuget.org を介して配布されます。パッケージは で確認できます <a href="https://www.nuget.org/packages/Microsoft.Identity.Client">https://www.nuget.org/packages/Microsoft.Identity.Client</a>。</p>


  <p>MSAL .NET は、.NET Desktop (4.5 以上)、.NET Standard 1.4、.NET Core、UWP、xamarin Forms for iOS/Android/UWP で動作します。</p>


  <p>MSAL.NET ネイティブ アプリ (デスクトップ、コンソール、モバイル) と Web アプリの両方の開発がサポートされています (たとえば、ASP.NET Web アプリの背後にあるコード)。</p>


  <p>&rsquo;選択できるコード サンプルは多数存在します。<a href="https://azure.microsoft.com/en-us/resources/samples/active-directory-dotnet-desktop-msgraph-v2/">WPF</a> アプリの開発に関するコード サンプル、<a href="https://azure.microsoft.com/en-us/resources/samples/active-directory-xamarin-native-v2/">UWP/iOS/Android</a> をターゲットとする Xamarin フォーム アプリの開発、増分同意を使用した <a href="https://azure.microsoft.com/en-us/resources/samples/active-directory-dotnet-webapp-openidconnect-v2/">Web</a><a href="https://github.com/Azure-Samples/active-directory-dotnet-daemon-v2"></a>&rsquo; アプリの開発、サーバー間の通信の 1 つ、今後数週間でさらに追加するコード サンプルがあります。 &rsquo;また、B2C で MSAL を使用する方法を示すさまざまなサンプルも用意されています。<a href="https://github.com/Azure-Samples/active-directory-b2c-xamarin-native">Xamarin Forms</a> アプリ、<a href="https://github.com/Azure-Samples/active-directory-b2c-dotnet-webapp-and-webapi/blob/msal-update/TaskWebApp/App_Start/Startup.Auth.cs">.Net WebApp</a>、<a href="https://github.com/Azure-Samples/active-directory-b2c-dotnetcore-webapp">.Net Core WebApp</a>、<a href="https://github.com/Azure-Samples/active-directory-b2c-dotnet-desktop">.Net WPF</a> アプリです。</p>


  <h3>MSAL JavaScript</h3>


  <p>ソースは で確認できます <a href="https://github.com/AzureAD/microsoft-authentication-library-for-js">https://github.com/AzureAD/microsoft-authentication-library-for-js</a>。</p>


  <p>ライブラリの readme で説明されているとおり、NPM を使用して MSAL JS を&rsquo; インストールできます。 また、 の CDN エントリがあります<a href="https://secure.aadcdn.microsoftonline-p.com/lib/0.1.0/js/msal.min.js">https://secure.aadcdn.microsoftonline-p.com/lib/0.1.0/js/msal.min.js</a>。</p>


  <p>簡単な SPA を示すサンプルは、こちらを参照 <a href="https://azure.microsoft.com/en-us/resources/samples/active-directory-javascript-singlepageapp-dotnet-webapi-v2/">してください</a>。 B2C での MSAL JS の使用を示すサンプルは、こちらを参照 <a href="https://github.com/Azure-Samples/active-directory-b2c-javascript-msal-singlepageapp">してください</a>。</p>


  <h3>MSAL iOS</h3>


  <p>ソースは で確認できます <a href="https://github.com/AzureAD/microsoft-authentication-library-for-objc">https://github.com/AzureAD/microsoft-authentication-library-for-objc</a>。</p>


  <p>MSAL iOS は、<a href="https://github.com/Carthage/Carthage">Carthage</a> 経由GitHubから直接配布されます。</p>


  <p>iOS のサンプルについては、こちらを参照 <a href="https://github.com/Azure-Samples/active-directory-ios-swift-native-v2">してください</a>。 B2C での MSAL iOS の使用を示すサンプルは、こちらを参照 <a href="https://github.com/Azure-Samples/active-directory-b2c-ios-swift-native-msal">してください</a>。</p>


  <h3>MSAL Android</h3>


  <p>ソースは で確認できます&ndash;<a href="https://github.com/AzureAD/microsoft-authentication-library-for-android">https://github.com/AzureAD/microsoft-authentication-library-for-android</a>。</p>


  <p><strong>Gradle</strong> を介してバイナリを取得できます(「repos&rsquo; readme」を参照)。</p>


  <p>MSAL Android の正規の使用方法を示すサンプルについては、こちらを参照 <a href="https://github.com/Azure-Samples/active-directory-android-native-v2">してください</a>。</p>


  <h3>システム Web ビュー</h3>


  <p>MSAL iOS と MSAL Android では、それぞれ SafariViewController や Chrome カスタム タブなどの OS レベルの機能を利用した認証と同意 UX が表示されます。</p>


  <p>このアプローチには、ADAL で使用される埋め込みブラウザーコントロール ビューに比してさまざまな利点があります。デバイス ブラウザーを介してアクセスされるネイティブ アプリと Web アプリの間で SSO 共有が可能であり、デバイス上で SSL 証明書を活用できる機能であり、一般にセキュリティの保証が向上します。</p>


  <p>システム Web ビューを使用すると、MSAL は、 <a href="https://tools.ietf.org/html/draft-ietf-oauth-native-apps-10">OAuth2 for Native Apps</a> の最新のプラクティスに関するドキュメントに記載されているガイダンスに合わせて調整されます。</p>


  <h2>実稼働環境 &ldquo;でサポートされているプレビューの実際&rdquo; の意味</h2>


  <p>MSAL iOS、MSAL Android、MSAL JS は、この週、その機能を果たします。および MSAL .NET には、昨年のプレビューでは利用できない Azure AD および Azure AD B2C の v2 プロトコル エンドポイントの機能が組み込&rsquo;みされています。</p>


  <p>引き続きフィードバックを聞き、それを組み込む自由を維持する必要があります。つまり、長期的にコミットする前に API サーフェスを変更する必要がある場合があります。 さらに、Azure AD と B2C の v2 プロトコル エンドポイントはどちらも、十分に<a href="https://docs.microsoft.com/en-us/azure/active-directory/develop/active-directory-v2-limitations"></a>丸められた SDK リリースの一部である必要がある機能をまだ追加しています。既に設計は行っていますが、現在既に利用可能な機能と同じプレビュー プロセスを実行する必要があります。</p>


  <p>つまり、MSAL&rsquo; ビットは十分にテストされ、実稼働環境での使用をサポートできると確信しているが、ライブラリを一般提供に呼び出す準備はまだできていないことを意味します。</p>


  <p>MSAL が&ldquo;&rdquo;実稼働でサポートされているプレビューであるということは、今週リリースされる MSAL プレビューの Golive ライセンスを付与しているという意味です。 これらの MS ACL&rsquo; は、通常の Microsoft サポート チャネル (Premier サポート、StackOverflow など) を通じてサポートを受け取れる自信を持って、実稼働アプリで使用できます。</p>


  <p>ただし、これは開発者&rsquo;プレビューのままです。つまり、それを選択した場合は、進行中の作業の一部に対処する準備をする必要があります。 具体的には、次の条件を使用します。</p>


  <ul>
   <li>今後のプレビューの更新ごとに、API サーフェスが変更される可能性があります (そして、その可能性が高い)。 &ndash;つまり、影響を受けるバグを修正するために次の更新を待っていた場合は、新しいリリースを取り込むときにコードを変更する準備をする必要があります。それらの変更が影響を受けるバグとは無関係であり、同じリリースで発生した場合でも同様です。</li>
   <li>MSAL が一般提供される場合は、GA バージョンの SDK を使用するためにアプリを更新するために 6 か月が必要になります。 6 &ndash;&rsquo;&rsquo;か月が経過すると、プレビュー ライブラリはサポートされなくなりました。また、これを回避するために最善を試しますが、Azure AD と Azure AD B2C の v2 プロトコル エンドポイントがプレビュー ビットで動作し続けることは保証しません。</li>
  </ul>


  <p>実行可能な場合は、できるだけ早く一般提供を受け取る必要があります。ただし、条件は品質に基づいており、日付駆動型ではありません。 MSAL は多くのアプリケーションのクリティカル パスに入り、正しく&rsquo;行う必要があります。 これでブロックが解除され、運用アプリで Microsoft ID を自信を持って利用できるのが良いニュースです。</p>


  <h2>ADAL について</h2>


  <p>すべての意図と目的について、MSAL は ADAL vNext と見なされます。 プリミティブの多くは同じままです (AcquireTokenAsync、AcquireTokenSilentAsync、AuthenticationResults など)、目標は変わりません。プロトコルの専門家になることなく API に簡単にアクセスできます。 &rsquo;ADAL を使用して開発を行っている場合は&rsquo;、MSAL を使用して自宅で使用できます。 リポジトリを使い切った&rsquo;場合は、ライブラリ間に重大な DNA 横転送があるのが分かっています。</p>


  <p>同時に、MSAL には非常に大きなスコープがあります。一方、ADAL は Azure AD と ADFS を介した仕事用アカウントと学校アカウントでのみ動作し、MSAL は、1 つの一貫性のあるオブジェクト モデルで、ADFS&hellip; を使用して(将来のリリースで) 仕事用および学校アカウント、MSA、Azure AD B2C および ASP.NET Core ID で動作します。 これに加えて、Azure AD v1 エンドポイントと v2 エンドポイントの違いは重要であり、必然的に SDK に反映されています。つまり、優先度 &ndash; 、リソースではなくスコープ、リソース所有者のパスワード付与の削除などです。</p>


  <p>さらに、複数のバージョンの ADAL を通じて蓄積されたエクスペリエンスとフィードバック (ADAL.NET nuget のみが約280万回ダウンロードされています) は、プログラミングモデルに重要な変更を加えることになります。これは、同じ SDK のメジャーバージョン間で通常予想される重大な変更を超える &rsquo; 可能性があります。</p>


  <p>このような理由から、拡張されたスコープ &ndash; の Microsoft 認証ライブラリをより適切に反映する新しい名前を選択することによって、違いを明確に伝えることにしました。</p>


  <p><a>adal に多大な投資</a>をしている場合、 &rsquo; ユーザーの心配は無用です。 adal は完全にサポートされており、Azure AD の職場と学校のアカウントのみをサポートする必要があるアプリケーションを構築する場合は、適切な選択のままです。</p>


  <h2>フィードバック</h2>


  <p>ビルド時に MSAL が動作していることを確認する場合は、木曜日の 4:00 PM にセッション B8084 によって停止します。 セッションの記録は、の 24 ~ 48 時間後 <a href="https://channel9.msdn.com/Events/Build/2017/B8084">https://channel9.msdn.com/Events/Build/2017/B8084</a> に表示されます。</p>


  <p><a href="https://feedback.azure.com/forums/169401-azure-active-directory/category/164757-developer-experiences">UserVoice</a>および Twitter ( <a href="https://twitter.com/azuread">@azuread</a> 、 <a href="https://twitter.com/vibronet">@vibronet</a> ) に関するフィードバックをお寄せください。 質問がある場合は、Stack Overflow ( <a href="https://stackoverflow.com/questions/tagged/MSAL">msal</a> &lsquo; タグを使用 &lsquo; ) の使用に関するヘルプを参照してください。</p>


  <p><a name="_msocom_1"></a></p>


  <p>よろしくお願いいたします。</p>


  <p>Vittorio/Cci (Twitter: <a href="https://twitter.com/vibronet">@vibronet</a> &ndash; ブログ: <a href="https://www.cloudidentity.com/">https://www.cloudidentity.com/</a> )</p>


  <p>プリンシパルプログラムマネージャー</p>


  <p>Microsoft Id 部門</p>
