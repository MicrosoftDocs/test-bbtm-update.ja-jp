### YamlMime:Yaml
ms.openlocfilehash: 5b517a3e61661f205520751b8bc3d54851d1ee11
ms.sourcegitcommit: d03bdc7fe5447adb6530886aab848b75fe8fa8ee
ms.translationtype: MT
ms.contentlocale: ja-JP
ms.lasthandoff: 03/11/2022
ms.locfileid: "139904233"
Slug: connections-and-sql-azure
Title: 接続とSQL Azure
Summary: '[この記事は、チームによってSQL Azureされました。]SQL Azure などの Web 対応データベースを使用する場合は、インターネットまたは他の複雑なネットワークを使用して接続する必要があります。その理由は、お使いになります。'
Content: "<p>[この記事は、チームによってSQL Azureされました。]</p><p>SQL Azure などの Web 対応データベースを使用する場合は、インターネットまたは他の複雑なネットワークを使用した接続が必要です。この理由により、接続の予期しない削除を処理する準備をする必要があります。&#160;確立された接続は、データを返している接続、接続プールで開いている接続、またはクライアント側の変数にキャッシュされている接続で構成されます。 アプリケーションに接続するSQL Azure、コードでを計画する必要がある有効なシナリオです。 接続が切断された場合の処理方法としては、接続を再確立したうえで、失敗したコマンドまたはクエリを再度実行するのが最も効果的です。</p>  <h2>ネットワーク信頼性</h2>  <p>クライアント コードを実行しているマシンと SQL Azure サーバーの間のすべてのネットワーク コンポーネントの品質は、Microsoft の制御の外部にある場合があります。&#160; インターネット上で多数の理由により、セッションが切断される可能性があります。&#160; Windows Azure でアプリケーションを実行すると、アプリケーションとサーバー間の距離が短縮されるので、切断のリスクが大幅に軽減されます&#160; </p>  <p>ネットワークの問題が原因で切断が発生する状況では、SQL Azure はセッションが終了されたため、アプリケーションに意味のあるエラーを返す機会がありません。 ただし、この接続を再利用する場合 (接続プールを使用する場合など)、10053 (サーバーから結果を受信するときにトランスポート レベルのエラーが発生しました) が発生します。 (プロバイダー: TCP プロバイダー、エラー: 0 - 確立された接続がホスト コンピューターのソフトウェアによって中止されました) エラー。</p>  <h2>冗長性には接続の再試行に関する考慮事項が必要です</h2>  <p>同じ LAN 内の単一の SQL Server に対する接続に慣れている場合、そのサーバーがアップグレードのために失敗またはダウンした場合、アプリケーションは永続的に切断されます&#160; ただし、冗長な SQL Server 環境に対してコーディングを行っている場合は、プライマリ サーバーが使用できないときに冗長サーバーへの再接続を管理するコードが既に存在している可能性があります。&#160; この状況では、 長いダウンタイムの代わりに短い切断。&#160; SQL Azureは、クラスター内の冗長なSQL Server動作します。 ファブリックSQL Azure、システム内のすべてのノードの正常性を管理します。 ノードが問題の状態である場合、または (アップグレードが発生した場合に) ノードをオフラインにする準備ができていることをファブリックが確認した場合、ファブリックは別のノード上のデータベースのレプリカにセッションを自動的に再接続します。</p>  <p>現在、一部のフェールオーバー アクションによってセッションが突然終了し、そのため、クライアントは一般的なネットワーク切断エラーを受け取ります (サーバーから結果を受信するときにトランスポート レベルのエラーが発生しました)。 (プロバイダー: TCP プロバイダー、エラー: 0 - 確立された接続が、ホスト コンピューターのソフトウェアによって中止されました。)&#160;状況での最善の措置は、再接続し、SQL Azureデータベースの正常なレプリカに自動的に接続する方法です。</p>  <h2>リソース管理 (SQL Azure</h2>  <p>他のデータベース SQL Azure と同様に、エラー、リソース不足、その他の一時的な理由によりセッションが終了することがあります。&#160; このような状況では、クライアント接続にアクティブな要求がある場合、SQL Azure は常に特定のエラーを返します。&#160; 保留中の要求がない場合は、常にクライアント アプリケーションにエラーを返す可能性がない可能性があります。&#160; たとえば、 アクティブな要求を行わずに SQL Server Management Studio 経由で 30 分以上データベースに接続している場合、セッションはタイムアウトし、アクティブな要求が存在しないので SQL Azure はエラーを返す必要があります。</p>  <p>このような状況では、既SQL Azure接続が閉じらされます。</p>  <ul>   <li>アイドル状態の接続がアプリケーションによって 30 分以上保持されました。</li>    <li>あなたは、30 分を超える間、SQL Server Management Studioに行き、接続を終了しました</li> </ul>  <h2>SQL Azure エラー</h2>  <p>接続の損失を処理するコードの記述を開始する前に、他のいくつかの SQL Azure エラーは、接続を再確立してから、失敗したコマンドまたはクエリを再実行するとメリットがあります。 これには次のようなものがあります。</p>  <ul>   <li>40197 - サービスで要求の処理中にエラーが発生しました。 もう一度やり直してください。 </li>    <li>40501 - サービスは現在ビジー状態です。 10 秒後に要求を再試行してください。 </li> </ul>  <h4>コード</h4>  <p>次のコードでは、インターネットに関連付けられている待機時間と、接続が削除される可能性を考慮します。 コード:</p>  <ul>   <li>失敗したコマンドまたはクエリを繰り返し実行します。回数は、無限ループに入ることなく .config ファイルで構成できます。</li>    <li>試行間の待機時間は、 ファイルで構成.configされます。</li>    <li>他の例外をスローして、再試行する必要がある例外のみを処理します。</li>    <li>今後他のシナリオを追加できるよう、例外の審査を抽象化します。</li> </ul>  <p>C#:</p>  <pre class=\"csharpcode\"><span class=\"rem\">/// &lt;summary&gt;</span>  <span class=\"rem\">/// Generic Code that takes and input and executes </span>  <span class=\"rem\">/// a statement against the SQL Azure</span>  <span class=\"rem\">/// &lt;/summary&gt;</span>  <span class=\"rem\">/// &lt;param name=&quot;companyId&quot;&gt;&lt;/param&gt;</span>  <span class=\"kwrd\">static</span> <span class=\"kwrd\">void</span> DoSomething(Int32 companyId)  {      <span class=\"rem\">// This is the retry loop, handling the retries session</span>      <span class=\"rem\">// is done in the catch for performance reasons</span>      <span class=\"kwrd\">for</span> (Int32 attempt = 1; ; )      {          <span class=\"rem\">// Create a SqlConnection Class, the connection isn't established </span>          <span class=\"rem\">// until the Open() method is called</span>          <span class=\"kwrd\">using</span> (SqlConnection sqlConnection = <span class=\"kwrd\">new</span> SqlConnection(              ConfigurationManager.ConnectionStrings[<span class=\"str\">&quot;SQLAzure&quot;</span>].                  ConnectionString))          {              <span class=\"kwrd\">try</span>              {                  <span class=\"rem\">// Open the connection</span>                  sqlConnection.Open();                    <span class=\"rem\">// Statement To Call</span>                  String sql = <span class=\"str\">@&quot;SELECT Color FROM Source WHERE Id = @CompanyId&quot;</span>;                    SqlCommand sqlCommand = <span class=\"kwrd\">new</span> SqlCommand(sql, sqlConnection);                    sqlCommand.Parameters.AddWithValue(<span class=\"str\">&quot;@CompanyId&quot;</span>, companyId);                    <span class=\"kwrd\">using</span> (SqlDataReader sqlDataReader = sqlCommand.ExecuteReader())                  {                      <span class=\"kwrd\">while</span> (sqlDataReader.Read())                      {                          <span class=\"rem\">/// Do Something Wtih Color</span>                      }                        <span class=\"kwrd\">return</span>;                  }              }              <span class=\"kwrd\">catch</span> (SqlException sqlException)              {                  <span class=\"rem\">// Increment Trys</span>                  attempt++;                    <span class=\"rem\">// Find Maximum Trys</span>                  Int32 maxRetryCount = Int32.Parse(                      ConfigurationManager.AppSettings[<span class=\"str\">&quot;ConnectionRetrys&quot;</span>]);                    <span class=\"rem\">// Throw Error if we have reach the maximum number of retries</span>                  <span class=\"kwrd\">if</span> (attempt == maxRetryCount)                      <span class=\"kwrd\">throw</span>;                    <span class=\"rem\">// Determine if we should retry or abort.</span>                  <span class=\"kwrd\">if</span> (!RetryLitmus(sqlException))                      <span class=\"kwrd\">throw</span>;                  <span class=\"kwrd\">else</span>                      Thread.Sleep(ConnectionRetryWaitSeconds(attempt));              }          }      }  }    <span class=\"kwrd\">static</span> Int32 ConnectionRetryWaitSeconds(Int32 attempt)  {      Int32 connectionRetryWaitSeconds = Int32.Parse(ConfigurationManager.          AppSettings[<span class=\"str\">&quot;ConnectionRetryWaitSeconds&quot;</span>])          * 1000;        <span class=\"rem\">// Backoff Throttling</span>      connectionRetryWaitSeconds = connectionRetryWaitSeconds *          (Int32)Math.Pow(2, attempt);        <span class=\"kwrd\">return</span> (connectionRetryWaitSeconds);  }    <span class=\"rem\">/// &lt;summary&gt;</span>  <span class=\"rem\">/// Determine from the exception if the execution</span>  <span class=\"rem\">/// of the connection should Be attempted again</span>  <span class=\"rem\">/// &lt;/summary&gt;</span>  <span class=\"rem\">/// &lt;param name=&quot;exception&quot;&gt;Generic Exception&lt;/param&gt;</span>  <span class=\"rem\">/// &lt;returns&gt;True if a a retry is needed, false if not&lt;/returns&gt;</span>  <span class=\"kwrd\">static</span> Boolean RetryLitmus(SqlException sqlException)  {      <span class=\"kwrd\">switch</span> (sqlException.Number)      {          <span class=\"rem\">// The service has encountered an error</span>          <span class=\"rem\">// processing your request. Please try again.</span>          <span class=\"rem\">// Error code %d.</span>          <span class=\"kwrd\">case</span> 40197:          <span class=\"rem\">// The service is currently busy. Retry</span>          <span class=\"rem\">// the request after 10 seconds. Code: %d.</span>          <span class=\"kwrd\">case</span> 40501:          <span class=\"rem\">//A transport-level error has occurred when</span>          <span class=\"rem\">// receiving results from the server. (provider:</span>          <span class=\"rem\">// TCP Provider, error: 0 - An established connection</span>          <span class=\"rem\">// was aborted by the software in your host machine.)</span>          <span class=\"kwrd\">case</span> 10053:              <span class=\"kwrd\">return</span> (<span class=\"kwrd\">true</span>);      }        <span class=\"kwrd\">return</span> (<span class=\"kwrd\">false</span>);  }</pre>      <p>&#160;</p>    <p>.Config ファイル</p>    <pre class=\"csharpcode\"><span class=\"kwrd\">&lt;</span><span class=\"html\">configuration</span><span class=\"kwrd\">&gt;</span>    <span class=\"kwrd\">&lt;</span><span class=\"html\">connectionStrings</span><span class=\"kwrd\">&gt;</span>      <span class=\"kwrd\">&lt;</span><span class=\"html\">add</span> <span class=\"attr\">name</span><span class=\"kwrd\">=&quot;SQLAzure&quot;</span> <span class=\"attr\">connectionString</span><span class=\"kwrd\">=&quot;Server=tcp:youserver.database.windows.net;  Database=Test;User ID=login@server;Password=yourPassword;  Trusted_Connection=False;Encrypt=True;&quot;</span><span class=\"kwrd\">/&gt;</span>    <span class=\"kwrd\">&lt;/</span><span class=\"html\">connectionStrings</span><span class=\"kwrd\">&gt;</span>    <span class=\"kwrd\">&lt;</span><span class=\"html\">appSettings</span><span class=\"kwrd\">&gt;</span>      <span class=\"kwrd\">&lt;</span><span class=\"html\">add</span> <span class=\"attr\">key</span><span class=\"kwrd\">=&quot;ConnectionRetrys&quot;</span> <span class=\"attr\">value</span><span class=\"kwrd\">=&quot;4&quot;</span><span class=\"kwrd\">/&gt;</span>      <span class=\"kwrd\">&lt;</span><span class=\"html\">add</span> <span class=\"attr\">key</span><span class=\"kwrd\">=&quot;ConnectionRetryWaitSeconds&quot;</span> <span class=\"attr\">value</span><span class=\"kwrd\">=&quot;5&quot;</span><span class=\"kwrd\">/&gt;</span>    <span class=\"kwrd\">&lt;/</span><span class=\"html\">appSettings</span><span class=\"kwrd\">&gt;</span>  <span class=\"kwrd\">&lt;/</span><span class=\"html\">configuration</span><span class=\"kwrd\">&gt;</span></pre>      <p>質問、懸念事項、コメントはありますか? 以下に投稿すると、対処を試みることができます。</p>"
