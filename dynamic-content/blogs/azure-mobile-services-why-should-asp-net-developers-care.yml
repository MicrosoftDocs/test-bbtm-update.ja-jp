### YamlMime:Yaml
ms.openlocfilehash: 185ad8830097b1d2ccb0e146c0c8416dd63a3427
ms.sourcegitcommit: d03bdc7fe5447adb6530886aab848b75fe8fa8ee
ms.translationtype: MT
ms.contentlocale: ja-JP
ms.lasthandoff: 03/11/2022
ms.locfileid: "139891769"
Slug: azure-mobile-services-why-should-asp-net-developers-care
Title: 'Azure Mobile Services: 開発者が注意を ASP.NET 必要な理由'
Summary: Azure Mobile Servicesは、モバイル開発者がクラウドでホストされるバックエンドをアプリに追加するためのターンキーの方法を提供します。 このサービスでは、バックエンド ロジックを作成する機能を完全にサポート ASP.NET Web API。
Content: >-
  <strong><em>更新: サポートMobile Services ASP.NET Web API一般提供中です。<a href="https://weblogs.asp.net/scottgu/azure-virtual-machine-machine-learning-iot-event-ingestion-mobile-sql-redis-sdk-improvements">Scott Guthrie のブログでお知らせをお読みください</a>。</em></strong>

  <a href="https://azure.microsoft.com/mobile">Azure Mobile Services</a>は、モバイル開発者がクラウドでホストされるバックエンドをアプリに追加するためのターンキーの方法を提供します。 このサービスでは、バックエンド ロジックを作成する機能を完全にサポート ASP.NET Web API。 Mobile Servicesを使用してモバイルに接続する API を構築する開発者にとって魅力的な選択肢 ASP.NET。

  <ul>
   <li><strong><a href="#DotNet">すべてのモバイル プラットフォーム用のクライアント SDK を使用したターンキー バックエンド。</a></strong> Mobile Services を使用すると、<strong>iOS、Android、Windows、Windows Phone、HTML</strong> アプリに完全に機能するバックエンドをすばやく追加できるだけでなく、<strong>Xamarin、Sencha、PhoneGap</strong> などのクロスプラットフォーム フレームワークを使用できます。 これらのプラットフォームごとにクライアント SDK を提供し、クラウドでホストされるバックエンドにアプリケーションを簡単に接続できます。</li>
   <li><strong><a href="#ApiHosting">モバイル API のファーストクラス ホスティング。</a></strong> モバイル サービスは Web API を使用して構築され、任意の Web API コントローラーをサービスに発行できます。 他のコンピューティングMobile Servicesの違いは、Web API コントローラーの監視と管理を行<strong>うという意味です</strong>。 Web API ランタイムまたは拡張機能に問題がある場合は、心配することなく修正プログラムを適用します。 コントローラー コードに問題がある場合は、お客様にお知り合いください。</li>
   <li><strong><a href="#HighValueCapabilities">価値の高いモバイル バックエンド機能が含まれています。</a></strong> Web API に含まれる多くの機能Mobile Services、Web API ですぐに使用できます。 モバイル <strong>プッシュ通知</strong>、<strong>SignalR を</strong>使用したリアルタイム通知 (自動スケールアウト)、コンシューマー アプリ<strong></strong>のソーシャル認証、場合によっては接続される<strong></strong>シナリオのオフライン データ同期などです。</li>
   <li><strong><a href="#Enterprise">エンタープライズ システムへの接続。</a></strong> エンタープライズ開発者の場合は、アプリの顧客が <strong>Active Directory</strong> 経由でログインし、<strong>SharePoint</strong> や Office 365 などのエンタープライズ資産にアクセス<strong>できます。</strong> さらに、オンプレミスの資産へのシームレスな<strong></strong>接続が有効になっているので、インターネットに公開されていないデータベースや Web サービスにアクセスできます。</li>
   <li><strong><a href="#VisualStudio">Visual Studio との統合。</a></strong> お気に入りの IDE には、Mobile Services 用の専用プロジェクト テンプレートとスキャフォールディング 機能が含まれる現在、発行とリモート デバッグの組み込みのファースト クラスのサポートがあります。</li>
  </ul>

  <h3><a name="DotNet"></a>すべてのモバイル プラットフォーム用のクライアント SDK を使用したターンキー バックエンド</h3>

  お気に入りの環境でのサポートMobile Services簡単に開始できます。 いつものように、Azure Windowsに管理ポータル新しいモバイル サービスを作成します。 ウィザードの最初の画面で、バックエンドとして [".NET" を選択します。 サービスが作成されると、[クイックスタート] タブに移動し、ターゲットとするクライアント プラットフォームのスターター プロジェクトをダウンロードします。


  <a href="https://acom.azurecomcdn.net/80C57D/blogmedia/blogmedia/2014/07/mobile-services-for-web-api-devs-1.png"><img class="alignnone size-medium wp-image-161081" alt="mobile-services-for-web-api-devs-1" src="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/mobile-services-for-web-api-devs-1-467x369.png" width="467" height="369" /></a>


  <a href="https://acom.azurecomcdn.net/80C57D/blogmedia/blogmedia/2014/07/mobile-services-for-web-api-devs-2.png"><img class="alignnone size-medium wp-image-161082" alt="mobile-services-for-web-api-devs-2" src="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/mobile-services-for-web-api-devs-2-467x369.png" width="467" height="369" /></a>


  または、Visual Studio で開始する場合は、最初にローカル プロジェクトを作成し、後でプロジェクトを発行するときにモバイル サービスを作成できます。 <strong>この場合、Update 2 以降Visual Studio 2013が必要です。</strong>


  <a href="https://acom.azurecomcdn.net/80C57D/blogmedia/blogmedia/2014/07/mobile-services-for-web-api-devs-3.png"><img class="alignnone size-medium wp-image-161092" alt="mobile-services-for-web-api-devs-3" src="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/mobile-services-for-web-api-devs-3-544x369.png" width="544" height="369" /></a>


  どちらの方法でも、.NET テンプレート プロジェクトMobile Services取得できます。 これは単なる Web API プロジェクトで、いくつかの追加のパッケージが使用NuGetに注意してください。


  <a href="https://acom.azurecomcdn.net/80C57D/blogmedia/blogmedia/2014/07/mobile-services-for-web-api-devs-4.png"><img class="alignnone size-medium wp-image-161111" alt="mobile-services-for-web-api-devs-4" src="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/mobile-services-for-web-api-devs-4-544x369.png" width="544" height="369" /></a>


  <strong>TodoItemController.cs コントローラー ファイルを開</strong>き、その内容を確認します。 <strong>GetAllTodoitems() メソッド内にブレークポイントを設定</strong>します。 このコントローラーでは、.NET サポートを使用してデータをMobile Services方法を示します。

  <pre class="prettyprint">public class TodoItemController : TableController&lt;TodoItem&gt;

  {
      protected override void Initialize(HttpControllerContext controllerContext)
      {
          base.Initialize(controllerContext);
          csharp_testContext context = new csharp_testContext();
          DomainManager = new EntityDomainManager&lt;TodoItem&gt;(context, Request, Services);
      }

      // GET tables/TodoItem
      public IQueryable&lt;TodoItem&gt; GetAllTodoItems()
      {
          return Query();
      }

      // GET tables/TodoItem/48D68C86-6EA6-4C25-AA33-223FC9A27959
      public SingleResult&lt;TodoItem&gt; GetTodoItem(string id)
      {
          return Lookup(id);
      }

      // PATCH tables/TodoItem/48D68C86-6EA6-4C25-AA33-223FC9A27959
      public Task&lt;TodoItem&gt; PatchTodoItem(string id, Delta&lt;TodoItem&gt; patch)
      {
          return UpdateAsync(id, patch);
      }

      // POST tables/TodoItem/48D68C86-6EA6-4C25-AA33-223FC9A27959
      public async Task&lt;IHttpActionResult&gt; PostTodoItem(TodoItem item)
      {
          TodoItem current = await InsertAsync(item);
          return CreatedAtRoute("Tables", new { id = current.Id }, current);
      }

      // DELETE tables/TodoItem/48D68C86-6EA6-4C25-AA33-223FC9A27959
      public Task DeleteTodoItem(string id)
      {
          return DeleteAsync(id);
      }
  }</pre>

  TodoItem リソースの主要な CRUD メソッドはすべて既にス <strong>キャフォールディングされています</strong> 。 既定では、コントローラーは <strong>EntityDomainManager</strong> を使用しています。これは、新しいモデルの上のシン ラッパー Entity Frameworkされます。 代替データ ストアの使用に切り替えるのは簡単です。

  <ul>
   <li><strong>MongoDB:</strong> <a href="https://www.nuget.org/packages/WindowsAzure.MobileServices.Backend.Mongo/">WindowsAzure.MobileServices.Backend.Mongo</a> パッケージの <strong>MongoDomainManager</strong> をNuGetします。 詳細については、 <a href="https://blogs.msdn.com/b/azuremobile/archive/2014/04/14/creating-mongodb-backed-tables-in-azure-mobile-services-with-net-backend.aspx">このブログの投稿</a>を参照してください。</li>
   <li><strong>Azure Table Storage:</strong> <a href="https://www.nuget.org/packages/WindowsAzure.MobileServices.Backend.Storage/">WindowsAzure.MobileServices.Backend.Storage NuGet</a> パッケージの <strong>StorageDomainManager</strong> を使用します。 例については、このチュートリアルを <a href="https://wp.sjkp.dk/azure-mobile-service-net-backend-using-azure-table-storage/">参照してください</a>。</li>
  </ul>

  .NET Mobile Servicesを使用すると、バックエンドをローカルMobile Services実行し、バックエンド ロジックをデバッグできます。 <strong>F5 キーを押</strong>し、既定のページで [試してみる] を選択します。 Mobile Services .NET サポートには、予想される Web API のヘルプ ページが付属しています。 <strong>GET テーブル/TodoItem を</strong>クリックして、メソッドのドキュメントとテスト クライアントを表示します。 [try this out] リンクをクリックし、"send" キーを押して <strong>GetAllTodoItems() メソッドを呼び出</strong> します。 予想通り、前に設定したブレークポイントにヒットします。


  <a href="https://acom.azurecomcdn.net/80C57D/blogmedia/blogmedia/2014/07/mobile-services-for-web-api-devs-5.png"><img class="alignnone size-medium wp-image-161031" alt="mobile-services-for-web-api-devs-5" src="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/mobile-services-for-web-api-devs-5-467x369.png" width="467" height="369" /></a>


  バックエンド API の開発が完了したら、Web API を Mobile Service に発行できます。 発行のサポートは、プロジェクトを右Visual Studioして [発行] を選択するだけで、プロジェクトに組み込みです。 既存のモバイル サービスを選択するか、Visual Studio 内から新しいモバイル サービスを作成できます。Azure portal。


  <a href="https://acom.azurecomcdn.net/80C57D/blogmedia/blogmedia/2014/07/mobile-services-for-web-api-devs-6.png"><img class="alignnone size-medium wp-image-161041" alt="mobile-services-for-web-api-devs-6" src="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/mobile-services-for-web-api-devs-6-544x369.png" width="544" height="369" /></a>


  既存の Web API ソリューションを発行して、Web API Mobile Services管理と監視をすぐに Azure にオフロードできます。


  .NET サポートの詳細Mobile Services、次のチュートリアルに従います。

  <ul>
   <li><a href="https://azure.microsoft.com/en-us/documentation/articles/mobile-services-dotnet-backend-windows-store-dotnet-get-started/">はじめに .NET Mobile Servicesを使用する</a></li>
   <li><a href="https://azure.microsoft.com/en-us/documentation/articles/mobile-services-dotnet-backend-windows-store-dotnet-get-started-data/">はじめに .NET でデータをMobile Servicesする</a></li>
   <li><a href="https://azure.microsoft.com/en-us/documentation/articles/mobile-services-dotnet-backend-windows-store-dotnet-get-started-users/">はじめに .NET での認証Mobile Services使用</a></li>
   <li><a href="https://azure.microsoft.com/en-us/documentation/articles/mobile-services-dotnet-backend-windows-store-dotnet-get-started-push/">はじめに .NET でのプッシュ通知Mobile Services使用する</a></li>
  </ul>

  <h3><a name="ApiHosting"></a>モバイル API のファーストクラス ホスティング</h3>

  経験豊富な Web API 開発者の場合は、API を発行してサービスに発行するときにどのような付加価値が得Mobile Services。 結局のところ、Azure とオンプレミスの両方で Web API をホストする簡単な方法は多数あります。 次の方法で無料で利用できる付加価値機能の一部を見Mobile Services。

  <ul>
   <li><strong>監視と診断。</strong> Mobile Servicesは、API の正常な動作を維持するために構築されたインストルメンテーションおよび監視機能によってサポートされる 99.9% の SLA を提供します。 有料レベルでは、サービスの HTTP トラフィックと SQL 接続を監視し、高いエラー率が表示され始める場合は、お客様に連絡します。 これは、エンドポイントの監視やアラートなど、さまざまなセルフサービス機能に加 <a href="https://msdn.microsoft.com/en-us/library/azure/dn306639.aspx">えて行います</a>。</li>
   <li><strong>自動修正。</strong> アプリを再デプロイすることなく、ホスティング環境に新しいコードを毎週デプロイします。 Mobile Services ランタイムのバグ修正、依存関係の 1 つでのバグ修正、または新機能に関係なく、変更は中断することなく透過的にモバイル サービスにデプロイされます。 もちろん、互換性に影響する変更はデプロイしないので、すべての変更は下位互換性があります。</li>
   <li><strong>クラウド資産の自動プロビジョニング。</strong> モバイル サービスを作成するときに、サービス用に SQL Database と通知ハブ (プッシュ通知エンジン) をプロビジョニングして構成し、関連するすべての接続文字列が構成されていることを確認します。 さらに、数回クリックで、スケジュールされたジョブとハイブリッド接続 (オンプレミス接続用) をクラウドで簡単に作成できます。 Mobile Services、サービスに関連するすべての関連するクラウド資産への迅速なゲートウェイが提供されます。</li>
  </ul>

  <h3><a name="HighValueCapabilities"></a>価値の高いモバイル バックエンド機能が含まれています。</h3>

  Mobile Services を使用してアプリの構築を開始すると、必要な機能の多くがすぐに利用できるのが分かっています。これは、市場に出る時間の数週間を節約できる可能性があります。 たとえば、次のようになります。

  <ul>
   <li><strong>ターンキー認証。</strong> すべてのモバイル サービスには、最も一般的な認証シナリオに必要なすべてのクラウド資産とフレームワーク コードが付属しています。 Microsoft アカウント、Facebook、Twitter、または Google を使用したソーシャル ログインと、Microsoft アカウントを使用したエンタープライズ ログインを簡単にAAD。 必要なすべてのフレームワーク部分は既に存在します。そのため、OAuth の専門家になる必要はありません。構成設定を指定するだけで、残りは行います。 詳細については、このチュートリアル <a href="https://azure.microsoft.com/en-us/documentation/articles/mobile-services-dotnet-backend-windows-store-dotnet-get-started-users/">を参照してください</a>。</li>
   <li><strong>スケーラブルなプッシュ通知。</strong> 各モバイル サービスには、クラウドでホストされるプッシュ エンジンが付属しています。これは、Windows、iOS、Android、Kindle など、すべての主要なデバイス プラットフォームで大量の通知を配信できます。 必要な API 呼び出しは、接続されている数百万台のデバイスに通知する 1 回の API 呼び出しです。 また、対象ユーザーを簡単にセグメント化できるタグ付け式とタグ式、およびデバイス自体の通知をカスタマイズできるテンプレートもサポートされています。 <a href="https://azure.microsoft.com/en-us/documentation/articles/mobile-services-dotnet-backend-windows-store-dotnet-get-started-push/">このドキュメント</a> では、詳細な手順を説明します。</li>
   <li><strong>オフライン同期。</strong> 現在、お客様は、ネットワーク接続が利用できない場合でも、モバイル アプリが引き続き動作すると予想しています。 Mobile Services、すべての主要なクライアント プラットフォームで、組み込みのオフライン SQLite ベースの同期サポートが提供されます。 <a href="https://azure.microsoft.com/en-us/documentation/articles/mobile-services-windows-store-dotnet-get-started-offline-data/">詳細については、こちらを参照してください。</a></li>
   <li><strong>リアルタイム。</strong> プッシュ通知は、アプリとの顧客エンゲージメントを高めるのに最適ですが、アプリ内でスケーラブルな高帯域幅の低待機時間接続を提供するには、別のツールセットが必要です。 Mobile Services WebSocket と SignalR に基づく組み込みのリアルタイム サポートが提供され、アプリへの双方向メッセージングが可能です。 このサービスには、アプリの成長に合ったシームレスなスケールアウトのための組み込みのメッセージ バス (バックプレーン) が付属しています。 また、サービスの残りの部分と同じ認証パイプラインと統合され、ユーザーの認証と承認は簡単です。 詳細については、 <a href="https://blogs.msdn.com/b/azuremobile/archive/2014/05/30/realtime-with-signalr-and-azure-mobile-net-backend.aspx">このブログの投稿</a>を参照してください。</li>
  </ul>

  <h3><a name="Enterprise"></a>エンタープライズ システムへの接続</h3>

  .NET は多くの場合、企業で選択されるプラットフォームです。そのため、.NET 言語をサポートすると、開発者がビジネス アプリを構築するのに役立つ多くの優しいシナリオが開かされました。 詳細と <a href="https://azure.microsoft.com/en-us/campaigns/mobile-employee-apps/">いくつかのクールビデオ</a>については、このページを参照してください。

  <ul>
   <li><strong>Active Directory ログインと代理アクセス。</strong> エンタープライズ シナリオでは、アプリ ユーザーが自分のドメイン ID でログインできるのが重要な要件です。 これにより、アカウントの有効期間の管理が簡単になります。また、SharePoint Online や Office 365 などの Active Directory でも保護されているクラウド資産にアクセスできます。 Active Directory 認証用にアプリを構成する方法の詳細については、このチュートリアル <a href="https://azure.microsoft.com/en-us/documentation/articles/mobile-services-windows-store-dotnet-adal-sso-authentication/">を参照してください</a>。 代理 <a href="https://channel9.msdn.com/Series/Windows-Azure-Mobile-Services/Azure-Mobile-Services-AAD-O365-Authentication-identity-across-services">アクセスを</a> 構成する方法については、このビデオをご覧ください。</li>
   <li><strong>オンプレミス接続。</strong> データベースや Web サービスなどのエンタープライズ資産には機密データが含まれているため、またはクラウドに移動できないその他の理由が考えられます。 "ハイブリッド接続" 機能を通じてモバイル サービスからこれらの資産を使用できます。これにより、オンプレミスのトラフィックをクラウドに中継できます。 このビデオの概要 <a href="https://channel9.msdn.com/Series/Windows-Azure-Mobile-Services/Connect-to-an-on-premises-SQL-Server-from-Azure-Mobile-Services-using-Hybrid-Connections">とこの</a> チュートリアル <a href="https://azure.microsoft.com/en-us/documentation/articles/mobile-services-dotnet-backend-hybrid-connections-get-started/">を確認してください</a>。</li>
   <li><strong>Xamarin SDK。</strong> Xamarin には、C# を使用してクロスプラットフォーム アプリ (Android と iOS を含む) を記述できるクライアント側のフレームワークとツールセットが提供されています。 これは、Microsoft スタックに精通している開発者が他のプラットフォームでスキルを再利用するための生産性の高い方法です。 Mobile Services、Xamarin ベースのアプリ<a href="https://azure.microsoft.com/en-us/develop/mobile/resources-xamarin-ios/">を構築するのに</a>役立つ SDK といくつかの優れたリソースが提供されます。</li>
   <li><strong>アクセラレータ。</strong> 使用を開始するのに役立つ参照実装が用意されている場合は、シナリオの実装を考えるのが最も簡単な場合があります。 チームは最近、一般的な顧客の垂直をカバーし、Mobile Services で対処する方法を示す洗練されたアプリである一連の "アクセラレータ" の構築に重点を置きました。 アプリはストアに発行され、ソース コードを使用して変更できます。 詳細については、こちらを <a href="https://azure.microsoft.com/en-us/develop/mobile/windows-store-samples/#header-1">参照してください</a>。 現在、2 つのアクセラレータ (フィールド エンジニアとセールス アシスタントのシナリオ) が準備できましたが、今後さらに多くの準備が整います。</li>
  </ul>

  <h3><a name="VisualStudio"></a>Visual Studio との統合</h3>

  上記の機能に加えて、Visual Studioサービスの開発とデバッグに役立つその他のツールが含まれています。 テーブル コントローラー (リレーショナル データを格納するための)、カスタム コントローラー (任意の HTTP API を構築するための)、およびスケジュールされたジョブを作成できるスキャフォールディング 機能が用意されています。


  <a href="https://acom.azurecomcdn.net/80C57D/blogmedia/blogmedia/2014/07/mobile-services-for-web-api-devs-7.png"><img class="alignnone size-medium wp-image-161042" alt="mobile-services-for-web-api-devs-7" src="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/mobile-services-for-web-api-devs-7-544x369.png" width="544" height="369" /></a>


  また、リモート デバッグのサポートを点灯することで、デバッグエクスペリエンスが向上しました。 アプリでモバイル サービスを右クリック <strong>しサーバー エクスプローラーデバッガー</strong> のアタッチ] を選択します。 この機能を利用するには、必ずサービス コードのデバッグ ビルドを発行してください。


  <a href="https://acom.azurecomcdn.net/80C57D/blogmedia/blogmedia/2014/07/mobile-services-for-web-api-devs-8.png"><img class="alignnone size-medium wp-image-161052" alt="mobile-services-for-web-api-devs-8" src="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/mobile-services-for-web-api-devs-8-544x369.png" width="544" height="369" /></a>


  <strong>サーバー エクスプローラー</strong> で見つけるもう 1 つのクールな機能は、エラー メッセージやスタック トレースなど、クラウド内のモバイル サービスによって出力されたログを参照できる "ログの表示" コマンドです。


  <a href="https://acom.azurecomcdn.net/80C57D/blogmedia/blogmedia/2014/07/mobile-services-for-web-api-devs-9.png"><img class="alignnone size-medium wp-image-161062" alt="mobile-services-for-web-api-devs-9" src="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/mobile-services-for-web-api-devs-9-544x369.png" width="544" height="369" /></a>


  この新しい一連の機能が、次のプロジェクトにMobile Services勧め願っています。 ヘルプが必要な場合、またはフィードバックがある場合は、Twitter で に連絡することをためらわずにお問い合わせください <a href="https://twitter.com/theYavor">@theYavor</a>。
