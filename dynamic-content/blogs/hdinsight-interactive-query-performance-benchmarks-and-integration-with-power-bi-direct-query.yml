### YamlMime:Yaml
ms.openlocfilehash: f0c06b4aa783793f56f2c0263cbe9e41c7543183
ms.sourcegitcommit: d03bdc7fe5447adb6530886aab848b75fe8fa8ee
ms.translationtype: MT
ms.contentlocale: ja-JP
ms.lasthandoff: 03/11/2022
ms.locfileid: "139895528"
Slug: hdinsight-interactive-query-performance-benchmarks-and-integration-with-power-bi-direct-query
Title: 'Azure HDInsight パフォーマンス ベンチマーク: Interactive Query、Spark、Presto'
Summary: 大規模なSQL高速クエリ処理&nbsp;は、多くの場合、お客様に重要な考慮事項です。 このブログ記事では、業界標準の TPCDS をInteractive Query HDInsight と Spark、Presto を比較しています。
Content: >-
  <p>大規模なSQL高速クエリ処理は、多くの場合、お客様の重要な考慮事項です。 このブログ記事では、TPC-DS ベンチマークから派生した業界標準ベンチマークを使用して、HDInsight Interactive Query、Spark、Presto を比較します。 これらのベンチマークは、既定の既定の HDInsight 構成を使用して実行されます。特別な最適化はありません。 これらのベンチマークを実行したいお客様は、次の手順で<a href="https://github.com/hdinsight/tpcds-hdinsight" target="_blank"></a>説明されている簡単な手順に従GitHub。</p>


  <h2>結果の概要</h2>


  <ul>
   <li>HDInsight Interactive Query Spark よりも高速です。</li>
   <li>HDInsight Spark は Presto よりも高速です。</li>
   <li>データを ORC Interactive Query Parquet に変換せずに、 のテキスト キャッシュは、ウォーム Spark のパフォーマンスに相当します。</li>
   <li>対話型クエリは、100 TB スケールの変更を含め、TPC-DS&nbsp; ベンチマークから派生した TPCDS 99 クエリを実行できる唯一のエンジンだったので、大規模なデータで実行する場合に最も適しています</li>
   <li>Interactive Queryコンカレンシーが高いプリフォームが可能です。</li>
  </ul>


  <h2>TPCDS について</h2>


  <p>TPC Benchmark DS (TPC-DS) は、意思決定サポート システムの一般的に適用されるいくつかの側面 (クエリやデータのメンテナンスなど) をモデル化する意思決定サポート ベンチマークです。 TPC-DSbenchmark&nbsp; 標準によると、ベンチマークは、汎用意思決定サポート システムとしてパフォーマンスの代表的な評価を提供します。 ベンチマークの結果は、単一ユーザー モードでのクエリ応答時間、マルチユーザー モードでのクエリ スループット、および制御された複雑なマルチユーザー意思決定サポート ワークロードの下での特定のハードウェア、オペレーティング システム、およびデータ処理システム構成のデータ メンテナンス パフォーマンスを測定します。 TPC ベンチマークの目的は、関連する目標パフォーマンス データを業界ユーザーに提供することです。 TPC-DS バージョン 2 では、ビッグ データ システムなどの新しいテクノロジでベンチマークを実行できます。&nbsp;これらは未確認の結果であり、公式に公開された <strong>TPC-DS の結果と比較できない点に注意してください。</strong></p>


  <h2>HDInsight 対話型クエリ</h2>


  <p>HDInsight Interactive Queryゼロ ETL (変換読み込み抽出) を使用して、ビッグ データから非常に高速なクエリ結果を取得 &amp; できます。</p>


  <p>HDInsight の Interactive Query では、(Hive on LLAP) インテリジェント キャッシュ、コア エンジンでの最適化、Azure の最適化を活用して、Azure Blob や Azure Data Lake Store などのリモート クラウド ストレージで非常に高速なクエリ結果を生成します。</p>


  <h2>HDInsight での Spark、Presto、LLAP の比較パフォーマンス</h2>


  <p>これらのテストは、より高いスケールの Azure Blob Storage アカウント* で実行されている TPCDS データに対して LLAP、Spark、Presto を使用して実施しました。 これらのストレージ アカウントは、BLOB ストレージ アカウントのスケーラビリティに対して 10 倍の増加を提供します。 この数か月間、Windows Azure Storage Driver (<a href="https://hadoop.apache.org/docs/stable/hadoop-azure/index.html">WASB</a>) <a href="https://issues.apache.org/jira/browse/HADOOP-14552" target="_blank"></a> のパフォーマンス向上にも貢献しました。その結果、すべての HDInsight ワークロードのパフォーマンスが向上しました。&nbsp;</p>


  <p>Standard ストレージ アカウントが、容量、イングレス/エグレス、要求レートのアドバタイズされた制限を超えて増加するには、次の方法で要求 <a href="https://azure.microsoft.com/en-us/support/faq/">を行Azure サポート</a></p>


  <p>さまざまなエンジンが同じデータとメタデータに対して実行するように、共通の外部 Hive メタストア Azure SQL DB S2 を選択しました。 詳細については、データを生成する手順と、派生 <a href="https://github.com/hdinsight/tpcds-hdinsight" target="_blank">TPC-DS クエリを実行する手順を確認してください</a>。</p>


  <h2>HDInsight 構成</h2>


  <p>これらのテストでは、同様のクラスターを使用して LLAP、Spark、Presto を実行しました。&nbsp;</p>


  <p><a href="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/0fb2e92f-c136-402e-bc92-70ae802d6a7f.png"><img alt="config" border="0" height="75" src="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/70c3c544-630e-46f9-866c-b0d7460b1520.png" style="border: 0px currentcolor; border-image: none; margin-right: auto; margin-left: auto; float: none; display: block; background-image: none;" title="設定" width="618"></a></p>


  <p align="center"><em>注: 既定の既定の構成を使用してテストが実行された結果、最適化も特別な設定も、エンジンに対するクエリの変更も行われません。&nbsp; </em></p>


  <p>次の表は、すべてのエンジンで正常に実行された TPC-DS ベンチマークから派生した 45 個のクエリを使用しています。 次に示すように、LLAP は Presto や Spark よりも多くのクエリを実行できます。</p>


  <p>&nbsp;</p>


  <p><a href="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/56ad4995-844e-490a-8883-d0844e25d563.png"><img alt="perfnew" border="0" height="418" src="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/54731fa9-f742-4b80-8fbf-0c43f2e55987.png" style="border: 0px currentcolor; border-image: none; margin-right: auto; margin-left: auto; float: none; display: block; background-image: none;" title="perfnew" width="910"></a></p>


  <p>&nbsp;</p>


  <p>上記の実行で確認したように、ORC を使用した LLAP は他のすべてのエンジンよりも高速です。 さらに興味深い観察は、<strong> テキストを含む LLAP も非常に高速である点です。Parquet ファイル形式の Spark よりも高速です</strong>。&nbsp;&nbsp;&nbsp;</p>


  <p>Hadoop の高速分析には常に 1 つの大きなキャッチが用意されています。ORC や parquet のような列形式への前もって変換する必要があります。これは、オンデマンド コンピューティングでは時間がかかり、コストがかかる可能性があります。 LLAP 動的テキスト キャッシュは、CSV または JSON データを、インメモリ形式で最適化された LLAPs&rsquo; にその他の形式に変換します。 キャッシュは動的なので、ユーザーが実行するクエリによってキャッシュされるデータが決されます。</p>


  <p><a href="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/be58b812-92d6-4e09-ad6d-a6431d5b91c9.png"><img alt="llap" border="0" height="331" src="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/5769fc9d-511b-41c0-8cf5-f49dd9ead18c.png" style="border: 0px currentcolor; border-image: none; margin-right: auto; margin-left: auto; float: none; display: block; background-image: none;" title="llap" width="640"></a></p>


  <p>&nbsp;</p>


  <p align="center"><em>HDInsight Interactive Query (LLAP) アーキテクチャ </em></p>


  <p>LLAP では、より優れたパフォーマンスを提供するために、クラスター メモリ DRAM と SSD も使用しました。 キャッシュ プールは、クラスター DRAM と SSD で構成される共同プールです。 例として、Azure の D14V2 VM&rsquo; を使用すると、112 GB の RAM と 800 GB のローカル SSD を取得できます。そのため、クエリのパフォーマンスを速くするために、数テラバイトのデータをメモリ内に保持するのに十分なノードはわずかです。</p>


  <h2>Interactive Query でのテキスト キャッシュ</h2>


  <p>Interactive Queryのテキスト キャッシュは非常に興味深い概念です。この概念により、ビッグ データ パイプラインの考え方は大きく異なります。 従来、生形式でデータを取り込んだ後は、データを ORC、Parquet、Avro などの最適化されたファイル形式に変換する必要がありました。これらのファイル形式では、ビッグ データのクエリ中にユーザーが良好なパフォーマンスを受け取る必要がありました。 テキスト キャッシュでは、生のテキストと JSON のパフォーマンスは ORC とよく似ています。ORC を使用すると、ビッグ データ パイプラインに追加の手順を実行する必要がなくなります。その結果、コストが節約され、クエリ結果が迅速かつ新しくなります。&nbsp;&nbsp;&nbsp;</p>


  <p><a href="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/5dc6af4a-d9a2-4ad0-bef1-e1cd417abc41.png"><img alt="conceptllap" border="0" height="397" src="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/739c51c7-b8a9-41d1-a236-d690598d7e40.png" style="border: 0px currentcolor; border-image: none; margin-right: auto; margin-left: auto; float: none; display: block; background-image: none;" title="concept(概念)[concept]/(概" width="640"></a>&nbsp;</p>


  <h2>100 TB Interactive Query TPCDS データでのデータの実行</h2>


  <p>さまざまなベンダーによって Web 上で多くのベンチマークが見られたので、1 つは、それぞれのエンジンが最適な結果を生み出すクエリの選択セットにのみ焦点を当てるという結果でした。 TPC-DS ベンチマークから派生した 99 個のすべてのクエリを 100 TB スケールで実行することを決定し、これらの変更されていないクエリを実行できるのは Interactive Query のみです。 クエリの 41% が 30 秒未満で返され、クエリの 71% が 2 分以内に返されました。 このベンチマークは、対話型クエリが高速であり、豊富な機能を備SQL、特別な作業を行わずに、はるかに大きなスケール レベルでスケーリングを行っていることを証明します。&nbsp;&nbsp;</p>


  <p>&nbsp;</p>


  <p><a href="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/3e0b454e-d8b9-421d-aab7-8513e21706f5.png"><img alt="99queries" border="0" height="374" src="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/d4cfa7c5-4ba3-461c-b748-773be1b6a9d7.png" style="border: 0px currentcolor; border-image: none; margin-right: auto; margin-left: auto; float: none; display: block; background-image: none;" title="99 クエリ" width="640"></a></p>


  <h2>コンカレンシー</h2>


  <p>きめ細かなリソース管理とプリインプションが大幅に改善されたので、Interactive Query (HIVE on LLAP) を使用すると、同時実行ユーザーが簡単になります。 このInteractive Query、コンカレンシーの唯一の制限はクラスター リソースです。 クラスターをスケーリングして、より高いレベルのコンカレンシーを実現できます。</p>


  <p>コンカレンシーのパフォーマンスをテストするために、さまざまなコンカレンシー レベルの数を使用しました。 データセットでは、最大コンカレンシーが 32 に設定された 32 のワーカー ノード クラスターを使用して、1 TB のデータに対して 99 の TPCDS クエリを再度使用しました。</p>


  <p>テスト 1: 99 のすべてのクエリを一度に 1 つ実行する - コンカレンシー = 1</p>


  <p>テスト 2: 99 のすべてのクエリを一度に 2 回実行する - コンカレンシー = 2</p>


  <p>テスト 3: 99 のすべてのクエリを一度に 4 回実行する - コンカレンシー = 4</p>


  <p>テスト 4: 99 のすべてのクエリを一度に 8 回実行する - コンカレンシー = 8</p>


  <p>テスト 5: 99 のすべてのクエリを一度に 16 回実行する - コンカレンシー = 16</p>


  <p>テスト 6: 99 のすべてのクエリを一度に 32 回実行する - コンカレンシー = 32</p>


  <p>テスト 7: 99 のすべてのクエリを一度に 64 回実行する - コンカレンシー = 64</p>


  <p><strong>結果：</strong> 上記の結果で説明したように、Interactive Queryクエリを実行するためのスーパー最適化エンジンです。 ワークロードを完了する最も長い時間は、単一の同時実行クエリでした。&nbsp;&nbsp;&nbsp;</p>


  <p><a href="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/1350b8d3-dc8f-46b9-bfdc-d83f544ce968.png"><img alt="concurrent" border="0" height="352" src="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/5984d784-9df3-46f2-b2bd-d5d1a4e66bbf.png" style="border: 0px currentcolor; border-image: none; margin-right: auto; margin-left: auto; float: none; display: block; background-image: none;" title="同時" width="640"></a></p>


  <h2>Hive との比較と時間の間のパフォーマンスの向上</h2>


  <p>その重要な点は、Interactive Query (LLAP) のパフォーマンスを Hive と比較する点です。 コミュニティで Hive のパフォーマンスを向上させるために多くの作業が行われ、Azure ストレージ ドライバーのパフォーマンスを向上させるために行っている作業の一部Windows行っています。 2017 年 1 月に戻り、Hive 1.2 で TPC-DS ベンチマークから派生したワークロードの実行に 200 分かかり、ストレージ ドライバーの機能強化により、Hive でベンチマークを 137 分で実行できます。 LLAP キャッシュ されたデータでは、ベンチマークは 49 分で完了します。 これらは大きな利益です。</p>


  <p>&nbsp;</p>


  <p><a href="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/ff4df44f-f013-4705-857b-3b6337c4d250.png"><img alt="hivecompare" border="0" height="330" src="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/9bc5a196-2460-4de8-a6e1-e5912e991f38.png" style="border: 0px currentcolor; border-image: none; margin-right: auto; margin-left: auto; float: none; display: block; background-image: none;" title="hivecompare" width="640"></a></p>


  <p><strong>注</strong>: テスト ワークロードは TPC-DS から派生します。&nbsp; 取得された結果はすべて、正式に公開された TPC-DS の結果と比較できません。</p>


  <p>直接クエリPower BI Apache Zeppelin、その他のツールとの統合</p>


  <p>Power BI、HDInsight Interactive Query クラスターに直接接続して、データ モデルを中間キャッシュとして必要とせずにデータを探索および監視できます。 これにより、データの対話型探索が提供され、スケジュールされた更新を必要とせずにビジュアルが自動的に更新されます。 開始する方法の詳細については、HDInsight のビデオ「<a href="https://www.youtube.com/watch?v=5wnFzW07WNk&amp;t=93s" target="_blank">hdInsight Interactive Query Power BI</a>。</p>


  <p><a href="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/bc2c57dd-551c-4307-aa57-d261e75e676b.png"><img alt="Get Data" border="0" height="482" src="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/4feb2c19-849b-46a4-9e61-14e43e27c90b.png" style="border: 0px currentcolor; border-image: none; margin-right: auto; margin-left: auto; float: none; display: block; background-image: none;" title="データの取得" width="444"></a></p>


  <p>HDInsight Interactive Query多くのエンド ポイントをサポートしています。 <a href="https://docs.microsoft.com/en-us/azure/hdinsight/hdinsight-connect-hive-zeppelin" target="_blank">Apache Zeppelin、Visual Studio</a><a href="https://docs.microsoft.com/en-us/azure/hdinsight/hadoop/apache-hadoop-visual-studio-tools-get-started#run-interactive-hive-queries" target="_blank">、Visual Studio Code</a>、<a href="https://docs.microsoft.com/en-us/azure/hdinsight/hadoop/apache-hadoop-use-hive-ambari-view" target="_blank">Hive ビュー</a>、<a href="https://docs.microsoft.com/en-us/azure/hdinsight/hadoop/apache-hadoop-use-hive-beeline" target="_blank">Beeline</a> を使用してクエリを実行できます <a href="https://docs.microsoft.com/en-us/azure/hdinsight/hdinsight-for-vscode" target="_blank"></a></p>


  <h2>まとめ</h2>


  <p>Azure HDInsightは、大量のデータを簡単かつ高速かつコスト効率の高い処理にすることができる、Microsoft による完全に管理された、フル スペクトルのオープン ソース分析クラウド サービスです。 Hadoop、Spark、Hive、LLAP、Kafka、Storm、HBase、R などの最も一般的なオープンソース エンジンを使用し、エコシステムからより多くのオープン ソース フレームワークをインストールできます。 このAzure HDInsightのミッションは、クラウドの力と組み合わされた、フル マネージドのオープン ソース テクノロジを提供する方法です。 現在、お客様は、これらのオープン ソース テクノロジを使用して、バッチ処理、ETL、データ ウェアハウス、機械学習、IoT など、さまざまなアプリケーションを構築しています。 このブログ記事の目的は、環境内のさまざまなオープン ソース エンジンのクエリ SQL パフォーマンスに関するインテリジェンスの一部Azure HDInsightです。</p>


  <p>質問やコメントはありますか? 詳細については、 にお <a href="mailto:AskHDInsight@microsoft.com" target="_blank">AskHDInsight@microsoft.com</a> 問い合わせください。</p>
