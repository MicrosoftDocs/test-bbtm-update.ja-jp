### YamlMime:Yaml
ms.openlocfilehash: ee915194c50ec36954cc39dd9d5967af16e3ea52
ms.sourcegitcommit: d03bdc7fe5447adb6530886aab848b75fe8fa8ee
ms.translationtype: MT
ms.contentlocale: ja-JP
ms.lasthandoff: 03/11/2022
ms.locfileid: "139892690"
Slug: scanatomy-2
Title: Bletchley – Cryptlet Fabric & ブロックチェーンスマートコントラクトの進化
Summary: Cryptlet Fabric の最初のパブリックプレビューに近づいてきましたが、皆さん、専門家、開発者が注目すべきブロックチェーンを簡単に示すことができるようになりました。  Cryptlet Fabric は、新たに提案された3層 & 階層化されたスマートコントラクトアーキテクチャの中間層として設計されているため、このような実装に期待されるものを提供します。  スケール、フェールオーバー、キャッシュ、監視、管理などを管理します。機能の長い一覧ですが、新機能は次のとおりです。
Content: >-
  <h2>スマートコントラクトの構造</h2>


  <p>スマートコントラクトの概念は少し時間がかかり、1990年代後半の <a href="https://en.wikipedia.org/wiki/Nick_Szabo" target="_blank">Szabo &rsquo; </a> の仕事に大きくなっています。 ただし、2015年の夏の最初の実装として、Ego Um のフロンティアリリースがあります。 スマートコントラクトの promise は sprawling であり、すべての業界が革新的な disrupter としての注意を受けてきました。これにより、ビジネスを永久に遂行する方法が変化します。 このように見えますが、非常に重要なテクノロジの最初の実装と同様に、事前に学んだ教訓がいくつかあります。また、一部の機能強化についても説明します。</p>


  <p>ここでは、今日のスマートコントラクトの実装方法と、それをリファクタリングして、近い将来のパフォーマンス、セキュリティ、スケーラビリティ、管理容易性、バージョン管理、バージョン管理を大幅に向上させる方法について説明しています。 このホワイトペーパーでは、懸念事項の分離と、3つの階層化/階層化されたスマートコントラクトアーキテクチャの実装に焦点を当てた、新しいアーキテクチャアプローチの思考プロセスと履歴コンテキストについて説明します。</p>


  <p>コンテキストと、3 &amp; 層の階層 &rdquo; 化されたスマートコントラクトアーキテクチャに &ldquo; ついて理解を深めるには、このホワイトペーパーに<a href="https://github.com/Azure/azure-blockchain-projects/blob/master/bletchley/AnatomyofASmartContract.md">スマートコントラクトの構造</a>を示します。</p>


  <p>短時間で簡単に回答できるようにするには、次のようにします。信頼度の低いエンタープライズコンソーシアムネットワーク用に設計されたスマートコントラクトは、3つのメイン層に分ける必要があります。</p>


  <ul>
   <li>データ層 &ndash; データスキーマの定義、および挿入 (追加) と読み取りの最適化のためのデータロジック <em>のみ</em> 。 Ego Um やチェーンなどのプラットフォームでは、Solidity や Ivy などの言語をこのレイヤーで使用できます。 これは、リレーショナルデータベースで SQL 言語とストアドプロシージャを使用する方法と似ています。</li>
   <li>ビジネス層 &ndash; プレゼンテーション層 (UI) または他の外部アプリケーションからのスマートコントラクトと対話するための、スマートコントラクトおよび surface レベル api のすべてのビジネスロジック。 Cryptlets、Cryptlets ファブリックでサポートされているランタイムを対象とする任意の言語で記述できます。 (.NET、.NET Core、JVM、ネイティブ)</li>
   <li>公開された Api を Cryptlets 使用することによって構築されたプレゼンテーション層 &ndash; のユーザーインターフェイスプラットフォームとその他のアプリケーション。</li>
  </ul>


  <p>これらのレイヤーは、プレゼンテーション、中間 (Business)、データ層の各層でデプロイ、最適化、および拡張できます。</p>


  <blockquote>

  <p>* このアプローチは、スマートコントラクトの trustless 実装に対しては一般に有効ではありませんが、エンタープライズコンソーシアムのブロックチェーンを対象としています。</p>

  </blockquote>


  <h2>Cryptlet ファブリック &ndash; の更新</h2>


  <p>Cryptlet Fabric の最初のパブリックプレビューに近づいてきましたが、皆さん、専門家、開発者が注目すべきブロックチェーンを簡単に示すことができるようになりました。 Cryptlet Fabric は、新たに提案された 3 &amp; 層の階層型スマートコントラクトアーキテクチャの中間層として設計されているため、このような実装から期待することを実現します。 &nbsp; スケール、フェールオーバー、キャッシュ、監視、管理 &hellip; の機能の一覧を管理しますが、新機能についても説明します。</p>


  <h4>暗号化プリミティブ、セキュリティで保護された実行 enclaves、およびこれらのキーを大規模に暗号化して安全に操作を実行するための作成、永続化、および動的な復元を可能にするランタイムセキュリティキー (シークレット) プラットフォーム。</h4>


  <p>これにより、Cryptlets セキュリティで保護された実行環境でキーペアを作成、格納、および使用して、セキュリティで保護された enclaves 内のすべての &ldquo; ブロックチェーン &rdquo; (デジタル署名、ゼロのナレッジ校正、リング署名、しきい値の署名、homomorphic 暗号化など) を実行できます。 Cryptlets は、2つの基本的な型が提供されます。これについては、「 <a href="https://github.com/Azure/azure-blockchain-projects/blob/master/bletchley/CryptletsDeepDive.md" target="_blank">暗号解読</a>」で詳しく説明します。</p>


  <p>Cryptlet Fabric は、ブロックチェーンルーターレイヤーを提供します。これにより、さまざまなトランザクションメッセージと、Cryptlet で実装されたコードからの暗号化署名、および既存のシステムとの統合が抽象化されます。 たとえば、Cryptlet &rsquo; s の出力には、市場データやビジネスロジックの結果など、ブロックチェーンに送信される情報のみが含まれ、ブロックチェーンルーターとブロックチェーンプラットフォーム固有のプロバイダーによって、その下にある Cryptlet ファブリックによって実際のブロックチェーン固有のトランザクションにパッケージされます。 &nbsp; このカプセル化手法は、TCP/IP などのテクノロジがあらゆる種類のネットワーク (LAN、WAN、インターネット、およびモバイル) とあらゆる種類のアプリケーションで動作できるようにするために使用されています。 これは、さまざまな種類のブロックチェーンで、Cryptlets 再利用できるようにするものです。</p>


  <h3>ユーティリティ Cryptlets (oracles)</h3>


  <p>そうです、Microsoft の人は、この会社に関連付けられていなくても、oracle を呼び出すことが難しくなります。 実際には、ユーティリティ Cryptlets、拡張性が高く、標準、セキュリティ、検出可能な方法でブロックチェーン oracles を記述できると考えることができます。 Cryptlets ために取得する要求の大部分は、最初はこのカテゴリに含まれており、ブロックチェーンアプリケーションのセキュリティで保護された証明データソースを提供します。 oracles (初期) .net、.net Core、JVM、ベアメタルの各ランタイムを対象とする言語 (C#、Java、C++、F #、VB など &nbsp; ) を使用して、cryptlet を作成することができます。Cryptlet oracle は、次のような任意の種類のデータを公開できます。</p>


  <ul>
   <li>市場価格</li>
   <li>パッケージ配信通知</li>
   <li>ワークフローの次のステップ</li>
   <li>気象アラート</li>
   <li>クレジットダウングレードなどの counterparty の更新</li>
  </ul>


  <p>次のようなサブスクリプションパラメーターを定義します。</p>


  <ul>
   <li>日付と時刻</li>
   <li>ブロックチェーンからのイベントドリブントリガー、または外部ソースのリッスン</li>
   <li>&rdquo; &ldquo; &rdquo; &ldquo; 条件付き &ndash; で、true の場合、if、else if、switch などの評価の組み合わせ。</li>
   <li>組み合わせ &ndash; 時間が午後4時 EST &amp; の場合、NYSE は現在開いていたので、libor と<em>x</em>の価格を送信します。</li>
  </ul>


  <p>Cryptlet oracles の開発者またはプロバイダーは、それらをライブラリとして Azure Marketplace に発行して、顧客の検出と取得を行うことができます。 当社のパートナーから見てきた、信頼性の高い Cryptlet ライブラリのカタログが大規模で、小規模であることが予想されます。</p>


  <p>ただし、データを提供するだけではなく、より多くのユーティリティを使用できます。 これらのインターフェイスを使用して、他のアプリケーションやユーザーインターフェイス用のブロックチェーンベースのアプリケーションにセキュリティで保護されたチャネルを公開できます。 &nbsp;ERP または CRM システムでは、詳細情報を知らなくてもブロックチェーンからデータを読み取ることができます。また、ブロックチェーンにデータとイベントを安全に起動して、既存のエンタープライズインフラストラクチャへのブロックチェーンの統合を容易にすることもできます。 また、ブロックチェーンのトランザクションを監視し、インデックス要求またはデータプルを発行することによって、既存のシステムにイベントをトリガーすることで、ブロックチェーンアプリケーションと分析プラットフォームにサービスを提供することもできます。</p>


  <p>&rsquo;お客様とパートナーがユーティリティ cryptlets 使用について多くの用途を見つけることができることを確認してください。ただし、最初はブロックチェーンの oracles を対象としています。</p>


  <h2>コントラクト Cryptlets 使用</h2>


  <p>これらの暗号を使用することで、スマートコントラクトのリファクタリングを完全に実現することができます。 これらの暗号を使用すると、さまざまな方法でユーティリティ Cryptlets 使用できます。 ユーティリティの Cryptlets、一度に多数のインスタンスを持つことができ、それぞれが同時に多数の異なるサブスクリプションを処理します。一方、コントラクト Cryptlets、単一、ペア、またはリングがインスタンス化され、特定のスマートコントラクトにバインドされます。 &nbsp;コントラクト Cryptlets は、counterparties 間でスマートコントラクトを実行するためのビジネスロジック、ルール、および外部 API が含まれています。 &nbsp;プライベートな、準信頼されたコンソーシアムのブロックチェーンネットワークで、counterparties 間に強力な id または信頼関係がある場合、スマートコントラクトロジックはチェーン &rdquo; 上に存在し &ldquo; ている必要はなく、ネットワーク上のすべてのノードで実行する必要もありません。 &nbsp;ブロックチェーン内のデータ層と上記のビジネスおよびプレゼンテーションの間の懸念事項を分離することで、再利用と最適化のために実装を抽象化するレイヤー間でコードが分離されます。</p>


  <p>コントラクト Cryptlets、自分自身がデジタル署名され、エンクレーブ内で実行されます。これにより、含まれているコードがプライベートに改ざんされることなく、改ざんされた状態で実行されます。 &nbsp; これにより、Cryptlet コードを counterparties 間でプライベートにして、知的財産を保護するために暗号化することもできます。 &nbsp; Counterparties は、独自のコントラクト Cryptlets を作成して確認し、実装のためにコンパイルしてパッケージ化する前にコードを検査して検証することができます。または、認定された契約証明書を選択して、ベンダーまたは評判を支えることができます。&nbsp;</p>


  <p>コントラクト Cryptlets は、特定のスマートコントラクトインスタンスに参加している各 counterparty に対してインスタンス化できます。 &nbsp; これらの Cryptlet ペアとリングは省略可能ですが、各コントラクト Cryptlet は、その counterparty に属する署名または暗号化のための秘密キーのようなシークレットを保持することができます。これにより、同じアドレス空間にある counterparty の共同が混交シークレットが回避されます。 &nbsp; この機能により、暗号化の結果など、より高度なトランザクションシナリオが、しきい値またはリング暗号化方式を使用してブロックチェーンに格納されるようになります。</p>


  <p>コントラクト Cryptlets は、ファブリック &rsquo; &ldquo; のシークレット &rdquo; サービスからフェッチされるアクセス許可を持つ秘密キーとシークレットを使用できます。 &nbsp; これらのシークレットは、Azure Key Vault を通じて counterparty によって完全に制御され、Microsoft などの他の参加者からはアクセスできません。</p>


  <p>このアプローチにより、スマートコントラクト &rsquo; のビジネスおよび統合ロジックを定義するコードを、スケールアップされたリソースに対して実行し、最大のパフォーマンスを実現するためにデータの近くに併置することができます。 &nbsp; ブロックチェーンに保持されているデータは、引き続き、データロジック &ldquo; がオンチェーン &rdquo; に従い、その合意プロセスによってネットワーク上で調整されます。 &nbsp; Cryptlet、エンクレーブ、およびブロックチェーンプロバイダーからのデジタル署名は、検証と構成証明に使用されます。また、ブロックチェーンの各トランザクションと共に、証明書として格納できます。</p>


  <p>また、コントラクト Cryptlets はユーティリティ Cryptlets サービスも使用できますが、サブスクリプションまたは直接 API アクセスによってファブリック内で直接対話することができます。</p>


  <p>Cryptlets 使用により、次のような3つの階層型アーキテクチャが可能になります。</p>


  <ul>
   <li>ブロックチェーンのスマートコントラクトは、データ層を表すブロックチェーンネットワークに配置されるスキーマとデータロジックを定義します。</li>
   <li>コントラクト Cryptlets 使用すると、ユーザーインターフェイスや、中間層を表す Cryptlets ファブリックに展開されている外部アプリケーションに対して、ビジネスロジックと、Surface レベル API を定義できます。</li>
   <li>ユーティリティ Cryptlets 使用すると、再利用可能なデータソースとイベントを中間層にも提供できます。</li>
   <li>プレゼンテーション層は、標準 UI テクノロジを使用するか、web サーバー、モバイルデバイス、service bus などにデプロイされた統合プラットフォームを使用して、Cryptlet Fabric の Surface レベル API と通信します。</li>
  </ul>


  <p>このアーキテクチャアプローチでは、ブロックチェーンの実装をクライアントから抽象化し、ブロックチェーンと Cryptlet Fabric を個別にチューニングおよびスケーリングします。</p>


  <h2>Cryptlet ファブリックダイアグラム</h2>


  <p>次に、Cryptlet Fabric の更新された図を示します。 &nbsp; その部分については、以降の投稿やホワイトペーパーでさらに詳しく説明します。これらの記事は、リリースにも含まれます。</p>


  <p><a href="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/3cebfd6b-e136-49b8-aa5d-d83af1fd9404.png"><img alt="CryptletSmartContracts" border="0" height="467" src="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/477891e8-3d83-4b76-bac4-55e9e721ac19.png" style="border-width: 0px; padding-top: 0px; padding-right: 0px; padding-left: 0px; margin-right: auto; margin-left: auto; float: none; display: block; background-image: none;" title="Cryptのスマートコントラクト" width="610"></a></p>
