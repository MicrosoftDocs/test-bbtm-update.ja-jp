### YamlMime:Yaml
ms.openlocfilehash: 7b76bd13acd17f5896a6084f414e8f2844c6335d
ms.sourcegitcommit: d03bdc7fe5447adb6530886aab848b75fe8fa8ee
ms.translationtype: MT
ms.contentlocale: ja-JP
ms.lasthandoff: 03/11/2022
ms.locfileid: "139897009"
Slug: three-ways-to-leverage-composite-indexes-in-azure-cosmos-db
Title: Azure Cosmos DB で複合インデックスを活用する 3 つの方法
Summary: 複合インデックスは、Azure Cosmos DB で Microsoft Build 2019 で導入されました。 最新のサービス更新プログラムにより、追加のクエリの種類で複合インデックスを利用できます。
Content: >-
  <p>複合インデックスは、Azure Cosmos DB で Microsoft Build 2019 で導入されました。 最新のサービス更新プログラムにより、追加のクエリの種類で複合インデックスを利用できます。 この投稿では、複合インデックスについて&rsquo;説明し、一般的な使用例を強調します。</p>


  <h4>Azure Cosmos DB のインデックスの種類</h4>


  <p>Azure Cosmos DB には、現在、次の種類のクエリに使用される次のインデックスの種類があります。</p>


  <p><b>範囲インデックス:</b></p>


  <ul>
   <li>等値クエリ</li>
   <li>範囲クエリ</li>
   <li>1 つのプロパティに対する ORDER BY クエリ</li>
   <li>JOIN クエリ</li>
  </ul>


  <p><b>空間インデックス:</b></p>


  <ul>
   <li>地理空間の関数</li>
  </ul>


  <p><b>複合インデックス:</b></p>


  <ul>
   <li>複数のプロパティに対する ORDER BY クエリ</li>
   <li>フィルターおよび ORDER BY 句が含まれるクエリ</li>
   <li>2 つ以上のプロパティに対するフィルターを使用したクエリ</li>
  </ul>


  <h2>複合インデックスの使用例</h2>


  <p>既定では、Azure Cosmos DB では、すべてのプロパティに範囲インデックスが作成されます。 多くのワークロードでは、これらのインデックスで十分であり、それ以上の最適化は必要ありません。 複合インデックスは、既定の範囲インデックスに加えて追加できます。 複合インデックスには、複合インデックス内の各プロパティに対してパスと順序 (ASC または DESC) の両方が定義されています。</p>


  <h3>複数のプロパティに対する ORDER BY クエリ</h3>


  <p>クエリに複数のプロパティを持つ ORDER BY 句がある場合は、複合インデックスが必要です。 たとえば、次のクエリでは、年齢と名前 (年齢 ASC、名前 ASC) で定義された複合インデックスが必要です。</p>


  <p>SELECT * FROM c ORDER BY c.age ASC, c.name ASC</p>


  <p>このクエリは、すべての結果を age プロパティの値で昇順に並べ替えます。 2 つのドキュメントの年齢値が同じ場合、クエリによってドキュメントが名前で並べ替えされます。</p>


  <h3>フィルターおよび ORDER BY 句が含まれるクエリ</h3>


  <p>クエリにフィルターと、さまざまなプロパティに対する ORDER BY 句がある場合、複合インデックスによってパフォーマンスが向上します。 たとえば、名前と年齢の複合インデックスが定義され、ORDER BY 句に名前が含まれるクエリが更新された場合、次のクエリでは要求ユニット (RUS&rsquo;) が少なく必要になります。</p>


  <p>範囲インデックスを使用する元のクエリ:</p>


  <p>SELECT * FROM c WHERE c.name = &ldquo;Tim&rdquo; ORDER BY c.age ASC</p>


  <p>名前と年齢に関する複合インデックスを使用する変更されたクエリ:</p>


  <p>SELECT * FROM c WHERE c.name = &ldquo;Tim&rdquo; ORDER BY c.name ASC, c.age ASC</p>


  <p>複合インデックスはクエリのパフォーマンスを大幅に向上させますが、複合インデックスを使用せずに元のクエリを正常に実行できます。 複合インデックスを使用して変更されたクエリを実行すると、ドキュメントが age プロパティで並べ替えされます。 フィルターに一致するすべてのドキュメントの名前の値は同じで、クエリでは年齢順に昇順で返されます。</p>


  <h3>複数のプロパティに対するフィルターを使用したクエリ</h3>


  <p>クエリに 2 つ以上のプロパティを持つフィルターがある場合、複合インデックスを追加するとパフォーマンスが向上します。</p>


  <p>次のクエリがあるとします。</p>


  <p>SELECT * FROM c WHERE c.name = &ldquo;Tim&rdquo; と c.age &gt; 18</p>


  <p>(ASC という名前と年齢 ASC) に複合インデックスがない場合は、このクエリに範囲インデックスを使用します。 名前と年齢の複合インデックスを作成することで、このクエリの効率を向上させることができます。</p>


  <p>複数の等値フィルターと最大 1 つの範囲フィルター ( &gt;、&lt;、 &lt;=、= &gt;、!=など) を持つクエリでは、複合インデックスが使用されます。 場合によっては、&rsquo;クエリで複合インデックスを完全に利用できる場合、定義された複合インデックスと範囲インデックスの組み合わせを使用します。 詳細については、インデックス作成ポリシーの <a href="https://docs.microsoft.com/en-us/azure/cosmos-db/index-policy">ドキュメントを参照してください</a>。</p>


  <h2>複合インデックスのパフォーマンス上の利点</h2>


  <p>いくつかのサンプル クエリを実行して、複合インデックスのパフォーマンス上の利点を強調することができます。 Azure および DB <a href="https://github.com/CosmosDB/labs/tree/master/dotnet/setup/NutritionData.json">ラボで</a>使用されるCosmos<a href="https://cosmosdb.github.io/labs/">を使用します</a>。</p>


  <p>この例では、フィルターと ORDER BY 句を含むクエリを最適化します。 最初に、範囲インデックスを使用してすべてのプロパティにインデックスを作成する既定のインデックス作成ポリシーを使用します。 Azure Portal の下の図で参照されている次のクエリを実行すると、クエリ メトリックが観察されます。</p>


  <p>クエリ メトリック:</p>


  <p><a href="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/25a38e68-549b-4152-be5d-580c09f41072.png"><img alt="Query which uses range index and consumes 21.8 RU’s." border="0" height="614" src="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/410489b7-af49-4e1e-838f-f237748ef21f.png" style="border: 0px currentcolor; border-image: none; margin-right: auto; margin-left: auto; float: none; display: block; background-image: none;" title="" width="1024"></a></p>


  <p>既定のインデックス作成ポリシーを使用するこのクエリでは、21.8 RUS が必要&rsquo;でした。</p>


  <p>foodGroup に複合インデックスを追加し_tsクエリ テキストを更新して ORDER BY&rsquo; 句に foodGroup を含め、クエリ RU の料金を大幅に削減しました。</p>


  <p>クエリ メトリック:</p>


  <p><a href="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/c0608bb3-8cee-47be-ab23-b51d0a2042e7.png"><img alt="Query which uses composite index and consumes 4.07 RU’s." border="0" height="528" src="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/b1f0825d-7f42-4dc8-80a3-482b0e30ee87.png" style="border: 0px currentcolor; border-image: none; margin-right: auto; margin-left: auto; float: none; display: block; background-image: none;" title="" width="1024"></a></p>


  <p>複合インデックスを追加した&rsquo;後、クエリの RU 料金は 21.8 RUS から 4.07 RU&rsquo; に減少&rsquo;しました。 このクエリの最適化は、合計データ サイズが増加する場合に特に影響を及ぼす可能性があります。 複合インデックスの利点は、ORDER BY 句のプロパティのカーディナリティが高い場合に重要です。</p>


  <h2>複合インデックスの作成</h2>


  <p>複合インデックスの作成の <a href="https://docs.microsoft.com/en-us/azure/cosmos-db/how-to-manage-indexing-policy">詳細については、このドキュメント</a> を参照してください。 Azure&rsquo; Portal を使用してインデックス作成ポリシーを直接更新する方法は簡単です。 Azure Cosmos&rsquo; DB に既に存在するデータの複合インデックスを作成している間、インデックスの更新では通常の操作から残った RU&rsquo; が利用されます。 新しいインデックス作成ポリシーが定義された後、Azure Cosmos DB は、書き込まれた複合インデックスを持つプロパティのインデックスを自動的&rsquo;に作成します。</p>


  <p>複合インデックスによって、Azure Cosmos DB 上の既存のワークロードの RU <a href="https://azure.microsoft.com/en-us/services/cosmos-db/">使用率が向上するかどうかを確認します</a>。</p>
