### YamlMime:Yaml
ms.openlocfilehash: 51fb4a4d5d2df1c6c6298f0ff7e5b156e0ea5adc
ms.sourcegitcommit: d03bdc7fe5447adb6530886aab848b75fe8fa8ee
ms.translationtype: MT
ms.contentlocale: ja-JP
ms.lasthandoff: 03/11/2022
ms.locfileid: "139903527"
Slug: jenkins-acr
Title: Jenkins Azure ACR Build プラグインがパブリック プレビューに追加
Summary: Jenkins 用 ACR ビルド プラグインのプレビューをお知らせします。このプレビューでは、Docker イメージを Azure Container Registry(ACR.) でビルドできます。Jenkins World 2018 をご覧ください。
Content: "<p>昨年、Jenkins World で、Jenkins on Azure での Kubernetes のサポートを発表しました。 Azure Container <a href=\"https://aka.ms/azcontaineragent\" target=\"_blank\">Agent</a> が出荷されました。これにより、Azure にスケールアウトし、<a href=\"https://azure.microsoft.com/en-us/services/container-instances/\" target=\"_blank\">Azure Container Instances (ACI) または Azure Kubernetes Service (</a><a href=\"https://azure.microsoft.com/en-us/services/kubernetes-service/?cdn=disable\" target=\"_blank\">AKS)</a> で Jenkins エージェントを実行できます。 <a href=\"https://aka.ms/azjenkinsk8s\" target=\"_blank\">Kubernetes Continuous Deploy</a> または <a href=\"https://aka.ms/azjenkinsacs\" target=\"_blank\">Deploy to Azure Container Services (AKS)</a> プラグインを使用して、コンテナーを Kubernetes にデプロイできます。</p>\n\n<p>4 月に戻り、 <a href=\"https://kubernetes.io/blog/2018/04/30/zero-downtime-deployment-kubernetes-jenkins/\" target=\"_blank\">Azure Container Services (AKS </a>) へのブルー/グリーン デプロイを実現する方法をコミュニティと共有するブログ投稿を Kubernetes.io に公開しました。しかし、いくつかの質問には答えが残っています。</p>\n\n<ul style=\"margin-left: 40px;\">\n <li>Jenkins ビルド エージェント <strong>として</strong> ACI を使用するときに Docker イメージをビルドする必要がある場合は、どうしますか?</li>\n <li>AKS で Docker Build を実行する場合 <strong>、セキュリティで保護されていますか</strong>?</li>\n</ul>\n\n<p>今年の初めに、Azure Container Registry チームは、これらの問題を解決する <a href=\"https://aka.ms/acr/build\" target=\"_blank\">Azure Container Registry (ACR) Build</a> と呼ばれるネイティブ コンテナー ビルド機能のプレビューをリリースしました。 ACR ビルドに関する最良の問題の 1 つは、イメージのビルドに使用するコンピューティングに対してだけ料金を支払うという方法です。</p>\n\n<h2>ローカル ディレクトリからのビルド</h2>\n\n<p>たとえば&rsquo;、Maven を使用して Java プロジェクトをビルドし、AKS にデプロイする既存のパイプラインがある場合を示します。</p>\n\n<pre style=\"margin-left: 40px;\">\nnode {\n    /* &hellip; snip&hellip; */\n\n    stage(&#39;Build&#39;) {\n    sh &#39;mvn clean package&#39;\n    withCredentials([usernamePassword(credentialsId: env.ACR_CRED_ID, usernameVariable: &#39;ACR_USER&#39;, passwordVariable: &#39;ACR_PASSWORD&#39;)]{\n      sh &#39;docker login -u $ACR_USER -p $ACR_PASSWORD https://$ACR_SERVER&#39;\n      // build image\n      def imageWithTag = &quot;$env.ACR_SERVER/$env.WEB_APP:$env.BUILD_NUMBER&quot;\n      def image = docker.build imageWithTag\n      // push image\n      image.push()\n    }\n    stage(&lsquo;Deploy&rsquo;) {\n      /*&hellip; snip&hellip; */\n    } \n}\n</pre>\n\n<p>ACR Build ではローカル <strong>ディレクトリ (この</strong> 場合はビルド サーバーのローカル ディレクトリ) からのビルドがサポートされています。これにより、次のように、5 行のコードをパイプライン内の 1 行に置き換えます。</p>\n\n<pre style=\"margin-left: 40px;\">\nnode {\n  /* &hellip; snip&hellip; */\n  stage(&#39;Build&#39;) { \n    sh &#39;mvn clean package&#39;\n\n    acrQuickBuild azureCredentialsId: &#39;principal-credentials-id&#39;,\n                  resourceGroupName: env.ACR_RES_GROUP,\n                  registryName: env.ACR_NAME,\n                  platform: &quot;Linux&quot;,\n                  dockerfile: &quot;Dockerfile&quot;,\n                  imageNames: [[image: &quot;$env.ACR_REGISTRY/$env.IMAGE_NAME:$env.BUILD_NUMBER&quot;]]\n  }  \n  stage(&lsquo;Deploy&rsquo;) {\n    /*&hellip; snip&hellip; */\n  }\n}\n</pre>\n\n<h2>利点</h2>\n\n<ul style=\"margin-left: 40px;\">\n <li>AKS とは別に、ACI でこのビルド パイプラインを実行できます。</li>\n <li>ACR ビルドを使用すると、ネットワークの近いマルチテナント ビルドが可能になります。これにより、ネットワーク距離が短縮され、レジストリへの Docker プッシュの信頼性が確保されます。</li>\n <li>それでも、Docker で Docker を安全に実行できるかどうかについて、同僚と別の議論をする必要はなくなりました。</li>\n</ul>\n\n<h2>Git コミットに基づいてビルドする</h2>\n\n<p>新しいパイプラインを設定し、コードのコミット時にビルドをトリガーするだけの場合は、どうしますか? 恐れではなく、ACR ビルドではコミット <strong>ベースのビルドがサポートされています</strong>。 AKS へのデプロイを使用して ACR で Spring Boot <a href=\"https://github.com/Microsoft/todo-app-java-on-azure/blob/master/doc/resources/jenkins/Jenkinsfile-acr-with-git\" target=\"_blank\">Web</a> アプリをビルドできるサンプル Jenkins ファイルを設定しました。 この場合、コードが GitHub にコミットされると、Jenkins によって ACR でビルドがトリガーされ、(サンプルでは説明されていない) テストを実行してから、Docker イメージを実稼働環境にデプロイできます。 ACR の Git リポジトリから Docker イメージをビルドし、Jenkins を使用して AKS にデプロイする手順 <a href=\"https://github.com/Microsoft/todo-app-java-on-azure/blob/master/doc/deployment/deploy-to-aks-with-acr-build-git-using-jenkins.md\" target=\"_blank\">に従ってください</a>。</p>\n\n<p><a href=\"https://www.cloudbees.com/devops-world\" target=\"_blank\">Jenkins World 2018</a> で Azure ACR プラグインをプレビューします。 また、Tomcat と Java App Serviceを使用してデプロイする方法を示すデモもいくつかStandard Edition。</p>\n\n<p>Jenkins と Azure の統合方法については、Azure Jenkins のブースに立ち寄って、デモを参照するか、お問い合わせください。 お客様のビルド システムに関するフィードバックと詳細を常に探しています。</p>"
