### YamlMime:Yaml
ms.openlocfilehash: 3b6105fa4c830887e022cfa4a59bad7a8b1f2aec
ms.sourcegitcommit: d03bdc7fe5447adb6530886aab848b75fe8fa8ee
ms.translationtype: MT
ms.contentlocale: ja-JP
ms.lasthandoff: 03/11/2022
ms.locfileid: "139893978"
Slug: documentdb-paging-support-with-top-and-more-query-improvements
Title: 上位とクエリの機能強化による DocumentDB のページングサポート
Summary: Azure DocumentDB の多くの機能強化についてお知らせします。 詳細については、後の説明を参照してください。
Content: "<p>Azure DocumentDB に対してクエリを実行する方法について、いくつかの改善点を発表しまし &rsquo; た。 最新のサービス更新プログラムを使用すると、TOP キーワードが SQL 文法に追加され、クエリの実行速度が向上し、リソースの消費量が少なくなり、クエリ演算子の制限が増加し、.net SDK で追加の LINQ 演算子がサポートされるようになりました。</p>\n\n<p>デプロイされた変更の一覧を次に示します。</p>\n\n<ul>\n <li><strong>新しい SQL キーワード:</strong>ページングの場合は TOP、クエリの結果を制限する場合はです。</li>\n <li><strong>制限の増加:</strong> IN 式の中で最大20個の項目と200の項目を使用できるようになりました。</li>\n <li><strong>パフォーマンスの向上: </strong>クエリエンジンでは、フィルター処理された並べ替えクエリが高速化され、インデックスプランの最適化が向上し、大量の結果セットを含むクエリの増分処理が向上しました。</li>\n <li><strong>新しい LINQ 演算子:</strong> Take ()、CompareTo ()、条件演算子、合体演算子など、いくつかの追加の LINQ 演算子 &ndash; がサポートされています。</li>\n</ul>\n\n<p>この記事 &rsquo; では、何が変更されたか &rsquo; 、およびこれらの変更を利用して、Azure DocumentDB を使用して高速でスケーラブルなアプリケーションを構築する方法について説明します。</p>\n\n<h2>TOP を使用したクエリ結果のページングと制限</h2>\n\n<p>documentdb SQL 文法には、documentdb のクエリ中に SQL クエリ内で使用できる TOP キーワードが含まれるようになりました。 TOP を使用すると、クエリ結果をページごとに表示したり、クエリから返される結果の数を制限したりできます。</p>\n\n<pre class=\"prettyprint\">\nSELECT TOP 100 *\nFROM food\nWHERE food.foodGroup = &quot;Snacks&quot;\nORDER BY food.description</pre>\n\n<p>TOP は、任意の有効な DocumentDB クエリ内で使用できます。また、パラメーター化されたクエリを使用して、項目の数をパラメーターとして指定することもできます。 また、TOP を ORDER BY と組み合わせて使用して、DocumentDB クエリ内の最小値、最大値、および最初の &nbsp; セマンティクスを実装することもできます。</p>\n\n<p>詳細については、 <a href=\"https://azure.microsoft.com/documentation/articles/documentdb-sql-query/#basics-of-a-documentdb-sql-query\">DocumentDB クエリ</a>に関するドキュメントを参照してください。</p>\n\n<h2>さまざまな SQL 演算子の上限の引き上げ</h2>\n\n<p>最近発表したのは、DocumentDB クエリでサポートされている AND、JOIN、UDF の数の上限に達しています。 多くのフレームワーク開発者は、クエリごとにまたは演算子に対して高い制限が必要であることについて、柔軟なクエリ Api を構築するために、多くのフレームワーク開発者からお知らせします。 &rsquo;次の制限を解除したことをお知らせします。</p>\n\n<ul>\n <li>クエリごとのまたは句の最大数。20に増加</li>\n <li>クエリごとの式で指定された値の最大数が200に増加しました</li>\n</ul>\n\n<p>この変更により、のを使用するか、同等の <a href=\"https://msdn.microsoft.com/en-us/library/bb339118(v=vs.110).aspx\">IEnumerable. Contains</a> 演算子を LINQ 内で使用して、より大きな項目のバッチをフェッチできます。また、DocumentDB に対するラウンドトリップの回数を制限します。</p>\n\n<pre class=\"prettyprint\">\n/* Up to 200 values in query */\nSELECT *\nFROM food\nWHERE food.id IN (\n    &quot;0326&quot;, &quot;0327&quot;, &quot;0329&quot;, &quot;03230&quot;\n) </pre>\n\n<p>DocumentDB の制限の完全な一覧については、 <a href=\"https://azure.microsoft.com/documentation/articles/documentdb-limits/\">ドキュメントのページ</a>を参照してください。</p>\n\n<h1>SQL クエリエンジンのパフォーマンスの向上</h1>\n\n<p>また、DocumentDB クエリエンジンでは、要求ユニット (<a href=\"https://azure.microsoft.com/documentation/articles/documentdb-manage/#request-units-and-database-operations\">RU</a>) の使用量を削減し、クエリの待機時間を短縮し、実行時間の長いクエリを処理するために必要なラウンドトリップの回数を減らすために、いくつかのパフォーマンスが向上しています。</p>\n\n<h3>高速フィルター処理された並べ替えクエリ</h3>\n\n<p>並べ替えとフィルター式に対してクエリ論理プランの最適化を実行するためのサポートを追加しました。 たとえば、フィルターを使用して同じプロパティに対してクエリを実行した場合、クエリの順序は非常に短くなり、必要なラウンドトリップも少なくなります。</p>\n\n<ul>\n <li>DocumentDB で Azure Search コネクタを使用している場合は、 &rsquo; インデクサーがはるかに多くの ru を消費し、この最適化により高速に完了することがわかります。</li>\n <li>一般的に、次のような範囲フィルターに基づいてデータを読み取っているアプリケーションがある場合、クエリは使用する Ru が少なくなり、短時間で完了します。</li>\n</ul>\n\n<pre class=\"prettyprint\">\n/* Now an order of magnitude faster! */\nSELECT * \nFROM deviceTelemetry \nWHERE deviceTelemetry._ts &gt; @highWaterMark\nORDER BY deviceTelemetry._ts\n</pre>\n\n<p>パフォーマンスのヒント: <strong></strong> (timestamp 値を使用して) 範囲フィルターを既に使用しているクエリがある場合は、この最適化を活用するために、同じプロパティに対して ORDER by 句を追加することを検討してください。</p>\n\n<h3>インデックスプランの最適化の向上</h3>\n\n<p>DocumentDB クエリの実行エンジンは、クエリフィルター式の分析、式の再並べ替えなどの実行時の最適化の実行や、高コストのフィルターの実行とスキップの間のトレードオフの評価において、よりスマートになりました。 この変更により、さまざまなクエリがより高速に実行され、より少ない Ru が消費されます。</p>\n\n<pre class=\"prettyprint\">\n/* In this query, DocumentDB will re-order expressions to improve performance */\nSELECT *\nFROM loggedMetrics l\nWHERE l._ts &gt; @highWaterMark \nAND l.traceLevel = &#39;Critical&#39;\nAND l.appName = &#39;BackendWorkerRole&#39;\n</pre>\n\n<h3>増分処理の向上</h3>\n\n<p>DocumentDB は、継続トークンを使用して実行時間の長いクエリをサポートします。 DocumentDB は、各クエリに一定の時間とリソースを割り当てます。この値に達すると、実行を再開するためのブックマークとして機能する継続トークンが返されます。</p>\n\n<p>DocumentDB は、クエリに対して追加の状態サーバー側を保持しません。これらはすべて、トークン内に自己完結しています。つまり、有効期限がなく、クライアントがキャッシュできることを意味します。 大きな結果セットを持つクエリに対して、継続内で状態をエンコードする方法が大幅に改善されました。</p>\n\n<pre class=\"prettyprint\">\n/* Query that scans documents to build a COUNT client-side */\nSELECT VALUE 1\nFROM loggedMetrics\nWHERE loggedMetrics.startTime &gt;= &quot;2015-12-12T10:00:00Z&rdquo; </pre>\n\n<p>上記のようなクエリがある場合、RU の消費量と実行時間が2倍に減少する可能性があります。</p>\n\n<h1>新しい LINQ 演算子</h1>\n\n<p>最新の <a href=\"https://www.nuget.org/packages/Microsoft.Azure.DocumentDB/\">DocumentDB .NET SDK release 1.5.2</a> では、ページング、条件式、および範囲比較の新しい演算子を含む LINQ クエリ翻訳のサポートが拡張されています。 この変更により、SQL 文字列を構築しなくても、DocumentDB と動的に対話できるように、fluent LINQ 式を記述できます。 サポートされている LINQ 演算子の完全な一覧については、 <a href=\"https://azure.microsoft.com/documentation/articles/documentdb-sql-query/#linq-to-documentdb-sql\">linq のドキュメント</a>を参照してください。</p>\n\n<p>DocumentDB では、 <a href=\"https://msdn.microsoft.com/library/bb300906(v=vs.100).aspx\">Take</a> 演算子を使用したクエリの結果数の制限がサポートされています。</p>\n\n<pre class=\"prettyprint\">\nclient.CreateDocumentQuery&lt;Family&gt;(&quot;/dbs/sampleData/colls/families&quot;)\n    .Where(f =&gt; f.LastName == &quot;Andersen&quot;)\n    .OrderByDescending(f =&gt; f.Address.State)\n    .Take(10);</pre>\n\n<p>DocumentDB では、リレーショナル SQL のような<a href=\"https://azure.microsoft.com/blog/order-query-results-with-azure-documentdb/\">文字列範囲比較</a>がサポートされています。 これは、 <a href=\"https://msdn.microsoft.com/library/system.icomparable.compareto(v=vs.110).aspx\">CompareTo</a> 演算子を使用した LINQ でサポートされるようになりました。 &nbsp; たとえば、次のクエリでは、姓が N ~ Z のファミリが取得されます。</p>\n\n<pre class=\"prettyprint\">\nclient.CreateDocumentQuery&lt;Family&gt;(&quot;/dbs/sampleData/colls/families&quot;)\n    .Where(f =&gt; f.LastName.CompareTo(&quot;N&quot;) &gt;= 0);</pre>\n\n<p>また、SDK は、C# の <a href=\"https://msdn.microsoft.com/library/ty67wk28.aspx\">条件付き (?)</a> と <a href=\"https://msdn.microsoft.com/library/ms173224.aspx\">合体演算子 (??)</a> から、対応する DocumentDB 演算子への変換もサポートしています。 この変更により、ODATA などのフレームワークから DocumentDB に自動生成された LINQ 式を簡単にパススルーできます。</p>\n\n<pre class=\"prettyprint\">\nclient.CreateDocumentQuery&lt;Family&gt;(&quot;/dbs/sampleData/colls/families&quot;)\n    .Select(f =&gt; f.LastName?? &quot;Unknown&quot;);\n</pre>\n\n<h1>次の手順</h1>\n\n<p><a href=\"https://msdn.microsoft.com/library/azure/dn781482.aspx\">サポートされている</a>いずれかの sdk をダウンロードするか、Azure Portal を使用して DocumentDB のクエリを開始します。 ヘルプが必要な場合、または質問やフィードバックがある場合は、 <a href=\"https://stackoverflow.com/questions/tagged/azure-documentdb\">stack overflow の開発者フォーラム</a> にご連絡いただくか、DocumentDB エンジニアリングチームとの1:1 チャットをスケジュールしてください。</p>\n\n<p>最新の DocumentDB のニュースと機能については、Twitter <a href=\"https://twitter.com/DocumentDB\">@DocumentDB</a> でフォローして最新情報を入手してください。</p>"
